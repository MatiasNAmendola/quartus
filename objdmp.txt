
kernel++:     file format elf32-i386


Disassembly of section .text:

00100000 <kernel_start>:
  100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
  100006:	00 00                	add    %al,(%eax)
  100008:	fe 4f 52             	decb   0x52(%edi)
  10000b:	e4 55                	in     $0x55,%al

0010000c <_ZN6kernel6outputC1Ev>:
#include "include/output.hpp"

using namespace kernel;

output::output(  ) : out(nullptr)
  10000c:	55                   	push   %ebp
  10000d:	89 e5                	mov    %esp,%ebp
  10000f:	8b 45 08             	mov    0x8(%ebp),%eax
  100012:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
{

}
  100018:	5d                   	pop    %ebp
  100019:	c3                   	ret    

0010001a <_ZN6kernel6outputC1EPFvcE>:

output::output( outc pOut ) : out(pOut)
  10001a:	55                   	push   %ebp
  10001b:	89 e5                	mov    %esp,%ebp
  10001d:	8b 45 08             	mov    0x8(%ebp),%eax
  100020:	8b 55 0c             	mov    0xc(%ebp),%edx
  100023:	89 10                	mov    %edx,(%eax)
{

}
  100025:	5d                   	pop    %ebp
  100026:	c3                   	ret    
  100027:	90                   	nop

00100028 <_ZN6kernel6output4putcEc>:

void output::putc( char c )
{
  100028:	55                   	push   %ebp
  100029:	89 e5                	mov    %esp,%ebp
  10002b:	83 ec 18             	sub    $0x18,%esp
  10002e:	8b 45 0c             	mov    0xc(%ebp),%eax
  100031:	88 45 f4             	mov    %al,-0xc(%ebp)
	this->out(c);
  100034:	8b 45 08             	mov    0x8(%ebp),%eax
  100037:	8b 00                	mov    (%eax),%eax
  100039:	0f be 55 f4          	movsbl -0xc(%ebp),%edx
  10003d:	89 14 24             	mov    %edx,(%esp)
  100040:	ff d0                	call   *%eax
}
  100042:	c9                   	leave  
  100043:	c3                   	ret    

00100044 <_ZN6kernel6output4putsEPKc>:

void output::puts( const char *s )
{
  100044:	55                   	push   %ebp
  100045:	89 e5                	mov    %esp,%ebp
  100047:	83 ec 18             	sub    $0x18,%esp
	while(*s)
  10004a:	eb 19                	jmp    100065 <_ZN6kernel6output4putsEPKc+0x21>
	{
		this->out(*s++);
  10004c:	8b 45 08             	mov    0x8(%ebp),%eax
  10004f:	8b 10                	mov    (%eax),%edx
  100051:	8b 45 0c             	mov    0xc(%ebp),%eax
  100054:	8d 48 01             	lea    0x1(%eax),%ecx
  100057:	89 4d 0c             	mov    %ecx,0xc(%ebp)
  10005a:	0f b6 00             	movzbl (%eax),%eax
  10005d:	0f be c0             	movsbl %al,%eax
  100060:	89 04 24             	mov    %eax,(%esp)
  100063:	ff d2                	call   *%edx
	this->out(c);
}

void output::puts( const char *s )
{
	while(*s)
  100065:	8b 45 0c             	mov    0xc(%ebp),%eax
  100068:	0f b6 00             	movzbl (%eax),%eax
  10006b:	84 c0                	test   %al,%al
  10006d:	75 dd                	jne    10004c <_ZN6kernel6output4putsEPKc+0x8>
	{
		this->out(*s++);
	}
}
  10006f:	c9                   	leave  
  100070:	c3                   	ret    
  100071:	90                   	nop

00100072 <_ZN6kernel6outputlsEc>:

output& output::operator << ( char c )
{
  100072:	55                   	push   %ebp
  100073:	89 e5                	mov    %esp,%ebp
  100075:	83 ec 18             	sub    $0x18,%esp
  100078:	8b 45 0c             	mov    0xc(%ebp),%eax
  10007b:	88 45 f4             	mov    %al,-0xc(%ebp)
	this->putc(c);
  10007e:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
  100082:	89 44 24 04          	mov    %eax,0x4(%esp)
  100086:	8b 45 08             	mov    0x8(%ebp),%eax
  100089:	89 04 24             	mov    %eax,(%esp)
  10008c:	e8 97 ff ff ff       	call   100028 <_ZN6kernel6output4putcEc>

	return *this;
  100091:	8b 45 08             	mov    0x8(%ebp),%eax
}
  100094:	c9                   	leave  
  100095:	c3                   	ret    

00100096 <_ZN6kernel6outputlsEPKc>:

output& output::operator << ( const char *s )
{
  100096:	55                   	push   %ebp
  100097:	89 e5                	mov    %esp,%ebp
  100099:	83 ec 18             	sub    $0x18,%esp
	this->puts(s);
  10009c:	8b 45 0c             	mov    0xc(%ebp),%eax
  10009f:	89 44 24 04          	mov    %eax,0x4(%esp)
  1000a3:	8b 45 08             	mov    0x8(%ebp),%eax
  1000a6:	89 04 24             	mov    %eax,(%esp)
  1000a9:	e8 96 ff ff ff       	call   100044 <_ZN6kernel6output4putsEPKc>

	return *this;
  1000ae:	8b 45 08             	mov    0x8(%ebp),%eax
}
  1000b1:	c9                   	leave  
  1000b2:	c3                   	ret    
  1000b3:	90                   	nop

001000b4 <_ZNK6kernelUlcE_clEc>:
*/
#include "output.hpp"

namespace kernel
{
	output kout = output( []( char c ){ outb(0x3f8, c); } );
  1000b4:	55                   	push   %ebp
  1000b5:	89 e5                	mov    %esp,%ebp
  1000b7:	83 ec 18             	sub    $0x18,%esp
  1000ba:	8b 45 0c             	mov    0xc(%ebp),%eax
  1000bd:	88 45 f4             	mov    %al,-0xc(%ebp)
  1000c0:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
  1000c4:	0f b6 c0             	movzbl %al,%eax
  1000c7:	89 44 24 04          	mov    %eax,0x4(%esp)
  1000cb:	c7 04 24 f8 03 00 00 	movl   $0x3f8,(%esp)
  1000d2:	e8 c1 02 00 00       	call   100398 <_Z4outbth>
  1000d7:	c9                   	leave  
  1000d8:	c3                   	ret    
  1000d9:	90                   	nop

001000da <_ZN6kernelUlcE_4_FUNEc>:
  1000da:	55                   	push   %ebp
  1000db:	89 e5                	mov    %esp,%ebp
  1000dd:	83 ec 18             	sub    $0x18,%esp
  1000e0:	8b 45 08             	mov    0x8(%ebp),%eax
  1000e3:	88 45 f4             	mov    %al,-0xc(%ebp)
  1000e6:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
  1000ea:	88 44 24 04          	mov    %al,0x4(%esp)
  1000ee:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1000f5:	e8 ba ff ff ff       	call   1000b4 <_ZNK6kernelUlcE_clEc>
  1000fa:	c9                   	leave  
  1000fb:	c3                   	ret    

001000fc <_ZNK6kernelUlcE_cvPFvcEEv>:
  1000fc:	55                   	push   %ebp
  1000fd:	89 e5                	mov    %esp,%ebp
  1000ff:	b8 da 00 10 00       	mov    $0x1000da,%eax
  100104:	5d                   	pop    %ebp
  100105:	c3                   	ret    

00100106 <init>:
#include "include/kernel.hpp"

using namespace kernel;

void init( multiboot::multibootInfo *mbs, uint32_t mbMagic )
{
  100106:	55                   	push   %ebp
  100107:	89 e5                	mov    %esp,%ebp
  100109:	83 ec 28             	sub    $0x28,%esp
	if(mbMagic != MULTIBOOT_MAGIC)
  10010c:	81 7d 0c 02 b0 ad 2b 	cmpl   $0x2badb002,0xc(%ebp)
  100113:	74 24                	je     100139 <init+0x33>
	{
		kout << "Error: no multiboot bootloader!" << output::endl;
  100115:	c7 44 24 04 00 30 10 	movl   $0x103000,0x4(%esp)
  10011c:	00 
  10011d:	c7 04 24 00 40 10 00 	movl   $0x104000,(%esp)
  100124:	e8 6d ff ff ff       	call   100096 <_ZN6kernel6outputlsEPKc>
  100129:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
  100130:	00 
  100131:	89 04 24             	mov    %eax,(%esp)
  100134:	e8 39 ff ff ff       	call   100072 <_ZN6kernel6outputlsEc>
	}

	kout << "Hello World!" << output::endl << "Hello World!" << output::endl;
  100139:	c7 44 24 04 20 30 10 	movl   $0x103020,0x4(%esp)
  100140:	00 
  100141:	c7 04 24 00 40 10 00 	movl   $0x104000,(%esp)
  100148:	e8 49 ff ff ff       	call   100096 <_ZN6kernel6outputlsEPKc>
  10014d:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
  100154:	00 
  100155:	89 04 24             	mov    %eax,(%esp)
  100158:	e8 15 ff ff ff       	call   100072 <_ZN6kernel6outputlsEc>
  10015d:	c7 44 24 04 20 30 10 	movl   $0x103020,0x4(%esp)
  100164:	00 
  100165:	89 04 24             	mov    %eax,(%esp)
  100168:	e8 29 ff ff ff       	call   100096 <_ZN6kernel6outputlsEPKc>
  10016d:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
  100174:	00 
  100175:	89 04 24             	mov    %eax,(%esp)
  100178:	e8 f5 fe ff ff       	call   100072 <_ZN6kernel6outputlsEc>

	multiboot::error err = multiboot::error::mbs_check_ok;//multiboot::checkMbs( mbs );
  10017d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	switch(err)
  100184:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100187:	83 f8 02             	cmp    $0x2,%eax
  10018a:	74 47                	je     1001d3 <init+0xcd>
  10018c:	83 f8 03             	cmp    $0x3,%eax
  10018f:	74 78                	je     100209 <init+0x103>
  100191:	83 f8 01             	cmp    $0x1,%eax
  100194:	0f 85 a5 00 00 00    	jne    10023f <init+0x139>
	{
		case multiboot::error::no_mbs:
			kout << output::endl << "No multibootstructure!" << output::endl;
  10019a:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
  1001a1:	00 
  1001a2:	c7 04 24 00 40 10 00 	movl   $0x104000,(%esp)
  1001a9:	e8 c4 fe ff ff       	call   100072 <_ZN6kernel6outputlsEc>
  1001ae:	c7 44 24 04 2d 30 10 	movl   $0x10302d,0x4(%esp)
  1001b5:	00 
  1001b6:	89 04 24             	mov    %eax,(%esp)
  1001b9:	e8 d8 fe ff ff       	call   100096 <_ZN6kernel6outputlsEPKc>
  1001be:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
  1001c5:	00 
  1001c6:	89 04 24             	mov    %eax,(%esp)
  1001c9:	e8 a4 fe ff ff       	call   100072 <_ZN6kernel6outputlsEc>
		break;
  1001ce:	e9 a1 00 00 00       	jmp    100274 <init+0x16e>

		case multiboot::error::no_mbs_mods_addr:
			kout << output::endl << "No MODS_ADDR!" << output::endl;
  1001d3:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
  1001da:	00 
  1001db:	c7 04 24 00 40 10 00 	movl   $0x104000,(%esp)
  1001e2:	e8 8b fe ff ff       	call   100072 <_ZN6kernel6outputlsEc>
  1001e7:	c7 44 24 04 44 30 10 	movl   $0x103044,0x4(%esp)
  1001ee:	00 
  1001ef:	89 04 24             	mov    %eax,(%esp)
  1001f2:	e8 9f fe ff ff       	call   100096 <_ZN6kernel6outputlsEPKc>
  1001f7:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
  1001fe:	00 
  1001ff:	89 04 24             	mov    %eax,(%esp)
  100202:	e8 6b fe ff ff       	call   100072 <_ZN6kernel6outputlsEc>
		break;
  100207:	eb 6b                	jmp    100274 <init+0x16e>
		
		case multiboot::error::no_mbs_mmap_addr:
			kout << output::endl << "No MMAP_ADDR!" << output::endl;
  100209:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
  100210:	00 
  100211:	c7 04 24 00 40 10 00 	movl   $0x104000,(%esp)
  100218:	e8 55 fe ff ff       	call   100072 <_ZN6kernel6outputlsEc>
  10021d:	c7 44 24 04 52 30 10 	movl   $0x103052,0x4(%esp)
  100224:	00 
  100225:	89 04 24             	mov    %eax,(%esp)
  100228:	e8 69 fe ff ff       	call   100096 <_ZN6kernel6outputlsEPKc>
  10022d:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
  100234:	00 
  100235:	89 04 24             	mov    %eax,(%esp)
  100238:	e8 35 fe ff ff       	call   100072 <_ZN6kernel6outputlsEc>
		break;
  10023d:	eb 35                	jmp    100274 <init+0x16e>
		
		default:
			kout << output::endl << "check_mbs OK!" << output::endl;
  10023f:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
  100246:	00 
  100247:	c7 04 24 00 40 10 00 	movl   $0x104000,(%esp)
  10024e:	e8 1f fe ff ff       	call   100072 <_ZN6kernel6outputlsEc>
  100253:	c7 44 24 04 60 30 10 	movl   $0x103060,0x4(%esp)
  10025a:	00 
  10025b:	89 04 24             	mov    %eax,(%esp)
  10025e:	e8 33 fe ff ff       	call   100096 <_ZN6kernel6outputlsEPKc>
  100263:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
  10026a:	00 
  10026b:	89 04 24             	mov    %eax,(%esp)
  10026e:	e8 ff fd ff ff       	call   100072 <_ZN6kernel6outputlsEc>
		break;
  100273:	90                   	nop
	}
	
	while(1);
  100274:	eb fe                	jmp    100274 <init+0x16e>

00100276 <_Z41__static_initialization_and_destruction_0ii>:
}
  100276:	55                   	push   %ebp
  100277:	89 e5                	mov    %esp,%ebp
  100279:	83 ec 28             	sub    $0x28,%esp
  10027c:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
  100280:	75 24                	jne    1002a6 <_Z41__static_initialization_and_destruction_0ii+0x30>
  100282:	81 7d 0c ff ff 00 00 	cmpl   $0xffff,0xc(%ebp)
  100289:	75 1b                	jne    1002a6 <_Z41__static_initialization_and_destruction_0ii+0x30>
  10028b:	8d 45 f7             	lea    -0x9(%ebp),%eax
  10028e:	89 04 24             	mov    %eax,(%esp)
  100291:	e8 66 fe ff ff       	call   1000fc <_ZNK6kernelUlcE_cvPFvcEEv>
  100296:	89 44 24 04          	mov    %eax,0x4(%esp)
  10029a:	c7 04 24 00 40 10 00 	movl   $0x104000,(%esp)
  1002a1:	e8 74 fd ff ff       	call   10001a <_ZN6kernel6outputC1EPFvcE>
  1002a6:	c9                   	leave  
  1002a7:	c3                   	ret    

001002a8 <_GLOBAL__sub_I__ZN6kernel4koutE>:
  1002a8:	55                   	push   %ebp
  1002a9:	89 e5                	mov    %esp,%ebp
  1002ab:	83 ec 18             	sub    $0x18,%esp
  1002ae:	c7 44 24 04 ff ff 00 	movl   $0xffff,0x4(%esp)
  1002b5:	00 
  1002b6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  1002bd:	e8 b4 ff ff ff       	call   100276 <_Z41__static_initialization_and_destruction_0ii>
  1002c2:	c9                   	leave  
  1002c3:	c3                   	ret    

001002c4 <_Z8checkMbsPN9multiboot13multibootInfoE>:
#include "include/multiboot.hpp"

multiboot::error checkMbs( multiboot::multibootInfo *mbs )
{
  1002c4:	55                   	push   %ebp
  1002c5:	89 e5                	mov    %esp,%ebp
	if(!mbs)
  1002c7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  1002cb:	75 07                	jne    1002d4 <_Z8checkMbsPN9multiboot13multibootInfoE+0x10>
	{
		return multiboot::error::no_mbs;
  1002cd:	b8 01 00 00 00       	mov    $0x1,%eax
  1002d2:	eb 05                	jmp    1002d9 <_Z8checkMbsPN9multiboot13multibootInfoE+0x15>
	}

	return multiboot::error::mbs_check_ok;
  1002d4:	b8 00 00 00 00       	mov    $0x0,%eax
}
  1002d9:	5d                   	pop    %ebp
  1002da:	c3                   	ret    

001002db <ctors>:

	void ctors(  );
}

void ctors(  )
{
  1002db:	55                   	push   %ebp
  1002dc:	89 e5                	mov    %esp,%ebp
  1002de:	83 ec 18             	sub    $0x18,%esp
	for(ctor *i = &start_ctors; i != &end_ctors; i++)
  1002e1:	c7 45 f4 00 20 10 00 	movl   $0x102000,-0xc(%ebp)
  1002e8:	eb 0b                	jmp    1002f5 <ctors+0x1a>
	{
		(*i)();
  1002ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1002ed:	8b 00                	mov    (%eax),%eax
  1002ef:	ff d0                	call   *%eax
	void ctors(  );
}

void ctors(  )
{
	for(ctor *i = &start_ctors; i != &end_ctors; i++)
  1002f1:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
  1002f5:	81 7d f4 04 20 10 00 	cmpl   $0x102004,-0xc(%ebp)
  1002fc:	75 ec                	jne    1002ea <ctors+0xf>
	{
		(*i)();
	}
}
  1002fe:	c9                   	leave  
  1002ff:	c3                   	ret    

00100300 <_Z5cpuidjPjS_S_S_>:
{
	uint32_t cpuid_supported();
}

bool cpuid( uint32_t func, uint32_t *eax, uint32_t *ebx, uint32_t *ecx, uint32_t *edx )
{
  100300:	55                   	push   %ebp
  100301:	89 e5                	mov    %esp,%ebp
  100303:	56                   	push   %esi
  100304:	53                   	push   %ebx
	if(cpuid_supported())
  100305:	e8 b0 1a 00 00       	call   101dba <cpuid_supported>
  10030a:	85 c0                	test   %eax,%eax
  10030c:	0f 95 c0             	setne  %al
  10030f:	84 c0                	test   %al,%al
  100311:	74 24                	je     100337 <_Z5cpuidjPjS_S_S_+0x37>
	{
		asm("mov %0, %%eax;" : : "a" (func));
  100313:	8b 45 08             	mov    0x8(%ebp),%eax
  100316:	89 c0                	mov    %eax,%eax

		asm("cpuid;" : "=a" (*eax), "=b" (*ebx), "=c" (*ecx), "=d" (*edx));
  100318:	0f a2                	cpuid  
  10031a:	89 c6                	mov    %eax,%esi
  10031c:	8b 45 0c             	mov    0xc(%ebp),%eax
  10031f:	89 30                	mov    %esi,(%eax)
  100321:	8b 45 10             	mov    0x10(%ebp),%eax
  100324:	89 18                	mov    %ebx,(%eax)
  100326:	8b 45 14             	mov    0x14(%ebp),%eax
  100329:	89 08                	mov    %ecx,(%eax)
  10032b:	8b 45 18             	mov    0x18(%ebp),%eax
  10032e:	89 10                	mov    %edx,(%eax)

		return true;
  100330:	b8 01 00 00 00       	mov    $0x1,%eax
  100335:	eb 05                	jmp    10033c <_Z5cpuidjPjS_S_S_+0x3c>
	}

	return false;
  100337:	b8 00 00 00 00       	mov    $0x0,%eax
}
  10033c:	5b                   	pop    %ebx
  10033d:	5e                   	pop    %esi
  10033e:	5d                   	pop    %ebp
  10033f:	c3                   	ret    

00100340 <_Z3inbt>:

/*
Port lesen Byte
*/
uint8_t inb(uint16_t port)						
{
  100340:	55                   	push   %ebp
  100341:	89 e5                	mov    %esp,%ebp
  100343:	83 ec 14             	sub    $0x14,%esp
  100346:	8b 45 08             	mov    0x8(%ebp),%eax
  100349:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	uint8_t result;

      	asm volatile ("inb %1, %0" : "=a" (result) : "d" (port));
  10034d:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
  100351:	89 c2                	mov    %eax,%edx
  100353:	ec                   	in     (%dx),%al
  100354:	88 45 ff             	mov    %al,-0x1(%ebp)

	return result;
  100357:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
  10035b:	c9                   	leave  
  10035c:	c3                   	ret    

0010035d <_Z3inwt>:

/*
Port lesen Word (2 Byte)
*/
uint16_t inw(uint16_t port)						
{
  10035d:	55                   	push   %ebp
  10035e:	89 e5                	mov    %esp,%ebp
  100360:	83 ec 14             	sub    $0x14,%esp
  100363:	8b 45 08             	mov    0x8(%ebp),%eax
  100366:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	uint16_t result;

      	asm volatile ("inw %1, %0" : "=a" (result) : "d" (port));
  10036a:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
  10036e:	89 c2                	mov    %eax,%edx
  100370:	66 ed                	in     (%dx),%ax
  100372:	66 89 45 fe          	mov    %ax,-0x2(%ebp)

	return result;
  100376:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
}
  10037a:	c9                   	leave  
  10037b:	c3                   	ret    

0010037c <_Z3inlt>:

/*
Port lesen DWord (4 Byte)
*/
uint32_t inl(uint16_t port)						
{
  10037c:	55                   	push   %ebp
  10037d:	89 e5                	mov    %esp,%ebp
  10037f:	83 ec 14             	sub    $0x14,%esp
  100382:	8b 45 08             	mov    0x8(%ebp),%eax
  100385:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	uint32_t result;

      	asm volatile ("inl %1, %0" : "=a" (result) : "d" (port));
  100389:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
  10038d:	89 c2                	mov    %eax,%edx
  10038f:	ed                   	in     (%dx),%eax
  100390:	89 45 fc             	mov    %eax,-0x4(%ebp)

	return result;
  100393:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  100396:	c9                   	leave  
  100397:	c3                   	ret    

00100398 <_Z4outbth>:

/*
Port schreiben Byte
*/
void outb(uint16_t port, uint8_t data)					
{
  100398:	55                   	push   %ebp
  100399:	89 e5                	mov    %esp,%ebp
  10039b:	83 ec 08             	sub    $0x8,%esp
  10039e:	8b 55 08             	mov    0x8(%ebp),%edx
  1003a1:	8b 45 0c             	mov    0xc(%ebp),%eax
  1003a4:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
  1003a8:	88 45 f8             	mov    %al,-0x8(%ebp)
      	asm volatile ("outb %0, %1" : : "a" (data), "Nd" (port));
  1003ab:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
  1003af:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
  1003b3:	ee                   	out    %al,(%dx)
}
  1003b4:	c9                   	leave  
  1003b5:	c3                   	ret    

001003b6 <_Z4outwtt>:

/*
Port schreiben Word (2 Byte)
*/
void outw(uint16_t port, uint16_t data)					
{
  1003b6:	55                   	push   %ebp
  1003b7:	89 e5                	mov    %esp,%ebp
  1003b9:	83 ec 08             	sub    $0x8,%esp
  1003bc:	8b 55 08             	mov    0x8(%ebp),%edx
  1003bf:	8b 45 0c             	mov    0xc(%ebp),%eax
  1003c2:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
  1003c6:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
      	asm volatile ("outw %0, %1" : : "a" (data), "Nd" (port));
  1003ca:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
  1003ce:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
  1003d2:	66 ef                	out    %ax,(%dx)
}
  1003d4:	c9                   	leave  
  1003d5:	c3                   	ret    

001003d6 <_Z4outltj>:

/*
Port schreiben DWord (4 Byte)
*/
void outl(uint16_t port, uint32_t data)					
{
  1003d6:	55                   	push   %ebp
  1003d7:	89 e5                	mov    %esp,%ebp
  1003d9:	83 ec 04             	sub    $0x4,%esp
  1003dc:	8b 45 08             	mov    0x8(%ebp),%eax
  1003df:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      	asm volatile ("outl %0, %1" : : "a" (data), "Nd" (port));
  1003e3:	8b 45 0c             	mov    0xc(%ebp),%eax
  1003e6:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
  1003ea:	ef                   	out    %eax,(%dx)
}
  1003eb:	c9                   	leave  
  1003ec:	c3                   	ret    

001003ed <memcpy>:
#include "include/string.h"

void *memcpy( void *dest, const void *src, size_t n )
{
  1003ed:	55                   	push   %ebp
  1003ee:	89 e5                	mov    %esp,%ebp
  1003f0:	83 ec 10             	sub    $0x10,%esp
	unsigned char *tdest = (unsigned char*)dest;
  1003f3:	8b 45 08             	mov    0x8(%ebp),%eax
  1003f6:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const unsigned char *tsrc = (const unsigned char*)src;
  1003f9:	8b 45 0c             	mov    0xc(%ebp),%eax
  1003fc:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while(n--)
  1003ff:	eb 13                	jmp    100414 <memcpy+0x27>
	{
			*tdest = *tsrc;
  100401:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100404:	0f b6 10             	movzbl (%eax),%edx
  100407:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10040a:	88 10                	mov    %dl,(%eax)
			tdest++; tsrc++;
  10040c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  100410:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
void *memcpy( void *dest, const void *src, size_t n )
{
	unsigned char *tdest = (unsigned char*)dest;
	const unsigned char *tsrc = (const unsigned char*)src;

	while(n--)
  100414:	8b 45 10             	mov    0x10(%ebp),%eax
  100417:	8d 50 ff             	lea    -0x1(%eax),%edx
  10041a:	89 55 10             	mov    %edx,0x10(%ebp)
  10041d:	85 c0                	test   %eax,%eax
  10041f:	75 e0                	jne    100401 <memcpy+0x14>
	{
			*tdest = *tsrc;
			tdest++; tsrc++;
	}

	return dest;
  100421:	8b 45 08             	mov    0x8(%ebp),%eax
}
  100424:	c9                   	leave  
  100425:	c3                   	ret    

00100426 <strcpy>:
	return dest;
}
*/

char *strcpy( char *dest, const char *src )
{
  100426:	55                   	push   %ebp
  100427:	89 e5                	mov    %esp,%ebp
  100429:	83 ec 18             	sub    $0x18,%esp
	return memcpy( (void*)dest, (void*)src, strlen(src) + 1 );
  10042c:	8b 45 0c             	mov    0xc(%ebp),%eax
  10042f:	89 04 24             	mov    %eax,(%esp)
  100432:	e8 c7 04 00 00       	call   1008fe <strlen>
  100437:	83 c0 01             	add    $0x1,%eax
  10043a:	89 44 24 08          	mov    %eax,0x8(%esp)
  10043e:	8b 45 0c             	mov    0xc(%ebp),%eax
  100441:	89 44 24 04          	mov    %eax,0x4(%esp)
  100445:	8b 45 08             	mov    0x8(%ebp),%eax
  100448:	89 04 24             	mov    %eax,(%esp)
  10044b:	e8 9d ff ff ff       	call   1003ed <memcpy>
}
  100450:	c9                   	leave  
  100451:	c3                   	ret    

00100452 <strncpy>:

char *strncpy( char *dest, const char *src, size_t n )
{
  100452:	55                   	push   %ebp
  100453:	89 e5                	mov    %esp,%ebp
  100455:	83 ec 28             	sub    $0x28,%esp
	size_t len = strlen(src) + 1;
  100458:	8b 45 0c             	mov    0xc(%ebp),%eax
  10045b:	89 04 24             	mov    %eax,(%esp)
  10045e:	e8 9b 04 00 00       	call   1008fe <strlen>
  100463:	83 c0 01             	add    $0x1,%eax
  100466:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(len > n)
  100469:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10046c:	3b 45 10             	cmp    0x10(%ebp),%eax
  10046f:	76 06                	jbe    100477 <strncpy+0x25>
	{
		len = n;
  100471:	8b 45 10             	mov    0x10(%ebp),%eax
  100474:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	memcpy( dest, src, len);
  100477:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10047a:	89 44 24 08          	mov    %eax,0x8(%esp)
  10047e:	8b 45 0c             	mov    0xc(%ebp),%eax
  100481:	89 44 24 04          	mov    %eax,0x4(%esp)
  100485:	8b 45 08             	mov    0x8(%ebp),%eax
  100488:	89 04 24             	mov    %eax,(%esp)
  10048b:	e8 5d ff ff ff       	call   1003ed <memcpy>

	if(len < n)
  100490:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100493:	3b 45 10             	cmp    0x10(%ebp),%eax
  100496:	73 24                	jae    1004bc <strncpy+0x6a>
	{
		memset( dest + n, '\0', n - len);
  100498:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10049b:	8b 55 10             	mov    0x10(%ebp),%edx
  10049e:	29 c2                	sub    %eax,%edx
  1004a0:	8b 45 10             	mov    0x10(%ebp),%eax
  1004a3:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1004a6:	01 c8                	add    %ecx,%eax
  1004a8:	89 54 24 08          	mov    %edx,0x8(%esp)
  1004ac:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  1004b3:	00 
  1004b4:	89 04 24             	mov    %eax,(%esp)
  1004b7:	e8 17 04 00 00       	call   1008d3 <memset>
	}
	
	return dest;
  1004bc:	8b 45 08             	mov    0x8(%ebp),%eax
}
  1004bf:	c9                   	leave  
  1004c0:	c3                   	ret    

001004c1 <strcat>:


char *strcat( char *dest, const char *src )
{
  1004c1:	55                   	push   %ebp
  1004c2:	89 e5                	mov    %esp,%ebp
  1004c4:	83 ec 10             	sub    $0x10,%esp
	char *tdest = (char*)dest;
  1004c7:	8b 45 08             	mov    0x8(%ebp),%eax
  1004ca:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const char *tsrc = (const char*)src;
  1004cd:	8b 45 0c             	mov    0xc(%ebp),%eax
  1004d0:	89 45 f8             	mov    %eax,-0x8(%ebp)
 
	while( *tdest != '\0' )
  1004d3:	eb 04                	jmp    1004d9 <strcat+0x18>
	{
		tdest++;
  1004d5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
char *strcat( char *dest, const char *src )
{
	char *tdest = (char*)dest;
	const char *tsrc = (const char*)src;
 
	while( *tdest != '\0' )
  1004d9:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1004dc:	0f b6 00             	movzbl (%eax),%eax
  1004df:	84 c0                	test   %al,%al
  1004e1:	75 f2                	jne    1004d5 <strcat+0x14>
	{
		tdest++;
	}

	while( *tsrc != '\0' )
  1004e3:	eb 13                	jmp    1004f8 <strcat+0x37>
	{
		*tdest = *tsrc;
  1004e5:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1004e8:	0f b6 10             	movzbl (%eax),%edx
  1004eb:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1004ee:	88 10                	mov    %dl,(%eax)
		tdest++; tsrc++;
  1004f0:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  1004f4:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
	while( *tdest != '\0' )
	{
		tdest++;
	}

	while( *tsrc != '\0' )
  1004f8:	8b 45 f8             	mov    -0x8(%ebp),%eax
  1004fb:	0f b6 00             	movzbl (%eax),%eax
  1004fe:	84 c0                	test   %al,%al
  100500:	75 e3                	jne    1004e5 <strcat+0x24>
	{
		*tdest = *tsrc;
		tdest++; tsrc++;
	}

	*tdest = '\0';
  100502:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100505:	c6 00 00             	movb   $0x0,(%eax)

	return dest;
  100508:	8b 45 08             	mov    0x8(%ebp),%eax
}
  10050b:	c9                   	leave  
  10050c:	c3                   	ret    

0010050d <strncat>:

char *strncat( char *dest, const char *src, size_t n )
{
  10050d:	55                   	push   %ebp
  10050e:	89 e5                	mov    %esp,%ebp
  100510:	83 ec 10             	sub    $0x10,%esp
	char *tdest = (char*)dest;
  100513:	8b 45 08             	mov    0x8(%ebp),%eax
  100516:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const char *tsrc = (const char*)src;
  100519:	8b 45 0c             	mov    0xc(%ebp),%eax
  10051c:	89 45 f8             	mov    %eax,-0x8(%ebp)
 
	while( *tdest != '\0' )
  10051f:	eb 04                	jmp    100525 <strncat+0x18>
	{
		tdest++;
  100521:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
char *strncat( char *dest, const char *src, size_t n )
{
	char *tdest = (char*)dest;
	const char *tsrc = (const char*)src;
 
	while( *tdest != '\0' )
  100525:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100528:	0f b6 00             	movzbl (%eax),%eax
  10052b:	84 c0                	test   %al,%al
  10052d:	75 f2                	jne    100521 <strncat+0x14>
	{
		tdest++;
	}

	while( *tsrc != '\0' && n > 0)
  10052f:	eb 17                	jmp    100548 <strncat+0x3b>
	{
		*tdest = *tsrc;
  100531:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100534:	0f b6 10             	movzbl (%eax),%edx
  100537:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10053a:	88 10                	mov    %dl,(%eax)
		tdest++; tsrc++; n--;
  10053c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  100540:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  100544:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
	while( *tdest != '\0' )
	{
		tdest++;
	}

	while( *tsrc != '\0' && n > 0)
  100548:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10054b:	0f b6 00             	movzbl (%eax),%eax
  10054e:	84 c0                	test   %al,%al
  100550:	74 06                	je     100558 <strncat+0x4b>
  100552:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  100556:	75 d9                	jne    100531 <strncat+0x24>
	{
		*tdest = *tsrc;
		tdest++; tsrc++; n--;
	}

	*tdest = '\0';
  100558:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10055b:	c6 00 00             	movb   $0x0,(%eax)

	return dest;
  10055e:	8b 45 08             	mov    0x8(%ebp),%eax
}
  100561:	c9                   	leave  
  100562:	c3                   	ret    

00100563 <memcmp>:

int memcmp( const void *ptr1, const void *ptr2, size_t n )
{
  100563:	55                   	push   %ebp
  100564:	89 e5                	mov    %esp,%ebp
  100566:	83 ec 10             	sub    $0x10,%esp
	const unsigned char *tptr1 = (const unsigned char*) ptr1;
  100569:	8b 45 08             	mov    0x8(%ebp),%eax
  10056c:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const unsigned char *tptr2 = (const unsigned char*) ptr2;
  10056f:	8b 45 0c             	mov    0xc(%ebp),%eax
  100572:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while(n > 0)
  100575:	eb 3a                	jmp    1005b1 <memcmp+0x4e>
	{
		if( *tptr1 > *tptr2 )
  100577:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10057a:	0f b6 10             	movzbl (%eax),%edx
  10057d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100580:	0f b6 00             	movzbl (%eax),%eax
  100583:	38 c2                	cmp    %al,%dl
  100585:	76 07                	jbe    10058e <memcmp+0x2b>
		{
			return 1;
  100587:	b8 01 00 00 00       	mov    $0x1,%eax
  10058c:	eb 2e                	jmp    1005bc <memcmp+0x59>
		}
		else if( *tptr1 < *tptr2 )
  10058e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100591:	0f b6 10             	movzbl (%eax),%edx
  100594:	8b 45 f8             	mov    -0x8(%ebp),%eax
  100597:	0f b6 00             	movzbl (%eax),%eax
  10059a:	38 c2                	cmp    %al,%dl
  10059c:	73 07                	jae    1005a5 <memcmp+0x42>
		{
			return -1;
  10059e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  1005a3:	eb 17                	jmp    1005bc <memcmp+0x59>
		}

		tptr1++; tptr2++; n--;
  1005a5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  1005a9:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  1005ad:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
int memcmp( const void *ptr1, const void *ptr2, size_t n )
{
	const unsigned char *tptr1 = (const unsigned char*) ptr1;
	const unsigned char *tptr2 = (const unsigned char*) ptr2;

	while(n > 0)
  1005b1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  1005b5:	75 c0                	jne    100577 <memcmp+0x14>
		}

		tptr1++; tptr2++; n--;
	}

	return 0;
  1005b7:	b8 00 00 00 00       	mov    $0x0,%eax
}
  1005bc:	c9                   	leave  
  1005bd:	c3                   	ret    

001005be <strcmp>:

int strcmp( const char *str1, const char *str2 )
{
  1005be:	55                   	push   %ebp
  1005bf:	89 e5                	mov    %esp,%ebp
  1005c1:	83 ec 28             	sub    $0x28,%esp
	size_t len1 = strlen(str1);
  1005c4:	8b 45 08             	mov    0x8(%ebp),%eax
  1005c7:	89 04 24             	mov    %eax,(%esp)
  1005ca:	e8 2f 03 00 00       	call   1008fe <strlen>
  1005cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
	size_t len2 = strlen(str2);
  1005d2:	8b 45 0c             	mov    0xc(%ebp),%eax
  1005d5:	89 04 24             	mov    %eax,(%esp)
  1005d8:	e8 21 03 00 00       	call   1008fe <strlen>
  1005dd:	89 45 ec             	mov    %eax,-0x14(%ebp)

	size_t len_ = len2;
  1005e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1005e3:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(len1 < len2)
  1005e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1005e9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  1005ec:	73 06                	jae    1005f4 <strcmp+0x36>
	{
		len_ = len1;
  1005ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1005f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	int cmpr = memcmp( str1, str2, len_ );
  1005f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1005f7:	89 44 24 08          	mov    %eax,0x8(%esp)
  1005fb:	8b 45 0c             	mov    0xc(%ebp),%eax
  1005fe:	89 44 24 04          	mov    %eax,0x4(%esp)
  100602:	8b 45 08             	mov    0x8(%ebp),%eax
  100605:	89 04 24             	mov    %eax,(%esp)
  100608:	e8 56 ff ff ff       	call   100563 <memcmp>
  10060d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	
	if(cmpr != 0)
  100610:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
  100614:	74 05                	je     10061b <strcmp+0x5d>
	{
		return cmpr;
  100616:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100619:	eb 23                	jmp    10063e <strcmp+0x80>
	}

	if(len1 > len2)
  10061b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10061e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  100621:	76 07                	jbe    10062a <strcmp+0x6c>
	{
		return 1;
  100623:	b8 01 00 00 00       	mov    $0x1,%eax
  100628:	eb 14                	jmp    10063e <strcmp+0x80>
	}
	else if(len1 < len2)
  10062a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10062d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  100630:	73 07                	jae    100639 <strcmp+0x7b>
	{
		return -1;
  100632:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  100637:	eb 05                	jmp    10063e <strcmp+0x80>
	}

	return 0;
  100639:	b8 00 00 00 00       	mov    $0x0,%eax
}
  10063e:	c9                   	leave  
  10063f:	c3                   	ret    

00100640 <strncmp>:

int strncmp( const char *str1, const char *str2, size_t n )
{
  100640:	55                   	push   %ebp
  100641:	89 e5                	mov    %esp,%ebp
  100643:	83 ec 0c             	sub    $0xc,%esp
	return memcmp( str1, str2, n);
  100646:	8b 45 10             	mov    0x10(%ebp),%eax
  100649:	89 44 24 08          	mov    %eax,0x8(%esp)
  10064d:	8b 45 0c             	mov    0xc(%ebp),%eax
  100650:	89 44 24 04          	mov    %eax,0x4(%esp)
  100654:	8b 45 08             	mov    0x8(%ebp),%eax
  100657:	89 04 24             	mov    %eax,(%esp)
  10065a:	e8 04 ff ff ff       	call   100563 <memcmp>
}
  10065f:	c9                   	leave  
  100660:	c3                   	ret    

00100661 <memchr>:


void *memchr( const void *ptr, int value, size_t n )
{
  100661:	55                   	push   %ebp
  100662:	89 e5                	mov    %esp,%ebp
  100664:	83 ec 10             	sub    $0x10,%esp
	const unsigned char *tptr = (const unsigned char*)ptr;
  100667:	8b 45 08             	mov    0x8(%ebp),%eax
  10066a:	89 45 fc             	mov    %eax,-0x4(%ebp)
	
	while(n > 0)
  10066d:	eb 1a                	jmp    100689 <memchr+0x28>
	{
		if(*tptr == (unsigned char)value)
  10066f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  100672:	0f b6 10             	movzbl (%eax),%edx
  100675:	8b 45 0c             	mov    0xc(%ebp),%eax
  100678:	38 c2                	cmp    %al,%dl
  10067a:	75 05                	jne    100681 <memchr+0x20>
		{
			return (void*)tptr;
  10067c:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10067f:	eb 13                	jmp    100694 <memchr+0x33>
		}

		tptr++; n--;
  100681:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  100685:	83 6d 10 01          	subl   $0x1,0x10(%ebp)

void *memchr( const void *ptr, int value, size_t n )
{
	const unsigned char *tptr = (const unsigned char*)ptr;
	
	while(n > 0)
  100689:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  10068d:	75 e0                	jne    10066f <memchr+0xe>
		}

		tptr++; n--;
	}

	return NULL;
  10068f:	b8 00 00 00 00       	mov    $0x0,%eax
}
  100694:	c9                   	leave  
  100695:	c3                   	ret    

00100696 <strchr>:

char *strchr( const char *str, int chr )
{
  100696:	55                   	push   %ebp
  100697:	89 e5                	mov    %esp,%ebp
	while(*str != '\0')
  100699:	eb 17                	jmp    1006b2 <strchr+0x1c>
	{
		if(*str == chr)
  10069b:	8b 45 08             	mov    0x8(%ebp),%eax
  10069e:	0f b6 00             	movzbl (%eax),%eax
  1006a1:	0f be c0             	movsbl %al,%eax
  1006a4:	3b 45 0c             	cmp    0xc(%ebp),%eax
  1006a7:	75 05                	jne    1006ae <strchr+0x18>
		{
			return (char*)str;
  1006a9:	8b 45 08             	mov    0x8(%ebp),%eax
  1006ac:	eb 13                	jmp    1006c1 <strchr+0x2b>
		}

		str++;
  1006ae:	83 45 08 01          	addl   $0x1,0x8(%ebp)
	return NULL;
}

char *strchr( const char *str, int chr )
{
	while(*str != '\0')
  1006b2:	8b 45 08             	mov    0x8(%ebp),%eax
  1006b5:	0f b6 00             	movzbl (%eax),%eax
  1006b8:	84 c0                	test   %al,%al
  1006ba:	75 df                	jne    10069b <strchr+0x5>
		}

		str++;
	}
	
	return NULL;
  1006bc:	b8 00 00 00 00       	mov    $0x0,%eax
}
  1006c1:	5d                   	pop    %ebp
  1006c2:	c3                   	ret    

001006c3 <strcspn>:

size_t strcspn( const char *str1, const char *str2 )
{
  1006c3:	55                   	push   %ebp
  1006c4:	89 e5                	mov    %esp,%ebp
  1006c6:	83 ec 28             	sub    $0x28,%esp
	size_t pos = 0;
  1006c9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	size_t len1 = strlen(str1);
  1006d0:	8b 45 08             	mov    0x8(%ebp),%eax
  1006d3:	89 04 24             	mov    %eax,(%esp)
  1006d6:	e8 23 02 00 00       	call   1008fe <strlen>
  1006db:	89 45 ec             	mov    %eax,-0x14(%ebp)
	size_t len2 = strlen(str2);
  1006de:	8b 45 0c             	mov    0xc(%ebp),%eax
  1006e1:	89 04 24             	mov    %eax,(%esp)
  1006e4:	e8 15 02 00 00       	call   1008fe <strlen>
  1006e9:	89 45 e8             	mov    %eax,-0x18(%ebp)

	size_t i;

	for(; *str1 != '\0'; str1++)
  1006ec:	eb 37                	jmp    100725 <strcspn+0x62>
	{
		for(i = 0; i < len2; i++)
  1006ee:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  1006f5:	eb 1e                	jmp    100715 <strcspn+0x52>
		{
			if(*str1 == str2[i])
  1006f7:	8b 45 08             	mov    0x8(%ebp),%eax
  1006fa:	0f b6 10             	movzbl (%eax),%edx
  1006fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100700:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  100703:	01 c8                	add    %ecx,%eax
  100705:	0f b6 00             	movzbl (%eax),%eax
  100708:	38 c2                	cmp    %al,%dl
  10070a:	75 05                	jne    100711 <strcspn+0x4e>
			{
				return pos;
  10070c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10070f:	eb 21                	jmp    100732 <strcspn+0x6f>

	size_t i;

	for(; *str1 != '\0'; str1++)
	{
		for(i = 0; i < len2; i++)
  100711:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  100715:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100718:	3b 45 e8             	cmp    -0x18(%ebp),%eax
  10071b:	72 da                	jb     1006f7 <strcspn+0x34>
			{
				return pos;
			}
		}

		pos++;
  10071d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
	size_t len1 = strlen(str1);
	size_t len2 = strlen(str2);

	size_t i;

	for(; *str1 != '\0'; str1++)
  100721:	83 45 08 01          	addl   $0x1,0x8(%ebp)
  100725:	8b 45 08             	mov    0x8(%ebp),%eax
  100728:	0f b6 00             	movzbl (%eax),%eax
  10072b:	84 c0                	test   %al,%al
  10072d:	75 bf                	jne    1006ee <strcspn+0x2b>
		}

		pos++;
	}

	return len1;
  10072f:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
  100732:	c9                   	leave  
  100733:	c3                   	ret    

00100734 <strpbrk>:

char *strpbrk( const char *str1, const char *str2 )
{
  100734:	55                   	push   %ebp
  100735:	89 e5                	mov    %esp,%ebp
  100737:	83 ec 28             	sub    $0x28,%esp
	size_t len2 = strlen(str2);
  10073a:	8b 45 0c             	mov    0xc(%ebp),%eax
  10073d:	89 04 24             	mov    %eax,(%esp)
  100740:	e8 b9 01 00 00       	call   1008fe <strlen>
  100745:	89 45 f0             	mov    %eax,-0x10(%ebp)

	size_t i;

	for(; *str1 != '\0'; str1++)
  100748:	eb 33                	jmp    10077d <strpbrk+0x49>
	{
		for(i = 0; i < len2; i++)
  10074a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  100751:	eb 1e                	jmp    100771 <strpbrk+0x3d>
		{
			if(*str1 == str2[i])
  100753:	8b 45 08             	mov    0x8(%ebp),%eax
  100756:	0f b6 10             	movzbl (%eax),%edx
  100759:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10075c:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  10075f:	01 c8                	add    %ecx,%eax
  100761:	0f b6 00             	movzbl (%eax),%eax
  100764:	38 c2                	cmp    %al,%dl
  100766:	75 05                	jne    10076d <strpbrk+0x39>
			{
				return (char*)str1;
  100768:	8b 45 08             	mov    0x8(%ebp),%eax
  10076b:	eb 1f                	jmp    10078c <strpbrk+0x58>

	size_t i;

	for(; *str1 != '\0'; str1++)
	{
		for(i = 0; i < len2; i++)
  10076d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  100771:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100774:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  100777:	72 da                	jb     100753 <strpbrk+0x1f>
{
	size_t len2 = strlen(str2);

	size_t i;

	for(; *str1 != '\0'; str1++)
  100779:	83 45 08 01          	addl   $0x1,0x8(%ebp)
  10077d:	8b 45 08             	mov    0x8(%ebp),%eax
  100780:	0f b6 00             	movzbl (%eax),%eax
  100783:	84 c0                	test   %al,%al
  100785:	75 c3                	jne    10074a <strpbrk+0x16>
				return (char*)str1;
			}
		}
	}

	return NULL;
  100787:	b8 00 00 00 00       	mov    $0x0,%eax
}
  10078c:	c9                   	leave  
  10078d:	c3                   	ret    

0010078e <strrchr>:

char *strrchr( const char *str, int chr )
{
  10078e:	55                   	push   %ebp
  10078f:	89 e5                	mov    %esp,%ebp
  100791:	83 ec 10             	sub    $0x10,%esp
	char *occ = NULL;
  100794:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	
	while(*str != '\0')
  10079b:	eb 18                	jmp    1007b5 <strrchr+0x27>
	{
		if(*str == chr)
  10079d:	8b 45 08             	mov    0x8(%ebp),%eax
  1007a0:	0f b6 00             	movzbl (%eax),%eax
  1007a3:	0f be c0             	movsbl %al,%eax
  1007a6:	3b 45 0c             	cmp    0xc(%ebp),%eax
  1007a9:	75 06                	jne    1007b1 <strrchr+0x23>
		{
			occ = (char*)str;
  1007ab:	8b 45 08             	mov    0x8(%ebp),%eax
  1007ae:	89 45 fc             	mov    %eax,-0x4(%ebp)
		}

		str++;
  1007b1:	83 45 08 01          	addl   $0x1,0x8(%ebp)

char *strrchr( const char *str, int chr )
{
	char *occ = NULL;
	
	while(*str != '\0')
  1007b5:	8b 45 08             	mov    0x8(%ebp),%eax
  1007b8:	0f b6 00             	movzbl (%eax),%eax
  1007bb:	84 c0                	test   %al,%al
  1007bd:	75 de                	jne    10079d <strrchr+0xf>
		}

		str++;
	}

	return occ;
  1007bf:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  1007c2:	c9                   	leave  
  1007c3:	c3                   	ret    

001007c4 <strspn>:

size_t strspn( const char *str1, const char *str2 )
{
  1007c4:	55                   	push   %ebp
  1007c5:	89 e5                	mov    %esp,%ebp
  1007c7:	83 ec 28             	sub    $0x28,%esp
	size_t len = 0;
  1007ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	size_t i;

	int found = 1;
  1007d1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

	while(*str1 && found)
  1007d8:	eb 4a                	jmp    100824 <strspn+0x60>
	{
		found = 0;
  1007da:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

		for(i = 0; i < strlen(str2); i++)
  1007e1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  1007e8:	eb 26                	jmp    100810 <strspn+0x4c>
		{
			if(*str1 == str2[i])
  1007ea:	8b 45 08             	mov    0x8(%ebp),%eax
  1007ed:	0f b6 10             	movzbl (%eax),%edx
  1007f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1007f3:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  1007f6:	01 c8                	add    %ecx,%eax
  1007f8:	0f b6 00             	movzbl (%eax),%eax
  1007fb:	38 c2                	cmp    %al,%dl
  1007fd:	75 0d                	jne    10080c <strspn+0x48>
			{
				len++;
  1007ff:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
				found = 1;
  100803:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
				break;
  10080a:	eb 14                	jmp    100820 <strspn+0x5c>

	while(*str1 && found)
	{
		found = 0;

		for(i = 0; i < strlen(str2); i++)
  10080c:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  100810:	8b 45 0c             	mov    0xc(%ebp),%eax
  100813:	89 04 24             	mov    %eax,(%esp)
  100816:	e8 e3 00 00 00       	call   1008fe <strlen>
  10081b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  10081e:	77 ca                	ja     1007ea <strspn+0x26>
				found = 1;
				break;
			}
		}
		
		str1++;
  100820:	83 45 08 01          	addl   $0x1,0x8(%ebp)

	size_t i;

	int found = 1;

	while(*str1 && found)
  100824:	8b 45 08             	mov    0x8(%ebp),%eax
  100827:	0f b6 00             	movzbl (%eax),%eax
  10082a:	84 c0                	test   %al,%al
  10082c:	74 06                	je     100834 <strspn+0x70>
  10082e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
  100832:	75 a6                	jne    1007da <strspn+0x16>
		}
		
		str1++;
	}

        return len;
  100834:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
  100837:	c9                   	leave  
  100838:	c3                   	ret    

00100839 <strtok>:
	return (char*)str1;
}
*/

char *strtok( char *str, const char *delimiters )
{
  100839:	55                   	push   %ebp
  10083a:	89 e5                	mov    %esp,%ebp
  10083c:	83 ec 28             	sub    $0x28,%esp
	static char *prevstr;

	if(str == NULL)
  10083f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  100843:	75 18                	jne    10085d <strtok+0x24>
	{
		if(prevstr == NULL)
  100845:	a1 0c 40 10 00       	mov    0x10400c,%eax
  10084a:	85 c0                	test   %eax,%eax
  10084c:	75 07                	jne    100855 <strtok+0x1c>
		{
			return NULL;
  10084e:	b8 00 00 00 00       	mov    $0x0,%eax
  100853:	eb 7c                	jmp    1008d1 <strtok+0x98>
		}

		str = prevstr;
  100855:	a1 0c 40 10 00       	mov    0x10400c,%eax
  10085a:	89 45 08             	mov    %eax,0x8(%ebp)
	}

	str += strspn(str, delimiters);
  10085d:	8b 45 0c             	mov    0xc(%ebp),%eax
  100860:	89 44 24 04          	mov    %eax,0x4(%esp)
  100864:	8b 45 08             	mov    0x8(%ebp),%eax
  100867:	89 04 24             	mov    %eax,(%esp)
  10086a:	e8 55 ff ff ff       	call   1007c4 <strspn>
  10086f:	01 45 08             	add    %eax,0x8(%ebp)

	if(*str == '\0')
  100872:	8b 45 08             	mov    0x8(%ebp),%eax
  100875:	0f b6 00             	movzbl (%eax),%eax
  100878:	84 c0                	test   %al,%al
  10087a:	75 07                	jne    100883 <strtok+0x4a>
	{
		return NULL;
  10087c:	b8 00 00 00 00       	mov    $0x0,%eax
  100881:	eb 4e                	jmp    1008d1 <strtok+0x98>
	}

	size_t str_new_len = strcspn(str, delimiters);
  100883:	8b 45 0c             	mov    0xc(%ebp),%eax
  100886:	89 44 24 04          	mov    %eax,0x4(%esp)
  10088a:	8b 45 08             	mov    0x8(%ebp),%eax
  10088d:	89 04 24             	mov    %eax,(%esp)
  100890:	e8 2e fe ff ff       	call   1006c3 <strcspn>
  100895:	89 45 f4             	mov    %eax,-0xc(%ebp)
       
        if(str[str_new_len] == '\0') 
  100898:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10089b:	8b 55 08             	mov    0x8(%ebp),%edx
  10089e:	01 d0                	add    %edx,%eax
  1008a0:	0f b6 00             	movzbl (%eax),%eax
  1008a3:	84 c0                	test   %al,%al
  1008a5:	75 0c                	jne    1008b3 <strtok+0x7a>
	{
                prevstr = NULL;
  1008a7:	c7 05 0c 40 10 00 00 	movl   $0x0,0x10400c
  1008ae:	00 00 00 
  1008b1:	eb 1b                	jmp    1008ce <strtok+0x95>
	}
        else 
	{
                str[str_new_len] = '\0';
  1008b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1008b6:	8b 55 08             	mov    0x8(%ebp),%edx
  1008b9:	01 d0                	add    %edx,%eax
  1008bb:	c6 00 00             	movb   $0x0,(%eax)
                prevstr = str + str_new_len + 1;
  1008be:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1008c1:	8d 50 01             	lea    0x1(%eax),%edx
  1008c4:	8b 45 08             	mov    0x8(%ebp),%eax
  1008c7:	01 d0                	add    %edx,%eax
  1008c9:	a3 0c 40 10 00       	mov    %eax,0x10400c
        }

	return str;
  1008ce:	8b 45 08             	mov    0x8(%ebp),%eax
}
  1008d1:	c9                   	leave  
  1008d2:	c3                   	ret    

001008d3 <memset>:



void *memset( void *ptr, int value, size_t n )
{
  1008d3:	55                   	push   %ebp
  1008d4:	89 e5                	mov    %esp,%ebp
  1008d6:	83 ec 10             	sub    $0x10,%esp
	unsigned char *tptr = (unsigned char*)ptr;
  1008d9:	8b 45 08             	mov    0x8(%ebp),%eax
  1008dc:	89 45 fc             	mov    %eax,-0x4(%ebp)

	while(n > 0)
  1008df:	eb 12                	jmp    1008f3 <memset+0x20>
	{
		*tptr = value; 
  1008e1:	8b 45 0c             	mov    0xc(%ebp),%eax
  1008e4:	89 c2                	mov    %eax,%edx
  1008e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1008e9:	88 10                	mov    %dl,(%eax)
		tptr++; n--;
  1008eb:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  1008ef:	83 6d 10 01          	subl   $0x1,0x10(%ebp)

void *memset( void *ptr, int value, size_t n )
{
	unsigned char *tptr = (unsigned char*)ptr;

	while(n > 0)
  1008f3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  1008f7:	75 e8                	jne    1008e1 <memset+0xe>
	{
		*tptr = value; 
		tptr++; n--;
	}

	return ptr;
  1008f9:	8b 45 08             	mov    0x8(%ebp),%eax
}
  1008fc:	c9                   	leave  
  1008fd:	c3                   	ret    

001008fe <strlen>:

size_t strlen( const char *str )
{
  1008fe:	55                   	push   %ebp
  1008ff:	89 e5                	mov    %esp,%ebp
  100901:	83 ec 10             	sub    $0x10,%esp
	size_t len = 0;
  100904:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

	while( *str != '\0' )
  10090b:	eb 08                	jmp    100915 <strlen+0x17>
	{
		str++; len++;
  10090d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
  100911:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)

size_t strlen( const char *str )
{
	size_t len = 0;

	while( *str != '\0' )
  100915:	8b 45 08             	mov    0x8(%ebp),%eax
  100918:	0f b6 00             	movzbl (%eax),%eax
  10091b:	84 c0                	test   %al,%al
  10091d:	75 ee                	jne    10090d <strlen+0xf>
	{
		str++; len++;
	}

	return len;
  10091f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  100922:	c9                   	leave  
  100923:	c3                   	ret    

00100924 <sputn>:
#include "include/ctype.h"
#include "include/stdlib.h"
#include "include/string.h"

char *sputn( char *s, int n, int base, int precision )
{
  100924:	55                   	push   %ebp
  100925:	89 e5                	mov    %esp,%ebp
  100927:	83 ec 28             	sub    $0x28,%esp
	static const char *digits = "0123456789abcdefghijklmnopqrstuvwxyz"; 
	
	static char buf[65];
	char *p;

	memset(buf, 0, 65);
  10092a:	c7 44 24 08 41 00 00 	movl   $0x41,0x8(%esp)
  100931:	00 
  100932:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100939:	00 
  10093a:	c7 04 24 20 40 10 00 	movl   $0x104020,(%esp)
  100941:	e8 8d ff ff ff       	call   1008d3 <memset>

	int len = 0;
  100946:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	p = buf + 64;
  10094d:	c7 45 f4 60 40 10 00 	movl   $0x104060,-0xc(%ebp)

	do 
	{
		int d = n % base;
  100954:	8b 45 0c             	mov    0xc(%ebp),%eax
  100957:	99                   	cltd   
  100958:	f7 7d 10             	idivl  0x10(%ebp)
  10095b:	89 55 ec             	mov    %edx,-0x14(%ebp)

		n /= base;
  10095e:	8b 45 0c             	mov    0xc(%ebp),%eax
  100961:	99                   	cltd   
  100962:	f7 7d 10             	idivl  0x10(%ebp)
  100965:	89 45 0c             	mov    %eax,0xc(%ebp)

		--p;
  100968:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
		*p = (char)digits[d];
  10096c:	8b 15 04 20 10 00    	mov    0x102004,%edx
  100972:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100975:	01 d0                	add    %edx,%eax
  100977:	0f b6 10             	movzbl (%eax),%edx
  10097a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10097d:	88 10                	mov    %dl,(%eax)

		len++;
  10097f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
		
	} while(n);
  100983:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  100987:	75 cb                	jne    100954 <sputn+0x30>

	while(len < precision)
  100989:	eb 0e                	jmp    100999 <sputn+0x75>
	{
		*--p = '0';
  10098b:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
  10098f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100992:	c6 00 30             	movb   $0x30,(%eax)

		len++;
  100995:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)

		len++;
		
	} while(n);

	while(len < precision)
  100999:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10099c:	3b 45 14             	cmp    0x14(%ebp),%eax
  10099f:	7c ea                	jl     10098b <sputn+0x67>
		*--p = '0';

		len++;
	}

	if(s)
  1009a1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  1009a5:	74 12                	je     1009b9 <sputn+0x95>
	{
		strcpy(s, p);
  1009a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1009aa:	89 44 24 04          	mov    %eax,0x4(%esp)
  1009ae:	8b 45 08             	mov    0x8(%ebp),%eax
  1009b1:	89 04 24             	mov    %eax,(%esp)
  1009b4:	e8 6d fa ff ff       	call   100426 <strcpy>
	}

	return p;
  1009b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
  1009bc:	c9                   	leave  
  1009bd:	c3                   	ret    

001009be <snprintf>:

int snprintf( char *s, size_t size, const char *format, ... )
{
  1009be:	55                   	push   %ebp
  1009bf:	89 e5                	mov    %esp,%ebp
  1009c1:	83 ec 28             	sub    $0x28,%esp
	va_list vl;
	va_start(vl, format);
  1009c4:	8d 45 14             	lea    0x14(%ebp),%eax
  1009c7:	89 45 f0             	mov    %eax,-0x10(%ebp)

	int n = vsnprintf(s, size, format, vl );
  1009ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1009cd:	89 44 24 0c          	mov    %eax,0xc(%esp)
  1009d1:	8b 45 10             	mov    0x10(%ebp),%eax
  1009d4:	89 44 24 08          	mov    %eax,0x8(%esp)
  1009d8:	8b 45 0c             	mov    0xc(%ebp),%eax
  1009db:	89 44 24 04          	mov    %eax,0x4(%esp)
  1009df:	8b 45 08             	mov    0x8(%ebp),%eax
  1009e2:	89 04 24             	mov    %eax,(%esp)
  1009e5:	e8 35 00 00 00       	call   100a1f <vsnprintf>
  1009ea:	89 45 f4             	mov    %eax,-0xc(%ebp)

	va_end(vl);

	return n;
  1009ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
  1009f0:	c9                   	leave  
  1009f1:	c3                   	ret    

001009f2 <sprintf>:

int sprintf( char *s, const char *format, ... )
{
  1009f2:	55                   	push   %ebp
  1009f3:	89 e5                	mov    %esp,%ebp
  1009f5:	83 ec 28             	sub    $0x28,%esp
	va_list vl;
	va_start(vl, format);
  1009f8:	8d 45 10             	lea    0x10(%ebp),%eax
  1009fb:	89 45 f0             	mov    %eax,-0x10(%ebp)

	int n = vsprintf(s, format, vl );
  1009fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100a01:	89 44 24 08          	mov    %eax,0x8(%esp)
  100a05:	8b 45 0c             	mov    0xc(%ebp),%eax
  100a08:	89 44 24 04          	mov    %eax,0x4(%esp)
  100a0c:	8b 45 08             	mov    0x8(%ebp),%eax
  100a0f:	89 04 24             	mov    %eax,(%esp)
  100a12:	e8 9c 05 00 00       	call   100fb3 <vsprintf>
  100a17:	89 45 f4             	mov    %eax,-0xc(%ebp)

	va_end(vl);

	return n;
  100a1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
  100a1d:	c9                   	leave  
  100a1e:	c3                   	ret    

00100a1f <vsnprintf>:

int vsnprintf(char *s, size_t size, const char *format, va_list arg )
{
  100a1f:	55                   	push   %ebp
  100a20:	89 e5                	mov    %esp,%ebp
  100a22:	83 ec 38             	sub    $0x38,%esp
	size_t written_char = 0;
  100a25:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if(format == NULL || size == 0)
  100a2c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  100a30:	74 06                	je     100a38 <vsnprintf+0x19>
  100a32:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  100a36:	75 0a                	jne    100a42 <vsnprintf+0x23>
	{
		return -1;
  100a38:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  100a3d:	e9 6f 05 00 00       	jmp    100fb1 <vsnprintf+0x592>

	size_t n, precision, width;
	char chr;
	
	static char chrar[65];
	char *str = chrar;
  100a42:	c7 45 e8 80 40 10 00 	movl   $0x104080,-0x18(%ebp)

	precision = 1;
  100a49:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	width 	  = 1;
  100a50:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

	while(*format != '\0' && written_char < size)
  100a57:	e9 36 05 00 00       	jmp    100f92 <vsnprintf+0x573>
	{
		str = chrar;
  100a5c:	c7 45 e8 80 40 10 00 	movl   $0x104080,-0x18(%ebp)

		if(*format == '%')
  100a63:	8b 45 10             	mov    0x10(%ebp),%eax
  100a66:	0f b6 00             	movzbl (%eax),%eax
  100a69:	3c 25                	cmp    $0x25,%al
  100a6b:	0f 85 0a 05 00 00    	jne    100f7b <vsnprintf+0x55c>
		{
			format++;
  100a71:	83 45 10 01          	addl   $0x1,0x10(%ebp)

			if(*format == '.')
  100a75:	8b 45 10             	mov    0x10(%ebp),%eax
  100a78:	0f b6 00             	movzbl (%eax),%eax
  100a7b:	3c 2e                	cmp    $0x2e,%al
  100a7d:	75 6d                	jne    100aec <vsnprintf+0xcd>
			{
					format++;
  100a7f:	83 45 10 01          	addl   $0x1,0x10(%ebp)

					if(*format == '*')
  100a83:	8b 45 10             	mov    0x10(%ebp),%eax
  100a86:	0f b6 00             	movzbl (%eax),%eax
  100a89:	3c 2a                	cmp    $0x2a,%al
  100a8b:	75 17                	jne    100aa4 <vsnprintf+0x85>
					{
						precision = va_arg(arg, int);
  100a8d:	8b 45 14             	mov    0x14(%ebp),%eax
  100a90:	8d 50 04             	lea    0x4(%eax),%edx
  100a93:	89 55 14             	mov    %edx,0x14(%ebp)
  100a96:	8b 00                	mov    (%eax),%eax
  100a98:	89 45 f0             	mov    %eax,-0x10(%ebp)
                                                format++;
  100a9b:	83 45 10 01          	addl   $0x1,0x10(%ebp)
  100a9f:	e9 a2 00 00 00       	jmp    100b46 <vsnprintf+0x127>
					}
					else if(*format >= '0' && *format <= '9')
  100aa4:	8b 45 10             	mov    0x10(%ebp),%eax
  100aa7:	0f b6 00             	movzbl (%eax),%eax
  100aaa:	3c 2f                	cmp    $0x2f,%al
  100aac:	7e 35                	jle    100ae3 <vsnprintf+0xc4>
  100aae:	8b 45 10             	mov    0x10(%ebp),%eax
  100ab1:	0f b6 00             	movzbl (%eax),%eax
  100ab4:	3c 39                	cmp    $0x39,%al
  100ab6:	7f 2b                	jg     100ae3 <vsnprintf+0xc4>
					{
						precision = atoi(format);
  100ab8:	8b 45 10             	mov    0x10(%ebp),%eax
  100abb:	89 04 24             	mov    %eax,(%esp)
  100abe:	e8 19 05 00 00       	call   100fdc <atoi>
  100ac3:	89 45 f0             	mov    %eax,-0x10(%ebp)
					
						while (*format >= '0' && *format <= '9') 
  100ac6:	eb 04                	jmp    100acc <vsnprintf+0xad>
						{
							format++;
  100ac8:	83 45 10 01          	addl   $0x1,0x10(%ebp)
					}
					else if(*format >= '0' && *format <= '9')
					{
						precision = atoi(format);
					
						while (*format >= '0' && *format <= '9') 
  100acc:	8b 45 10             	mov    0x10(%ebp),%eax
  100acf:	0f b6 00             	movzbl (%eax),%eax
  100ad2:	3c 2f                	cmp    $0x2f,%al
  100ad4:	7e 0a                	jle    100ae0 <vsnprintf+0xc1>
  100ad6:	8b 45 10             	mov    0x10(%ebp),%eax
  100ad9:	0f b6 00             	movzbl (%eax),%eax
  100adc:	3c 39                	cmp    $0x39,%al
  100ade:	7e e8                	jle    100ac8 <vsnprintf+0xa9>
					if(*format == '*')
					{
						precision = va_arg(arg, int);
                                                format++;
					}
					else if(*format >= '0' && *format <= '9')
  100ae0:	90                   	nop
  100ae1:	eb 63                	jmp    100b46 <vsnprintf+0x127>
							format++;
						}
					}
					else
					{
						precision = 1;
  100ae3:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
  100aea:	eb 5a                	jmp    100b46 <vsnprintf+0x127>
					}
			}
			else if(*format >= '0' && *format <= '9')
  100aec:	8b 45 10             	mov    0x10(%ebp),%eax
  100aef:	0f b6 00             	movzbl (%eax),%eax
  100af2:	3c 2f                	cmp    $0x2f,%al
  100af4:	7e 34                	jle    100b2a <vsnprintf+0x10b>
  100af6:	8b 45 10             	mov    0x10(%ebp),%eax
  100af9:	0f b6 00             	movzbl (%eax),%eax
  100afc:	3c 39                	cmp    $0x39,%al
  100afe:	7f 2a                	jg     100b2a <vsnprintf+0x10b>
			{
				width = atoi(format);
  100b00:	8b 45 10             	mov    0x10(%ebp),%eax
  100b03:	89 04 24             	mov    %eax,(%esp)
  100b06:	e8 d1 04 00 00       	call   100fdc <atoi>
  100b0b:	89 45 ec             	mov    %eax,-0x14(%ebp)
					
				while (*format >= '0' && *format <= '9') 
  100b0e:	eb 04                	jmp    100b14 <vsnprintf+0xf5>
				{
					format++;
  100b10:	83 45 10 01          	addl   $0x1,0x10(%ebp)
			}
			else if(*format >= '0' && *format <= '9')
			{
				width = atoi(format);
					
				while (*format >= '0' && *format <= '9') 
  100b14:	8b 45 10             	mov    0x10(%ebp),%eax
  100b17:	0f b6 00             	movzbl (%eax),%eax
  100b1a:	3c 2f                	cmp    $0x2f,%al
  100b1c:	7e 0a                	jle    100b28 <vsnprintf+0x109>
  100b1e:	8b 45 10             	mov    0x10(%ebp),%eax
  100b21:	0f b6 00             	movzbl (%eax),%eax
  100b24:	3c 39                	cmp    $0x39,%al
  100b26:	7e e8                	jle    100b10 <vsnprintf+0xf1>
					else
					{
						precision = 1;
					}
			}
			else if(*format >= '0' && *format <= '9')
  100b28:	eb 1c                	jmp    100b46 <vsnprintf+0x127>
				while (*format >= '0' && *format <= '9') 
				{
					format++;
				}
			}
			else if(*format == '*')
  100b2a:	8b 45 10             	mov    0x10(%ebp),%eax
  100b2d:	0f b6 00             	movzbl (%eax),%eax
  100b30:	3c 2a                	cmp    $0x2a,%al
  100b32:	75 12                	jne    100b46 <vsnprintf+0x127>
			{
				width = va_arg(arg, int);
  100b34:	8b 45 14             	mov    0x14(%ebp),%eax
  100b37:	8d 50 04             	lea    0x4(%eax),%edx
  100b3a:	89 55 14             	mov    %edx,0x14(%ebp)
  100b3d:	8b 00                	mov    (%eax),%eax
  100b3f:	89 45 ec             	mov    %eax,-0x14(%ebp)
                                format++;
  100b42:	83 45 10 01          	addl   $0x1,0x10(%ebp)
			}
			
			switch(*format)
  100b46:	8b 45 10             	mov    0x10(%ebp),%eax
  100b49:	0f b6 00             	movzbl (%eax),%eax
  100b4c:	0f be c0             	movsbl %al,%eax
  100b4f:	83 e8 25             	sub    $0x25,%eax
  100b52:	83 f8 53             	cmp    $0x53,%eax
  100b55:	0f 87 08 04 00 00    	ja     100f63 <vsnprintf+0x544>
  100b5b:	8b 04 85 70 30 10 00 	mov    0x103070(,%eax,4),%eax
  100b62:	ff e0                	jmp    *%eax
			{
				case 'd':
				case 'i':
					n = va_arg(arg, int);
  100b64:	8b 45 14             	mov    0x14(%ebp),%eax
  100b67:	8d 50 04             	lea    0x4(%eax),%edx
  100b6a:	89 55 14             	mov    %edx,0x14(%ebp)
  100b6d:	8b 00                	mov    (%eax),%eax
  100b6f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

					sputn(str, n, 10, precision);
  100b72:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100b75:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100b78:	89 54 24 0c          	mov    %edx,0xc(%esp)
  100b7c:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
  100b83:	00 
  100b84:	89 44 24 04          	mov    %eax,0x4(%esp)
  100b88:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100b8b:	89 04 24             	mov    %eax,(%esp)
  100b8e:	e8 91 fd ff ff       	call   100924 <sputn>

					precision = 1;
  100b93:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

					while(strlen(str) < width--)
  100b9a:	eb 0e                	jmp    100baa <vsnprintf+0x18b>
					{
						*s = ' ';
  100b9c:	8b 45 08             	mov    0x8(%ebp),%eax
  100b9f:	c6 00 20             	movb   $0x20,(%eax)
						s++;
  100ba2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
						written_char++;
  100ba6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)

					sputn(str, n, 10, precision);

					precision = 1;

					while(strlen(str) < width--)
  100baa:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100bad:	89 04 24             	mov    %eax,(%esp)
  100bb0:	e8 49 fd ff ff       	call   1008fe <strlen>
  100bb5:	89 c2                	mov    %eax,%edx
  100bb7:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100bba:	8d 48 ff             	lea    -0x1(%eax),%ecx
  100bbd:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  100bc0:	39 c2                	cmp    %eax,%edx
  100bc2:	72 d8                	jb     100b9c <vsnprintf+0x17d>
						*s = ' ';
						s++;
						written_char++;
					}

					width = 0;
  100bc4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

					while(*str)
  100bcb:	eb 17                	jmp    100be4 <vsnprintf+0x1c5>
					{
						*s = *str;
  100bcd:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100bd0:	0f b6 10             	movzbl (%eax),%edx
  100bd3:	8b 45 08             	mov    0x8(%ebp),%eax
  100bd6:	88 10                	mov    %dl,(%eax)
						s++; str++;
  100bd8:	83 45 08 01          	addl   $0x1,0x8(%ebp)
  100bdc:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
						written_char++;
  100be0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
						written_char++;
					}

					width = 0;

					while(*str)
  100be4:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100be7:	0f b6 00             	movzbl (%eax),%eax
  100bea:	84 c0                	test   %al,%al
  100bec:	75 df                	jne    100bcd <vsnprintf+0x1ae>
					{
						*s = *str;
						s++; str++;
						written_char++;
					}
				break;
  100bee:	e9 86 03 00 00       	jmp    100f79 <vsnprintf+0x55a>

				case 'u':
					n = va_arg(arg, unsigned int);
  100bf3:	8b 45 14             	mov    0x14(%ebp),%eax
  100bf6:	8d 50 04             	lea    0x4(%eax),%edx
  100bf9:	89 55 14             	mov    %edx,0x14(%ebp)
  100bfc:	8b 00                	mov    (%eax),%eax
  100bfe:	89 45 e4             	mov    %eax,-0x1c(%ebp)

					sputn(str, n, 10, precision);
  100c01:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100c04:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100c07:	89 54 24 0c          	mov    %edx,0xc(%esp)
  100c0b:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
  100c12:	00 
  100c13:	89 44 24 04          	mov    %eax,0x4(%esp)
  100c17:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100c1a:	89 04 24             	mov    %eax,(%esp)
  100c1d:	e8 02 fd ff ff       	call   100924 <sputn>

					precision = 1;
  100c22:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

					while(strlen(str) < width--)
  100c29:	eb 0e                	jmp    100c39 <vsnprintf+0x21a>
					{
						*s = ' ';
  100c2b:	8b 45 08             	mov    0x8(%ebp),%eax
  100c2e:	c6 00 20             	movb   $0x20,(%eax)
						s++;
  100c31:	83 45 08 01          	addl   $0x1,0x8(%ebp)
						written_char++;
  100c35:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)

					sputn(str, n, 10, precision);

					precision = 1;

					while(strlen(str) < width--)
  100c39:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100c3c:	89 04 24             	mov    %eax,(%esp)
  100c3f:	e8 ba fc ff ff       	call   1008fe <strlen>
  100c44:	89 c2                	mov    %eax,%edx
  100c46:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100c49:	8d 48 ff             	lea    -0x1(%eax),%ecx
  100c4c:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  100c4f:	39 c2                	cmp    %eax,%edx
  100c51:	72 d8                	jb     100c2b <vsnprintf+0x20c>
						*s = ' ';
						s++;
						written_char++;
					}

					width = 0;
  100c53:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

					while(*str)
  100c5a:	eb 17                	jmp    100c73 <vsnprintf+0x254>
					{
						*s = *str;
  100c5c:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100c5f:	0f b6 10             	movzbl (%eax),%edx
  100c62:	8b 45 08             	mov    0x8(%ebp),%eax
  100c65:	88 10                	mov    %dl,(%eax)
						s++; str++;
  100c67:	83 45 08 01          	addl   $0x1,0x8(%ebp)
  100c6b:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
						written_char++;
  100c6f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
						written_char++;
					}

					width = 0;

					while(*str)
  100c73:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100c76:	0f b6 00             	movzbl (%eax),%eax
  100c79:	84 c0                	test   %al,%al
  100c7b:	75 df                	jne    100c5c <vsnprintf+0x23d>
					{
						*s = *str;
						s++; str++;
						written_char++;
					}
				break;
  100c7d:	e9 f7 02 00 00       	jmp    100f79 <vsnprintf+0x55a>
	
				case 'o':
					n = va_arg(arg, unsigned int);
  100c82:	8b 45 14             	mov    0x14(%ebp),%eax
  100c85:	8d 50 04             	lea    0x4(%eax),%edx
  100c88:	89 55 14             	mov    %edx,0x14(%ebp)
  100c8b:	8b 00                	mov    (%eax),%eax
  100c8d:	89 45 e4             	mov    %eax,-0x1c(%ebp)

					sputn(str, n, 8, precision);
  100c90:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100c93:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100c96:	89 54 24 0c          	mov    %edx,0xc(%esp)
  100c9a:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  100ca1:	00 
  100ca2:	89 44 24 04          	mov    %eax,0x4(%esp)
  100ca6:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100ca9:	89 04 24             	mov    %eax,(%esp)
  100cac:	e8 73 fc ff ff       	call   100924 <sputn>

					precision = 1;
  100cb1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

					while(strlen(str) < width--)
  100cb8:	eb 0e                	jmp    100cc8 <vsnprintf+0x2a9>
					{
						*s = ' ';
  100cba:	8b 45 08             	mov    0x8(%ebp),%eax
  100cbd:	c6 00 20             	movb   $0x20,(%eax)
						s++;
  100cc0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
						written_char++;
  100cc4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)

					sputn(str, n, 8, precision);

					precision = 1;

					while(strlen(str) < width--)
  100cc8:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100ccb:	89 04 24             	mov    %eax,(%esp)
  100cce:	e8 2b fc ff ff       	call   1008fe <strlen>
  100cd3:	89 c2                	mov    %eax,%edx
  100cd5:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100cd8:	8d 48 ff             	lea    -0x1(%eax),%ecx
  100cdb:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  100cde:	39 c2                	cmp    %eax,%edx
  100ce0:	72 d8                	jb     100cba <vsnprintf+0x29b>
						*s = ' ';
						s++;
						written_char++;
					}

					width = 0;
  100ce2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

					while(*str)
  100ce9:	eb 17                	jmp    100d02 <vsnprintf+0x2e3>
					{
						*s = *str;
  100ceb:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100cee:	0f b6 10             	movzbl (%eax),%edx
  100cf1:	8b 45 08             	mov    0x8(%ebp),%eax
  100cf4:	88 10                	mov    %dl,(%eax)
						s++; str++;
  100cf6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
  100cfa:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
						written_char++;
  100cfe:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
						written_char++;
					}

					width = 0;

					while(*str)
  100d02:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100d05:	0f b6 00             	movzbl (%eax),%eax
  100d08:	84 c0                	test   %al,%al
  100d0a:	75 df                	jne    100ceb <vsnprintf+0x2cc>
					{
						*s = *str;
						s++; str++;
						written_char++;
					}
				break;
  100d0c:	e9 68 02 00 00       	jmp    100f79 <vsnprintf+0x55a>
			
				case 'x':
					n = va_arg(arg, unsigned int);
  100d11:	8b 45 14             	mov    0x14(%ebp),%eax
  100d14:	8d 50 04             	lea    0x4(%eax),%edx
  100d17:	89 55 14             	mov    %edx,0x14(%ebp)
  100d1a:	8b 00                	mov    (%eax),%eax
  100d1c:	89 45 e4             	mov    %eax,-0x1c(%ebp)

					sputn(str, n, 16, precision);
  100d1f:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100d22:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100d25:	89 54 24 0c          	mov    %edx,0xc(%esp)
  100d29:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
  100d30:	00 
  100d31:	89 44 24 04          	mov    %eax,0x4(%esp)
  100d35:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100d38:	89 04 24             	mov    %eax,(%esp)
  100d3b:	e8 e4 fb ff ff       	call   100924 <sputn>

					precision = 1;
  100d40:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

					while(strlen(str) < width--)
  100d47:	eb 0e                	jmp    100d57 <vsnprintf+0x338>
					{
						*s = ' ';
  100d49:	8b 45 08             	mov    0x8(%ebp),%eax
  100d4c:	c6 00 20             	movb   $0x20,(%eax)
						s++;
  100d4f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
						written_char++;
  100d53:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)

					sputn(str, n, 16, precision);

					precision = 1;

					while(strlen(str) < width--)
  100d57:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100d5a:	89 04 24             	mov    %eax,(%esp)
  100d5d:	e8 9c fb ff ff       	call   1008fe <strlen>
  100d62:	89 c2                	mov    %eax,%edx
  100d64:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100d67:	8d 48 ff             	lea    -0x1(%eax),%ecx
  100d6a:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  100d6d:	39 c2                	cmp    %eax,%edx
  100d6f:	72 d8                	jb     100d49 <vsnprintf+0x32a>
						*s = ' ';
						s++;
						written_char++;
					}

					width = 0;
  100d71:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

					while(*str)
  100d78:	eb 17                	jmp    100d91 <vsnprintf+0x372>
					{
						*s = *str;
  100d7a:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100d7d:	0f b6 10             	movzbl (%eax),%edx
  100d80:	8b 45 08             	mov    0x8(%ebp),%eax
  100d83:	88 10                	mov    %dl,(%eax)
						s++; str++;
  100d85:	83 45 08 01          	addl   $0x1,0x8(%ebp)
  100d89:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
						written_char++;
  100d8d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
						written_char++;
					}

					width = 0;

					while(*str)
  100d91:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100d94:	0f b6 00             	movzbl (%eax),%eax
  100d97:	84 c0                	test   %al,%al
  100d99:	75 df                	jne    100d7a <vsnprintf+0x35b>
					{
						*s = *str;
						s++; str++;
						written_char++;
					}
				break;
  100d9b:	e9 d9 01 00 00       	jmp    100f79 <vsnprintf+0x55a>

				case 'X':
					n = va_arg(arg, unsigned int);
  100da0:	8b 45 14             	mov    0x14(%ebp),%eax
  100da3:	8d 50 04             	lea    0x4(%eax),%edx
  100da6:	89 55 14             	mov    %edx,0x14(%ebp)
  100da9:	8b 00                	mov    (%eax),%eax
  100dab:	89 45 e4             	mov    %eax,-0x1c(%ebp)

					sputn(str, n, 16, precision);
  100dae:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100db1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100db4:	89 54 24 0c          	mov    %edx,0xc(%esp)
  100db8:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
  100dbf:	00 
  100dc0:	89 44 24 04          	mov    %eax,0x4(%esp)
  100dc4:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100dc7:	89 04 24             	mov    %eax,(%esp)
  100dca:	e8 55 fb ff ff       	call   100924 <sputn>

					precision = 1;
  100dcf:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

					while(strlen(str) < width--)
  100dd6:	eb 0e                	jmp    100de6 <vsnprintf+0x3c7>
					{
						*s = ' ';
  100dd8:	8b 45 08             	mov    0x8(%ebp),%eax
  100ddb:	c6 00 20             	movb   $0x20,(%eax)
						s++;
  100dde:	83 45 08 01          	addl   $0x1,0x8(%ebp)
						written_char++;
  100de2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)

					sputn(str, n, 16, precision);

					precision = 1;

					while(strlen(str) < width--)
  100de6:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100de9:	89 04 24             	mov    %eax,(%esp)
  100dec:	e8 0d fb ff ff       	call   1008fe <strlen>
  100df1:	89 c2                	mov    %eax,%edx
  100df3:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100df6:	8d 48 ff             	lea    -0x1(%eax),%ecx
  100df9:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  100dfc:	39 c2                	cmp    %eax,%edx
  100dfe:	72 d8                	jb     100dd8 <vsnprintf+0x3b9>
						*s = ' ';
						s++;
						written_char++;
					}

					width = 0;
  100e00:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

					while(*str)
  100e07:	eb 24                	jmp    100e2d <vsnprintf+0x40e>
					{
						*s = toupper(*str);
  100e09:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100e0c:	0f b6 00             	movzbl (%eax),%eax
  100e0f:	0f be c0             	movsbl %al,%eax
  100e12:	89 04 24             	mov    %eax,(%esp)
  100e15:	e8 7e 0f 00 00       	call   101d98 <toupper>
  100e1a:	89 c2                	mov    %eax,%edx
  100e1c:	8b 45 08             	mov    0x8(%ebp),%eax
  100e1f:	88 10                	mov    %dl,(%eax)
						s++; str++;
  100e21:	83 45 08 01          	addl   $0x1,0x8(%ebp)
  100e25:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
						written_char++;
  100e29:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
						written_char++;
					}

					width = 0;

					while(*str)
  100e2d:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100e30:	0f b6 00             	movzbl (%eax),%eax
  100e33:	84 c0                	test   %al,%al
  100e35:	75 d2                	jne    100e09 <vsnprintf+0x3ea>
					{
						*s = toupper(*str);
						s++; str++;
						written_char++;
					}
				break;
  100e37:	e9 3d 01 00 00       	jmp    100f79 <vsnprintf+0x55a>
				case 'A':
					//TODO
				break;

				case 'c':
					chr = (char)va_arg(arg, int);
  100e3c:	8b 45 14             	mov    0x14(%ebp),%eax
  100e3f:	8d 50 04             	lea    0x4(%eax),%edx
  100e42:	89 55 14             	mov    %edx,0x14(%ebp)
  100e45:	8b 00                	mov    (%eax),%eax
  100e47:	88 45 e3             	mov    %al,-0x1d(%ebp)
					*s = chr;
  100e4a:	8b 45 08             	mov    0x8(%ebp),%eax
  100e4d:	0f b6 55 e3          	movzbl -0x1d(%ebp),%edx
  100e51:	88 10                	mov    %dl,(%eax)
					s++;
  100e53:	83 45 08 01          	addl   $0x1,0x8(%ebp)
					written_char++;
  100e57:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
				break;
  100e5b:	e9 19 01 00 00       	jmp    100f79 <vsnprintf+0x55a>

				case 's':
					str = va_arg(arg, char*);
  100e60:	8b 45 14             	mov    0x14(%ebp),%eax
  100e63:	8d 50 04             	lea    0x4(%eax),%edx
  100e66:	89 55 14             	mov    %edx,0x14(%ebp)
  100e69:	8b 00                	mov    (%eax),%eax
  100e6b:	89 45 e8             	mov    %eax,-0x18(%ebp)

					while(strlen(str) < width--)
  100e6e:	eb 0e                	jmp    100e7e <vsnprintf+0x45f>
					{
						*s = ' ';
  100e70:	8b 45 08             	mov    0x8(%ebp),%eax
  100e73:	c6 00 20             	movb   $0x20,(%eax)
						s++;
  100e76:	83 45 08 01          	addl   $0x1,0x8(%ebp)
						written_char++;
  100e7a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
				break;

				case 's':
					str = va_arg(arg, char*);

					while(strlen(str) < width--)
  100e7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100e81:	89 04 24             	mov    %eax,(%esp)
  100e84:	e8 75 fa ff ff       	call   1008fe <strlen>
  100e89:	89 c2                	mov    %eax,%edx
  100e8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100e8e:	8d 48 ff             	lea    -0x1(%eax),%ecx
  100e91:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  100e94:	39 c2                	cmp    %eax,%edx
  100e96:	72 d8                	jb     100e70 <vsnprintf+0x451>
						*s = ' ';
						s++;
						written_char++;
					}

					width = 0;
  100e98:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

					while(*str)
  100e9f:	eb 17                	jmp    100eb8 <vsnprintf+0x499>
					{
						*s = *str;
  100ea1:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100ea4:	0f b6 10             	movzbl (%eax),%edx
  100ea7:	8b 45 08             	mov    0x8(%ebp),%eax
  100eaa:	88 10                	mov    %dl,(%eax)
						s++; str++;
  100eac:	83 45 08 01          	addl   $0x1,0x8(%ebp)
  100eb0:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
						written_char++;
  100eb4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
						written_char++;
					}

					width = 0;

					while(*str)
  100eb8:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100ebb:	0f b6 00             	movzbl (%eax),%eax
  100ebe:	84 c0                	test   %al,%al
  100ec0:	75 df                	jne    100ea1 <vsnprintf+0x482>
					{
						*s = *str;
						s++; str++;
						written_char++;
					}
				break;
  100ec2:	e9 b2 00 00 00       	jmp    100f79 <vsnprintf+0x55a>

				case 'p':
					n = (int)va_arg(arg, void*);
  100ec7:	8b 45 14             	mov    0x14(%ebp),%eax
  100eca:	8d 50 04             	lea    0x4(%eax),%edx
  100ecd:	89 55 14             	mov    %edx,0x14(%ebp)
  100ed0:	8b 00                	mov    (%eax),%eax
  100ed2:	89 45 e4             	mov    %eax,-0x1c(%ebp)

					sputn(str, n, 16, precision);
  100ed5:	8b 55 f0             	mov    -0x10(%ebp),%edx
  100ed8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100edb:	89 54 24 0c          	mov    %edx,0xc(%esp)
  100edf:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
  100ee6:	00 
  100ee7:	89 44 24 04          	mov    %eax,0x4(%esp)
  100eeb:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100eee:	89 04 24             	mov    %eax,(%esp)
  100ef1:	e8 2e fa ff ff       	call   100924 <sputn>

					precision = 1;
  100ef6:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

					while(strlen(str) < width--)
  100efd:	eb 0e                	jmp    100f0d <vsnprintf+0x4ee>
					{
						*s = ' ';
  100eff:	8b 45 08             	mov    0x8(%ebp),%eax
  100f02:	c6 00 20             	movb   $0x20,(%eax)
						s++;
  100f05:	83 45 08 01          	addl   $0x1,0x8(%ebp)
						written_char++;
  100f09:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)

					sputn(str, n, 16, precision);

					precision = 1;

					while(strlen(str) < width--)
  100f0d:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100f10:	89 04 24             	mov    %eax,(%esp)
  100f13:	e8 e6 f9 ff ff       	call   1008fe <strlen>
  100f18:	89 c2                	mov    %eax,%edx
  100f1a:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100f1d:	8d 48 ff             	lea    -0x1(%eax),%ecx
  100f20:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  100f23:	39 c2                	cmp    %eax,%edx
  100f25:	72 d8                	jb     100eff <vsnprintf+0x4e0>
						*s = ' ';
						s++;
						written_char++;
					}

					width = 0;
  100f27:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

					while(*str)
  100f2e:	eb 17                	jmp    100f47 <vsnprintf+0x528>
					{
						*s = *str;
  100f30:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100f33:	0f b6 10             	movzbl (%eax),%edx
  100f36:	8b 45 08             	mov    0x8(%ebp),%eax
  100f39:	88 10                	mov    %dl,(%eax)
						s++; str++;
  100f3b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
  100f3f:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
						written_char++;
  100f43:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
						written_char++;
					}

					width = 0;

					while(*str)
  100f47:	8b 45 e8             	mov    -0x18(%ebp),%eax
  100f4a:	0f b6 00             	movzbl (%eax),%eax
  100f4d:	84 c0                	test   %al,%al
  100f4f:	75 df                	jne    100f30 <vsnprintf+0x511>
					{
						*s = *str;
						s++; str++;
						written_char++;
					}
				break;
  100f51:	eb 26                	jmp    100f79 <vsnprintf+0x55a>
				case 'n':
					//TODO
				break;

				case '%':
					*s = '%';
  100f53:	8b 45 08             	mov    0x8(%ebp),%eax
  100f56:	c6 00 25             	movb   $0x25,(%eax)
					s++;
  100f59:	83 45 08 01          	addl   $0x1,0x8(%ebp)
					written_char++;
  100f5d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
				break;
  100f61:	eb 16                	jmp    100f79 <vsnprintf+0x55a>

				default:
					*s = *format;
  100f63:	8b 45 10             	mov    0x10(%ebp),%eax
  100f66:	0f b6 10             	movzbl (%eax),%edx
  100f69:	8b 45 08             	mov    0x8(%ebp),%eax
  100f6c:	88 10                	mov    %dl,(%eax)
					s++;
  100f6e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
					written_char++;
  100f72:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
				break;
  100f76:	eb 01                	jmp    100f79 <vsnprintf+0x55a>
					//TODO
				break;

				case 'A':
					//TODO
				break;
  100f78:	90                   	nop
  100f79:	eb 13                	jmp    100f8e <vsnprintf+0x56f>
				break;
			}
		}
		else
		{
			*s = *format;
  100f7b:	8b 45 10             	mov    0x10(%ebp),%eax
  100f7e:	0f b6 10             	movzbl (%eax),%edx
  100f81:	8b 45 08             	mov    0x8(%ebp),%eax
  100f84:	88 10                	mov    %dl,(%eax)
			s++;
  100f86:	83 45 08 01          	addl   $0x1,0x8(%ebp)
			written_char++;
  100f8a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
		}

		format++;
  100f8e:	83 45 10 01          	addl   $0x1,0x10(%ebp)
	char *str = chrar;

	precision = 1;
	width 	  = 1;

	while(*format != '\0' && written_char < size)
  100f92:	8b 45 10             	mov    0x10(%ebp),%eax
  100f95:	0f b6 00             	movzbl (%eax),%eax
  100f98:	84 c0                	test   %al,%al
  100f9a:	74 0c                	je     100fa8 <vsnprintf+0x589>
  100f9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100f9f:	3b 45 0c             	cmp    0xc(%ebp),%eax
  100fa2:	0f 82 b4 fa ff ff    	jb     100a5c <vsnprintf+0x3d>
		}

		format++;
	}

	*s = '\0';
  100fa8:	8b 45 08             	mov    0x8(%ebp),%eax
  100fab:	c6 00 00             	movb   $0x0,(%eax)

	return written_char;
  100fae:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
  100fb1:	c9                   	leave  
  100fb2:	c3                   	ret    

00100fb3 <vsprintf>:

int vsprintf( char *s, const char *format, va_list arg )
{
  100fb3:	55                   	push   %ebp
  100fb4:	89 e5                	mov    %esp,%ebp
  100fb6:	83 ec 18             	sub    $0x18,%esp
	 return vsnprintf(s, (size_t)-1, format, arg);
  100fb9:	8b 45 10             	mov    0x10(%ebp),%eax
  100fbc:	89 44 24 0c          	mov    %eax,0xc(%esp)
  100fc0:	8b 45 0c             	mov    0xc(%ebp),%eax
  100fc3:	89 44 24 08          	mov    %eax,0x8(%esp)
  100fc7:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%esp)
  100fce:	ff 
  100fcf:	8b 45 08             	mov    0x8(%ebp),%eax
  100fd2:	89 04 24             	mov    %eax,(%esp)
  100fd5:	e8 45 fa ff ff       	call   100a1f <vsnprintf>
}
  100fda:	c9                   	leave  
  100fdb:	c3                   	ret    

00100fdc <atoi>:
#include "include/stdlib.h"

int atoi( const char *str )
{
  100fdc:	55                   	push   %ebp
  100fdd:	89 e5                	mov    %esp,%ebp
  100fdf:	83 ec 10             	sub    $0x10,%esp
	int r = 0;
  100fe2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	
	int sign = 1;
  100fe9:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	
	while( *str == ' ' || *str == '\t' || *str == '\r' || *str == '\n' || *str == '\v' )
  100ff0:	eb 04                	jmp    100ff6 <atoi+0x1a>
	{
		str++;
  100ff2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
{
	int r = 0;
	
	int sign = 1;
	
	while( *str == ' ' || *str == '\t' || *str == '\r' || *str == '\n' || *str == '\v' )
  100ff6:	8b 45 08             	mov    0x8(%ebp),%eax
  100ff9:	0f b6 00             	movzbl (%eax),%eax
  100ffc:	3c 20                	cmp    $0x20,%al
  100ffe:	74 f2                	je     100ff2 <atoi+0x16>
  101000:	8b 45 08             	mov    0x8(%ebp),%eax
  101003:	0f b6 00             	movzbl (%eax),%eax
  101006:	3c 09                	cmp    $0x9,%al
  101008:	74 e8                	je     100ff2 <atoi+0x16>
  10100a:	8b 45 08             	mov    0x8(%ebp),%eax
  10100d:	0f b6 00             	movzbl (%eax),%eax
  101010:	3c 0d                	cmp    $0xd,%al
  101012:	74 de                	je     100ff2 <atoi+0x16>
  101014:	8b 45 08             	mov    0x8(%ebp),%eax
  101017:	0f b6 00             	movzbl (%eax),%eax
  10101a:	3c 0a                	cmp    $0xa,%al
  10101c:	74 d4                	je     100ff2 <atoi+0x16>
  10101e:	8b 45 08             	mov    0x8(%ebp),%eax
  101021:	0f b6 00             	movzbl (%eax),%eax
  101024:	3c 0b                	cmp    $0xb,%al
  101026:	74 ca                	je     100ff2 <atoi+0x16>
	{
		str++;
	}

	if(*str == '-')
  101028:	8b 45 08             	mov    0x8(%ebp),%eax
  10102b:	0f b6 00             	movzbl (%eax),%eax
  10102e:	3c 2d                	cmp    $0x2d,%al
  101030:	75 0d                	jne    10103f <atoi+0x63>
	{
		sign = -1;
  101032:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
		str++;
  101039:	83 45 08 01          	addl   $0x1,0x8(%ebp)
	}

	while(*str != '\0')
  10103d:	eb 4f                	jmp    10108e <atoi+0xb2>
  10103f:	eb 4d                	jmp    10108e <atoi+0xb2>
	{
		if( (*str - '0') < 0 || (*str - '0') > 9 )
  101041:	8b 45 08             	mov    0x8(%ebp),%eax
  101044:	0f b6 00             	movzbl (%eax),%eax
  101047:	0f be c0             	movsbl %al,%eax
  10104a:	83 e8 30             	sub    $0x30,%eax
  10104d:	85 c0                	test   %eax,%eax
  10104f:	78 11                	js     101062 <atoi+0x86>
  101051:	8b 45 08             	mov    0x8(%ebp),%eax
  101054:	0f b6 00             	movzbl (%eax),%eax
  101057:	0f be c0             	movsbl %al,%eax
  10105a:	83 e8 30             	sub    $0x30,%eax
  10105d:	83 f8 09             	cmp    $0x9,%eax
  101060:	7e 09                	jle    10106b <atoi+0x8f>
		{
			return (r * sign);
  101062:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101065:	0f af 45 f8          	imul   -0x8(%ebp),%eax
  101069:	eb 34                	jmp    10109f <atoi+0xc3>
		}
		else
		{
			r = r * 10 + (*str - '0');
  10106b:	8b 55 fc             	mov    -0x4(%ebp),%edx
  10106e:	89 d0                	mov    %edx,%eax
  101070:	c1 e0 02             	shl    $0x2,%eax
  101073:	01 d0                	add    %edx,%eax
  101075:	01 c0                	add    %eax,%eax
  101077:	89 c2                	mov    %eax,%edx
  101079:	8b 45 08             	mov    0x8(%ebp),%eax
  10107c:	0f b6 00             	movzbl (%eax),%eax
  10107f:	0f be c0             	movsbl %al,%eax
  101082:	83 e8 30             	sub    $0x30,%eax
  101085:	01 d0                	add    %edx,%eax
  101087:	89 45 fc             	mov    %eax,-0x4(%ebp)
		}

		str++;
  10108a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
	{
		sign = -1;
		str++;
	}

	while(*str != '\0')
  10108e:	8b 45 08             	mov    0x8(%ebp),%eax
  101091:	0f b6 00             	movzbl (%eax),%eax
  101094:	84 c0                	test   %al,%al
  101096:	75 a9                	jne    101041 <atoi+0x65>
		}

		str++;
	}

	return (r * sign);
  101098:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10109b:	0f af 45 f8          	imul   -0x8(%ebp),%eax
}
  10109f:	c9                   	leave  
  1010a0:	c3                   	ret    

001010a1 <atol>:

long int atol( const char *str )
{
  1010a1:	55                   	push   %ebp
  1010a2:	89 e5                	mov    %esp,%ebp
  1010a4:	83 ec 10             	sub    $0x10,%esp
	long int r = 0;
  1010a7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	
	long int sign = 1;
  1010ae:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	
	while( *str == ' ' || *str == '\t' || *str == '\r' || *str == '\n' || *str == '\v' )
  1010b5:	eb 04                	jmp    1010bb <atol+0x1a>
	{
		str++;
  1010b7:	83 45 08 01          	addl   $0x1,0x8(%ebp)
{
	long int r = 0;
	
	long int sign = 1;
	
	while( *str == ' ' || *str == '\t' || *str == '\r' || *str == '\n' || *str == '\v' )
  1010bb:	8b 45 08             	mov    0x8(%ebp),%eax
  1010be:	0f b6 00             	movzbl (%eax),%eax
  1010c1:	3c 20                	cmp    $0x20,%al
  1010c3:	74 f2                	je     1010b7 <atol+0x16>
  1010c5:	8b 45 08             	mov    0x8(%ebp),%eax
  1010c8:	0f b6 00             	movzbl (%eax),%eax
  1010cb:	3c 09                	cmp    $0x9,%al
  1010cd:	74 e8                	je     1010b7 <atol+0x16>
  1010cf:	8b 45 08             	mov    0x8(%ebp),%eax
  1010d2:	0f b6 00             	movzbl (%eax),%eax
  1010d5:	3c 0d                	cmp    $0xd,%al
  1010d7:	74 de                	je     1010b7 <atol+0x16>
  1010d9:	8b 45 08             	mov    0x8(%ebp),%eax
  1010dc:	0f b6 00             	movzbl (%eax),%eax
  1010df:	3c 0a                	cmp    $0xa,%al
  1010e1:	74 d4                	je     1010b7 <atol+0x16>
  1010e3:	8b 45 08             	mov    0x8(%ebp),%eax
  1010e6:	0f b6 00             	movzbl (%eax),%eax
  1010e9:	3c 0b                	cmp    $0xb,%al
  1010eb:	74 ca                	je     1010b7 <atol+0x16>
	{
		str++;
	}

	if(*str == '-')
  1010ed:	8b 45 08             	mov    0x8(%ebp),%eax
  1010f0:	0f b6 00             	movzbl (%eax),%eax
  1010f3:	3c 2d                	cmp    $0x2d,%al
  1010f5:	75 0d                	jne    101104 <atol+0x63>
	{
		sign = -1;
  1010f7:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
		str++;
  1010fe:	83 45 08 01          	addl   $0x1,0x8(%ebp)
	}

	while(*str != '\0')
  101102:	eb 4f                	jmp    101153 <atol+0xb2>
  101104:	eb 4d                	jmp    101153 <atol+0xb2>
	{
		if( (*str - '0') < 0 || (*str - '0') > 9 )
  101106:	8b 45 08             	mov    0x8(%ebp),%eax
  101109:	0f b6 00             	movzbl (%eax),%eax
  10110c:	0f be c0             	movsbl %al,%eax
  10110f:	83 e8 30             	sub    $0x30,%eax
  101112:	85 c0                	test   %eax,%eax
  101114:	78 11                	js     101127 <atol+0x86>
  101116:	8b 45 08             	mov    0x8(%ebp),%eax
  101119:	0f b6 00             	movzbl (%eax),%eax
  10111c:	0f be c0             	movsbl %al,%eax
  10111f:	83 e8 30             	sub    $0x30,%eax
  101122:	83 f8 09             	cmp    $0x9,%eax
  101125:	7e 09                	jle    101130 <atol+0x8f>
		{
			return (r * sign);
  101127:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10112a:	0f af 45 f8          	imul   -0x8(%ebp),%eax
  10112e:	eb 34                	jmp    101164 <atol+0xc3>
		}
		else
		{
			r = r * 10 + (*str - '0');
  101130:	8b 55 fc             	mov    -0x4(%ebp),%edx
  101133:	89 d0                	mov    %edx,%eax
  101135:	c1 e0 02             	shl    $0x2,%eax
  101138:	01 d0                	add    %edx,%eax
  10113a:	01 c0                	add    %eax,%eax
  10113c:	89 c2                	mov    %eax,%edx
  10113e:	8b 45 08             	mov    0x8(%ebp),%eax
  101141:	0f b6 00             	movzbl (%eax),%eax
  101144:	0f be c0             	movsbl %al,%eax
  101147:	83 e8 30             	sub    $0x30,%eax
  10114a:	01 d0                	add    %edx,%eax
  10114c:	89 45 fc             	mov    %eax,-0x4(%ebp)
		}

		str++;
  10114f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
	{
		sign = -1;
		str++;
	}

	while(*str != '\0')
  101153:	8b 45 08             	mov    0x8(%ebp),%eax
  101156:	0f b6 00             	movzbl (%eax),%eax
  101159:	84 c0                	test   %al,%al
  10115b:	75 a9                	jne    101106 <atol+0x65>
		}

		str++;
	}

	return (r * sign);
  10115d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101160:	0f af 45 f8          	imul   -0x8(%ebp),%eax
}
  101164:	c9                   	leave  
  101165:	c3                   	ret    

00101166 <atoll>:

long long int atoll( const char *str )
{
  101166:	55                   	push   %ebp
  101167:	89 e5                	mov    %esp,%ebp
  101169:	53                   	push   %ebx
  10116a:	83 ec 14             	sub    $0x14,%esp
	long long int r = 0;
  10116d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  101174:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	
	long long int sign = 1;
  10117b:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
  101182:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	
	while( *str == ' ' || *str == '\t' || *str == '\r' || *str == '\n' || *str == '\v' )
  101189:	eb 04                	jmp    10118f <atoll+0x29>
	{
		str++;
  10118b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
{
	long long int r = 0;
	
	long long int sign = 1;
	
	while( *str == ' ' || *str == '\t' || *str == '\r' || *str == '\n' || *str == '\v' )
  10118f:	8b 45 08             	mov    0x8(%ebp),%eax
  101192:	0f b6 00             	movzbl (%eax),%eax
  101195:	3c 20                	cmp    $0x20,%al
  101197:	74 f2                	je     10118b <atoll+0x25>
  101199:	8b 45 08             	mov    0x8(%ebp),%eax
  10119c:	0f b6 00             	movzbl (%eax),%eax
  10119f:	3c 09                	cmp    $0x9,%al
  1011a1:	74 e8                	je     10118b <atoll+0x25>
  1011a3:	8b 45 08             	mov    0x8(%ebp),%eax
  1011a6:	0f b6 00             	movzbl (%eax),%eax
  1011a9:	3c 0d                	cmp    $0xd,%al
  1011ab:	74 de                	je     10118b <atoll+0x25>
  1011ad:	8b 45 08             	mov    0x8(%ebp),%eax
  1011b0:	0f b6 00             	movzbl (%eax),%eax
  1011b3:	3c 0a                	cmp    $0xa,%al
  1011b5:	74 d4                	je     10118b <atoll+0x25>
  1011b7:	8b 45 08             	mov    0x8(%ebp),%eax
  1011ba:	0f b6 00             	movzbl (%eax),%eax
  1011bd:	3c 0b                	cmp    $0xb,%al
  1011bf:	74 ca                	je     10118b <atoll+0x25>
	{
		str++;
	}

	if(*str == '-')
  1011c1:	8b 45 08             	mov    0x8(%ebp),%eax
  1011c4:	0f b6 00             	movzbl (%eax),%eax
  1011c7:	3c 2d                	cmp    $0x2d,%al
  1011c9:	75 14                	jne    1011df <atoll+0x79>
	{
		sign = -1;
  1011cb:	c7 45 e8 ff ff ff ff 	movl   $0xffffffff,-0x18(%ebp)
  1011d2:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
		str++;
  1011d9:	83 45 08 01          	addl   $0x1,0x8(%ebp)
	}

	while(*str != '\0')
  1011dd:	eb 7c                	jmp    10125b <atoll+0xf5>
  1011df:	eb 7a                	jmp    10125b <atoll+0xf5>
	{
		if( (*str - '0') < 0 || (*str - '0') > 9 )
  1011e1:	8b 45 08             	mov    0x8(%ebp),%eax
  1011e4:	0f b6 00             	movzbl (%eax),%eax
  1011e7:	0f be c0             	movsbl %al,%eax
  1011ea:	83 e8 30             	sub    $0x30,%eax
  1011ed:	85 c0                	test   %eax,%eax
  1011ef:	78 11                	js     101202 <atoll+0x9c>
  1011f1:	8b 45 08             	mov    0x8(%ebp),%eax
  1011f4:	0f b6 00             	movzbl (%eax),%eax
  1011f7:	0f be c0             	movsbl %al,%eax
  1011fa:	83 e8 30             	sub    $0x30,%eax
  1011fd:	83 f8 09             	cmp    $0x9,%eax
  101200:	7e 1f                	jle    101221 <atoll+0xbb>
		{
			return (r * sign);
  101202:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101205:	0f af 45 e8          	imul   -0x18(%ebp),%eax
  101209:	89 c2                	mov    %eax,%edx
  10120b:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10120e:	0f af 45 f0          	imul   -0x10(%ebp),%eax
  101212:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  101215:	8b 45 e8             	mov    -0x18(%ebp),%eax
  101218:	f7 65 f0             	mull   -0x10(%ebp)
  10121b:	01 d1                	add    %edx,%ecx
  10121d:	89 ca                	mov    %ecx,%edx
  10121f:	eb 65                	jmp    101286 <atoll+0x120>
		}
		else
		{
			r = r * 10 + (*str - '0');
  101221:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101224:	6b d0 0a             	imul   $0xa,%eax,%edx
  101227:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10122a:	6b c0 00             	imul   $0x0,%eax,%eax
  10122d:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  101230:	b8 0a 00 00 00       	mov    $0xa,%eax
  101235:	f7 65 f0             	mull   -0x10(%ebp)
  101238:	01 d1                	add    %edx,%ecx
  10123a:	89 ca                	mov    %ecx,%edx
  10123c:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10123f:	0f b6 09             	movzbl (%ecx),%ecx
  101242:	0f be c9             	movsbl %cl,%ecx
  101245:	83 e9 30             	sub    $0x30,%ecx
  101248:	89 cb                	mov    %ecx,%ebx
  10124a:	c1 fb 1f             	sar    $0x1f,%ebx
  10124d:	01 c8                	add    %ecx,%eax
  10124f:	11 da                	adc    %ebx,%edx
  101251:	89 45 f0             	mov    %eax,-0x10(%ebp)
  101254:	89 55 f4             	mov    %edx,-0xc(%ebp)
		}

		str++;
  101257:	83 45 08 01          	addl   $0x1,0x8(%ebp)
	{
		sign = -1;
		str++;
	}

	while(*str != '\0')
  10125b:	8b 45 08             	mov    0x8(%ebp),%eax
  10125e:	0f b6 00             	movzbl (%eax),%eax
  101261:	84 c0                	test   %al,%al
  101263:	0f 85 78 ff ff ff    	jne    1011e1 <atoll+0x7b>
		}

		str++;
	}

	return (r * sign);
  101269:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10126c:	0f af 45 e8          	imul   -0x18(%ebp),%eax
  101270:	89 c2                	mov    %eax,%edx
  101272:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101275:	0f af 45 f0          	imul   -0x10(%ebp),%eax
  101279:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  10127c:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10127f:	f7 65 f0             	mull   -0x10(%ebp)
  101282:	01 d1                	add    %edx,%ecx
  101284:	89 ca                	mov    %ecx,%edx
}
  101286:	83 c4 14             	add    $0x14,%esp
  101289:	5b                   	pop    %ebx
  10128a:	5d                   	pop    %ebp
  10128b:	c3                   	ret    

0010128c <rand>:

static unsigned long ran = 1;

int rand()
{
  10128c:	55                   	push   %ebp
  10128d:	89 e5                	mov    %esp,%ebp
	ran = ran * 135797531 + 123456;
  10128f:	a1 08 20 10 00       	mov    0x102008,%eax
  101294:	69 c0 1b 1b 18 08    	imul   $0x8181b1b,%eax,%eax
  10129a:	05 40 e2 01 00       	add    $0x1e240,%eax
  10129f:	a3 08 20 10 00       	mov    %eax,0x102008

	return (ran % RAND_MAX + 1);
  1012a4:	8b 0d 08 20 10 00    	mov    0x102008,%ecx
  1012aa:	ba 05 00 02 00       	mov    $0x20005,%edx
  1012af:	89 c8                	mov    %ecx,%eax
  1012b1:	f7 e2                	mul    %edx
  1012b3:	89 c8                	mov    %ecx,%eax
  1012b5:	29 d0                	sub    %edx,%eax
  1012b7:	d1 e8                	shr    %eax
  1012b9:	01 d0                	add    %edx,%eax
  1012bb:	c1 e8 0e             	shr    $0xe,%eax
  1012be:	89 c2                	mov    %eax,%edx
  1012c0:	89 d0                	mov    %edx,%eax
  1012c2:	c1 e0 0f             	shl    $0xf,%eax
  1012c5:	29 d0                	sub    %edx,%eax
  1012c7:	29 c1                	sub    %eax,%ecx
  1012c9:	89 ca                	mov    %ecx,%edx
  1012cb:	8d 42 01             	lea    0x1(%edx),%eax
}
  1012ce:	5d                   	pop    %ebp
  1012cf:	c3                   	ret    

001012d0 <srand>:

void srand( unsigned int seed )
{
  1012d0:	55                   	push   %ebp
  1012d1:	89 e5                	mov    %esp,%ebp
	ran = seed;
  1012d3:	8b 45 08             	mov    0x8(%ebp),%eax
  1012d6:	a3 08 20 10 00       	mov    %eax,0x102008
}
  1012db:	5d                   	pop    %ebp
  1012dc:	c3                   	ret    

001012dd <abs>:

int abs( int n )
{
  1012dd:	55                   	push   %ebp
  1012de:	89 e5                	mov    %esp,%ebp
	if(n > 0)
  1012e0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  1012e4:	7e 05                	jle    1012eb <abs+0xe>
	{
		return n;
  1012e6:	8b 45 08             	mov    0x8(%ebp),%eax
  1012e9:	eb 05                	jmp    1012f0 <abs+0x13>
	}
	else
	{
		return (n * (-1));
  1012eb:	8b 45 08             	mov    0x8(%ebp),%eax
  1012ee:	f7 d8                	neg    %eax
	}
}
  1012f0:	5d                   	pop    %ebp
  1012f1:	c3                   	ret    

001012f2 <div>:

div_t div( int numer, int denom )
{
  1012f2:	55                   	push   %ebp
  1012f3:	89 e5                	mov    %esp,%ebp
  1012f5:	83 ec 10             	sub    $0x10,%esp
	div_t r;

	r.quot = numer / denom;
  1012f8:	8b 45 0c             	mov    0xc(%ebp),%eax
  1012fb:	99                   	cltd   
  1012fc:	f7 7d 10             	idivl  0x10(%ebp)
  1012ff:	89 45 f8             	mov    %eax,-0x8(%ebp)
	r.rem  = numer % denom;
  101302:	8b 45 0c             	mov    0xc(%ebp),%eax
  101305:	99                   	cltd   
  101306:	f7 7d 10             	idivl  0x10(%ebp)
  101309:	89 d0                	mov    %edx,%eax
  10130b:	89 45 fc             	mov    %eax,-0x4(%ebp)
	
	return r;
  10130e:	8b 4d 08             	mov    0x8(%ebp),%ecx
  101311:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101314:	8b 55 fc             	mov    -0x4(%ebp),%edx
  101317:	89 01                	mov    %eax,(%ecx)
  101319:	89 51 04             	mov    %edx,0x4(%ecx)
}
  10131c:	8b 45 08             	mov    0x8(%ebp),%eax
  10131f:	c9                   	leave  
  101320:	c2 04 00             	ret    $0x4

00101323 <labs>:

long int labs( long int n )
{
  101323:	55                   	push   %ebp
  101324:	89 e5                	mov    %esp,%ebp
	if(n > 0)
  101326:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  10132a:	7e 05                	jle    101331 <labs+0xe>
	{
		return n;
  10132c:	8b 45 08             	mov    0x8(%ebp),%eax
  10132f:	eb 05                	jmp    101336 <labs+0x13>
	}
	else
	{
		return (n * (-1));
  101331:	8b 45 08             	mov    0x8(%ebp),%eax
  101334:	f7 d8                	neg    %eax
	}
}
  101336:	5d                   	pop    %ebp
  101337:	c3                   	ret    

00101338 <ldiv>:

ldiv_t ldiv( long int numer, long int denom )
{
  101338:	55                   	push   %ebp
  101339:	89 e5                	mov    %esp,%ebp
  10133b:	83 ec 10             	sub    $0x10,%esp
	ldiv_t r;

	r.quot = numer / denom;
  10133e:	8b 45 0c             	mov    0xc(%ebp),%eax
  101341:	99                   	cltd   
  101342:	f7 7d 10             	idivl  0x10(%ebp)
  101345:	89 45 f8             	mov    %eax,-0x8(%ebp)
	r.rem  = numer % denom;
  101348:	8b 45 0c             	mov    0xc(%ebp),%eax
  10134b:	99                   	cltd   
  10134c:	f7 7d 10             	idivl  0x10(%ebp)
  10134f:	89 d0                	mov    %edx,%eax
  101351:	89 45 fc             	mov    %eax,-0x4(%ebp)
	
	return r;
  101354:	8b 4d 08             	mov    0x8(%ebp),%ecx
  101357:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10135a:	8b 55 fc             	mov    -0x4(%ebp),%edx
  10135d:	89 01                	mov    %eax,(%ecx)
  10135f:	89 51 04             	mov    %edx,0x4(%ecx)
}
  101362:	8b 45 08             	mov    0x8(%ebp),%eax
  101365:	c9                   	leave  
  101366:	c2 04 00             	ret    $0x4

00101369 <llabs>:

long long int llabs (long long int n)
{
  101369:	55                   	push   %ebp
  10136a:	89 e5                	mov    %esp,%ebp
  10136c:	83 ec 08             	sub    $0x8,%esp
  10136f:	8b 45 08             	mov    0x8(%ebp),%eax
  101372:	89 45 f8             	mov    %eax,-0x8(%ebp)
  101375:	8b 45 0c             	mov    0xc(%ebp),%eax
  101378:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if(n > 0)
  10137b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
  10137f:	78 14                	js     101395 <llabs+0x2c>
  101381:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
  101385:	7f 06                	jg     10138d <llabs+0x24>
  101387:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
  10138b:	76 08                	jbe    101395 <llabs+0x2c>
	{
		return n;
  10138d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101390:	8b 55 fc             	mov    -0x4(%ebp),%edx
  101393:	eb 0d                	jmp    1013a2 <llabs+0x39>
	}
	else
	{
		return (n * (-1));
  101395:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101398:	8b 55 fc             	mov    -0x4(%ebp),%edx
  10139b:	f7 d8                	neg    %eax
  10139d:	83 d2 00             	adc    $0x0,%edx
  1013a0:	f7 da                	neg    %edx
	}
}
  1013a2:	c9                   	leave  
  1013a3:	c3                   	ret    

001013a4 <unixtime>:
	Aus WIKIPEDIA Die freie Enzyklopädie

	http://de.wikipedia.org/wiki/Unixzeit#Beispiel-Implementierung
*/
time_t unixtime( int year, int month, int day, int hour, int minute, int seconds )
{
  1013a4:	55                   	push   %ebp
  1013a5:	89 e5                	mov    %esp,%ebp
  1013a7:	53                   	push   %ebx
  1013a8:	83 ec 14             	sub    $0x14,%esp
	static const short yday[12] = { 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334};
 
	time_t unix_time;
	long years = year - 1970 ;
  1013ab:	8b 45 08             	mov    0x8(%ebp),%eax
  1013ae:	2d b2 07 00 00       	sub    $0x7b2,%eax
  1013b3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int leap_year = ((year - 1) - 1968) / 4 - ((year - 1) - 1900) / 100 + ((year - 1) - 1600) / 400;
  1013b6:	8b 45 08             	mov    0x8(%ebp),%eax
  1013b9:	2d b1 07 00 00       	sub    $0x7b1,%eax
  1013be:	8d 50 03             	lea    0x3(%eax),%edx
  1013c1:	85 c0                	test   %eax,%eax
  1013c3:	0f 48 c2             	cmovs  %edx,%eax
  1013c6:	c1 f8 02             	sar    $0x2,%eax
  1013c9:	89 c3                	mov    %eax,%ebx
  1013cb:	8b 45 08             	mov    0x8(%ebp),%eax
  1013ce:	8d 88 93 f8 ff ff    	lea    -0x76d(%eax),%ecx
  1013d4:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
  1013d9:	89 c8                	mov    %ecx,%eax
  1013db:	f7 ea                	imul   %edx
  1013dd:	c1 fa 05             	sar    $0x5,%edx
  1013e0:	89 c8                	mov    %ecx,%eax
  1013e2:	c1 f8 1f             	sar    $0x1f,%eax
  1013e5:	29 c2                	sub    %eax,%edx
  1013e7:	89 d0                	mov    %edx,%eax
  1013e9:	29 c3                	sub    %eax,%ebx
  1013eb:	8b 45 08             	mov    0x8(%ebp),%eax
  1013ee:	8d 88 bf f9 ff ff    	lea    -0x641(%eax),%ecx
  1013f4:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
  1013f9:	89 c8                	mov    %ecx,%eax
  1013fb:	f7 ea                	imul   %edx
  1013fd:	c1 fa 07             	sar    $0x7,%edx
  101400:	89 c8                	mov    %ecx,%eax
  101402:	c1 f8 1f             	sar    $0x1f,%eax
  101405:	29 c2                	sub    %eax,%edx
  101407:	89 d0                	mov    %edx,%eax
  101409:	01 d8                	add    %ebx,%eax
  10140b:	89 45 e8             	mov    %eax,-0x18(%ebp)
 
	unix_time = seconds + 60 * minute + 60 * 60 * hour + (yday[month - 1] + day - 1) * 60 * 60 * 24 + (years * 365 + leap_year) * 60 * 60 *24;
  10140e:	8b 45 18             	mov    0x18(%ebp),%eax
  101411:	c1 e0 02             	shl    $0x2,%eax
  101414:	89 c2                	mov    %eax,%edx
  101416:	c1 e2 04             	shl    $0x4,%edx
  101419:	29 c2                	sub    %eax,%edx
  10141b:	8b 45 1c             	mov    0x1c(%ebp),%eax
  10141e:	01 c2                	add    %eax,%edx
  101420:	8b 45 14             	mov    0x14(%ebp),%eax
  101423:	69 c0 10 0e 00 00    	imul   $0xe10,%eax,%eax
  101429:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  10142c:	8b 45 0c             	mov    0xc(%ebp),%eax
  10142f:	83 e8 01             	sub    $0x1,%eax
  101432:	0f b7 84 00 1e 32 10 	movzwl 0x10321e(%eax,%eax,1),%eax
  101439:	00 
  10143a:	0f bf d0             	movswl %ax,%edx
  10143d:	8b 45 10             	mov    0x10(%ebp),%eax
  101440:	01 d0                	add    %edx,%eax
  101442:	83 e8 01             	sub    $0x1,%eax
  101445:	69 c0 80 51 01 00    	imul   $0x15180,%eax,%eax
  10144b:	01 c1                	add    %eax,%ecx
  10144d:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101450:	69 d0 6d 01 00 00    	imul   $0x16d,%eax,%edx
  101456:	8b 45 e8             	mov    -0x18(%ebp),%eax
  101459:	01 d0                	add    %edx,%eax
  10145b:	69 c0 80 51 01 00    	imul   $0x15180,%eax,%eax
  101461:	01 c8                	add    %ecx,%eax
  101463:	99                   	cltd   
  101464:	89 45 f0             	mov    %eax,-0x10(%ebp)
  101467:	89 55 f4             	mov    %edx,-0xc(%ebp)
 
  	if ( (month > 2) && (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)) )
  10146a:	83 7d 0c 02          	cmpl   $0x2,0xc(%ebp)
  10146e:	7e 5e                	jle    1014ce <unixtime+0x12a>
  101470:	8b 45 08             	mov    0x8(%ebp),%eax
  101473:	83 e0 03             	and    $0x3,%eax
  101476:	85 c0                	test   %eax,%eax
  101478:	75 54                	jne    1014ce <unixtime+0x12a>
  10147a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10147d:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
  101482:	89 c8                	mov    %ecx,%eax
  101484:	f7 ea                	imul   %edx
  101486:	c1 fa 05             	sar    $0x5,%edx
  101489:	89 c8                	mov    %ecx,%eax
  10148b:	c1 f8 1f             	sar    $0x1f,%eax
  10148e:	29 c2                	sub    %eax,%edx
  101490:	89 d0                	mov    %edx,%eax
  101492:	6b c0 64             	imul   $0x64,%eax,%eax
  101495:	29 c1                	sub    %eax,%ecx
  101497:	89 c8                	mov    %ecx,%eax
  101499:	85 c0                	test   %eax,%eax
  10149b:	75 26                	jne    1014c3 <unixtime+0x11f>
  10149d:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1014a0:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
  1014a5:	89 c8                	mov    %ecx,%eax
  1014a7:	f7 ea                	imul   %edx
  1014a9:	c1 fa 07             	sar    $0x7,%edx
  1014ac:	89 c8                	mov    %ecx,%eax
  1014ae:	c1 f8 1f             	sar    $0x1f,%eax
  1014b1:	29 c2                	sub    %eax,%edx
  1014b3:	89 d0                	mov    %edx,%eax
  1014b5:	69 c0 90 01 00 00    	imul   $0x190,%eax,%eax
  1014bb:	29 c1                	sub    %eax,%ecx
  1014bd:	89 c8                	mov    %ecx,%eax
  1014bf:	85 c0                	test   %eax,%eax
  1014c1:	75 0b                	jne    1014ce <unixtime+0x12a>
	{
    		unix_time += 60 * 60 * 24; 
  1014c3:	81 45 f0 80 51 01 00 	addl   $0x15180,-0x10(%ebp)
  1014ca:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
	}

	return unix_time;
  1014ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1014d1:	8b 55 f4             	mov    -0xc(%ebp),%edx
} 
  1014d4:	83 c4 14             	add    $0x14,%esp
  1014d7:	5b                   	pop    %ebx
  1014d8:	5d                   	pop    %ebp
  1014d9:	c3                   	ret    

001014da <difftime>:


clock_t clock();

double difftime( time_t end, time_t beg )
{
  1014da:	55                   	push   %ebp
  1014db:	89 e5                	mov    %esp,%ebp
  1014dd:	53                   	push   %ebx
  1014de:	83 ec 24             	sub    $0x24,%esp
  1014e1:	8b 45 08             	mov    0x8(%ebp),%eax
  1014e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1014e7:	8b 45 0c             	mov    0xc(%ebp),%eax
  1014ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1014ed:	8b 45 10             	mov    0x10(%ebp),%eax
  1014f0:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1014f3:	8b 45 14             	mov    0x14(%ebp),%eax
  1014f6:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return (double)(end - beg);
  1014f9:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  1014fc:	8b 5d ec             	mov    -0x14(%ebp),%ebx
  1014ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101502:	8b 55 f4             	mov    -0xc(%ebp),%edx
  101505:	29 c8                	sub    %ecx,%eax
  101507:	19 da                	sbb    %ebx,%edx
  101509:	89 45 d8             	mov    %eax,-0x28(%ebp)
  10150c:	89 55 dc             	mov    %edx,-0x24(%ebp)
  10150f:	df 6d d8             	fildll -0x28(%ebp)
  101512:	dd 5d e0             	fstpl  -0x20(%ebp)
  101515:	dd 45 e0             	fldl   -0x20(%ebp)
}
  101518:	83 c4 24             	add    $0x24,%esp
  10151b:	5b                   	pop    %ebx
  10151c:	5d                   	pop    %ebp
  10151d:	c3                   	ret    

0010151e <time>:

time_t mktime( struct tm *timeptr );

time_t time( time_t *timer )
{
  10151e:	55                   	push   %ebp
  10151f:	89 e5                	mov    %esp,%ebp
  101521:	83 ec 10             	sub    $0x10,%esp
	time_t time = 0;
  101524:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
  10152b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

	if(timer != NULL)
  101532:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  101536:	74 0e                	je     101546 <time+0x28>
	{
		*timer = time;
  101538:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10153b:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10153e:	8b 55 fc             	mov    -0x4(%ebp),%edx
  101541:	89 01                	mov    %eax,(%ecx)
  101543:	89 51 04             	mov    %edx,0x4(%ecx)
	}

	return time;
  101546:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101549:	8b 55 fc             	mov    -0x4(%ebp),%edx
}
  10154c:	c9                   	leave  
  10154d:	c3                   	ret    

0010154e <asctime>:


char *asctime( const struct tm *timeptr )
{
  10154e:	55                   	push   %ebp
  10154f:	89 e5                	mov    %esp,%ebp
  101551:	57                   	push   %edi
  101552:	56                   	push   %esi
  101553:	53                   	push   %ebx
  101554:	83 ec 3c             	sub    $0x3c,%esp
	{
    		"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
  	};

  	static char result[26];
  	sprintf(result, "%s %s %.2d %.2d:%.2d:%.2d %d\n", wday_name[timeptr->tm_wday], mon_name[timeptr->tm_mon], timeptr->tm_mday, timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec, 1900 + timeptr->tm_year);
  101557:	8b 45 08             	mov    0x8(%ebp),%eax
  10155a:	8b 40 14             	mov    0x14(%eax),%eax
  10155d:	05 6c 07 00 00       	add    $0x76c,%eax
  101562:	89 c2                	mov    %eax,%edx
  101564:	8b 45 08             	mov    0x8(%ebp),%eax
  101567:	8b 30                	mov    (%eax),%esi
  101569:	8b 45 08             	mov    0x8(%ebp),%eax
  10156c:	8b 58 04             	mov    0x4(%eax),%ebx
  10156f:	8b 45 08             	mov    0x8(%ebp),%eax
  101572:	8b 48 08             	mov    0x8(%eax),%ecx
  101575:	8b 45 08             	mov    0x8(%ebp),%eax
  101578:	8b 40 0c             	mov    0xc(%eax),%eax
  10157b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10157e:	8b 45 08             	mov    0x8(%ebp),%eax
  101581:	8b 40 10             	mov    0x10(%eax),%eax
  101584:	c1 e0 02             	shl    $0x2,%eax
  101587:	8d b8 40 32 10 00    	lea    0x103240(%eax),%edi
  10158d:	8b 45 08             	mov    0x8(%ebp),%eax
  101590:	8b 40 18             	mov    0x18(%eax),%eax
  101593:	c1 e0 02             	shl    $0x2,%eax
  101596:	05 70 32 10 00       	add    $0x103270,%eax
  10159b:	89 54 24 20          	mov    %edx,0x20(%esp)
  10159f:	89 74 24 1c          	mov    %esi,0x1c(%esp)
  1015a3:	89 5c 24 18          	mov    %ebx,0x18(%esp)
  1015a7:	89 4c 24 14          	mov    %ecx,0x14(%esp)
  1015ab:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  1015ae:	89 4c 24 10          	mov    %ecx,0x10(%esp)
  1015b2:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  1015b6:	89 44 24 08          	mov    %eax,0x8(%esp)
  1015ba:	c7 44 24 04 00 32 10 	movl   $0x103200,0x4(%esp)
  1015c1:	00 
  1015c2:	c7 04 24 e0 40 10 00 	movl   $0x1040e0,(%esp)
  1015c9:	e8 24 f4 ff ff       	call   1009f2 <sprintf>
  
	return result;
  1015ce:	b8 e0 40 10 00       	mov    $0x1040e0,%eax
}
  1015d3:	83 c4 3c             	add    $0x3c,%esp
  1015d6:	5b                   	pop    %ebx
  1015d7:	5e                   	pop    %esi
  1015d8:	5f                   	pop    %edi
  1015d9:	5d                   	pop    %ebp
  1015da:	c3                   	ret    

001015db <ctime>:

char *ctime( const time_t *timer )
{
  1015db:	55                   	push   %ebp
  1015dc:	89 e5                	mov    %esp,%ebp
  1015de:	83 ec 18             	sub    $0x18,%esp
	return asctime( localtime(timer) );
  1015e1:	8b 45 08             	mov    0x8(%ebp),%eax
  1015e4:	89 04 24             	mov    %eax,(%esp)
  1015e7:	e8 8b 05 00 00       	call   101b77 <localtime>
  1015ec:	89 04 24             	mov    %eax,(%esp)
  1015ef:	e8 5a ff ff ff       	call   10154e <asctime>
} 
  1015f4:	c9                   	leave  
  1015f5:	c3                   	ret    

001015f6 <gmtime>:

struct tm *gmtime( const time_t	*timer )
{	
  1015f6:	55                   	push   %ebp
  1015f7:	89 e5                	mov    %esp,%ebp
  1015f9:	57                   	push   %edi
  1015fa:	56                   	push   %esi
  1015fb:	53                   	push   %ebx
  1015fc:	83 ec 24             	sub    $0x24,%esp
	static int z[] = {0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4};

	int t = *timer;
  1015ff:	8b 45 08             	mov    0x8(%ebp),%eax
  101602:	8b 50 04             	mov    0x4(%eax),%edx
  101605:	8b 00                	mov    (%eax),%eax
  101607:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	int y, m, d, yd;

	static struct tm time;

	time.tm_sec 	= t % 60; t = t / 60;
  10160a:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  10160d:	ba 89 88 88 88       	mov    $0x88888889,%edx
  101612:	89 c8                	mov    %ecx,%eax
  101614:	f7 ea                	imul   %edx
  101616:	8d 04 0a             	lea    (%edx,%ecx,1),%eax
  101619:	c1 f8 05             	sar    $0x5,%eax
  10161c:	89 c2                	mov    %eax,%edx
  10161e:	89 c8                	mov    %ecx,%eax
  101620:	c1 f8 1f             	sar    $0x1f,%eax
  101623:	29 c2                	sub    %eax,%edx
  101625:	89 d0                	mov    %edx,%eax
  101627:	c1 e0 02             	shl    $0x2,%eax
  10162a:	89 c2                	mov    %eax,%edx
  10162c:	c1 e2 04             	shl    $0x4,%edx
  10162f:	29 c2                	sub    %eax,%edx
  101631:	89 c8                	mov    %ecx,%eax
  101633:	29 d0                	sub    %edx,%eax
  101635:	a3 00 41 10 00       	mov    %eax,0x104100
  10163a:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  10163d:	ba 89 88 88 88       	mov    $0x88888889,%edx
  101642:	89 c8                	mov    %ecx,%eax
  101644:	f7 ea                	imul   %edx
  101646:	8d 04 0a             	lea    (%edx,%ecx,1),%eax
  101649:	c1 f8 05             	sar    $0x5,%eax
  10164c:	89 c2                	mov    %eax,%edx
  10164e:	89 c8                	mov    %ecx,%eax
  101650:	c1 f8 1f             	sar    $0x1f,%eax
  101653:	29 c2                	sub    %eax,%edx
  101655:	89 d0                	mov    %edx,%eax
  101657:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	time.tm_min 	= t % 60; t = t / 60;
  10165a:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  10165d:	ba 89 88 88 88       	mov    $0x88888889,%edx
  101662:	89 c8                	mov    %ecx,%eax
  101664:	f7 ea                	imul   %edx
  101666:	8d 04 0a             	lea    (%edx,%ecx,1),%eax
  101669:	c1 f8 05             	sar    $0x5,%eax
  10166c:	89 c2                	mov    %eax,%edx
  10166e:	89 c8                	mov    %ecx,%eax
  101670:	c1 f8 1f             	sar    $0x1f,%eax
  101673:	29 c2                	sub    %eax,%edx
  101675:	89 d0                	mov    %edx,%eax
  101677:	c1 e0 02             	shl    $0x2,%eax
  10167a:	89 c2                	mov    %eax,%edx
  10167c:	c1 e2 04             	shl    $0x4,%edx
  10167f:	29 c2                	sub    %eax,%edx
  101681:	89 c8                	mov    %ecx,%eax
  101683:	29 d0                	sub    %edx,%eax
  101685:	a3 04 41 10 00       	mov    %eax,0x104104
  10168a:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  10168d:	ba 89 88 88 88       	mov    $0x88888889,%edx
  101692:	89 c8                	mov    %ecx,%eax
  101694:	f7 ea                	imul   %edx
  101696:	8d 04 0a             	lea    (%edx,%ecx,1),%eax
  101699:	c1 f8 05             	sar    $0x5,%eax
  10169c:	89 c2                	mov    %eax,%edx
  10169e:	89 c8                	mov    %ecx,%eax
  1016a0:	c1 f8 1f             	sar    $0x1f,%eax
  1016a3:	29 c2                	sub    %eax,%edx
  1016a5:	89 d0                	mov    %edx,%eax
  1016a7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	time.tm_hour	= t % 24; t = t / 24;
  1016aa:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  1016ad:	ba ab aa aa 2a       	mov    $0x2aaaaaab,%edx
  1016b2:	89 c8                	mov    %ecx,%eax
  1016b4:	f7 ea                	imul   %edx
  1016b6:	c1 fa 02             	sar    $0x2,%edx
  1016b9:	89 c8                	mov    %ecx,%eax
  1016bb:	c1 f8 1f             	sar    $0x1f,%eax
  1016be:	29 c2                	sub    %eax,%edx
  1016c0:	89 d0                	mov    %edx,%eax
  1016c2:	01 c0                	add    %eax,%eax
  1016c4:	01 d0                	add    %edx,%eax
  1016c6:	c1 e0 03             	shl    $0x3,%eax
  1016c9:	29 c1                	sub    %eax,%ecx
  1016cb:	89 ca                	mov    %ecx,%edx
  1016cd:	89 15 08 41 10 00    	mov    %edx,0x104108
  1016d3:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  1016d6:	ba ab aa aa 2a       	mov    $0x2aaaaaab,%edx
  1016db:	89 c8                	mov    %ecx,%eax
  1016dd:	f7 ea                	imul   %edx
  1016df:	c1 fa 02             	sar    $0x2,%edx
  1016e2:	89 c8                	mov    %ecx,%eax
  1016e4:	c1 f8 1f             	sar    $0x1f,%eax
  1016e7:	29 c2                	sub    %eax,%edx
  1016e9:	89 d0                	mov    %edx,%eax
  1016eb:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	time.tm_yday	= t % 365; t = t / 365;
  1016ee:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  1016f1:	ba b1 f9 8c b3       	mov    $0xb38cf9b1,%edx
  1016f6:	89 c8                	mov    %ecx,%eax
  1016f8:	f7 ea                	imul   %edx
  1016fa:	8d 04 0a             	lea    (%edx,%ecx,1),%eax
  1016fd:	c1 f8 08             	sar    $0x8,%eax
  101700:	89 c2                	mov    %eax,%edx
  101702:	89 c8                	mov    %ecx,%eax
  101704:	c1 f8 1f             	sar    $0x1f,%eax
  101707:	29 c2                	sub    %eax,%edx
  101709:	89 d0                	mov    %edx,%eax
  10170b:	69 c0 6d 01 00 00    	imul   $0x16d,%eax,%eax
  101711:	29 c1                	sub    %eax,%ecx
  101713:	89 c8                	mov    %ecx,%eax
  101715:	a3 1c 41 10 00       	mov    %eax,0x10411c
  10171a:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  10171d:	ba b1 f9 8c b3       	mov    $0xb38cf9b1,%edx
  101722:	89 c8                	mov    %ecx,%eax
  101724:	f7 ea                	imul   %edx
  101726:	8d 04 0a             	lea    (%edx,%ecx,1),%eax
  101729:	c1 f8 08             	sar    $0x8,%eax
  10172c:	89 c2                	mov    %eax,%edx
  10172e:	89 c8                	mov    %ecx,%eax
  101730:	c1 f8 1f             	sar    $0x1f,%eax
  101733:	29 c2                	sub    %eax,%edx
  101735:	89 d0                	mov    %edx,%eax
  101737:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	time.tm_year	= 1970 + t - 1900;
  10173a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10173d:	83 c0 46             	add    $0x46,%eax
  101740:	a3 14 41 10 00       	mov    %eax,0x104114

	y = time.tm_year + 1900;
  101745:	a1 14 41 10 00       	mov    0x104114,%eax
  10174a:	05 6c 07 00 00       	add    $0x76c,%eax
  10174f:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int num_leap_years 	= ( ((y - 1) - 1968) / 4 - ((y - 1) - 1900) / 100 + ((y - 1) - 1600) / 400 );
  101752:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101755:	2d b1 07 00 00       	sub    $0x7b1,%eax
  10175a:	8d 50 03             	lea    0x3(%eax),%edx
  10175d:	85 c0                	test   %eax,%eax
  10175f:	0f 48 c2             	cmovs  %edx,%eax
  101762:	c1 f8 02             	sar    $0x2,%eax
  101765:	89 c3                	mov    %eax,%ebx
  101767:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10176a:	8d 88 93 f8 ff ff    	lea    -0x76d(%eax),%ecx
  101770:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
  101775:	89 c8                	mov    %ecx,%eax
  101777:	f7 ea                	imul   %edx
  101779:	c1 fa 05             	sar    $0x5,%edx
  10177c:	89 c8                	mov    %ecx,%eax
  10177e:	c1 f8 1f             	sar    $0x1f,%eax
  101781:	29 c2                	sub    %eax,%edx
  101783:	89 d0                	mov    %edx,%eax
  101785:	29 c3                	sub    %eax,%ebx
  101787:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10178a:	8d 88 bf f9 ff ff    	lea    -0x641(%eax),%ecx
  101790:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
  101795:	89 c8                	mov    %ecx,%eax
  101797:	f7 ea                	imul   %edx
  101799:	c1 fa 07             	sar    $0x7,%edx
  10179c:	89 c8                	mov    %ecx,%eax
  10179e:	c1 f8 1f             	sar    $0x1f,%eax
  1017a1:	29 c2                	sub    %eax,%edx
  1017a3:	89 d0                	mov    %edx,%eax
  1017a5:	01 d8                	add    %ebx,%eax
  1017a7:	89 45 e0             	mov    %eax,-0x20(%ebp)
	int is_leap_year 	= ( 1 / (1 + y % 4) - 1 / (1 + y % 100) + 1 / (1 + y % 400) );
  1017aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1017ad:	99                   	cltd   
  1017ae:	c1 ea 1e             	shr    $0x1e,%edx
  1017b1:	01 d0                	add    %edx,%eax
  1017b3:	83 e0 03             	and    $0x3,%eax
  1017b6:	29 d0                	sub    %edx,%eax
  1017b8:	8d 70 01             	lea    0x1(%eax),%esi
  1017bb:	b8 01 00 00 00       	mov    $0x1,%eax
  1017c0:	99                   	cltd   
  1017c1:	f7 fe                	idiv   %esi
  1017c3:	89 c3                	mov    %eax,%ebx
  1017c5:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1017c8:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
  1017cd:	89 c8                	mov    %ecx,%eax
  1017cf:	f7 ea                	imul   %edx
  1017d1:	c1 fa 05             	sar    $0x5,%edx
  1017d4:	89 c8                	mov    %ecx,%eax
  1017d6:	c1 f8 1f             	sar    $0x1f,%eax
  1017d9:	29 c2                	sub    %eax,%edx
  1017db:	89 d0                	mov    %edx,%eax
  1017dd:	6b c0 64             	imul   $0x64,%eax,%eax
  1017e0:	29 c1                	sub    %eax,%ecx
  1017e2:	89 c8                	mov    %ecx,%eax
  1017e4:	8d 78 01             	lea    0x1(%eax),%edi
  1017e7:	b8 01 00 00 00       	mov    $0x1,%eax
  1017ec:	99                   	cltd   
  1017ed:	f7 ff                	idiv   %edi
  1017ef:	29 c3                	sub    %eax,%ebx
  1017f1:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  1017f4:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
  1017f9:	89 c8                	mov    %ecx,%eax
  1017fb:	f7 ea                	imul   %edx
  1017fd:	c1 fa 07             	sar    $0x7,%edx
  101800:	89 c8                	mov    %ecx,%eax
  101802:	c1 f8 1f             	sar    $0x1f,%eax
  101805:	29 c2                	sub    %eax,%edx
  101807:	89 d0                	mov    %edx,%eax
  101809:	69 c0 90 01 00 00    	imul   $0x190,%eax,%eax
  10180f:	29 c1                	sub    %eax,%ecx
  101811:	89 c8                	mov    %ecx,%eax
  101813:	8d 70 01             	lea    0x1(%eax),%esi
  101816:	b8 01 00 00 00       	mov    $0x1,%eax
  10181b:	99                   	cltd   
  10181c:	f7 fe                	idiv   %esi
  10181e:	01 d8                	add    %ebx,%eax
  101820:	89 45 dc             	mov    %eax,-0x24(%ebp)

	time.tm_yday	= time.tm_yday - num_leap_years;
  101823:	a1 1c 41 10 00       	mov    0x10411c,%eax
  101828:	2b 45 e0             	sub    -0x20(%ebp),%eax
  10182b:	a3 1c 41 10 00       	mov    %eax,0x10411c

	yd = time.tm_yday + 1;
  101830:	a1 1c 41 10 00       	mov    0x10411c,%eax
  101835:	83 c0 01             	add    $0x1,%eax
  101838:	89 45 d8             	mov    %eax,-0x28(%ebp)
	time.tm_mon	= ( yd + 30 + (yd + is_leap_year + 400) / 460 * (2 - is_leap_year) ) * 16 / 489 - 1;
  10183b:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10183e:	8d 58 1e             	lea    0x1e(%eax),%ebx
  101841:	8b 45 dc             	mov    -0x24(%ebp),%eax
  101844:	8b 55 d8             	mov    -0x28(%ebp),%edx
  101847:	01 d0                	add    %edx,%eax
  101849:	8d 88 90 01 00 00    	lea    0x190(%eax),%ecx
  10184f:	ba b7 1a 3c 47       	mov    $0x473c1ab7,%edx
  101854:	89 c8                	mov    %ecx,%eax
  101856:	f7 ea                	imul   %edx
  101858:	c1 fa 07             	sar    $0x7,%edx
  10185b:	89 c8                	mov    %ecx,%eax
  10185d:	c1 f8 1f             	sar    $0x1f,%eax
  101860:	29 c2                	sub    %eax,%edx
  101862:	b8 02 00 00 00       	mov    $0x2,%eax
  101867:	2b 45 dc             	sub    -0x24(%ebp),%eax
  10186a:	0f af c2             	imul   %edx,%eax
  10186d:	01 d8                	add    %ebx,%eax
  10186f:	c1 e0 04             	shl    $0x4,%eax
  101872:	89 c1                	mov    %eax,%ecx
  101874:	ba 35 3c 05 86       	mov    $0x86053c35,%edx
  101879:	89 c8                	mov    %ecx,%eax
  10187b:	f7 ea                	imul   %edx
  10187d:	8d 04 0a             	lea    (%edx,%ecx,1),%eax
  101880:	c1 f8 08             	sar    $0x8,%eax
  101883:	89 c2                	mov    %eax,%edx
  101885:	89 c8                	mov    %ecx,%eax
  101887:	c1 f8 1f             	sar    $0x1f,%eax
  10188a:	29 c2                	sub    %eax,%edx
  10188c:	89 d0                	mov    %edx,%eax
  10188e:	83 e8 01             	sub    $0x1,%eax
  101891:	a3 10 41 10 00       	mov    %eax,0x104110
	
	m = time.tm_mon + 1;
  101896:	a1 10 41 10 00       	mov    0x104110,%eax
  10189b:	83 c0 01             	add    $0x1,%eax
  10189e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	time.tm_mday	= yd + 30 - 489 * m / 16 + (7 + m) / 10 * (2 - is_leap_year) ;
  1018a1:	8b 45 d8             	mov    -0x28(%ebp),%eax
  1018a4:	8d 48 1e             	lea    0x1e(%eax),%ecx
  1018a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1018aa:	69 c0 e9 01 00 00    	imul   $0x1e9,%eax,%eax
  1018b0:	8d 50 0f             	lea    0xf(%eax),%edx
  1018b3:	85 c0                	test   %eax,%eax
  1018b5:	0f 48 c2             	cmovs  %edx,%eax
  1018b8:	c1 f8 04             	sar    $0x4,%eax
  1018bb:	89 cb                	mov    %ecx,%ebx
  1018bd:	29 c3                	sub    %eax,%ebx
  1018bf:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1018c2:	8d 48 07             	lea    0x7(%eax),%ecx
  1018c5:	ba 67 66 66 66       	mov    $0x66666667,%edx
  1018ca:	89 c8                	mov    %ecx,%eax
  1018cc:	f7 ea                	imul   %edx
  1018ce:	c1 fa 02             	sar    $0x2,%edx
  1018d1:	89 c8                	mov    %ecx,%eax
  1018d3:	c1 f8 1f             	sar    $0x1f,%eax
  1018d6:	29 c2                	sub    %eax,%edx
  1018d8:	b8 02 00 00 00       	mov    $0x2,%eax
  1018dd:	2b 45 dc             	sub    -0x24(%ebp),%eax
  1018e0:	0f af c2             	imul   %edx,%eax
  1018e3:	01 d8                	add    %ebx,%eax
  1018e5:	a3 0c 41 10 00       	mov    %eax,0x10410c

	if(time.tm_mon < 0)
  1018ea:	a1 10 41 10 00       	mov    0x104110,%eax
  1018ef:	85 c0                	test   %eax,%eax
  1018f1:	0f 89 73 01 00 00    	jns    101a6a <gmtime+0x474>
	{
		time.tm_year -= 1;
  1018f7:	a1 14 41 10 00       	mov    0x104114,%eax
  1018fc:	83 e8 01             	sub    $0x1,%eax
  1018ff:	a3 14 41 10 00       	mov    %eax,0x104114

		y = time.tm_year + 1900;
  101904:	a1 14 41 10 00       	mov    0x104114,%eax
  101909:	05 6c 07 00 00       	add    $0x76c,%eax
  10190e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		is_leap_year 	= ( 1 / (1 + y % 4) - 1 / (1 + y % 100) + 1 / (1 + y % 400) );
  101911:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101914:	99                   	cltd   
  101915:	c1 ea 1e             	shr    $0x1e,%edx
  101918:	01 d0                	add    %edx,%eax
  10191a:	83 e0 03             	and    $0x3,%eax
  10191d:	29 d0                	sub    %edx,%eax
  10191f:	8d 78 01             	lea    0x1(%eax),%edi
  101922:	b8 01 00 00 00       	mov    $0x1,%eax
  101927:	99                   	cltd   
  101928:	f7 ff                	idiv   %edi
  10192a:	89 c3                	mov    %eax,%ebx
  10192c:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10192f:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
  101934:	89 c8                	mov    %ecx,%eax
  101936:	f7 ea                	imul   %edx
  101938:	c1 fa 05             	sar    $0x5,%edx
  10193b:	89 c8                	mov    %ecx,%eax
  10193d:	c1 f8 1f             	sar    $0x1f,%eax
  101940:	29 c2                	sub    %eax,%edx
  101942:	89 d0                	mov    %edx,%eax
  101944:	6b c0 64             	imul   $0x64,%eax,%eax
  101947:	29 c1                	sub    %eax,%ecx
  101949:	89 c8                	mov    %ecx,%eax
  10194b:	8d 70 01             	lea    0x1(%eax),%esi
  10194e:	b8 01 00 00 00       	mov    $0x1,%eax
  101953:	99                   	cltd   
  101954:	f7 fe                	idiv   %esi
  101956:	29 c3                	sub    %eax,%ebx
  101958:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  10195b:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
  101960:	89 c8                	mov    %ecx,%eax
  101962:	f7 ea                	imul   %edx
  101964:	c1 fa 07             	sar    $0x7,%edx
  101967:	89 c8                	mov    %ecx,%eax
  101969:	c1 f8 1f             	sar    $0x1f,%eax
  10196c:	29 c2                	sub    %eax,%edx
  10196e:	89 d0                	mov    %edx,%eax
  101970:	69 c0 90 01 00 00    	imul   $0x190,%eax,%eax
  101976:	29 c1                	sub    %eax,%ecx
  101978:	89 c8                	mov    %ecx,%eax
  10197a:	8d 78 01             	lea    0x1(%eax),%edi
  10197d:	b8 01 00 00 00       	mov    $0x1,%eax
  101982:	99                   	cltd   
  101983:	f7 ff                	idiv   %edi
  101985:	01 d8                	add    %ebx,%eax
  101987:	89 45 dc             	mov    %eax,-0x24(%ebp)
		if(is_leap_year)
  10198a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
  10198e:	74 11                	je     1019a1 <gmtime+0x3ab>
		{
			time.tm_yday = 366 + time.tm_yday;
  101990:	a1 1c 41 10 00       	mov    0x10411c,%eax
  101995:	05 6e 01 00 00       	add    $0x16e,%eax
  10199a:	a3 1c 41 10 00       	mov    %eax,0x10411c
  10199f:	eb 0f                	jmp    1019b0 <gmtime+0x3ba>
		}
		else
		{
			time.tm_yday = 365 + time.tm_yday;
  1019a1:	a1 1c 41 10 00       	mov    0x10411c,%eax
  1019a6:	05 6d 01 00 00       	add    $0x16d,%eax
  1019ab:	a3 1c 41 10 00       	mov    %eax,0x10411c
		}

		yd = time.tm_yday + 1;
  1019b0:	a1 1c 41 10 00       	mov    0x10411c,%eax
  1019b5:	83 c0 01             	add    $0x1,%eax
  1019b8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		time.tm_mon	= ( yd + 30 + (yd + is_leap_year + 400) / 460 * (2 - is_leap_year) ) * 16 / 489 - 1;
  1019bb:	8b 45 d8             	mov    -0x28(%ebp),%eax
  1019be:	8d 58 1e             	lea    0x1e(%eax),%ebx
  1019c1:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1019c4:	8b 55 d8             	mov    -0x28(%ebp),%edx
  1019c7:	01 d0                	add    %edx,%eax
  1019c9:	8d 88 90 01 00 00    	lea    0x190(%eax),%ecx
  1019cf:	ba b7 1a 3c 47       	mov    $0x473c1ab7,%edx
  1019d4:	89 c8                	mov    %ecx,%eax
  1019d6:	f7 ea                	imul   %edx
  1019d8:	c1 fa 07             	sar    $0x7,%edx
  1019db:	89 c8                	mov    %ecx,%eax
  1019dd:	c1 f8 1f             	sar    $0x1f,%eax
  1019e0:	29 c2                	sub    %eax,%edx
  1019e2:	b8 02 00 00 00       	mov    $0x2,%eax
  1019e7:	2b 45 dc             	sub    -0x24(%ebp),%eax
  1019ea:	0f af c2             	imul   %edx,%eax
  1019ed:	01 d8                	add    %ebx,%eax
  1019ef:	c1 e0 04             	shl    $0x4,%eax
  1019f2:	89 c1                	mov    %eax,%ecx
  1019f4:	ba 35 3c 05 86       	mov    $0x86053c35,%edx
  1019f9:	89 c8                	mov    %ecx,%eax
  1019fb:	f7 ea                	imul   %edx
  1019fd:	8d 04 0a             	lea    (%edx,%ecx,1),%eax
  101a00:	c1 f8 08             	sar    $0x8,%eax
  101a03:	89 c2                	mov    %eax,%edx
  101a05:	89 c8                	mov    %ecx,%eax
  101a07:	c1 f8 1f             	sar    $0x1f,%eax
  101a0a:	29 c2                	sub    %eax,%edx
  101a0c:	89 d0                	mov    %edx,%eax
  101a0e:	83 e8 01             	sub    $0x1,%eax
  101a11:	a3 10 41 10 00       	mov    %eax,0x104110

		m = time.tm_mon + 1;
  101a16:	a1 10 41 10 00       	mov    0x104110,%eax
  101a1b:	83 c0 01             	add    $0x1,%eax
  101a1e:	89 45 e8             	mov    %eax,-0x18(%ebp)
		time.tm_mday	= yd + 30 - 489 * m / 16 + (7 + m) / 10 * (2 - is_leap_year) ;
  101a21:	8b 45 d8             	mov    -0x28(%ebp),%eax
  101a24:	8d 48 1e             	lea    0x1e(%eax),%ecx
  101a27:	8b 45 e8             	mov    -0x18(%ebp),%eax
  101a2a:	69 c0 e9 01 00 00    	imul   $0x1e9,%eax,%eax
  101a30:	8d 50 0f             	lea    0xf(%eax),%edx
  101a33:	85 c0                	test   %eax,%eax
  101a35:	0f 48 c2             	cmovs  %edx,%eax
  101a38:	c1 f8 04             	sar    $0x4,%eax
  101a3b:	89 cb                	mov    %ecx,%ebx
  101a3d:	29 c3                	sub    %eax,%ebx
  101a3f:	8b 45 e8             	mov    -0x18(%ebp),%eax
  101a42:	8d 48 07             	lea    0x7(%eax),%ecx
  101a45:	ba 67 66 66 66       	mov    $0x66666667,%edx
  101a4a:	89 c8                	mov    %ecx,%eax
  101a4c:	f7 ea                	imul   %edx
  101a4e:	c1 fa 02             	sar    $0x2,%edx
  101a51:	89 c8                	mov    %ecx,%eax
  101a53:	c1 f8 1f             	sar    $0x1f,%eax
  101a56:	29 c2                	sub    %eax,%edx
  101a58:	b8 02 00 00 00       	mov    $0x2,%eax
  101a5d:	2b 45 dc             	sub    -0x24(%ebp),%eax
  101a60:	0f af c2             	imul   %edx,%eax
  101a63:	01 d8                	add    %ebx,%eax
  101a65:	a3 0c 41 10 00       	mov    %eax,0x10410c
	}
	
	d = time.tm_mday;
  101a6a:	a1 0c 41 10 00       	mov    0x10410c,%eax
  101a6f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    	y -= m < 3;
  101a72:	83 7d e8 02          	cmpl   $0x2,-0x18(%ebp)
  101a76:	0f 9e c0             	setle  %al
  101a79:	0f b6 c0             	movzbl %al,%eax
  101a7c:	29 45 ec             	sub    %eax,-0x14(%ebp)
  	time.tm_wday = (y + y / 4 - y / 100 + y / 400 + z[m - 1] + d) % 7;
  101a7f:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101a82:	8d 50 03             	lea    0x3(%eax),%edx
  101a85:	85 c0                	test   %eax,%eax
  101a87:	0f 48 c2             	cmovs  %edx,%eax
  101a8a:	c1 f8 02             	sar    $0x2,%eax
  101a8d:	89 c2                	mov    %eax,%edx
  101a8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101a92:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
  101a95:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  101a98:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
  101a9d:	89 c8                	mov    %ecx,%eax
  101a9f:	f7 ea                	imul   %edx
  101aa1:	c1 fa 05             	sar    $0x5,%edx
  101aa4:	89 c8                	mov    %ecx,%eax
  101aa6:	c1 f8 1f             	sar    $0x1f,%eax
  101aa9:	29 c2                	sub    %eax,%edx
  101aab:	89 d0                	mov    %edx,%eax
  101aad:	29 c3                	sub    %eax,%ebx
  101aaf:	8b 4d ec             	mov    -0x14(%ebp),%ecx
  101ab2:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
  101ab7:	89 c8                	mov    %ecx,%eax
  101ab9:	f7 ea                	imul   %edx
  101abb:	c1 fa 07             	sar    $0x7,%edx
  101abe:	89 c8                	mov    %ecx,%eax
  101ac0:	c1 f8 1f             	sar    $0x1f,%eax
  101ac3:	29 c2                	sub    %eax,%edx
  101ac5:	89 d0                	mov    %edx,%eax
  101ac7:	8d 14 03             	lea    (%ebx,%eax,1),%edx
  101aca:	8b 45 e8             	mov    -0x18(%ebp),%eax
  101acd:	83 e8 01             	sub    $0x1,%eax
  101ad0:	8b 04 85 20 20 10 00 	mov    0x102020(,%eax,4),%eax
  101ad7:	01 c2                	add    %eax,%edx
  101ad9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  101adc:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  101adf:	ba 93 24 49 92       	mov    $0x92492493,%edx
  101ae4:	89 c8                	mov    %ecx,%eax
  101ae6:	f7 ea                	imul   %edx
  101ae8:	8d 04 0a             	lea    (%edx,%ecx,1),%eax
  101aeb:	c1 f8 02             	sar    $0x2,%eax
  101aee:	89 c2                	mov    %eax,%edx
  101af0:	89 c8                	mov    %ecx,%eax
  101af2:	c1 f8 1f             	sar    $0x1f,%eax
  101af5:	29 c2                	sub    %eax,%edx
  101af7:	89 d0                	mov    %edx,%eax
  101af9:	c1 e0 03             	shl    $0x3,%eax
  101afc:	29 d0                	sub    %edx,%eax
  101afe:	29 c1                	sub    %eax,%ecx
  101b00:	89 ca                	mov    %ecx,%edx
  101b02:	89 15 18 41 10 00    	mov    %edx,0x104118

	time.tm_isdst	= 0;
  101b08:	c7 05 20 41 10 00 00 	movl   $0x0,0x104120
  101b0f:	00 00 00 

	if(time.tm_sec < 0)
  101b12:	a1 00 41 10 00       	mov    0x104100,%eax
  101b17:	85 c0                	test   %eax,%eax
  101b19:	79 0d                	jns    101b28 <gmtime+0x532>
	{
		time.tm_sec = 60 + time.tm_sec;
  101b1b:	a1 00 41 10 00       	mov    0x104100,%eax
  101b20:	83 c0 3c             	add    $0x3c,%eax
  101b23:	a3 00 41 10 00       	mov    %eax,0x104100
	}

	if(time.tm_min < 0)
  101b28:	a1 04 41 10 00       	mov    0x104104,%eax
  101b2d:	85 c0                	test   %eax,%eax
  101b2f:	79 23                	jns    101b54 <gmtime+0x55e>
	{
		time.tm_min = 59 + time.tm_min;
  101b31:	a1 04 41 10 00       	mov    0x104104,%eax
  101b36:	83 c0 3b             	add    $0x3b,%eax
  101b39:	a3 04 41 10 00       	mov    %eax,0x104104

		if(time.tm_sec == 0)
  101b3e:	a1 00 41 10 00       	mov    0x104100,%eax
  101b43:	85 c0                	test   %eax,%eax
  101b45:	75 0d                	jne    101b54 <gmtime+0x55e>
		{
			time.tm_min += 1;
  101b47:	a1 04 41 10 00       	mov    0x104104,%eax
  101b4c:	83 c0 01             	add    $0x1,%eax
  101b4f:	a3 04 41 10 00       	mov    %eax,0x104104
		}
	}

	if(time.tm_hour < 0)
  101b54:	a1 08 41 10 00       	mov    0x104108,%eax
  101b59:	85 c0                	test   %eax,%eax
  101b5b:	79 0d                	jns    101b6a <gmtime+0x574>
	{
		time.tm_hour = 23 + time.tm_hour;
  101b5d:	a1 08 41 10 00       	mov    0x104108,%eax
  101b62:	83 c0 17             	add    $0x17,%eax
  101b65:	a3 08 41 10 00       	mov    %eax,0x104108
	}

	return &time;
  101b6a:	b8 00 41 10 00       	mov    $0x104100,%eax

}
  101b6f:	83 c4 24             	add    $0x24,%esp
  101b72:	5b                   	pop    %ebx
  101b73:	5e                   	pop    %esi
  101b74:	5f                   	pop    %edi
  101b75:	5d                   	pop    %ebp
  101b76:	c3                   	ret    

00101b77 <localtime>:

struct tm *localtime( const time_t *timer )
{
  101b77:	55                   	push   %ebp
  101b78:	89 e5                	mov    %esp,%ebp
  101b7a:	83 ec 08             	sub    $0x8,%esp
	return gmtime(timer);
  101b7d:	8b 45 08             	mov    0x8(%ebp),%eax
  101b80:	89 04 24             	mov    %eax,(%esp)
  101b83:	e8 6e fa ff ff       	call   1015f6 <gmtime>
}
  101b88:	c9                   	leave  
  101b89:	c3                   	ret    

00101b8a <isalnum>:
#include "include/ctype.h"

int isalnum( int c )
{
  101b8a:	55                   	push   %ebp
  101b8b:	89 e5                	mov    %esp,%ebp
  101b8d:	83 ec 18             	sub    $0x18,%esp
	return isalpha(c) || isdigit(c);
  101b90:	8b 45 08             	mov    0x8(%ebp),%eax
  101b93:	89 04 24             	mov    %eax,(%esp)
  101b96:	e8 21 00 00 00       	call   101bbc <isalpha>
  101b9b:	85 c0                	test   %eax,%eax
  101b9d:	75 0f                	jne    101bae <isalnum+0x24>
  101b9f:	8b 45 08             	mov    0x8(%ebp),%eax
  101ba2:	89 04 24             	mov    %eax,(%esp)
  101ba5:	e8 7b 00 00 00       	call   101c25 <isdigit>
  101baa:	85 c0                	test   %eax,%eax
  101bac:	74 07                	je     101bb5 <isalnum+0x2b>
  101bae:	b8 01 00 00 00       	mov    $0x1,%eax
  101bb3:	eb 05                	jmp    101bba <isalnum+0x30>
  101bb5:	b8 00 00 00 00       	mov    $0x0,%eax
}
  101bba:	c9                   	leave  
  101bbb:	c3                   	ret    

00101bbc <isalpha>:

int isalpha( int c )
{
  101bbc:	55                   	push   %ebp
  101bbd:	89 e5                	mov    %esp,%ebp
	return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
  101bbf:	83 7d 08 60          	cmpl   $0x60,0x8(%ebp)
  101bc3:	7e 06                	jle    101bcb <isalpha+0xf>
  101bc5:	83 7d 08 7a          	cmpl   $0x7a,0x8(%ebp)
  101bc9:	7e 0c                	jle    101bd7 <isalpha+0x1b>
  101bcb:	83 7d 08 40          	cmpl   $0x40,0x8(%ebp)
  101bcf:	7e 0d                	jle    101bde <isalpha+0x22>
  101bd1:	83 7d 08 5a          	cmpl   $0x5a,0x8(%ebp)
  101bd5:	7f 07                	jg     101bde <isalpha+0x22>
  101bd7:	b8 01 00 00 00       	mov    $0x1,%eax
  101bdc:	eb 05                	jmp    101be3 <isalpha+0x27>
  101bde:	b8 00 00 00 00       	mov    $0x0,%eax
}
  101be3:	5d                   	pop    %ebp
  101be4:	c3                   	ret    

00101be5 <isblank>:

int isblank( int c )
{
  101be5:	55                   	push   %ebp
  101be6:	89 e5                	mov    %esp,%ebp
	return c == ' ' || c == '\t';
  101be8:	83 7d 08 20          	cmpl   $0x20,0x8(%ebp)
  101bec:	74 06                	je     101bf4 <isblank+0xf>
  101bee:	83 7d 08 09          	cmpl   $0x9,0x8(%ebp)
  101bf2:	75 07                	jne    101bfb <isblank+0x16>
  101bf4:	b8 01 00 00 00       	mov    $0x1,%eax
  101bf9:	eb 05                	jmp    101c00 <isblank+0x1b>
  101bfb:	b8 00 00 00 00       	mov    $0x0,%eax
}
  101c00:	5d                   	pop    %ebp
  101c01:	c3                   	ret    

00101c02 <iscntrl>:

int iscntrl( int c )
{
  101c02:	55                   	push   %ebp
  101c03:	89 e5                	mov    %esp,%ebp
	return (c >= 0 && c <= 0x1F) || c == 0x7F;
  101c05:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  101c09:	78 06                	js     101c11 <iscntrl+0xf>
  101c0b:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
  101c0f:	7e 06                	jle    101c17 <iscntrl+0x15>
  101c11:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
  101c15:	75 07                	jne    101c1e <iscntrl+0x1c>
  101c17:	b8 01 00 00 00       	mov    $0x1,%eax
  101c1c:	eb 05                	jmp    101c23 <iscntrl+0x21>
  101c1e:	b8 00 00 00 00       	mov    $0x0,%eax
}
  101c23:	5d                   	pop    %ebp
  101c24:	c3                   	ret    

00101c25 <isdigit>:

int isdigit( int c )
{
  101c25:	55                   	push   %ebp
  101c26:	89 e5                	mov    %esp,%ebp
	return c >= '0' && c <= '9';
  101c28:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
  101c2c:	7e 0d                	jle    101c3b <isdigit+0x16>
  101c2e:	83 7d 08 39          	cmpl   $0x39,0x8(%ebp)
  101c32:	7f 07                	jg     101c3b <isdigit+0x16>
  101c34:	b8 01 00 00 00       	mov    $0x1,%eax
  101c39:	eb 05                	jmp    101c40 <isdigit+0x1b>
  101c3b:	b8 00 00 00 00       	mov    $0x0,%eax
}
  101c40:	5d                   	pop    %ebp
  101c41:	c3                   	ret    

00101c42 <isgraph>:

int isgraph( int c )
{
  101c42:	55                   	push   %ebp
  101c43:	89 e5                	mov    %esp,%ebp
  101c45:	83 ec 18             	sub    $0x18,%esp
	return isalnum(c) || ispunct(c);
  101c48:	8b 45 08             	mov    0x8(%ebp),%eax
  101c4b:	89 04 24             	mov    %eax,(%esp)
  101c4e:	e8 37 ff ff ff       	call   101b8a <isalnum>
  101c53:	85 c0                	test   %eax,%eax
  101c55:	75 0f                	jne    101c66 <isgraph+0x24>
  101c57:	8b 45 08             	mov    0x8(%ebp),%eax
  101c5a:	89 04 24             	mov    %eax,(%esp)
  101c5d:	e8 4c 00 00 00       	call   101cae <ispunct>
  101c62:	85 c0                	test   %eax,%eax
  101c64:	74 07                	je     101c6d <isgraph+0x2b>
  101c66:	b8 01 00 00 00       	mov    $0x1,%eax
  101c6b:	eb 05                	jmp    101c72 <isgraph+0x30>
  101c6d:	b8 00 00 00 00       	mov    $0x0,%eax
}
  101c72:	c9                   	leave  
  101c73:	c3                   	ret    

00101c74 <islower>:

int islower( int c )
{
  101c74:	55                   	push   %ebp
  101c75:	89 e5                	mov    %esp,%ebp
	return c >= 'a' && c <= 'z';
  101c77:	83 7d 08 60          	cmpl   $0x60,0x8(%ebp)
  101c7b:	7e 0d                	jle    101c8a <islower+0x16>
  101c7d:	83 7d 08 7a          	cmpl   $0x7a,0x8(%ebp)
  101c81:	7f 07                	jg     101c8a <islower+0x16>
  101c83:	b8 01 00 00 00       	mov    $0x1,%eax
  101c88:	eb 05                	jmp    101c8f <islower+0x1b>
  101c8a:	b8 00 00 00 00       	mov    $0x0,%eax
}
  101c8f:	5d                   	pop    %ebp
  101c90:	c3                   	ret    

00101c91 <isprint>:

int isprint( int c )
{
  101c91:	55                   	push   %ebp
  101c92:	89 e5                	mov    %esp,%ebp
	return c >= ' ' && c <= '~';
  101c94:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
  101c98:	7e 0d                	jle    101ca7 <isprint+0x16>
  101c9a:	83 7d 08 7e          	cmpl   $0x7e,0x8(%ebp)
  101c9e:	7f 07                	jg     101ca7 <isprint+0x16>
  101ca0:	b8 01 00 00 00       	mov    $0x1,%eax
  101ca5:	eb 05                	jmp    101cac <isprint+0x1b>
  101ca7:	b8 00 00 00 00       	mov    $0x0,%eax
}
  101cac:	5d                   	pop    %ebp
  101cad:	c3                   	ret    

00101cae <ispunct>:

int ispunct( int c )
{
  101cae:	55                   	push   %ebp
  101caf:	89 e5                	mov    %esp,%ebp
	return (c >= '!' && c <= '/') || (c >= ':' && c <= '@') || (c >= '[' && c <= '`') || (c >= '{' && c <= '~');
  101cb1:	83 7d 08 20          	cmpl   $0x20,0x8(%ebp)
  101cb5:	7e 06                	jle    101cbd <ispunct+0xf>
  101cb7:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
  101cbb:	7e 24                	jle    101ce1 <ispunct+0x33>
  101cbd:	83 7d 08 39          	cmpl   $0x39,0x8(%ebp)
  101cc1:	7e 06                	jle    101cc9 <ispunct+0x1b>
  101cc3:	83 7d 08 40          	cmpl   $0x40,0x8(%ebp)
  101cc7:	7e 18                	jle    101ce1 <ispunct+0x33>
  101cc9:	83 7d 08 5a          	cmpl   $0x5a,0x8(%ebp)
  101ccd:	7e 06                	jle    101cd5 <ispunct+0x27>
  101ccf:	83 7d 08 60          	cmpl   $0x60,0x8(%ebp)
  101cd3:	7e 0c                	jle    101ce1 <ispunct+0x33>
  101cd5:	83 7d 08 7a          	cmpl   $0x7a,0x8(%ebp)
  101cd9:	7e 0d                	jle    101ce8 <ispunct+0x3a>
  101cdb:	83 7d 08 7e          	cmpl   $0x7e,0x8(%ebp)
  101cdf:	7f 07                	jg     101ce8 <ispunct+0x3a>
  101ce1:	b8 01 00 00 00       	mov    $0x1,%eax
  101ce6:	eb 05                	jmp    101ced <ispunct+0x3f>
  101ce8:	b8 00 00 00 00       	mov    $0x0,%eax
}
  101ced:	5d                   	pop    %ebp
  101cee:	c3                   	ret    

00101cef <isspace>:

int isspace( int c )
{
  101cef:	55                   	push   %ebp
  101cf0:	89 e5                	mov    %esp,%ebp
  101cf2:	83 ec 04             	sub    $0x4,%esp
	return isblank(c) || (c >= '\f' && c <= '\r');
  101cf5:	8b 45 08             	mov    0x8(%ebp),%eax
  101cf8:	89 04 24             	mov    %eax,(%esp)
  101cfb:	e8 e5 fe ff ff       	call   101be5 <isblank>
  101d00:	85 c0                	test   %eax,%eax
  101d02:	75 0c                	jne    101d10 <isspace+0x21>
  101d04:	83 7d 08 0b          	cmpl   $0xb,0x8(%ebp)
  101d08:	7e 0d                	jle    101d17 <isspace+0x28>
  101d0a:	83 7d 08 0d          	cmpl   $0xd,0x8(%ebp)
  101d0e:	7f 07                	jg     101d17 <isspace+0x28>
  101d10:	b8 01 00 00 00       	mov    $0x1,%eax
  101d15:	eb 05                	jmp    101d1c <isspace+0x2d>
  101d17:	b8 00 00 00 00       	mov    $0x0,%eax
}
  101d1c:	c9                   	leave  
  101d1d:	c3                   	ret    

00101d1e <isupper>:

int isupper( int c )
{
  101d1e:	55                   	push   %ebp
  101d1f:	89 e5                	mov    %esp,%ebp
	return c >= 'A' && c <= 'Z';
  101d21:	83 7d 08 40          	cmpl   $0x40,0x8(%ebp)
  101d25:	7e 0d                	jle    101d34 <isupper+0x16>
  101d27:	83 7d 08 5a          	cmpl   $0x5a,0x8(%ebp)
  101d2b:	7f 07                	jg     101d34 <isupper+0x16>
  101d2d:	b8 01 00 00 00       	mov    $0x1,%eax
  101d32:	eb 05                	jmp    101d39 <isupper+0x1b>
  101d34:	b8 00 00 00 00       	mov    $0x0,%eax
}
  101d39:	5d                   	pop    %ebp
  101d3a:	c3                   	ret    

00101d3b <isxdigit>:

int isxdigit( int c )
{
  101d3b:	55                   	push   %ebp
  101d3c:	89 e5                	mov    %esp,%ebp
  101d3e:	83 ec 04             	sub    $0x4,%esp
	return isdigit(c) || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');
  101d41:	8b 45 08             	mov    0x8(%ebp),%eax
  101d44:	89 04 24             	mov    %eax,(%esp)
  101d47:	e8 d9 fe ff ff       	call   101c25 <isdigit>
  101d4c:	85 c0                	test   %eax,%eax
  101d4e:	75 18                	jne    101d68 <isxdigit+0x2d>
  101d50:	83 7d 08 60          	cmpl   $0x60,0x8(%ebp)
  101d54:	7e 06                	jle    101d5c <isxdigit+0x21>
  101d56:	83 7d 08 66          	cmpl   $0x66,0x8(%ebp)
  101d5a:	7e 0c                	jle    101d68 <isxdigit+0x2d>
  101d5c:	83 7d 08 40          	cmpl   $0x40,0x8(%ebp)
  101d60:	7e 0d                	jle    101d6f <isxdigit+0x34>
  101d62:	83 7d 08 46          	cmpl   $0x46,0x8(%ebp)
  101d66:	7f 07                	jg     101d6f <isxdigit+0x34>
  101d68:	b8 01 00 00 00       	mov    $0x1,%eax
  101d6d:	eb 05                	jmp    101d74 <isxdigit+0x39>
  101d6f:	b8 00 00 00 00       	mov    $0x0,%eax
}
  101d74:	c9                   	leave  
  101d75:	c3                   	ret    

00101d76 <tolower>:

int tolower( int c )
{
  101d76:	55                   	push   %ebp
  101d77:	89 e5                	mov    %esp,%ebp
  101d79:	83 ec 04             	sub    $0x4,%esp
	if(isupper(c))
  101d7c:	8b 45 08             	mov    0x8(%ebp),%eax
  101d7f:	89 04 24             	mov    %eax,(%esp)
  101d82:	e8 97 ff ff ff       	call   101d1e <isupper>
  101d87:	85 c0                	test   %eax,%eax
  101d89:	74 08                	je     101d93 <tolower+0x1d>
	{
		return c + ('a' - 'A');
  101d8b:	8b 45 08             	mov    0x8(%ebp),%eax
  101d8e:	83 c0 20             	add    $0x20,%eax
  101d91:	eb 03                	jmp    101d96 <tolower+0x20>
	}

	return c;
  101d93:	8b 45 08             	mov    0x8(%ebp),%eax
}
  101d96:	c9                   	leave  
  101d97:	c3                   	ret    

00101d98 <toupper>:

int toupper( int c )
{
  101d98:	55                   	push   %ebp
  101d99:	89 e5                	mov    %esp,%ebp
  101d9b:	83 ec 04             	sub    $0x4,%esp
	if(islower(c))
  101d9e:	8b 45 08             	mov    0x8(%ebp),%eax
  101da1:	89 04 24             	mov    %eax,(%esp)
  101da4:	e8 cb fe ff ff       	call   101c74 <islower>
  101da9:	85 c0                	test   %eax,%eax
  101dab:	74 08                	je     101db5 <toupper+0x1d>
	{
		return c - ('a' - 'A');
  101dad:	8b 45 08             	mov    0x8(%ebp),%eax
  101db0:	83 e8 20             	sub    $0x20,%eax
  101db3:	eb 03                	jmp    101db8 <toupper+0x20>
	}

	return c;
  101db5:	8b 45 08             	mov    0x8(%ebp),%eax
}
  101db8:	c9                   	leave  
  101db9:	c3                   	ret    

00101dba <cpuid_supported>:
  101dba:	9c                   	pushf  
  101dbb:	59                   	pop    %ecx
  101dbc:	89 c8                	mov    %ecx,%eax
  101dbe:	35 00 00 20 00       	xor    $0x200000,%eax
  101dc3:	50                   	push   %eax
  101dc4:	9d                   	popf   
  101dc5:	9c                   	pushf  
  101dc6:	58                   	pop    %eax
  101dc7:	31 c8                	xor    %ecx,%eax
  101dc9:	74 02                	je     101dcd <unsupported>
  101dcb:	eb 05                	jmp    101dd2 <supported>

00101dcd <unsupported>:
  101dcd:	b8 00 00 00 00       	mov    $0x0,%eax

00101dd2 <supported>:
  101dd2:	b8 01 00 00 00       	mov    $0x1,%eax
  101dd7:	c3                   	ret    

00101dd8 <start>:
  101dd8:	bc 00 70 10 00       	mov    $0x107000,%esp
  101ddd:	53                   	push   %ebx
  101dde:	50                   	push   %eax
  101ddf:	e8 f7 e4 ff ff       	call   1002db <ctors>
  101de4:	e8 1d e3 ff ff       	call   100106 <init>

00101de9 <halt>:
  101de9:	fa                   	cli    
  101dea:	f4                   	hlt    
  101deb:	eb fc                	jmp    101de9 <halt>
