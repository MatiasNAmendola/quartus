
bin/quartus-x86:     file format elf32-i386


Disassembly of section .text:

00100000 <kernel_start>:
  100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
  100006:	00 00                	add    %al,(%eax)
  100008:	fe 4f 52             	decb   0x52(%edi)
  10000b:	e4 55                	in     $0x55,%al

0010000c <__tcf_2>:
#include "include/memmgr.hpp"

size_t kernel::memory_version = 0;

vmm &kernel::vmmgr(  ) { static vmm memmgr; kernel::memory_version++; return memmgr; }
  10000c:	55                   	push   %ebp
  10000d:	89 e5                	mov    %esp,%ebp
  10000f:	83 ec 18             	sub    $0x18,%esp
  100012:	c7 04 24 20 30 11 00 	movl   $0x113020,(%esp)
  100019:	e8 dc 43 00 00       	call   1043fa <_ZN3hal3x863vmmD1Ev>
  10001e:	c9                   	leave  
  10001f:	c3                   	ret    

00100020 <_ZN6kernel5vmmgrEv>:
  100020:	55                   	push   %ebp
  100021:	89 e5                	mov    %esp,%ebp
  100023:	83 ec 18             	sub    $0x18,%esp
  100026:	b8 08 30 11 00       	mov    $0x113008,%eax
  10002b:	0f b6 00             	movzbl (%eax),%eax
  10002e:	84 c0                	test   %al,%al
  100030:	75 20                	jne    100052 <_ZN6kernel5vmmgrEv+0x32>
  100032:	c7 04 24 20 30 11 00 	movl   $0x113020,(%esp)
  100039:	e8 80 43 00 00       	call   1043be <_ZN3hal3x863vmmC1Ev>
  10003e:	b8 08 30 11 00       	mov    $0x113008,%eax
  100043:	c6 00 01             	movb   $0x1,(%eax)
  100046:	c7 04 24 0c 00 10 00 	movl   $0x10000c,(%esp)
  10004d:	e8 31 39 00 00       	call   103983 <atexit>
  100052:	a1 00 30 11 00       	mov    0x113000,%eax
  100057:	83 c0 01             	add    $0x1,%eax
  10005a:	a3 00 30 11 00       	mov    %eax,0x113000
  10005f:	b8 20 30 11 00       	mov    $0x113020,%eax
  100064:	c9                   	leave  
  100065:	c3                   	ret    

00100066 <__tcf_4>:
	  */
	class scheduler
	{
		friend cpu::cpu_state *syscall::handle( cpu::cpu_state *cpu );

		SINGLETON(scheduler)
  100066:	55                   	push   %ebp
  100067:	89 e5                	mov    %esp,%ebp
  100069:	83 ec 18             	sub    $0x18,%esp
  10006c:	c7 04 24 60 60 13 00 	movl   $0x136060,(%esp)
  100073:	e8 b2 be 00 00       	call   10bf2a <_ZN6kernel9schedulerD1Ev>
  100078:	c9                   	leave  
  100079:	c3                   	ret    

0010007a <_ZN6kernel5timer4initEhll>:
time_t timer::seconds 	= 0;
time_t timer::time 	= 0;
time_t timer::freq 	= 0;

void timer::init( uint8_t irq, time_t current, time_t freq )
{
  10007a:	55                   	push   %ebp
  10007b:	89 e5                	mov    %esp,%ebp
  10007d:	83 ec 28             	sub    $0x28,%esp
  100080:	8b 45 08             	mov    0x8(%ebp),%eax
  100083:	88 45 e4             	mov    %al,-0x1c(%ebp)
	timer::ticks 	= 0;
  100086:	c7 05 34 30 13 00 00 	movl   $0x0,0x133034
  10008d:	00 00 00 
	timer::seconds 	= 0;
  100090:	c7 05 38 30 13 00 00 	movl   $0x0,0x133038
  100097:	00 00 00 
	timer::time 	= current;
  10009a:	8b 45 0c             	mov    0xc(%ebp),%eax
  10009d:	a3 3c 30 13 00       	mov    %eax,0x13303c
	timer::freq	= freq;	
  1000a2:	8b 45 10             	mov    0x10(%ebp),%eax
  1000a5:	a3 40 30 13 00       	mov    %eax,0x133040

	pic &pic = pic::instance();
  1000aa:	e8 4d be 00 00       	call   10befc <_ZN3hal3x863pic8instanceEv>
  1000af:	89 45 f4             	mov    %eax,-0xc(%ebp)
	pic.handler(irq, timer::tick);
  1000b2:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
  1000b6:	c7 44 24 08 e2 00 10 	movl   $0x1000e2,0x8(%esp)
  1000bd:	00 
  1000be:	89 44 24 04          	mov    %eax,0x4(%esp)
  1000c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1000c5:	89 04 24             	mov    %eax,(%esp)
  1000c8:	e8 81 42 00 00       	call   10434e <_ZN3hal3x863pic7handlerEhPFPNS0_3cpu9cpu_stateES4_E>
	pic.enable(irq);
  1000cd:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
  1000d1:	89 44 24 04          	mov    %eax,0x4(%esp)
  1000d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1000d8:	89 04 24             	mov    %eax,(%esp)
  1000db:	e8 aa 41 00 00       	call   10428a <_ZN3hal3x863pic6enableEh>
}
  1000e0:	c9                   	leave  
  1000e1:	c3                   	ret    

001000e2 <_ZN6kernel5timer4tickEPN3hal3x863cpu9cpu_stateE>:

cpu::cpu_state *timer::tick( cpu::cpu_state *cpu )
{
  1000e2:	55                   	push   %ebp
  1000e3:	89 e5                	mov    %esp,%ebp
  1000e5:	83 ec 28             	sub    $0x28,%esp
	timer::ticks++;
  1000e8:	a1 34 30 13 00       	mov    0x133034,%eax
  1000ed:	83 c0 01             	add    $0x1,%eax
  1000f0:	a3 34 30 13 00       	mov    %eax,0x133034

	if(!(timer::ticks % timer::freq))
  1000f5:	a1 34 30 13 00       	mov    0x133034,%eax
  1000fa:	8b 0d 40 30 13 00    	mov    0x133040,%ecx
  100100:	99                   	cltd   
  100101:	f7 f9                	idiv   %ecx
  100103:	89 d0                	mov    %edx,%eax
  100105:	85 c0                	test   %eax,%eax
  100107:	75 24                	jne    10012d <_ZN6kernel5timer4tickEPN3hal3x863cpu9cpu_stateE+0x4b>
	{
		timer::ticks = 0;
  100109:	c7 05 34 30 13 00 00 	movl   $0x0,0x133034
  100110:	00 00 00 
		timer::seconds++;
  100113:	a1 38 30 13 00       	mov    0x133038,%eax
  100118:	83 c0 01             	add    $0x1,%eax
  10011b:	a3 38 30 13 00       	mov    %eax,0x133038
		timer::time++;
  100120:	a1 3c 30 13 00       	mov    0x13303c,%eax
  100125:	83 c0 01             	add    $0x1,%eax
  100128:	a3 3c 30 13 00       	mov    %eax,0x13303c
	}

	scheduler &scheduler = scheduler::instance();
  10012d:	e8 0b be 00 00       	call   10bf3d <_ZN6kernel9scheduler8instanceEv>
  100132:	89 45 f4             	mov    %eax,-0xc(%ebp)

	return scheduler.schedule(cpu);
  100135:	8b 45 08             	mov    0x8(%ebp),%eax
  100138:	89 44 24 04          	mov    %eax,0x4(%esp)
  10013c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10013f:	89 04 24             	mov    %eax,(%esp)
  100142:	e8 c9 11 00 00       	call   101310 <_ZN6kernel9scheduler8scheduleEPN3hal3x863cpu9cpu_stateE>
}
  100147:	c9                   	leave  
  100148:	c3                   	ret    
  100149:	90                   	nop

0010014a <_ZN6kernel6threadC1EPNS_7processEjj>:
#include "include/heap.hpp"

using kernel::thread;
using kernel::threadmgr;

thread::thread( process *proc, uintptr_t entry, size_t flags )
  10014a:	55                   	push   %ebp
  10014b:	89 e5                	mov    %esp,%ebp
  10014d:	83 ec 18             	sub    $0x18,%esp
{
	if(!proc || !entry)
  100150:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  100154:	74 06                	je     10015c <_ZN6kernel6threadC1EPNS_7processEjj+0x12>
  100156:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  10015a:	75 05                	jne    100161 <_ZN6kernel6threadC1EPNS_7processEjj+0x17>
	{
		return;
  10015c:	e9 1f 01 00 00       	jmp    100280 <_ZN6kernel6threadC1EPNS_7processEjj+0x136>
	}

	this->id = thread::new_id();
  100161:	e8 04 c0 00 00       	call   10c16a <_ZN6kernel6thread6new_idEv>
  100166:	8b 55 08             	mov    0x8(%ebp),%edx
  100169:	89 02                	mov    %eax,(%edx)

	this->proc  = proc;
  10016b:	8b 45 08             	mov    0x8(%ebp),%eax
  10016e:	8b 55 0c             	mov    0xc(%ebp),%edx
  100171:	89 50 18             	mov    %edx,0x18(%eax)

	this->flags = flags;
  100174:	8b 45 08             	mov    0x8(%ebp),%eax
  100177:	8b 55 14             	mov    0x14(%ebp),%edx
  10017a:	89 50 08             	mov    %edx,0x8(%eax)

	this->kstack = (uintptr_t)kernel::malloc(thread::kstack_size);
  10017d:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
  100184:	e8 8c 1c 00 00       	call   101e15 <_ZN6kernel6mallocEj>
  100189:	89 c2                	mov    %eax,%edx
  10018b:	8b 45 08             	mov    0x8(%ebp),%eax
  10018e:	89 50 14             	mov    %edx,0x14(%eax)

	if(flags & thread::kernel)
  100191:	8b 45 14             	mov    0x14(%ebp),%eax
  100194:	83 e0 01             	and    $0x1,%eax
  100197:	85 c0                	test   %eax,%eax
  100199:	74 2c                	je     1001c7 <_ZN6kernel6threadC1EPNS_7processEjj+0x7d>
	{
		this->ustack = (*this->proc->memmgr).alloc(vmm::present | vmm::write, bytes_to_pages(thread::ustack_size));
  10019b:	8b 45 08             	mov    0x8(%ebp),%eax
  10019e:	8b 40 18             	mov    0x18(%eax),%eax
  1001a1:	8b 80 50 04 00 00    	mov    0x450(%eax),%eax
  1001a7:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  1001ae:	00 
  1001af:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
  1001b6:	00 
  1001b7:	89 04 24             	mov    %eax,(%esp)
  1001ba:	e8 e7 44 00 00       	call   1046a6 <_ZN3hal3x863vmm5allocEjj>
  1001bf:	8b 55 08             	mov    0x8(%ebp),%edx
  1001c2:	89 42 10             	mov    %eax,0x10(%edx)
  1001c5:	eb 2a                	jmp    1001f1 <_ZN6kernel6threadC1EPNS_7processEjj+0xa7>
	}
	else
	{
		this->ustack = (*this->proc->memmgr).alloc(vmm::present | vmm::write | vmm::user, bytes_to_pages(thread::ustack_size));
  1001c7:	8b 45 08             	mov    0x8(%ebp),%eax
  1001ca:	8b 40 18             	mov    0x18(%eax),%eax
  1001cd:	8b 80 50 04 00 00    	mov    0x450(%eax),%eax
  1001d3:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  1001da:	00 
  1001db:	c7 44 24 04 07 00 00 	movl   $0x7,0x4(%esp)
  1001e2:	00 
  1001e3:	89 04 24             	mov    %eax,(%esp)
  1001e6:	e8 bb 44 00 00       	call   1046a6 <_ZN3hal3x863vmm5allocEjj>
  1001eb:	8b 55 08             	mov    0x8(%ebp),%edx
  1001ee:	89 42 10             	mov    %eax,0x10(%edx)
	}

	this->cpu  = (cpu::cpu_state*)(this->kstack + thread::kstack_size - sizeof(cpu::cpu_state));
  1001f1:	8b 45 08             	mov    0x8(%ebp),%eax
  1001f4:	8b 40 14             	mov    0x14(%eax),%eax
  1001f7:	05 c8 0f 00 00       	add    $0xfc8,%eax
  1001fc:	89 c2                	mov    %eax,%edx
  1001fe:	8b 45 08             	mov    0x8(%ebp),%eax
  100201:	89 50 0c             	mov    %edx,0xc(%eax)

	#if defined(ARCH_X86)
	this->cpu->eip = entry;
  100204:	8b 45 08             	mov    0x8(%ebp),%eax
  100207:	8b 40 0c             	mov    0xc(%eax),%eax
  10020a:	8b 55 10             	mov    0x10(%ebp),%edx
  10020d:	89 50 24             	mov    %edx,0x24(%eax)
	this->cpu->esp = this->ustack + thread::ustack_size;
  100210:	8b 45 08             	mov    0x8(%ebp),%eax
  100213:	8b 40 0c             	mov    0xc(%eax),%eax
  100216:	8b 55 08             	mov    0x8(%ebp),%edx
  100219:	8b 52 10             	mov    0x10(%edx),%edx
  10021c:	81 c2 00 40 00 00    	add    $0x4000,%edx
  100222:	89 50 30             	mov    %edx,0x30(%eax)

	if(flags & thread::kernel)
  100225:	8b 45 14             	mov    0x14(%ebp),%eax
  100228:	83 e0 01             	and    $0x1,%eax
  10022b:	85 c0                	test   %eax,%eax
  10022d:	74 0f                	je     10023e <_ZN6kernel6threadC1EPNS_7processEjj+0xf4>
	{
		this->cpu->cs = 0x08 | 0x00;
  10022f:	8b 45 08             	mov    0x8(%ebp),%eax
  100232:	8b 40 0c             	mov    0xc(%eax),%eax
  100235:	c7 40 28 08 00 00 00 	movl   $0x8,0x28(%eax)
  10023c:	eb 1a                	jmp    100258 <_ZN6kernel6threadC1EPNS_7processEjj+0x10e>
	}
	else
	{
		this->cpu->cs = 0x18 | 0x03;
  10023e:	8b 45 08             	mov    0x8(%ebp),%eax
  100241:	8b 40 0c             	mov    0xc(%eax),%eax
  100244:	c7 40 28 1b 00 00 00 	movl   $0x1b,0x28(%eax)
		this->cpu->ss = 0x20 | 0x03;
  10024b:	8b 45 08             	mov    0x8(%ebp),%eax
  10024e:	8b 40 0c             	mov    0xc(%eax),%eax
  100251:	c7 40 34 23 00 00 00 	movl   $0x23,0x34(%eax)
	}
	
	this->cpu->eflags = 0x202;
  100258:	8b 45 08             	mov    0x8(%ebp),%eax
  10025b:	8b 40 0c             	mov    0xc(%eax),%eax
  10025e:	c7 40 2c 02 02 00 00 	movl   $0x202,0x2c(%eax)
	/*
	TODO
	*/
	#endif

	this->proc->thrds.push_back(this);
  100265:	8b 45 08             	mov    0x8(%ebp),%eax
  100268:	8b 40 18             	mov    0x18(%eax),%eax
  10026b:	8d 90 54 04 00 00    	lea    0x454(%eax),%edx
  100271:	8b 45 08             	mov    0x8(%ebp),%eax
  100274:	89 44 24 04          	mov    %eax,0x4(%esp)
  100278:	89 14 24             	mov    %edx,(%esp)
  10027b:	e8 fe be 00 00       	call   10c17e <_ZN5tools4listIN6kernel6threadEE9push_backEPS2_>
}
  100280:	c9                   	leave  
  100281:	c3                   	ret    

00100282 <_ZN6kernel6threadD1Ev>:

thread::~thread(  )
  100282:	55                   	push   %ebp
  100283:	89 e5                	mov    %esp,%ebp
  100285:	53                   	push   %ebx
  100286:	83 ec 34             	sub    $0x34,%esp
{
	for(tools::list<thread>::iterator it = this->proc->thrds.begin(); it != this->proc->thrds.end(); it++)
  100289:	8b 45 08             	mov    0x8(%ebp),%eax
  10028c:	8b 40 18             	mov    0x18(%eax),%eax
  10028f:	8d 90 54 04 00 00    	lea    0x454(%eax),%edx
  100295:	8d 45 d8             	lea    -0x28(%ebp),%eax
  100298:	89 54 24 04          	mov    %edx,0x4(%esp)
  10029c:	89 04 24             	mov    %eax,(%esp)
  10029f:	e8 88 bd 00 00       	call   10c02c <_ZN5tools4listIN6kernel6threadEE5beginEv>
  1002a4:	83 ec 04             	sub    $0x4,%esp
  1002a7:	eb 5e                	jmp    100307 <_ZN6kernel6threadD1Ev+0x85>
	{
		if(*it == this)
  1002a9:	8d 45 d8             	lea    -0x28(%ebp),%eax
  1002ac:	89 04 24             	mov    %eax,(%esp)
  1002af:	e8 c2 bd 00 00       	call   10c076 <_ZN5tools4listIN6kernel6threadEE8iteratordeEv>
  1002b4:	3b 45 08             	cmp    0x8(%ebp),%eax
  1002b7:	0f 94 c0             	sete   %al
  1002ba:	84 c0                	test   %al,%al
  1002bc:	74 2c                	je     1002ea <_ZN6kernel6threadD1Ev+0x68>
		{
			this->proc->thrds.erase(it);
  1002be:	8b 45 08             	mov    0x8(%ebp),%eax
  1002c1:	8b 40 18             	mov    0x18(%eax),%eax
  1002c4:	8d 98 54 04 00 00    	lea    0x454(%eax),%ebx
  1002ca:	8d 4d e0             	lea    -0x20(%ebp),%ecx
  1002cd:	8b 45 d8             	mov    -0x28(%ebp),%eax
  1002d0:	8b 55 dc             	mov    -0x24(%ebp),%edx
  1002d3:	89 44 24 08          	mov    %eax,0x8(%esp)
  1002d7:	89 54 24 0c          	mov    %edx,0xc(%esp)
  1002db:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  1002df:	89 0c 24             	mov    %ecx,(%esp)
  1002e2:	e8 9b bd 00 00       	call   10c082 <_ZN5tools4listIN6kernel6threadEE5eraseENS3_8iteratorE>
  1002e7:	83 ec 04             	sub    $0x4,%esp
	this->proc->thrds.push_back(this);
}

thread::~thread(  )
{
	for(tools::list<thread>::iterator it = this->proc->thrds.begin(); it != this->proc->thrds.end(); it++)
  1002ea:	8d 45 e8             	lea    -0x18(%ebp),%eax
  1002ed:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  1002f4:	00 
  1002f5:	8d 55 d8             	lea    -0x28(%ebp),%edx
  1002f8:	89 54 24 04          	mov    %edx,0x4(%esp)
  1002fc:	89 04 24             	mov    %eax,(%esp)
  1002ff:	e8 2e bf 00 00       	call   10c232 <_ZN5tools4listIN6kernel6threadEE8iteratorppEi>
  100304:	83 ec 04             	sub    $0x4,%esp
  100307:	8b 45 08             	mov    0x8(%ebp),%eax
  10030a:	8b 40 18             	mov    0x18(%eax),%eax
  10030d:	8d 90 54 04 00 00    	lea    0x454(%eax),%edx
  100313:	8d 45 f0             	lea    -0x10(%ebp),%eax
  100316:	89 54 24 04          	mov    %edx,0x4(%esp)
  10031a:	89 04 24             	mov    %eax,(%esp)
  10031d:	e8 a4 be 00 00       	call   10c1c6 <_ZN5tools4listIN6kernel6threadEE3endEv>
  100322:	83 ec 04             	sub    $0x4,%esp
  100325:	8d 45 f0             	lea    -0x10(%ebp),%eax
  100328:	89 44 24 04          	mov    %eax,0x4(%esp)
  10032c:	8d 45 d8             	lea    -0x28(%ebp),%eax
  10032f:	89 04 24             	mov    %eax,(%esp)
  100332:	e8 db be 00 00       	call   10c212 <_ZN5tools4listIN6kernel6threadEE8iteratorneERKS4_>
  100337:	84 c0                	test   %al,%al
  100339:	0f 95 c0             	setne  %al
  10033c:	84 c0                	test   %al,%al
  10033e:	0f 85 65 ff ff ff    	jne    1002a9 <_ZN6kernel6threadD1Ev+0x27>
		{
			this->proc->thrds.erase(it);
		}
	}

	kernel::free((void*)this->kstack);
  100344:	8b 45 08             	mov    0x8(%ebp),%eax
  100347:	8b 40 14             	mov    0x14(%eax),%eax
  10034a:	89 04 24             	mov    %eax,(%esp)
  10034d:	e8 db 1b 00 00       	call   101f2d <_ZN6kernel4freeEPv>
	
	(*this->proc->memmgr).free(this->ustack, bytes_to_pages(thread::ustack_size));
  100352:	8b 45 08             	mov    0x8(%ebp),%eax
  100355:	8b 50 10             	mov    0x10(%eax),%edx
  100358:	8b 45 08             	mov    0x8(%ebp),%eax
  10035b:	8b 40 18             	mov    0x18(%eax),%eax
  10035e:	8b 80 50 04 00 00    	mov    0x450(%eax),%eax
  100364:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  10036b:	00 
  10036c:	89 54 24 04          	mov    %edx,0x4(%esp)
  100370:	89 04 24             	mov    %eax,(%esp)
  100373:	e8 16 46 00 00       	call   10498e <_ZN3hal3x863vmm4freeEjj>
}
  100378:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10037b:	c9                   	leave  
  10037c:	c3                   	ret    
  10037d:	90                   	nop

0010037e <_ZN6kernel6thread4infoEv>:

thread::info_t thread::info(  )
{
  10037e:	55                   	push   %ebp
  10037f:	89 e5                	mov    %esp,%ebp
	static thread::info_t info;

	info.id    = this->id;
  100381:	8b 45 0c             	mov    0xc(%ebp),%eax
  100384:	8b 00                	mov    (%eax),%eax
  100386:	a3 44 30 13 00       	mov    %eax,0x133044
	info.state = this->state;
  10038b:	8b 45 0c             	mov    0xc(%ebp),%eax
  10038e:	8b 40 04             	mov    0x4(%eax),%eax
  100391:	a3 48 30 13 00       	mov    %eax,0x133048
	info.flags = this->flags;
  100396:	8b 45 0c             	mov    0xc(%ebp),%eax
  100399:	8b 40 08             	mov    0x8(%eax),%eax
  10039c:	a3 4c 30 13 00       	mov    %eax,0x13304c

	return info;
  1003a1:	8b 45 08             	mov    0x8(%ebp),%eax
  1003a4:	8b 15 44 30 13 00    	mov    0x133044,%edx
  1003aa:	89 10                	mov    %edx,(%eax)
  1003ac:	8b 15 48 30 13 00    	mov    0x133048,%edx
  1003b2:	89 50 04             	mov    %edx,0x4(%eax)
  1003b5:	8b 15 4c 30 13 00    	mov    0x13304c,%edx
  1003bb:	89 50 08             	mov    %edx,0x8(%eax)
}
  1003be:	8b 45 08             	mov    0x8(%ebp),%eax
  1003c1:	5d                   	pop    %ebp
  1003c2:	c2 04 00             	ret    $0x4
  1003c5:	90                   	nop

001003c6 <_ZN6kernel6thread4saveEPN3hal3x863cpu9cpu_stateE>:

void thread::save( cpu::cpu_state *cpu )
{
  1003c6:	55                   	push   %ebp
  1003c7:	89 e5                	mov    %esp,%ebp
	this->cpu = cpu;
  1003c9:	8b 45 08             	mov    0x8(%ebp),%eax
  1003cc:	8b 55 0c             	mov    0xc(%ebp),%edx
  1003cf:	89 50 0c             	mov    %edx,0xc(%eax)
}
  1003d2:	5d                   	pop    %ebp
  1003d3:	c3                   	ret    

001003d4 <_ZN6kernel6thread7restoreEv>:

cpu::cpu_state *thread::restore(  )
{
  1003d4:	55                   	push   %ebp
  1003d5:	89 e5                	mov    %esp,%ebp
	return this->cpu;
  1003d7:	8b 45 08             	mov    0x8(%ebp),%eax
  1003da:	8b 40 0c             	mov    0xc(%eax),%eax
}
  1003dd:	5d                   	pop    %ebp
  1003de:	c3                   	ret    
  1003df:	90                   	nop

001003e0 <_ZN6kernel9threadmgrC1Ev>:



threadmgr::threadmgr(  )
  1003e0:	55                   	push   %ebp
  1003e1:	89 e5                	mov    %esp,%ebp
  1003e3:	83 ec 18             	sub    $0x18,%esp
  1003e6:	8b 45 08             	mov    0x8(%ebp),%eax
  1003e9:	89 04 24             	mov    %eax,(%esp)
  1003ec:	e8 73 be 00 00       	call   10c264 <_ZN5tools4listIN6kernel6threadEEC1Ev>
{

}
  1003f1:	c9                   	leave  
  1003f2:	c3                   	ret    
  1003f3:	90                   	nop

001003f4 <_ZN6kernel9threadmgr3addEPNS_6threadE>:

void threadmgr::add( thread *thrd )
{
  1003f4:	55                   	push   %ebp
  1003f5:	89 e5                	mov    %esp,%ebp
  1003f7:	83 ec 18             	sub    $0x18,%esp
	if(thrd && this->get(thrd) == nullptr)
  1003fa:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  1003fe:	74 1d                	je     10041d <_ZN6kernel9threadmgr3addEPNS_6threadE+0x29>
  100400:	8b 45 0c             	mov    0xc(%ebp),%eax
  100403:	89 44 24 04          	mov    %eax,0x4(%esp)
  100407:	8b 45 08             	mov    0x8(%ebp),%eax
  10040a:	89 04 24             	mov    %eax,(%esp)
  10040d:	e8 88 01 00 00       	call   10059a <_ZN6kernel9threadmgr3getEPNS_6threadE>
  100412:	85 c0                	test   %eax,%eax
  100414:	75 07                	jne    10041d <_ZN6kernel9threadmgr3addEPNS_6threadE+0x29>
  100416:	b8 01 00 00 00       	mov    $0x1,%eax
  10041b:	eb 05                	jmp    100422 <_ZN6kernel9threadmgr3addEPNS_6threadE+0x2e>
  10041d:	b8 00 00 00 00       	mov    $0x0,%eax
  100422:	84 c0                	test   %al,%al
  100424:	74 12                	je     100438 <_ZN6kernel9threadmgr3addEPNS_6threadE+0x44>
	{
		this->thrds.push_back(thrd);
  100426:	8b 45 08             	mov    0x8(%ebp),%eax
  100429:	8b 55 0c             	mov    0xc(%ebp),%edx
  10042c:	89 54 24 04          	mov    %edx,0x4(%esp)
  100430:	89 04 24             	mov    %eax,(%esp)
  100433:	e8 46 bd 00 00       	call   10c17e <_ZN5tools4listIN6kernel6threadEE9push_backEPS2_>
	}
}
  100438:	c9                   	leave  
  100439:	c3                   	ret    

0010043a <_ZN6kernel9threadmgr6removeEPNS_6threadE>:

void threadmgr::remove( thread *thrd )
{
  10043a:	55                   	push   %ebp
  10043b:	89 e5                	mov    %esp,%ebp
  10043d:	53                   	push   %ebx
  10043e:	83 ec 34             	sub    $0x34,%esp
	for(tools::list<thread>::iterator it = this->thrds.begin(); it != this->thrds.end(); it++)
  100441:	8b 55 08             	mov    0x8(%ebp),%edx
  100444:	8d 45 d8             	lea    -0x28(%ebp),%eax
  100447:	89 54 24 04          	mov    %edx,0x4(%esp)
  10044b:	89 04 24             	mov    %eax,(%esp)
  10044e:	e8 d9 bb 00 00       	call   10c02c <_ZN5tools4listIN6kernel6threadEE5beginEv>
  100453:	83 ec 04             	sub    $0x4,%esp
  100456:	eb 55                	jmp    1004ad <_ZN6kernel9threadmgr6removeEPNS_6threadE+0x73>
	{
		if(*it == thrd)
  100458:	8d 45 d8             	lea    -0x28(%ebp),%eax
  10045b:	89 04 24             	mov    %eax,(%esp)
  10045e:	e8 13 bc 00 00       	call   10c076 <_ZN5tools4listIN6kernel6threadEE8iteratordeEv>
  100463:	3b 45 0c             	cmp    0xc(%ebp),%eax
  100466:	0f 94 c0             	sete   %al
  100469:	84 c0                	test   %al,%al
  10046b:	74 23                	je     100490 <_ZN6kernel9threadmgr6removeEPNS_6threadE+0x56>
		{
			this->thrds.erase(it);	
  10046d:	8b 5d 08             	mov    0x8(%ebp),%ebx
  100470:	8d 4d e0             	lea    -0x20(%ebp),%ecx
  100473:	8b 45 d8             	mov    -0x28(%ebp),%eax
  100476:	8b 55 dc             	mov    -0x24(%ebp),%edx
  100479:	89 44 24 08          	mov    %eax,0x8(%esp)
  10047d:	89 54 24 0c          	mov    %edx,0xc(%esp)
  100481:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  100485:	89 0c 24             	mov    %ecx,(%esp)
  100488:	e8 f5 bb 00 00       	call   10c082 <_ZN5tools4listIN6kernel6threadEE5eraseENS3_8iteratorE>
  10048d:	83 ec 04             	sub    $0x4,%esp
	}
}

void threadmgr::remove( thread *thrd )
{
	for(tools::list<thread>::iterator it = this->thrds.begin(); it != this->thrds.end(); it++)
  100490:	8d 45 e8             	lea    -0x18(%ebp),%eax
  100493:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  10049a:	00 
  10049b:	8d 55 d8             	lea    -0x28(%ebp),%edx
  10049e:	89 54 24 04          	mov    %edx,0x4(%esp)
  1004a2:	89 04 24             	mov    %eax,(%esp)
  1004a5:	e8 88 bd 00 00       	call   10c232 <_ZN5tools4listIN6kernel6threadEE8iteratorppEi>
  1004aa:	83 ec 04             	sub    $0x4,%esp
  1004ad:	8b 55 08             	mov    0x8(%ebp),%edx
  1004b0:	8d 45 f0             	lea    -0x10(%ebp),%eax
  1004b3:	89 54 24 04          	mov    %edx,0x4(%esp)
  1004b7:	89 04 24             	mov    %eax,(%esp)
  1004ba:	e8 07 bd 00 00       	call   10c1c6 <_ZN5tools4listIN6kernel6threadEE3endEv>
  1004bf:	83 ec 04             	sub    $0x4,%esp
  1004c2:	8d 45 f0             	lea    -0x10(%ebp),%eax
  1004c5:	89 44 24 04          	mov    %eax,0x4(%esp)
  1004c9:	8d 45 d8             	lea    -0x28(%ebp),%eax
  1004cc:	89 04 24             	mov    %eax,(%esp)
  1004cf:	e8 3e bd 00 00       	call   10c212 <_ZN5tools4listIN6kernel6threadEE8iteratorneERKS4_>
  1004d4:	84 c0                	test   %al,%al
  1004d6:	0f 95 c0             	setne  %al
  1004d9:	84 c0                	test   %al,%al
  1004db:	0f 85 77 ff ff ff    	jne    100458 <_ZN6kernel9threadmgr6removeEPNS_6threadE+0x1e>
		if(*it == thrd)
		{
			this->thrds.erase(it);	
		}
	}
}
  1004e1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  1004e4:	c9                   	leave  
  1004e5:	c3                   	ret    

001004e6 <_ZN6kernel9threadmgr3getEj>:

thread *threadmgr::get( thread::id_t id )
{
  1004e6:	55                   	push   %ebp
  1004e7:	89 e5                	mov    %esp,%ebp
  1004e9:	83 ec 38             	sub    $0x38,%esp
	if(this->thrds.empty())
  1004ec:	8b 45 08             	mov    0x8(%ebp),%eax
  1004ef:	89 04 24             	mov    %eax,(%esp)
  1004f2:	e8 d3 ba 00 00       	call   10bfca <_ZN5tools4listIN6kernel6threadEE5emptyEv>
  1004f7:	84 c0                	test   %al,%al
  1004f9:	0f 95 c0             	setne  %al
  1004fc:	84 c0                	test   %al,%al
  1004fe:	74 0a                	je     10050a <_ZN6kernel9threadmgr3getEj+0x24>
	{
		return nullptr;
  100500:	b8 00 00 00 00       	mov    $0x0,%eax
  100505:	e9 8d 00 00 00       	jmp    100597 <_ZN6kernel9threadmgr3getEj+0xb1>
	}

	for(tools::list<thread>::iterator it = this->thrds.begin(); it != this->thrds.end(); it++)
  10050a:	8b 55 08             	mov    0x8(%ebp),%edx
  10050d:	8d 45 e0             	lea    -0x20(%ebp),%eax
  100510:	89 54 24 04          	mov    %edx,0x4(%esp)
  100514:	89 04 24             	mov    %eax,(%esp)
  100517:	e8 10 bb 00 00       	call   10c02c <_ZN5tools4listIN6kernel6threadEE5beginEv>
  10051c:	83 ec 04             	sub    $0x4,%esp
  10051f:	eb 41                	jmp    100562 <_ZN6kernel9threadmgr3getEj+0x7c>
	{
		if(it->id == id)
  100521:	8d 45 e0             	lea    -0x20(%ebp),%eax
  100524:	89 04 24             	mov    %eax,(%esp)
  100527:	e8 d0 bd 00 00       	call   10c2fc <_ZN5tools4listIN6kernel6threadEE8iteratorptEv>
  10052c:	8b 00                	mov    (%eax),%eax
  10052e:	3b 45 0c             	cmp    0xc(%ebp),%eax
  100531:	0f 94 c0             	sete   %al
  100534:	84 c0                	test   %al,%al
  100536:	74 0d                	je     100545 <_ZN6kernel9threadmgr3getEj+0x5f>
		{
			return *it;
  100538:	8d 45 e0             	lea    -0x20(%ebp),%eax
  10053b:	89 04 24             	mov    %eax,(%esp)
  10053e:	e8 33 bb 00 00       	call   10c076 <_ZN5tools4listIN6kernel6threadEE8iteratordeEv>
  100543:	eb 52                	jmp    100597 <_ZN6kernel9threadmgr3getEj+0xb1>
	if(this->thrds.empty())
	{
		return nullptr;
	}

	for(tools::list<thread>::iterator it = this->thrds.begin(); it != this->thrds.end(); it++)
  100545:	8d 45 e8             	lea    -0x18(%ebp),%eax
  100548:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  10054f:	00 
  100550:	8d 55 e0             	lea    -0x20(%ebp),%edx
  100553:	89 54 24 04          	mov    %edx,0x4(%esp)
  100557:	89 04 24             	mov    %eax,(%esp)
  10055a:	e8 d3 bc 00 00       	call   10c232 <_ZN5tools4listIN6kernel6threadEE8iteratorppEi>
  10055f:	83 ec 04             	sub    $0x4,%esp
  100562:	8b 55 08             	mov    0x8(%ebp),%edx
  100565:	8d 45 f0             	lea    -0x10(%ebp),%eax
  100568:	89 54 24 04          	mov    %edx,0x4(%esp)
  10056c:	89 04 24             	mov    %eax,(%esp)
  10056f:	e8 52 bc 00 00       	call   10c1c6 <_ZN5tools4listIN6kernel6threadEE3endEv>
  100574:	83 ec 04             	sub    $0x4,%esp
  100577:	8d 45 f0             	lea    -0x10(%ebp),%eax
  10057a:	89 44 24 04          	mov    %eax,0x4(%esp)
  10057e:	8d 45 e0             	lea    -0x20(%ebp),%eax
  100581:	89 04 24             	mov    %eax,(%esp)
  100584:	e8 89 bc 00 00       	call   10c212 <_ZN5tools4listIN6kernel6threadEE8iteratorneERKS4_>
  100589:	84 c0                	test   %al,%al
  10058b:	0f 95 c0             	setne  %al
  10058e:	84 c0                	test   %al,%al
  100590:	75 8f                	jne    100521 <_ZN6kernel9threadmgr3getEj+0x3b>
		{
			return *it;
		}
	}

	return nullptr;
  100592:	b8 00 00 00 00       	mov    $0x0,%eax
}
  100597:	c9                   	leave  
  100598:	c3                   	ret    
  100599:	90                   	nop

0010059a <_ZN6kernel9threadmgr3getEPNS_6threadE>:

thread *threadmgr::get( thread *thrd )
{
  10059a:	55                   	push   %ebp
  10059b:	89 e5                	mov    %esp,%ebp
  10059d:	83 ec 38             	sub    $0x38,%esp
	if(this->thrds.empty())
  1005a0:	8b 45 08             	mov    0x8(%ebp),%eax
  1005a3:	89 04 24             	mov    %eax,(%esp)
  1005a6:	e8 1f ba 00 00       	call   10bfca <_ZN5tools4listIN6kernel6threadEE5emptyEv>
  1005ab:	84 c0                	test   %al,%al
  1005ad:	0f 95 c0             	setne  %al
  1005b0:	84 c0                	test   %al,%al
  1005b2:	74 0a                	je     1005be <_ZN6kernel9threadmgr3getEPNS_6threadE+0x24>
	{
		return nullptr;
  1005b4:	b8 00 00 00 00       	mov    $0x0,%eax
  1005b9:	e9 8b 00 00 00       	jmp    100649 <_ZN6kernel9threadmgr3getEPNS_6threadE+0xaf>
	}

	for(tools::list<thread>::iterator it = this->thrds.begin(); it != this->thrds.end(); it++)
  1005be:	8b 55 08             	mov    0x8(%ebp),%edx
  1005c1:	8d 45 e0             	lea    -0x20(%ebp),%eax
  1005c4:	89 54 24 04          	mov    %edx,0x4(%esp)
  1005c8:	89 04 24             	mov    %eax,(%esp)
  1005cb:	e8 5c ba 00 00       	call   10c02c <_ZN5tools4listIN6kernel6threadEE5beginEv>
  1005d0:	83 ec 04             	sub    $0x4,%esp
  1005d3:	eb 3f                	jmp    100614 <_ZN6kernel9threadmgr3getEPNS_6threadE+0x7a>
	{
		if(*it == thrd)
  1005d5:	8d 45 e0             	lea    -0x20(%ebp),%eax
  1005d8:	89 04 24             	mov    %eax,(%esp)
  1005db:	e8 96 ba 00 00       	call   10c076 <_ZN5tools4listIN6kernel6threadEE8iteratordeEv>
  1005e0:	3b 45 0c             	cmp    0xc(%ebp),%eax
  1005e3:	0f 94 c0             	sete   %al
  1005e6:	84 c0                	test   %al,%al
  1005e8:	74 0d                	je     1005f7 <_ZN6kernel9threadmgr3getEPNS_6threadE+0x5d>
		{
			return *it;
  1005ea:	8d 45 e0             	lea    -0x20(%ebp),%eax
  1005ed:	89 04 24             	mov    %eax,(%esp)
  1005f0:	e8 81 ba 00 00       	call   10c076 <_ZN5tools4listIN6kernel6threadEE8iteratordeEv>
  1005f5:	eb 52                	jmp    100649 <_ZN6kernel9threadmgr3getEPNS_6threadE+0xaf>
	if(this->thrds.empty())
	{
		return nullptr;
	}

	for(tools::list<thread>::iterator it = this->thrds.begin(); it != this->thrds.end(); it++)
  1005f7:	8d 45 e8             	lea    -0x18(%ebp),%eax
  1005fa:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  100601:	00 
  100602:	8d 55 e0             	lea    -0x20(%ebp),%edx
  100605:	89 54 24 04          	mov    %edx,0x4(%esp)
  100609:	89 04 24             	mov    %eax,(%esp)
  10060c:	e8 21 bc 00 00       	call   10c232 <_ZN5tools4listIN6kernel6threadEE8iteratorppEi>
  100611:	83 ec 04             	sub    $0x4,%esp
  100614:	8b 55 08             	mov    0x8(%ebp),%edx
  100617:	8d 45 f0             	lea    -0x10(%ebp),%eax
  10061a:	89 54 24 04          	mov    %edx,0x4(%esp)
  10061e:	89 04 24             	mov    %eax,(%esp)
  100621:	e8 a0 bb 00 00       	call   10c1c6 <_ZN5tools4listIN6kernel6threadEE3endEv>
  100626:	83 ec 04             	sub    $0x4,%esp
  100629:	8d 45 f0             	lea    -0x10(%ebp),%eax
  10062c:	89 44 24 04          	mov    %eax,0x4(%esp)
  100630:	8d 45 e0             	lea    -0x20(%ebp),%eax
  100633:	89 04 24             	mov    %eax,(%esp)
  100636:	e8 d7 bb 00 00       	call   10c212 <_ZN5tools4listIN6kernel6threadEE8iteratorneERKS4_>
  10063b:	84 c0                	test   %al,%al
  10063d:	0f 95 c0             	setne  %al
  100640:	84 c0                	test   %al,%al
  100642:	75 91                	jne    1005d5 <_ZN6kernel9threadmgr3getEPNS_6threadE+0x3b>
		{
			return *it;
		}
	}

	return nullptr;
  100644:	b8 00 00 00 00       	mov    $0x0,%eax
}
  100649:	c9                   	leave  
  10064a:	c3                   	ret    
  10064b:	90                   	nop

0010064c <_ZNKUlcE_clEc>:
  *
  *		The standard-output is defined with a function (c++ lambda-function) putting a char to 'screen' or 'seri' (defined in 'hal').
  *		If compiled with 'QEMU_DEBUG' option, the char is also send to the qemu serial port.
  */
#if defined(OUTPUT_SCREEN) && defined(QEMU_DEBUG) 
output kernel::kout = output( []( char c ){ screen.putc(c); io::outb(definitions::qemu_serial, c); } );
  10064c:	55                   	push   %ebp
  10064d:	89 e5                	mov    %esp,%ebp
  10064f:	83 ec 18             	sub    $0x18,%esp
  100652:	8b 45 0c             	mov    0xc(%ebp),%eax
  100655:	88 45 f4             	mov    %al,-0xc(%ebp)
  100658:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
  10065c:	89 44 24 04          	mov    %eax,0x4(%esp)
  100660:	c7 04 24 d4 38 13 00 	movl   $0x1338d4,(%esp)
  100667:	e8 88 8e 00 00       	call   1094f4 <_ZN3hal3x865video4putcEc>
  10066c:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
  100670:	0f b6 c0             	movzbl %al,%eax
  100673:	89 44 24 04          	mov    %eax,0x4(%esp)
  100677:	c7 04 24 f8 03 00 00 	movl   $0x3f8,(%esp)
  10067e:	e8 01 94 00 00       	call   109a84 <_ZN3hal3x862io4outbEth>
  100683:	c9                   	leave  
  100684:	c3                   	ret    
  100685:	90                   	nop

00100686 <_ZNUlcE_4_FUNEc>:
  100686:	55                   	push   %ebp
  100687:	89 e5                	mov    %esp,%ebp
  100689:	83 ec 18             	sub    $0x18,%esp
  10068c:	8b 45 08             	mov    0x8(%ebp),%eax
  10068f:	88 45 f4             	mov    %al,-0xc(%ebp)
  100692:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
  100696:	88 44 24 04          	mov    %al,0x4(%esp)
  10069a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1006a1:	e8 a6 ff ff ff       	call   10064c <_ZNKUlcE_clEc>
  1006a6:	c9                   	leave  
  1006a7:	c3                   	ret    

001006a8 <_ZNKUlcE_cvPFvcEEv>:
  1006a8:	55                   	push   %ebp
  1006a9:	89 e5                	mov    %esp,%ebp
  1006ab:	b8 86 06 10 00       	mov    $0x100686,%eax
  1006b0:	5d                   	pop    %ebp
  1006b1:	c3                   	ret    

001006b2 <_ZN6kernel6outputC1Ev>:
#endif

/*
Constructors
*/
output::output(  ) : out_(nullptr)
  1006b2:	55                   	push   %ebp
  1006b3:	89 e5                	mov    %esp,%ebp
  1006b5:	83 ec 18             	sub    $0x18,%esp
  1006b8:	8b 45 08             	mov    0x8(%ebp),%eax
  1006bb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
{
	this->setf(output::dec_, output::basefield_);
  1006c1:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
  1006c8:	00 
  1006c9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  1006d0:	00 
  1006d1:	8b 45 08             	mov    0x8(%ebp),%eax
  1006d4:	89 04 24             	mov    %eax,(%esp)
  1006d7:	e8 8c 00 00 00       	call   100768 <_ZN6kernel6output4setfEjj>
}
  1006dc:	c9                   	leave  
  1006dd:	c3                   	ret    

001006de <_ZN6kernel6outputC1EPFvcE>:

output::output( outc_t pf ) : out_(pf)
  1006de:	55                   	push   %ebp
  1006df:	89 e5                	mov    %esp,%ebp
  1006e1:	83 ec 18             	sub    $0x18,%esp
  1006e4:	8b 45 08             	mov    0x8(%ebp),%eax
  1006e7:	8b 55 0c             	mov    0xc(%ebp),%edx
  1006ea:	89 10                	mov    %edx,(%eax)
{
	this->setf(output::dec_, output::basefield_);
  1006ec:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
  1006f3:	00 
  1006f4:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  1006fb:	00 
  1006fc:	8b 45 08             	mov    0x8(%ebp),%eax
  1006ff:	89 04 24             	mov    %eax,(%esp)
  100702:	e8 61 00 00 00       	call   100768 <_ZN6kernel6output4setfEjj>
}
  100707:	c9                   	leave  
  100708:	c3                   	ret    
  100709:	90                   	nop

0010070a <_ZN6kernel6output4setoEPFvcE>:

/*
Set output-method
*/
void output::seto( outc_t pf )
{
  10070a:	55                   	push   %ebp
  10070b:	89 e5                	mov    %esp,%ebp
	this->out_ = pf;
  10070d:	8b 45 08             	mov    0x8(%ebp),%eax
  100710:	8b 55 0c             	mov    0xc(%ebp),%edx
  100713:	89 10                	mov    %edx,(%eax)
}
  100715:	5d                   	pop    %ebp
  100716:	c3                   	ret    
  100717:	90                   	nop

00100718 <_ZN6kernel6output5flagsEv>:

/*
Set/Get fmtflags
*/
output::fmtflags_t output::flags(  )
{
  100718:	55                   	push   %ebp
  100719:	89 e5                	mov    %esp,%ebp
	return this->fmtflags_;
  10071b:	8b 45 08             	mov    0x8(%ebp),%eax
  10071e:	8b 40 04             	mov    0x4(%eax),%eax
}
  100721:	5d                   	pop    %ebp
  100722:	c3                   	ret    
  100723:	90                   	nop

00100724 <_ZN6kernel6output5flagsEj>:

output::fmtflags_t output::flags( output::fmtflags_t fmtfl )
{
  100724:	55                   	push   %ebp
  100725:	89 e5                	mov    %esp,%ebp
  100727:	83 ec 10             	sub    $0x10,%esp
	output::fmtflags_t tmp = this->fmtflags_;
  10072a:	8b 45 08             	mov    0x8(%ebp),%eax
  10072d:	8b 40 04             	mov    0x4(%eax),%eax
  100730:	89 45 fc             	mov    %eax,-0x4(%ebp)

	this->fmtflags_ = fmtfl;
  100733:	8b 45 08             	mov    0x8(%ebp),%eax
  100736:	8b 55 0c             	mov    0xc(%ebp),%edx
  100739:	89 50 04             	mov    %edx,0x4(%eax)

	return tmp;
  10073c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  10073f:	c9                   	leave  
  100740:	c3                   	ret    
  100741:	90                   	nop

00100742 <_ZN6kernel6output4setfEj>:

output::fmtflags_t output::setf( output::fmtflags_t fmtfl )
{
  100742:	55                   	push   %ebp
  100743:	89 e5                	mov    %esp,%ebp
  100745:	83 ec 10             	sub    $0x10,%esp
	output::fmtflags_t tmp = this->fmtflags_;
  100748:	8b 45 08             	mov    0x8(%ebp),%eax
  10074b:	8b 40 04             	mov    0x4(%eax),%eax
  10074e:	89 45 fc             	mov    %eax,-0x4(%ebp)

	this->fmtflags_ = fmtfl | this->fmtflags_;
  100751:	8b 45 08             	mov    0x8(%ebp),%eax
  100754:	8b 40 04             	mov    0x4(%eax),%eax
  100757:	0b 45 0c             	or     0xc(%ebp),%eax
  10075a:	89 c2                	mov    %eax,%edx
  10075c:	8b 45 08             	mov    0x8(%ebp),%eax
  10075f:	89 50 04             	mov    %edx,0x4(%eax)

	return tmp;
  100762:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  100765:	c9                   	leave  
  100766:	c3                   	ret    
  100767:	90                   	nop

00100768 <_ZN6kernel6output4setfEjj>:

output::fmtflags_t output::setf( output::fmtflags_t fmtfl, output::fmtflags_t mask )
{
  100768:	55                   	push   %ebp
  100769:	89 e5                	mov    %esp,%ebp
  10076b:	83 ec 10             	sub    $0x10,%esp
	output::fmtflags_t tmp = this->fmtflags_;
  10076e:	8b 45 08             	mov    0x8(%ebp),%eax
  100771:	8b 40 04             	mov    0x4(%eax),%eax
  100774:	89 45 fc             	mov    %eax,-0x4(%ebp)

	this->fmtflags_ = fmtfl | (this->fmtflags_ & (~mask));
  100777:	8b 45 08             	mov    0x8(%ebp),%eax
  10077a:	8b 40 04             	mov    0x4(%eax),%eax
  10077d:	8b 55 10             	mov    0x10(%ebp),%edx
  100780:	f7 d2                	not    %edx
  100782:	21 d0                	and    %edx,%eax
  100784:	0b 45 0c             	or     0xc(%ebp),%eax
  100787:	89 c2                	mov    %eax,%edx
  100789:	8b 45 08             	mov    0x8(%ebp),%eax
  10078c:	89 50 04             	mov    %edx,0x4(%eax)

	return tmp;
  10078f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  100792:	c9                   	leave  
  100793:	c3                   	ret    

00100794 <_ZN6kernel6output6unsetfEj>:

void output::unsetf( output::fmtflags_t mask )
{
  100794:	55                   	push   %ebp
  100795:	89 e5                	mov    %esp,%ebp
	this->fmtflags_ = this->fmtflags_ ^ mask;
  100797:	8b 45 08             	mov    0x8(%ebp),%eax
  10079a:	8b 40 04             	mov    0x4(%eax),%eax
  10079d:	33 45 0c             	xor    0xc(%ebp),%eax
  1007a0:	89 c2                	mov    %eax,%edx
  1007a2:	8b 45 08             	mov    0x8(%ebp),%eax
  1007a5:	89 50 04             	mov    %edx,0x4(%eax)
}
  1007a8:	5d                   	pop    %ebp
  1007a9:	c3                   	ret    

001007aa <_ZN6kernel6output4putcEc>:

/*
Output Methods
*/
void output::putc( char c )
{
  1007aa:	55                   	push   %ebp
  1007ab:	89 e5                	mov    %esp,%ebp
  1007ad:	83 ec 18             	sub    $0x18,%esp
  1007b0:	8b 45 0c             	mov    0xc(%ebp),%eax
  1007b3:	88 45 f4             	mov    %al,-0xc(%ebp)
	this->out_(c);
  1007b6:	8b 45 08             	mov    0x8(%ebp),%eax
  1007b9:	8b 00                	mov    (%eax),%eax
  1007bb:	0f be 55 f4          	movsbl -0xc(%ebp),%edx
  1007bf:	89 14 24             	mov    %edx,(%esp)
  1007c2:	ff d0                	call   *%eax
}
  1007c4:	c9                   	leave  
  1007c5:	c3                   	ret    

001007c6 <_ZN6kernel6output4putnEl>:

void output::putn( long n )
{
  1007c6:	55                   	push   %ebp
  1007c7:	89 e5                	mov    %esp,%ebp
  1007c9:	83 ec 78             	sub    $0x78,%esp
	static const char digits[] = "0123456789abcdefghijklmnopqrstuvwxyz"; 

	unsigned long base = 10;
  1007cc:	c7 45 f4 0a 00 00 00 	movl   $0xa,-0xc(%ebp)

	size_t len = 0;
  1007d3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	char buf[65];
	char *p;

	p = buf + 64;
  1007da:	8d 45 a7             	lea    -0x59(%ebp),%eax
  1007dd:	83 c0 40             	add    $0x40,%eax
  1007e0:	89 45 ec             	mov    %eax,-0x14(%ebp)

	*p = '\0';
  1007e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1007e6:	c6 00 00             	movb   $0x0,(%eax)

	if(this->fmtflags_ & output::hex_)
  1007e9:	8b 45 08             	mov    0x8(%ebp),%eax
  1007ec:	8b 40 04             	mov    0x4(%eax),%eax
  1007ef:	83 e0 02             	and    $0x2,%eax
  1007f2:	85 c0                	test   %eax,%eax
  1007f4:	74 09                	je     1007ff <_ZN6kernel6output4putnEl+0x39>
	{
		base = 16;
  1007f6:	c7 45 f4 10 00 00 00 	movl   $0x10,-0xc(%ebp)
  1007fd:	eb 14                	jmp    100813 <_ZN6kernel6output4putnEl+0x4d>
	}
	else if(this->fmtflags_ & output::oct_)
  1007ff:	8b 45 08             	mov    0x8(%ebp),%eax
  100802:	8b 40 04             	mov    0x4(%eax),%eax
  100805:	83 e0 04             	and    $0x4,%eax
  100808:	85 c0                	test   %eax,%eax
  10080a:	74 07                	je     100813 <_ZN6kernel6output4putnEl+0x4d>
	{
		base = 8;
  10080c:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
	}

	do 
	{
		unsigned long d = n % base;
  100813:	8b 45 0c             	mov    0xc(%ebp),%eax
  100816:	ba 00 00 00 00       	mov    $0x0,%edx
  10081b:	f7 75 f4             	divl   -0xc(%ebp)
  10081e:	89 55 e8             	mov    %edx,-0x18(%ebp)

		n /= base;
  100821:	8b 45 0c             	mov    0xc(%ebp),%eax
  100824:	ba 00 00 00 00       	mov    $0x0,%edx
  100829:	f7 75 f4             	divl   -0xc(%ebp)
  10082c:	89 45 0c             	mov    %eax,0xc(%ebp)

		--p;
  10082f:	83 6d ec 01          	subl   $0x1,-0x14(%ebp)
		len++;
  100833:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
		*p = (char)digits[d];
  100837:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10083a:	05 e0 e1 10 00       	add    $0x10e1e0,%eax
  10083f:	0f b6 10             	movzbl (%eax),%edx
  100842:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100845:	88 10                	mov    %dl,(%eax)
	else if(this->fmtflags_ & output::oct_)
	{
		base = 8;
	}

	do 
  100847:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  10084b:	75 13                	jne    100860 <_ZN6kernel6output4putnEl+0x9a>
		n /= base;

		--p;
		len++;
		*p = (char)digits[d];
	} while((n || ((this->fmtflags_ & output::hex_) && len < 8)) && p >= buf);
  10084d:	8b 45 08             	mov    0x8(%ebp),%eax
  100850:	8b 40 04             	mov    0x4(%eax),%eax
  100853:	83 e0 02             	and    $0x2,%eax
  100856:	85 c0                	test   %eax,%eax
  100858:	74 0e                	je     100868 <_ZN6kernel6output4putnEl+0xa2>
  10085a:	83 7d f0 07          	cmpl   $0x7,-0x10(%ebp)
  10085e:	77 08                	ja     100868 <_ZN6kernel6output4putnEl+0xa2>
  100860:	8d 45 a7             	lea    -0x59(%ebp),%eax
  100863:	39 45 ec             	cmp    %eax,-0x14(%ebp)
  100866:	73 ab                	jae    100813 <_ZN6kernel6output4putnEl+0x4d>

	if(this->fmtflags_ & output::hex_)
  100868:	8b 45 08             	mov    0x8(%ebp),%eax
  10086b:	8b 40 04             	mov    0x4(%eax),%eax
  10086e:	83 e0 02             	and    $0x2,%eax
  100871:	85 c0                	test   %eax,%eax
  100873:	74 16                	je     10088b <_ZN6kernel6output4putnEl+0xc5>
	{
		*--p = 'x';
  100875:	83 6d ec 01          	subl   $0x1,-0x14(%ebp)
  100879:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10087c:	c6 00 78             	movb   $0x78,(%eax)
		*--p = '0';
  10087f:	83 6d ec 01          	subl   $0x1,-0x14(%ebp)
  100883:	8b 45 ec             	mov    -0x14(%ebp),%eax
  100886:	c6 00 30             	movb   $0x30,(%eax)
  100889:	eb 17                	jmp    1008a2 <_ZN6kernel6output4putnEl+0xdc>
	}
	else if(this->fmtflags_ & output::oct_)
  10088b:	8b 45 08             	mov    0x8(%ebp),%eax
  10088e:	8b 40 04             	mov    0x4(%eax),%eax
  100891:	83 e0 04             	and    $0x4,%eax
  100894:	85 c0                	test   %eax,%eax
  100896:	74 0a                	je     1008a2 <_ZN6kernel6output4putnEl+0xdc>
	{
		*--p = '0';
  100898:	83 6d ec 01          	subl   $0x1,-0x14(%ebp)
  10089c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10089f:	c6 00 30             	movb   $0x30,(%eax)
	}

	this->puts(p);
  1008a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1008a5:	89 44 24 04          	mov    %eax,0x4(%esp)
  1008a9:	8b 45 08             	mov    0x8(%ebp),%eax
  1008ac:	89 04 24             	mov    %eax,(%esp)
  1008af:	e8 02 00 00 00       	call   1008b6 <_ZN6kernel6output4putsEPKc>
}
  1008b4:	c9                   	leave  
  1008b5:	c3                   	ret    

001008b6 <_ZN6kernel6output4putsEPKc>:

void output::puts( const char *s )
{
  1008b6:	55                   	push   %ebp
  1008b7:	89 e5                	mov    %esp,%ebp
  1008b9:	83 ec 18             	sub    $0x18,%esp
	while(*s)
  1008bc:	eb 19                	jmp    1008d7 <_ZN6kernel6output4putsEPKc+0x21>
	{
		this->out_(*s++);
  1008be:	8b 45 08             	mov    0x8(%ebp),%eax
  1008c1:	8b 10                	mov    (%eax),%edx
  1008c3:	8b 45 0c             	mov    0xc(%ebp),%eax
  1008c6:	8d 48 01             	lea    0x1(%eax),%ecx
  1008c9:	89 4d 0c             	mov    %ecx,0xc(%ebp)
  1008cc:	0f b6 00             	movzbl (%eax),%eax
  1008cf:	0f be c0             	movsbl %al,%eax
  1008d2:	89 04 24             	mov    %eax,(%esp)
  1008d5:	ff d2                	call   *%edx
	this->puts(p);
}

void output::puts( const char *s )
{
	while(*s)
  1008d7:	8b 45 0c             	mov    0xc(%ebp),%eax
  1008da:	0f b6 00             	movzbl (%eax),%eax
  1008dd:	84 c0                	test   %al,%al
  1008df:	75 dd                	jne    1008be <_ZN6kernel6output4putsEPKc+0x8>
	{
		this->out_(*s++);
	}
}
  1008e1:	c9                   	leave  
  1008e2:	c3                   	ret    
  1008e3:	90                   	nop

001008e4 <_ZN6kernel6outputlsEc>:

/*
Output Operators
*/
output &output::operator << ( char c )
{
  1008e4:	55                   	push   %ebp
  1008e5:	89 e5                	mov    %esp,%ebp
  1008e7:	83 ec 18             	sub    $0x18,%esp
  1008ea:	8b 45 0c             	mov    0xc(%ebp),%eax
  1008ed:	88 45 f4             	mov    %al,-0xc(%ebp)
	this->putc(c);
  1008f0:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
  1008f4:	89 44 24 04          	mov    %eax,0x4(%esp)
  1008f8:	8b 45 08             	mov    0x8(%ebp),%eax
  1008fb:	89 04 24             	mov    %eax,(%esp)
  1008fe:	e8 a7 fe ff ff       	call   1007aa <_ZN6kernel6output4putcEc>

	return *this;
  100903:	8b 45 08             	mov    0x8(%ebp),%eax
}
  100906:	c9                   	leave  
  100907:	c3                   	ret    

00100908 <_ZN6kernel6outputlsEh>:

output &output::operator << ( unsigned char c )
{
  100908:	55                   	push   %ebp
  100909:	89 e5                	mov    %esp,%ebp
  10090b:	83 ec 18             	sub    $0x18,%esp
  10090e:	8b 45 0c             	mov    0xc(%ebp),%eax
  100911:	88 45 f4             	mov    %al,-0xc(%ebp)
	return (*this << static_cast<char>(c));
  100914:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
  100918:	0f be c0             	movsbl %al,%eax
  10091b:	89 44 24 04          	mov    %eax,0x4(%esp)
  10091f:	8b 45 08             	mov    0x8(%ebp),%eax
  100922:	89 04 24             	mov    %eax,(%esp)
  100925:	e8 ba ff ff ff       	call   1008e4 <_ZN6kernel6outputlsEc>
}
  10092a:	c9                   	leave  
  10092b:	c3                   	ret    

0010092c <_ZN6kernel6outputlsEs>:
			
output &output::operator << ( short n )
{
  10092c:	55                   	push   %ebp
  10092d:	89 e5                	mov    %esp,%ebp
  10092f:	83 ec 18             	sub    $0x18,%esp
  100932:	8b 45 0c             	mov    0xc(%ebp),%eax
  100935:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return (*this << static_cast<long>(n));
  100939:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
  10093d:	89 44 24 04          	mov    %eax,0x4(%esp)
  100941:	8b 45 08             	mov    0x8(%ebp),%eax
  100944:	89 04 24             	mov    %eax,(%esp)
  100947:	e8 58 00 00 00       	call   1009a4 <_ZN6kernel6outputlsEl>
}
  10094c:	c9                   	leave  
  10094d:	c3                   	ret    

0010094e <_ZN6kernel6outputlsEt>:

output &output::operator << ( unsigned short n )
{
  10094e:	55                   	push   %ebp
  10094f:	89 e5                	mov    %esp,%ebp
  100951:	83 ec 18             	sub    $0x18,%esp
  100954:	8b 45 0c             	mov    0xc(%ebp),%eax
  100957:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return (*this << static_cast<unsigned long>(n));
  10095b:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
  10095f:	89 44 24 04          	mov    %eax,0x4(%esp)
  100963:	8b 45 08             	mov    0x8(%ebp),%eax
  100966:	89 04 24             	mov    %eax,(%esp)
  100969:	e8 54 00 00 00       	call   1009c2 <_ZN6kernel6outputlsEm>
}
  10096e:	c9                   	leave  
  10096f:	c3                   	ret    

00100970 <_ZN6kernel6outputlsEi>:

output &output::operator << ( int n )
{
  100970:	55                   	push   %ebp
  100971:	89 e5                	mov    %esp,%ebp
  100973:	83 ec 18             	sub    $0x18,%esp
	return (*this << static_cast<long>(n));
  100976:	8b 45 0c             	mov    0xc(%ebp),%eax
  100979:	89 44 24 04          	mov    %eax,0x4(%esp)
  10097d:	8b 45 08             	mov    0x8(%ebp),%eax
  100980:	89 04 24             	mov    %eax,(%esp)
  100983:	e8 1c 00 00 00       	call   1009a4 <_ZN6kernel6outputlsEl>
}
  100988:	c9                   	leave  
  100989:	c3                   	ret    

0010098a <_ZN6kernel6outputlsEj>:

output &output::operator << ( unsigned int n )
{
  10098a:	55                   	push   %ebp
  10098b:	89 e5                	mov    %esp,%ebp
  10098d:	83 ec 18             	sub    $0x18,%esp
	return (*this << static_cast<unsigned long>(n));
  100990:	8b 45 0c             	mov    0xc(%ebp),%eax
  100993:	89 44 24 04          	mov    %eax,0x4(%esp)
  100997:	8b 45 08             	mov    0x8(%ebp),%eax
  10099a:	89 04 24             	mov    %eax,(%esp)
  10099d:	e8 20 00 00 00       	call   1009c2 <_ZN6kernel6outputlsEm>
}
  1009a2:	c9                   	leave  
  1009a3:	c3                   	ret    

001009a4 <_ZN6kernel6outputlsEl>:

output &output::operator << ( long n )
{
  1009a4:	55                   	push   %ebp
  1009a5:	89 e5                	mov    %esp,%ebp
  1009a7:	83 ec 18             	sub    $0x18,%esp
	this->putn(n);
  1009aa:	8b 45 0c             	mov    0xc(%ebp),%eax
  1009ad:	89 44 24 04          	mov    %eax,0x4(%esp)
  1009b1:	8b 45 08             	mov    0x8(%ebp),%eax
  1009b4:	89 04 24             	mov    %eax,(%esp)
  1009b7:	e8 0a fe ff ff       	call   1007c6 <_ZN6kernel6output4putnEl>
	
	return *this;
  1009bc:	8b 45 08             	mov    0x8(%ebp),%eax
}
  1009bf:	c9                   	leave  
  1009c0:	c3                   	ret    
  1009c1:	90                   	nop

001009c2 <_ZN6kernel6outputlsEm>:

output &output::operator << ( unsigned long n )
{
  1009c2:	55                   	push   %ebp
  1009c3:	89 e5                	mov    %esp,%ebp
  1009c5:	83 ec 18             	sub    $0x18,%esp
	this->putn(n);
  1009c8:	8b 45 0c             	mov    0xc(%ebp),%eax
  1009cb:	89 44 24 04          	mov    %eax,0x4(%esp)
  1009cf:	8b 45 08             	mov    0x8(%ebp),%eax
  1009d2:	89 04 24             	mov    %eax,(%esp)
  1009d5:	e8 ec fd ff ff       	call   1007c6 <_ZN6kernel6output4putnEl>
	
	return *this;
  1009da:	8b 45 08             	mov    0x8(%ebp),%eax
}
  1009dd:	c9                   	leave  
  1009de:	c3                   	ret    
  1009df:	90                   	nop

001009e0 <_ZN6kernel6outputlsEx>:

output &output::operator << ( long long n )
{
  1009e0:	55                   	push   %ebp
  1009e1:	89 e5                	mov    %esp,%ebp
  1009e3:	83 ec 18             	sub    $0x18,%esp
  1009e6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1009e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1009ec:	8b 45 10             	mov    0x10(%ebp),%eax
  1009ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return (*this << static_cast<long>(n));
  1009f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1009f5:	89 44 24 04          	mov    %eax,0x4(%esp)
  1009f9:	8b 45 08             	mov    0x8(%ebp),%eax
  1009fc:	89 04 24             	mov    %eax,(%esp)
  1009ff:	e8 a0 ff ff ff       	call   1009a4 <_ZN6kernel6outputlsEl>
}
  100a04:	c9                   	leave  
  100a05:	c3                   	ret    

00100a06 <_ZN6kernel6outputlsEy>:

output &output::operator << ( unsigned long long n )
{
  100a06:	55                   	push   %ebp
  100a07:	89 e5                	mov    %esp,%ebp
  100a09:	83 ec 18             	sub    $0x18,%esp
  100a0c:	8b 45 0c             	mov    0xc(%ebp),%eax
  100a0f:	89 45 f0             	mov    %eax,-0x10(%ebp)
  100a12:	8b 45 10             	mov    0x10(%ebp),%eax
  100a15:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return (*this << static_cast<unsigned long>(n));
  100a18:	8b 45 f0             	mov    -0x10(%ebp),%eax
  100a1b:	89 44 24 04          	mov    %eax,0x4(%esp)
  100a1f:	8b 45 08             	mov    0x8(%ebp),%eax
  100a22:	89 04 24             	mov    %eax,(%esp)
  100a25:	e8 98 ff ff ff       	call   1009c2 <_ZN6kernel6outputlsEm>
}
  100a2a:	c9                   	leave  
  100a2b:	c3                   	ret    

00100a2c <_ZN6kernel6outputlsEDn>:


output &output::operator << ( nullptr_t p )
{
  100a2c:	55                   	push   %ebp
  100a2d:	89 e5                	mov    %esp,%ebp
  100a2f:	83 ec 28             	sub    $0x28,%esp
	output::fmtflags_t tmpf = this->setf(output::hex_);
  100a32:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  100a39:	00 
  100a3a:	8b 45 08             	mov    0x8(%ebp),%eax
  100a3d:	89 04 24             	mov    %eax,(%esp)
  100a40:	e8 fd fc ff ff       	call   100742 <_ZN6kernel6output4setfEj>
  100a45:	89 45 f4             	mov    %eax,-0xc(%ebp)

	output &tmpo = (*this << static_cast<unsigned long>((uintptr_t)p));
  100a48:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  100a4f:	00 
  100a50:	8b 45 08             	mov    0x8(%ebp),%eax
  100a53:	89 04 24             	mov    %eax,(%esp)
  100a56:	e8 67 ff ff ff       	call   1009c2 <_ZN6kernel6outputlsEm>
  100a5b:	89 45 f0             	mov    %eax,-0x10(%ebp)

	this->setf(tmpf);
  100a5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100a61:	89 44 24 04          	mov    %eax,0x4(%esp)
  100a65:	8b 45 08             	mov    0x8(%ebp),%eax
  100a68:	89 04 24             	mov    %eax,(%esp)
  100a6b:	e8 d2 fc ff ff       	call   100742 <_ZN6kernel6output4setfEj>

	return tmpo;
  100a70:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
  100a73:	c9                   	leave  
  100a74:	c3                   	ret    
  100a75:	90                   	nop

00100a76 <_ZN6kernel6outputlsEPv>:

output &output::operator << ( void *p )
{
  100a76:	55                   	push   %ebp
  100a77:	89 e5                	mov    %esp,%ebp
  100a79:	83 ec 28             	sub    $0x28,%esp
	output::fmtflags_t tmpf = this->setf(output::hex_);
  100a7c:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  100a83:	00 
  100a84:	8b 45 08             	mov    0x8(%ebp),%eax
  100a87:	89 04 24             	mov    %eax,(%esp)
  100a8a:	e8 b3 fc ff ff       	call   100742 <_ZN6kernel6output4setfEj>
  100a8f:	89 45 f4             	mov    %eax,-0xc(%ebp)

	output &tmpo = (*this << static_cast<unsigned long>((uintptr_t)p));
  100a92:	8b 45 0c             	mov    0xc(%ebp),%eax
  100a95:	89 44 24 04          	mov    %eax,0x4(%esp)
  100a99:	8b 45 08             	mov    0x8(%ebp),%eax
  100a9c:	89 04 24             	mov    %eax,(%esp)
  100a9f:	e8 1e ff ff ff       	call   1009c2 <_ZN6kernel6outputlsEm>
  100aa4:	89 45 f0             	mov    %eax,-0x10(%ebp)

	this->setf(tmpf);
  100aa7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  100aaa:	89 44 24 04          	mov    %eax,0x4(%esp)
  100aae:	8b 45 08             	mov    0x8(%ebp),%eax
  100ab1:	89 04 24             	mov    %eax,(%esp)
  100ab4:	e8 89 fc ff ff       	call   100742 <_ZN6kernel6output4setfEj>

	return tmpo;
  100ab9:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
  100abc:	c9                   	leave  
  100abd:	c3                   	ret    

00100abe <_ZN6kernel6outputlsEPKc>:

output &output::operator << ( const char *s )
{
  100abe:	55                   	push   %ebp
  100abf:	89 e5                	mov    %esp,%ebp
  100ac1:	83 ec 18             	sub    $0x18,%esp
	this->puts(s);
  100ac4:	8b 45 0c             	mov    0xc(%ebp),%eax
  100ac7:	89 44 24 04          	mov    %eax,0x4(%esp)
  100acb:	8b 45 08             	mov    0x8(%ebp),%eax
  100ace:	89 04 24             	mov    %eax,(%esp)
  100ad1:	e8 e0 fd ff ff       	call   1008b6 <_ZN6kernel6output4putsEPKc>

	return *this;
  100ad6:	8b 45 08             	mov    0x8(%ebp),%eax
}
  100ad9:	c9                   	leave  
  100ada:	c3                   	ret    

00100adb <_Z41__static_initialization_and_destruction_0ii>:
  100adb:	55                   	push   %ebp
  100adc:	89 e5                	mov    %esp,%ebp
  100ade:	83 ec 28             	sub    $0x28,%esp
  100ae1:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
  100ae5:	75 24                	jne    100b0b <_Z41__static_initialization_and_destruction_0ii+0x30>
  100ae7:	81 7d 0c ff ff 00 00 	cmpl   $0xffff,0xc(%ebp)
  100aee:	75 1b                	jne    100b0b <_Z41__static_initialization_and_destruction_0ii+0x30>
  *
  *		The standard-output is defined with a function (c++ lambda-function) putting a char to 'screen' or 'seri' (defined in 'hal').
  *		If compiled with 'QEMU_DEBUG' option, the char is also send to the qemu serial port.
  */
#if defined(OUTPUT_SCREEN) && defined(QEMU_DEBUG) 
output kernel::kout = output( []( char c ){ screen.putc(c); io::outb(definitions::qemu_serial, c); } );
  100af0:	8d 45 f7             	lea    -0x9(%ebp),%eax
  100af3:	89 04 24             	mov    %eax,(%esp)
  100af6:	e8 ad fb ff ff       	call   1006a8 <_ZNKUlcE_cvPFvcEEv>
  100afb:	89 44 24 04          	mov    %eax,0x4(%esp)
  100aff:	c7 04 24 50 30 13 00 	movl   $0x133050,(%esp)
  100b06:	e8 d3 fb ff ff       	call   1006de <_ZN6kernel6outputC1EPFvcE>
output &output::operator << ( const char *s )
{
	this->puts(s);

	return *this;
}
  100b0b:	c9                   	leave  
  100b0c:	c3                   	ret    

00100b0d <_GLOBAL__sub_I__ZN6kernel4koutE>:
  100b0d:	55                   	push   %ebp
  100b0e:	89 e5                	mov    %esp,%ebp
  100b10:	83 ec 18             	sub    $0x18,%esp
  100b13:	c7 44 24 04 ff ff 00 	movl   $0xffff,0x4(%esp)
  100b1a:	00 
  100b1b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  100b22:	e8 b4 ff ff ff       	call   100adb <_Z41__static_initialization_and_destruction_0ii>
  100b27:	c9                   	leave  
  100b28:	c3                   	ret    

00100b29 <__tcf_2>:
	/**
	  * @brief	The process manager
	  */
	class processmgr
	{
		SINGLETON(processmgr)
  100b29:	55                   	push   %ebp
  100b2a:	89 e5                	mov    %esp,%ebp
  100b2c:	83 ec 18             	sub    $0x18,%esp
  100b2f:	c7 04 24 e0 60 13 00 	movl   $0x1360e0,(%esp)
  100b36:	e8 19 ba 00 00       	call   10c554 <_ZN6kernel10processmgrD1Ev>
  100b3b:	c9                   	leave  
  100b3c:	c3                   	ret    

00100b3d <__tcf_3>:
	/**
	  * @brief	The thread manager
	  */
	class threadmgr
	{
		SINGLETON(threadmgr)
  100b3d:	55                   	push   %ebp
  100b3e:	89 e5                	mov    %esp,%ebp
  100b40:	83 ec 18             	sub    $0x18,%esp
  100b43:	c7 04 24 04 61 13 00 	movl   $0x136104,(%esp)
  100b4a:	e8 51 ba 00 00       	call   10c5a0 <_ZN6kernel9threadmgrD1Ev>
  100b4f:	c9                   	leave  
  100b50:	c3                   	ret    

00100b51 <__tcf_4>:
  100b51:	55                   	push   %ebp
  100b52:	89 e5                	mov    %esp,%ebp
  100b54:	83 ec 18             	sub    $0x18,%esp
  100b57:	c7 04 24 60 60 13 00 	movl   $0x136060,(%esp)
  100b5e:	e8 c7 b3 00 00       	call   10bf2a <_ZN6kernel9schedulerD1Ev>
  100b63:	c9                   	leave  
  100b64:	c3                   	ret    

00100b65 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE>:
#include "include/scheduler.hpp"

#include <cstring>

cpu::cpu_state *kernel::syscall::handle( cpu::cpu_state *cpu )
{
  100b65:	55                   	push   %ebp
  100b66:	89 e5                	mov    %esp,%ebp
  100b68:	57                   	push   %edi
  100b69:	56                   	push   %esi
  100b6a:	53                   	push   %ebx
  100b6b:	81 ec ec 08 00 00    	sub    $0x8ec,%esp
	processmgr &procmgr  = processmgr::instance();
  100b71:	e8 f1 b9 00 00       	call   10c567 <_ZN6kernel10processmgr8instanceEv>
  100b76:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	threadmgr &thrdmgr   = threadmgr::instance();
  100b79:	e8 35 ba 00 00       	call   10c5b3 <_ZN6kernel9threadmgr8instanceEv>
  100b7e:	89 45 e0             	mov    %eax,-0x20(%ebp)
	scheduler &scheduler = scheduler::instance();
  100b81:	e8 b7 b3 00 00       	call   10bf3d <_ZN6kernel9scheduler8instanceEv>
  100b86:	89 45 dc             	mov    %eax,-0x24(%ebp)

	pmm &pmm = pmm::instance();
  100b89:	e8 99 b9 00 00       	call   10c527 <_ZN3hal3x863pmm8instanceEv>
  100b8e:	89 45 d8             	mov    %eax,-0x28(%ebp)
	thread *thrd;

	process::info_t	pinfo;
	thread::info_t  tinfo;

	switch(cpu->syscall_number())
  100b91:	8b 45 08             	mov    0x8(%ebp),%eax
  100b94:	89 04 24             	mov    %eax,(%esp)
  100b97:	e8 7c b9 00 00       	call   10c518 <_ZN3hal3x863cpu9cpu_state14syscall_numberEv>
  100b9c:	8b 00                	mov    (%eax),%eax
  100b9e:	83 f8 22             	cmp    $0x22,%eax
  100ba1:	0f 87 5b 06 00 00    	ja     101202 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x69d>
  100ba7:	8b 04 85 08 e2 10 00 	mov    0x10e208(,%eax,4),%eax
  100bae:	ff e0                	jmp    *%eax
		case syscall::spawn_elf:

		break;

		case syscall::exit_proc:
			proc = scheduler.running->proc;
  100bb0:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100bb3:	8b 40 14             	mov    0x14(%eax),%eax
  100bb6:	8b 40 18             	mov    0x18(%eax),%eax
  100bb9:	89 45 d4             	mov    %eax,-0x2c(%ebp)

			if(proc)
  100bbc:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
  100bc0:	74 57                	je     100c19 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0xb4>
			{
				procmgr.remove(proc);
  100bc2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  100bc5:	89 44 24 04          	mov    %eax,0x4(%esp)
  100bc9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100bcc:	89 04 24             	mov    %eax,(%esp)
  100bcf:	e8 6a 0b 00 00       	call   10173e <_ZN6kernel10processmgr6removeEPNS_7processE>

				scheduler.running = nullptr;
  100bd4:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100bd7:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

				delete proc;
  100bde:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
  100be1:	85 db                	test   %ebx,%ebx
  100be3:	74 10                	je     100bf5 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x90>
  100be5:	89 1c 24             	mov    %ebx,(%esp)
  100be8:	e8 7d 09 00 00       	call   10156a <_ZN6kernel7processD1Ev>
  100bed:	89 1c 24             	mov    %ebx,(%esp)
  100bf0:	e8 e1 15 00 00       	call   1021d6 <_ZdlPv>

				cpu = scheduler.schedule(cpu);
  100bf5:	8b 45 08             	mov    0x8(%ebp),%eax
  100bf8:	89 44 24 04          	mov    %eax,0x4(%esp)
  100bfc:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100bff:	89 04 24             	mov    %eax,(%esp)
  100c02:	e8 09 07 00 00       	call   101310 <_ZN6kernel9scheduler8scheduleEPN3hal3x863cpu9cpu_stateE>
  100c07:	89 45 08             	mov    %eax,0x8(%ebp)

				if(!scheduler.running)
  100c0a:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100c0d:	8b 40 14             	mov    0x14(%eax),%eax
  100c10:	85 c0                	test   %eax,%eax
  100c12:	75 05                	jne    100c19 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0xb4>
				{
					cpu::halt();
  100c14:	e8 07 b9 00 00       	call   10c520 <_ZN3hal3x863cpu4haltEv>
			}
			else
			{

			}
		break;
  100c19:	e9 e4 05 00 00       	jmp    101202 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x69d>

		case syscall::kill_proc:
			proc = procmgr.get(cpu->param1());
  100c1e:	8b 45 08             	mov    0x8(%ebp),%eax
  100c21:	89 04 24             	mov    %eax,(%esp)
  100c24:	e8 d7 b8 00 00       	call   10c500 <_ZN3hal3x863cpu9cpu_state6param1Ev>
  100c29:	8b 00                	mov    (%eax),%eax
  100c2b:	89 44 24 04          	mov    %eax,0x4(%esp)
  100c2f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100c32:	89 04 24             	mov    %eax,(%esp)
  100c35:	e8 b0 0b 00 00       	call   1017ea <_ZN6kernel10processmgr3getEj>
  100c3a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		
			if(proc && proc != scheduler.running->proc)
  100c3d:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
  100c41:	74 4d                	je     100c90 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x12b>
  100c43:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100c46:	8b 40 14             	mov    0x14(%eax),%eax
  100c49:	8b 40 18             	mov    0x18(%eax),%eax
  100c4c:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
  100c4f:	74 3f                	je     100c90 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x12b>
			{
				procmgr.remove(proc);
  100c51:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  100c54:	89 44 24 04          	mov    %eax,0x4(%esp)
  100c58:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  100c5b:	89 04 24             	mov    %eax,(%esp)
  100c5e:	e8 db 0a 00 00       	call   10173e <_ZN6kernel10processmgr6removeEPNS_7processE>

				delete proc;
  100c63:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
  100c66:	85 db                	test   %ebx,%ebx
  100c68:	74 10                	je     100c7a <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x115>
  100c6a:	89 1c 24             	mov    %ebx,(%esp)
  100c6d:	e8 f8 08 00 00       	call   10156a <_ZN6kernel7processD1Ev>
  100c72:	89 1c 24             	mov    %ebx,(%esp)
  100c75:	e8 5c 15 00 00       	call   1021d6 <_ZdlPv>

				cpu->param0() = 0;
  100c7a:	8b 45 08             	mov    0x8(%ebp),%eax
  100c7d:	89 04 24             	mov    %eax,(%esp)
  100c80:	e8 73 b8 00 00       	call   10c4f8 <_ZN3hal3x863cpu9cpu_state6param0Ev>
  100c85:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			}
			else
			{
				cpu->param0() = 1;	
			}
		break;
  100c8b:	e9 72 05 00 00       	jmp    101202 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x69d>

				cpu->param0() = 0;
			}
			else
			{
				cpu->param0() = 1;	
  100c90:	8b 45 08             	mov    0x8(%ebp),%eax
  100c93:	89 04 24             	mov    %eax,(%esp)
  100c96:	e8 5d b8 00 00       	call   10c4f8 <_ZN3hal3x863cpu9cpu_state6param0Ev>
  100c9b:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
			}
		break;
  100ca1:	e9 5c 05 00 00       	jmp    101202 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x69d>

		case syscall::proc_info:
			proc = scheduler.running->proc;
  100ca6:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100ca9:	8b 40 14             	mov    0x14(%eax),%eax
  100cac:	8b 40 18             	mov    0x18(%eax),%eax
  100caf:	89 45 d4             	mov    %eax,-0x2c(%ebp)

			if(proc && (process::info_t*)cpu->param1() != nullptr)
  100cb2:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
  100cb6:	74 18                	je     100cd0 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x16b>
  100cb8:	8b 45 08             	mov    0x8(%ebp),%eax
  100cbb:	89 04 24             	mov    %eax,(%esp)
  100cbe:	e8 3d b8 00 00       	call   10c500 <_ZN3hal3x863cpu9cpu_state6param1Ev>
  100cc3:	8b 00                	mov    (%eax),%eax
  100cc5:	85 c0                	test   %eax,%eax
  100cc7:	74 07                	je     100cd0 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x16b>
  100cc9:	b8 01 00 00 00       	mov    $0x1,%eax
  100cce:	eb 05                	jmp    100cd5 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x170>
  100cd0:	b8 00 00 00 00       	mov    $0x0,%eax
  100cd5:	84 c0                	test   %al,%al
  100cd7:	0f 84 c7 00 00 00    	je     100da4 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x23f>
			{
				pinfo = proc->info();
  100cdd:	8d 85 18 f7 ff ff    	lea    -0x8e8(%ebp),%eax
  100ce3:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  100ce6:	89 54 24 04          	mov    %edx,0x4(%esp)
  100cea:	89 04 24             	mov    %eax,(%esp)
  100ced:	e8 84 09 00 00       	call   101676 <_ZN6kernel7process4infoEv>
  100cf2:	83 ec 04             	sub    $0x4,%esp
  100cf5:	8d 95 6c fb ff ff    	lea    -0x494(%ebp),%edx
  100cfb:	8d 9d 18 f7 ff ff    	lea    -0x8e8(%ebp),%ebx
  100d01:	b8 12 01 00 00       	mov    $0x112,%eax
  100d06:	89 d7                	mov    %edx,%edi
  100d08:	89 de                	mov    %ebx,%esi
  100d0a:	89 c1                	mov    %eax,%ecx
  100d0c:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

				((process::info_t*)(cpu->param1()))->id	    = pinfo.id;
  100d0e:	8b 45 08             	mov    0x8(%ebp),%eax
  100d11:	89 04 24             	mov    %eax,(%esp)
  100d14:	e8 e7 b7 00 00       	call   10c500 <_ZN3hal3x863cpu9cpu_state6param1Ev>
  100d19:	8b 00                	mov    (%eax),%eax
  100d1b:	8b 95 6c fb ff ff    	mov    -0x494(%ebp),%edx
  100d21:	89 10                	mov    %edx,(%eax)
				((process::info_t*)(cpu->param1()))->parent = pinfo.parent;
  100d23:	8b 45 08             	mov    0x8(%ebp),%eax
  100d26:	89 04 24             	mov    %eax,(%esp)
  100d29:	e8 d2 b7 00 00       	call   10c500 <_ZN3hal3x863cpu9cpu_state6param1Ev>
  100d2e:	8b 00                	mov    (%eax),%eax
  100d30:	8b 95 70 fb ff ff    	mov    -0x490(%ebp),%edx
  100d36:	89 50 04             	mov    %edx,0x4(%eax)

				strcpy(((process::info_t*)(cpu->param1()))->name, pinfo.name);
  100d39:	8b 45 08             	mov    0x8(%ebp),%eax
  100d3c:	89 04 24             	mov    %eax,(%esp)
  100d3f:	e8 bc b7 00 00       	call   10c500 <_ZN3hal3x863cpu9cpu_state6param1Ev>
  100d44:	8b 00                	mov    (%eax),%eax
  100d46:	83 c0 08             	add    $0x8,%eax
  100d49:	8d 95 6c fb ff ff    	lea    -0x494(%ebp),%edx
  100d4f:	83 c2 08             	add    $0x8,%edx
  100d52:	89 54 24 04          	mov    %edx,0x4(%esp)
  100d56:	89 04 24             	mov    %eax,(%esp)
  100d59:	e8 b4 8d 00 00       	call   109b12 <strcpy>
				strcpy(((process::info_t*)(cpu->param1()))->cmdline, pinfo.cmdline);
  100d5e:	8b 45 08             	mov    0x8(%ebp),%eax
  100d61:	89 04 24             	mov    %eax,(%esp)
  100d64:	e8 97 b7 00 00       	call   10c500 <_ZN3hal3x863cpu9cpu_state6param1Ev>
  100d69:	8b 00                	mov    (%eax),%eax
  100d6b:	83 c0 48             	add    $0x48,%eax
  100d6e:	8d 95 6c fb ff ff    	lea    -0x494(%ebp),%edx
  100d74:	83 c2 48             	add    $0x48,%edx
  100d77:	89 54 24 04          	mov    %edx,0x4(%esp)
  100d7b:	89 04 24             	mov    %eax,(%esp)
  100d7e:	e8 8f 8d 00 00       	call   109b12 <strcpy>

				cpu->param0() = cpu->param1();
  100d83:	8b 45 08             	mov    0x8(%ebp),%eax
  100d86:	89 04 24             	mov    %eax,(%esp)
  100d89:	e8 6a b7 00 00       	call   10c4f8 <_ZN3hal3x863cpu9cpu_state6param0Ev>
  100d8e:	89 c3                	mov    %eax,%ebx
  100d90:	8b 45 08             	mov    0x8(%ebp),%eax
  100d93:	89 04 24             	mov    %eax,(%esp)
  100d96:	e8 65 b7 00 00       	call   10c500 <_ZN3hal3x863cpu9cpu_state6param1Ev>
  100d9b:	8b 00                	mov    (%eax),%eax
  100d9d:	89 03                	mov    %eax,(%ebx)
			}
			else
			{
				cpu->param0() = 0x0;
			}
		break;
  100d9f:	e9 5e 04 00 00       	jmp    101202 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x69d>

				cpu->param0() = cpu->param1();
			}
			else
			{
				cpu->param0() = 0x0;
  100da4:	8b 45 08             	mov    0x8(%ebp),%eax
  100da7:	89 04 24             	mov    %eax,(%esp)
  100daa:	e8 49 b7 00 00       	call   10c4f8 <_ZN3hal3x863cpu9cpu_state6param0Ev>
  100daf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			}
		break;
  100db5:	e9 48 04 00 00       	jmp    101202 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x69d>

		case syscall::create_thread:
			proc = scheduler.running->proc;
  100dba:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100dbd:	8b 40 14             	mov    0x14(%eax),%eax
  100dc0:	8b 40 18             	mov    0x18(%eax),%eax
  100dc3:	89 45 d4             	mov    %eax,-0x2c(%ebp)

			thrd = new thread(proc, (uintptr_t)cpu->param1(), (size_t)cpu->param2());
  100dc6:	8b 45 08             	mov    0x8(%ebp),%eax
  100dc9:	89 04 24             	mov    %eax,(%esp)
  100dcc:	e8 2f b7 00 00       	call   10c500 <_ZN3hal3x863cpu9cpu_state6param1Ev>
  100dd1:	8b 30                	mov    (%eax),%esi
  100dd3:	8b 45 08             	mov    0x8(%ebp),%eax
  100dd6:	89 04 24             	mov    %eax,(%esp)
  100dd9:	e8 2e b7 00 00       	call   10c50c <_ZN3hal3x863cpu9cpu_state6param2Ev>
  100dde:	8b 38                	mov    (%eax),%edi
  100de0:	c7 04 24 1c 00 00 00 	movl   $0x1c,(%esp)
  100de7:	e8 b4 13 00 00       	call   1021a0 <_Znwj>
  100dec:	89 c3                	mov    %eax,%ebx
  100dee:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  100df2:	89 74 24 08          	mov    %esi,0x8(%esp)
  100df6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  100df9:	89 44 24 04          	mov    %eax,0x4(%esp)
  100dfd:	89 1c 24             	mov    %ebx,(%esp)
  100e00:	e8 45 f3 ff ff       	call   10014a <_ZN6kernel6threadC1EPNS_7processEjj>
  100e05:	89 5d d0             	mov    %ebx,-0x30(%ebp)

			if(thrd)
  100e08:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
  100e0c:	74 3a                	je     100e48 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x2e3>
			{
				scheduler.add(thrd);
  100e0e:	8b 45 d0             	mov    -0x30(%ebp),%eax
  100e11:	89 44 24 04          	mov    %eax,0x4(%esp)
  100e15:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100e18:	89 04 24             	mov    %eax,(%esp)
  100e1b:	e8 2a 04 00 00       	call   10124a <_ZN6kernel9scheduler3addEPNS_6threadE>
				thrdmgr.add(thrd);
  100e20:	8b 45 d0             	mov    -0x30(%ebp),%eax
  100e23:	89 44 24 04          	mov    %eax,0x4(%esp)
  100e27:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100e2a:	89 04 24             	mov    %eax,(%esp)
  100e2d:	e8 c2 f5 ff ff       	call   1003f4 <_ZN6kernel9threadmgr3addEPNS_6threadE>

				cpu->param0() = 0;
  100e32:	8b 45 08             	mov    0x8(%ebp),%eax
  100e35:	89 04 24             	mov    %eax,(%esp)
  100e38:	e8 bb b6 00 00       	call   10c4f8 <_ZN3hal3x863cpu9cpu_state6param0Ev>
  100e3d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			}
			else
			{
				cpu->param0() = 1;
			}
		break;
  100e43:	e9 ba 03 00 00       	jmp    101202 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x69d>

				cpu->param0() = 0;
			}
			else
			{
				cpu->param0() = 1;
  100e48:	8b 45 08             	mov    0x8(%ebp),%eax
  100e4b:	89 04 24             	mov    %eax,(%esp)
  100e4e:	e8 a5 b6 00 00       	call   10c4f8 <_ZN3hal3x863cpu9cpu_state6param0Ev>
  100e53:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
			}
		break;
  100e59:	e9 a4 03 00 00       	jmp    101202 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x69d>

		case syscall::exit_thread:
			thrd = scheduler.running;
  100e5e:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100e61:	8b 40 14             	mov    0x14(%eax),%eax
  100e64:	89 45 d0             	mov    %eax,-0x30(%ebp)

			if(thrd)
  100e67:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
  100e6b:	74 57                	je     100ec4 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x35f>
			{
				thrdmgr.remove(thrd);
  100e6d:	8b 45 d0             	mov    -0x30(%ebp),%eax
  100e70:	89 44 24 04          	mov    %eax,0x4(%esp)
  100e74:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100e77:	89 04 24             	mov    %eax,(%esp)
  100e7a:	e8 bb f5 ff ff       	call   10043a <_ZN6kernel9threadmgr6removeEPNS_6threadE>

				scheduler.running = nullptr;
  100e7f:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100e82:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

				cpu = scheduler.schedule(cpu);
  100e89:	8b 45 08             	mov    0x8(%ebp),%eax
  100e8c:	89 44 24 04          	mov    %eax,0x4(%esp)
  100e90:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100e93:	89 04 24             	mov    %eax,(%esp)
  100e96:	e8 75 04 00 00       	call   101310 <_ZN6kernel9scheduler8scheduleEPN3hal3x863cpu9cpu_stateE>
  100e9b:	89 45 08             	mov    %eax,0x8(%ebp)

				if(!scheduler.running)
  100e9e:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100ea1:	8b 40 14             	mov    0x14(%eax),%eax
  100ea4:	85 c0                	test   %eax,%eax
  100ea6:	75 05                	jne    100ead <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x348>
				{
					cpu::halt();
  100ea8:	e8 73 b6 00 00       	call   10c520 <_ZN3hal3x863cpu4haltEv>
				}

				delete thrd;
  100ead:	8b 5d d0             	mov    -0x30(%ebp),%ebx
  100eb0:	85 db                	test   %ebx,%ebx
  100eb2:	74 10                	je     100ec4 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x35f>
  100eb4:	89 1c 24             	mov    %ebx,(%esp)
  100eb7:	e8 c6 f3 ff ff       	call   100282 <_ZN6kernel6threadD1Ev>
  100ebc:	89 1c 24             	mov    %ebx,(%esp)
  100ebf:	e8 12 13 00 00       	call   1021d6 <_ZdlPv>
			}
			else
			{

			}
		break;
  100ec4:	e9 39 03 00 00       	jmp    101202 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x69d>

		case syscall::kill_thread:
			thrd = thrdmgr.get(cpu->param1());
  100ec9:	8b 45 08             	mov    0x8(%ebp),%eax
  100ecc:	89 04 24             	mov    %eax,(%esp)
  100ecf:	e8 2c b6 00 00       	call   10c500 <_ZN3hal3x863cpu9cpu_state6param1Ev>
  100ed4:	8b 00                	mov    (%eax),%eax
  100ed6:	89 44 24 04          	mov    %eax,0x4(%esp)
  100eda:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100edd:	89 04 24             	mov    %eax,(%esp)
  100ee0:	e8 01 f6 ff ff       	call   1004e6 <_ZN6kernel9threadmgr3getEj>
  100ee5:	89 45 d0             	mov    %eax,-0x30(%ebp)
			
			if(thrd && thrd != scheduler.running)
  100ee8:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
  100eec:	74 5c                	je     100f4a <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x3e5>
  100eee:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100ef1:	8b 40 14             	mov    0x14(%eax),%eax
  100ef4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
  100ef7:	74 51                	je     100f4a <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x3e5>
			{
				scheduler.remove(thrd);
  100ef9:	8b 45 d0             	mov    -0x30(%ebp),%eax
  100efc:	89 44 24 04          	mov    %eax,0x4(%esp)
  100f00:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100f03:	89 04 24             	mov    %eax,(%esp)
  100f06:	e8 59 03 00 00       	call   101264 <_ZN6kernel9scheduler6removeEPNS_6threadE>
				thrdmgr.remove(thrd);
  100f0b:	8b 45 d0             	mov    -0x30(%ebp),%eax
  100f0e:	89 44 24 04          	mov    %eax,0x4(%esp)
  100f12:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100f15:	89 04 24             	mov    %eax,(%esp)
  100f18:	e8 1d f5 ff ff       	call   10043a <_ZN6kernel9threadmgr6removeEPNS_6threadE>

				delete thrd;
  100f1d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
  100f20:	85 db                	test   %ebx,%ebx
  100f22:	74 10                	je     100f34 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x3cf>
  100f24:	89 1c 24             	mov    %ebx,(%esp)
  100f27:	e8 56 f3 ff ff       	call   100282 <_ZN6kernel6threadD1Ev>
  100f2c:	89 1c 24             	mov    %ebx,(%esp)
  100f2f:	e8 a2 12 00 00       	call   1021d6 <_ZdlPv>

				cpu->param0() = 0;
  100f34:	8b 45 08             	mov    0x8(%ebp),%eax
  100f37:	89 04 24             	mov    %eax,(%esp)
  100f3a:	e8 b9 b5 00 00       	call   10c4f8 <_ZN3hal3x863cpu9cpu_state6param0Ev>
  100f3f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  100f45:	e9 80 00 00 00       	jmp    100fca <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x465>
			}
			else if(thrd && thrd == scheduler.running)
  100f4a:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
  100f4e:	74 64                	je     100fb4 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x44f>
  100f50:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100f53:	8b 40 14             	mov    0x14(%eax),%eax
  100f56:	3b 45 d0             	cmp    -0x30(%ebp),%eax
  100f59:	75 59                	jne    100fb4 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x44f>
			{
				thrdmgr.remove(thrd);
  100f5b:	8b 45 d0             	mov    -0x30(%ebp),%eax
  100f5e:	89 44 24 04          	mov    %eax,0x4(%esp)
  100f62:	8b 45 e0             	mov    -0x20(%ebp),%eax
  100f65:	89 04 24             	mov    %eax,(%esp)
  100f68:	e8 cd f4 ff ff       	call   10043a <_ZN6kernel9threadmgr6removeEPNS_6threadE>

				scheduler.running = nullptr;
  100f6d:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100f70:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

				cpu = scheduler.schedule(cpu);
  100f77:	8b 45 08             	mov    0x8(%ebp),%eax
  100f7a:	89 44 24 04          	mov    %eax,0x4(%esp)
  100f7e:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100f81:	89 04 24             	mov    %eax,(%esp)
  100f84:	e8 87 03 00 00       	call   101310 <_ZN6kernel9scheduler8scheduleEPN3hal3x863cpu9cpu_stateE>
  100f89:	89 45 08             	mov    %eax,0x8(%ebp)

				if(!scheduler.running)
  100f8c:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100f8f:	8b 40 14             	mov    0x14(%eax),%eax
  100f92:	85 c0                	test   %eax,%eax
  100f94:	75 05                	jne    100f9b <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x436>
				{
					cpu::halt();
  100f96:	e8 85 b5 00 00       	call   10c520 <_ZN3hal3x863cpu4haltEv>
				}

				delete thrd;
  100f9b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
  100f9e:	85 db                	test   %ebx,%ebx
  100fa0:	74 10                	je     100fb2 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x44d>
  100fa2:	89 1c 24             	mov    %ebx,(%esp)
  100fa5:	e8 d8 f2 ff ff       	call   100282 <_ZN6kernel6threadD1Ev>
  100faa:	89 1c 24             	mov    %ebx,(%esp)
  100fad:	e8 24 12 00 00       	call   1021d6 <_ZdlPv>
  100fb2:	eb 16                	jmp    100fca <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x465>
			}
			else
			{
				cpu->param0() = 1;	
  100fb4:	8b 45 08             	mov    0x8(%ebp),%eax
  100fb7:	89 04 24             	mov    %eax,(%esp)
  100fba:	e8 39 b5 00 00       	call   10c4f8 <_ZN3hal3x863cpu9cpu_state6param0Ev>
  100fbf:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
			}
		break;
  100fc5:	e9 38 02 00 00       	jmp    101202 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x69d>
  100fca:	e9 33 02 00 00       	jmp    101202 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x69d>
		case wake_thread:

		break;

		case thread_info:
			thrd = scheduler.running;
  100fcf:	8b 45 dc             	mov    -0x24(%ebp),%eax
  100fd2:	8b 40 14             	mov    0x14(%eax),%eax
  100fd5:	89 45 d0             	mov    %eax,-0x30(%ebp)

			if(thrd && (thread::info_t*)cpu->param1() != nullptr)
  100fd8:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
  100fdc:	74 18                	je     100ff6 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x491>
  100fde:	8b 45 08             	mov    0x8(%ebp),%eax
  100fe1:	89 04 24             	mov    %eax,(%esp)
  100fe4:	e8 17 b5 00 00       	call   10c500 <_ZN3hal3x863cpu9cpu_state6param1Ev>
  100fe9:	8b 00                	mov    (%eax),%eax
  100feb:	85 c0                	test   %eax,%eax
  100fed:	74 07                	je     100ff6 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x491>
  100fef:	b8 01 00 00 00       	mov    $0x1,%eax
  100ff4:	eb 05                	jmp    100ffb <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x496>
  100ff6:	b8 00 00 00 00       	mov    $0x0,%eax
  100ffb:	84 c0                	test   %al,%al
  100ffd:	0f 84 8c 00 00 00    	je     10108f <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x52a>
			{
				tinfo = thrd->info();
  101003:	8d 85 18 f7 ff ff    	lea    -0x8e8(%ebp),%eax
  101009:	8b 55 d0             	mov    -0x30(%ebp),%edx
  10100c:	89 54 24 04          	mov    %edx,0x4(%esp)
  101010:	89 04 24             	mov    %eax,(%esp)
  101013:	e8 66 f3 ff ff       	call   10037e <_ZN6kernel6thread4infoEv>
  101018:	83 ec 04             	sub    $0x4,%esp
  10101b:	8b 85 18 f7 ff ff    	mov    -0x8e8(%ebp),%eax
  101021:	89 45 b4             	mov    %eax,-0x4c(%ebp)
  101024:	8b 85 1c f7 ff ff    	mov    -0x8e4(%ebp),%eax
  10102a:	89 45 b8             	mov    %eax,-0x48(%ebp)
  10102d:	8b 85 20 f7 ff ff    	mov    -0x8e0(%ebp),%eax
  101033:	89 45 bc             	mov    %eax,-0x44(%ebp)

				((thread::info_t*)(cpu->param1()))->id	  = tinfo.id;
  101036:	8b 45 08             	mov    0x8(%ebp),%eax
  101039:	89 04 24             	mov    %eax,(%esp)
  10103c:	e8 bf b4 00 00       	call   10c500 <_ZN3hal3x863cpu9cpu_state6param1Ev>
  101041:	8b 00                	mov    (%eax),%eax
  101043:	8b 55 b4             	mov    -0x4c(%ebp),%edx
  101046:	89 10                	mov    %edx,(%eax)
				((thread::info_t*)(cpu->param1()))->state = tinfo.state;
  101048:	8b 45 08             	mov    0x8(%ebp),%eax
  10104b:	89 04 24             	mov    %eax,(%esp)
  10104e:	e8 ad b4 00 00       	call   10c500 <_ZN3hal3x863cpu9cpu_state6param1Ev>
  101053:	8b 00                	mov    (%eax),%eax
  101055:	8b 55 b8             	mov    -0x48(%ebp),%edx
  101058:	89 50 04             	mov    %edx,0x4(%eax)
				((thread::info_t*)(cpu->param1()))->flags = tinfo.flags;
  10105b:	8b 45 08             	mov    0x8(%ebp),%eax
  10105e:	89 04 24             	mov    %eax,(%esp)
  101061:	e8 9a b4 00 00       	call   10c500 <_ZN3hal3x863cpu9cpu_state6param1Ev>
  101066:	8b 00                	mov    (%eax),%eax
  101068:	8b 55 bc             	mov    -0x44(%ebp),%edx
  10106b:	89 50 08             	mov    %edx,0x8(%eax)

				cpu->param0() = cpu->param1();
  10106e:	8b 45 08             	mov    0x8(%ebp),%eax
  101071:	89 04 24             	mov    %eax,(%esp)
  101074:	e8 7f b4 00 00       	call   10c4f8 <_ZN3hal3x863cpu9cpu_state6param0Ev>
  101079:	89 c3                	mov    %eax,%ebx
  10107b:	8b 45 08             	mov    0x8(%ebp),%eax
  10107e:	89 04 24             	mov    %eax,(%esp)
  101081:	e8 7a b4 00 00       	call   10c500 <_ZN3hal3x863cpu9cpu_state6param1Ev>
  101086:	8b 00                	mov    (%eax),%eax
  101088:	89 03                	mov    %eax,(%ebx)
			}
			else
			{
				cpu->param0() = 0x0;
			}
		break;
  10108a:	e9 73 01 00 00       	jmp    101202 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x69d>

				cpu->param0() = cpu->param1();
			}
			else
			{
				cpu->param0() = 0x0;
  10108f:	8b 45 08             	mov    0x8(%ebp),%eax
  101092:	89 04 24             	mov    %eax,(%esp)
  101095:	e8 5e b4 00 00       	call   10c4f8 <_ZN3hal3x863cpu9cpu_state6param0Ev>
  10109a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			}
		break;
  1010a0:	e9 5d 01 00 00       	jmp    101202 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x69d>

		

		case memory_alloc:
			proc = scheduler.running->proc;
  1010a5:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1010a8:	8b 40 14             	mov    0x14(%eax),%eax
  1010ab:	8b 40 18             	mov    0x18(%eax),%eax
  1010ae:	89 45 d4             	mov    %eax,-0x2c(%ebp)

			if(proc)
  1010b1:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
  1010b5:	74 48                	je     1010ff <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x59a>
			{
				cpu->param0() = proc->memmgr->alloc(vmm::present | vmm::write | vmm::user, bytes_to_pages(cpu->param1()));
  1010b7:	8b 45 08             	mov    0x8(%ebp),%eax
  1010ba:	89 04 24             	mov    %eax,(%esp)
  1010bd:	e8 36 b4 00 00       	call   10c4f8 <_ZN3hal3x863cpu9cpu_state6param0Ev>
  1010c2:	89 c3                	mov    %eax,%ebx
  1010c4:	8b 45 08             	mov    0x8(%ebp),%eax
  1010c7:	89 04 24             	mov    %eax,(%esp)
  1010ca:	e8 31 b4 00 00       	call   10c500 <_ZN3hal3x863cpu9cpu_state6param1Ev>
  1010cf:	8b 00                	mov    (%eax),%eax
  1010d1:	05 ff 0f 00 00       	add    $0xfff,%eax
  1010d6:	c1 e8 0c             	shr    $0xc,%eax
  1010d9:	89 c2                	mov    %eax,%edx
  1010db:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  1010de:	8b 80 50 04 00 00    	mov    0x450(%eax),%eax
  1010e4:	89 54 24 08          	mov    %edx,0x8(%esp)
  1010e8:	c7 44 24 04 07 00 00 	movl   $0x7,0x4(%esp)
  1010ef:	00 
  1010f0:	89 04 24             	mov    %eax,(%esp)
  1010f3:	e8 ae 35 00 00       	call   1046a6 <_ZN3hal3x863vmm5allocEjj>
  1010f8:	89 03                	mov    %eax,(%ebx)
			}
			else
			{
				cpu->param0() = 0x0;
			}
		break;
  1010fa:	e9 03 01 00 00       	jmp    101202 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x69d>
			{
				cpu->param0() = proc->memmgr->alloc(vmm::present | vmm::write | vmm::user, bytes_to_pages(cpu->param1()));
			}
			else
			{
				cpu->param0() = 0x0;
  1010ff:	8b 45 08             	mov    0x8(%ebp),%eax
  101102:	89 04 24             	mov    %eax,(%esp)
  101105:	e8 ee b3 00 00       	call   10c4f8 <_ZN3hal3x863cpu9cpu_state6param0Ev>
  10110a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			}
		break;
  101110:	e9 ed 00 00 00       	jmp    101202 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x69d>

		case memory_free:
			proc = scheduler.running->proc;
  101115:	8b 45 dc             	mov    -0x24(%ebp),%eax
  101118:	8b 40 14             	mov    0x14(%eax),%eax
  10111b:	8b 40 18             	mov    0x18(%eax),%eax
  10111e:	89 45 d4             	mov    %eax,-0x2c(%ebp)

			if(proc)
  101121:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
  101125:	74 3d                	je     101164 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x5ff>
			{
				proc->memmgr->free(cpu->param1(), bytes_to_pages(cpu->param2()));
  101127:	8b 45 08             	mov    0x8(%ebp),%eax
  10112a:	89 04 24             	mov    %eax,(%esp)
  10112d:	e8 da b3 00 00       	call   10c50c <_ZN3hal3x863cpu9cpu_state6param2Ev>
  101132:	8b 00                	mov    (%eax),%eax
  101134:	05 ff 0f 00 00       	add    $0xfff,%eax
  101139:	c1 e8 0c             	shr    $0xc,%eax
  10113c:	89 c3                	mov    %eax,%ebx
  10113e:	8b 45 08             	mov    0x8(%ebp),%eax
  101141:	89 04 24             	mov    %eax,(%esp)
  101144:	e8 b7 b3 00 00       	call   10c500 <_ZN3hal3x863cpu9cpu_state6param1Ev>
  101149:	8b 10                	mov    (%eax),%edx
  10114b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10114e:	8b 80 50 04 00 00    	mov    0x450(%eax),%eax
  101154:	89 5c 24 08          	mov    %ebx,0x8(%esp)
  101158:	89 54 24 04          	mov    %edx,0x4(%esp)
  10115c:	89 04 24             	mov    %eax,(%esp)
  10115f:	e8 2a 38 00 00       	call   10498e <_ZN3hal3x863vmm4freeEjj>
			}
			else
			{

			}
		break;
  101164:	e9 99 00 00 00       	jmp    101202 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x69d>

		case memory_info:
			if((pmm::meminfo_t*)cpu->param1() != nullptr)
  101169:	8b 45 08             	mov    0x8(%ebp),%eax
  10116c:	89 04 24             	mov    %eax,(%esp)
  10116f:	e8 8c b3 00 00       	call   10c500 <_ZN3hal3x863cpu9cpu_state6param1Ev>
  101174:	8b 00                	mov    (%eax),%eax
  101176:	85 c0                	test   %eax,%eax
  101178:	0f 95 c0             	setne  %al
  10117b:	84 c0                	test   %al,%al
  10117d:	74 71                	je     1011f0 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x68b>
			{
				((pmm::meminfo_t*)(cpu->param1()))->free = pmm.info().free;
  10117f:	8b 45 08             	mov    0x8(%ebp),%eax
  101182:	89 04 24             	mov    %eax,(%esp)
  101185:	e8 76 b3 00 00       	call   10c500 <_ZN3hal3x863cpu9cpu_state6param1Ev>
  10118a:	8b 00                	mov    (%eax),%eax
  10118c:	89 c3                	mov    %eax,%ebx
  10118e:	8d 45 c0             	lea    -0x40(%ebp),%eax
  101191:	8b 55 d8             	mov    -0x28(%ebp),%edx
  101194:	89 54 24 04          	mov    %edx,0x4(%esp)
  101198:	89 04 24             	mov    %eax,(%esp)
  10119b:	e8 dc 7d 00 00       	call   108f7c <_ZN3hal3x863pmm4infoEv>
  1011a0:	83 ec 04             	sub    $0x4,%esp
  1011a3:	8b 45 c0             	mov    -0x40(%ebp),%eax
  1011a6:	89 03                	mov    %eax,(%ebx)
				((pmm::meminfo_t*)(cpu->param1()))->used = pmm.info().used;
  1011a8:	8b 45 08             	mov    0x8(%ebp),%eax
  1011ab:	89 04 24             	mov    %eax,(%esp)
  1011ae:	e8 4d b3 00 00       	call   10c500 <_ZN3hal3x863cpu9cpu_state6param1Ev>
  1011b3:	8b 00                	mov    (%eax),%eax
  1011b5:	89 c3                	mov    %eax,%ebx
  1011b7:	8d 45 c8             	lea    -0x38(%ebp),%eax
  1011ba:	8b 55 d8             	mov    -0x28(%ebp),%edx
  1011bd:	89 54 24 04          	mov    %edx,0x4(%esp)
  1011c1:	89 04 24             	mov    %eax,(%esp)
  1011c4:	e8 b3 7d 00 00       	call   108f7c <_ZN3hal3x863pmm4infoEv>
  1011c9:	83 ec 04             	sub    $0x4,%esp
  1011cc:	8b 45 cc             	mov    -0x34(%ebp),%eax
  1011cf:	89 43 04             	mov    %eax,0x4(%ebx)
	
				cpu->param0() = cpu->param1();
  1011d2:	8b 45 08             	mov    0x8(%ebp),%eax
  1011d5:	89 04 24             	mov    %eax,(%esp)
  1011d8:	e8 1b b3 00 00       	call   10c4f8 <_ZN3hal3x863cpu9cpu_state6param0Ev>
  1011dd:	89 c3                	mov    %eax,%ebx
  1011df:	8b 45 08             	mov    0x8(%ebp),%eax
  1011e2:	89 04 24             	mov    %eax,(%esp)
  1011e5:	e8 16 b3 00 00       	call   10c500 <_ZN3hal3x863cpu9cpu_state6param1Ev>
  1011ea:	8b 00                	mov    (%eax),%eax
  1011ec:	89 03                	mov    %eax,(%ebx)
			}
			else
			{
				cpu->param0() = 0x0;
			}
		break;
  1011ee:	eb 11                	jmp    101201 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE+0x69c>
	
				cpu->param0() = cpu->param1();
			}
			else
			{
				cpu->param0() = 0x0;
  1011f0:	8b 45 08             	mov    0x8(%ebp),%eax
  1011f3:	89 04 24             	mov    %eax,(%esp)
  1011f6:	e8 fd b2 00 00       	call   10c4f8 <_ZN3hal3x863cpu9cpu_state6param0Ev>
  1011fb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			}
		break;
  101201:	90                   	nop
	}

	return cpu;
  101202:	8b 45 08             	mov    0x8(%ebp),%eax
}
  101205:	8d 65 f4             	lea    -0xc(%ebp),%esp
  101208:	5b                   	pop    %ebx
  101209:	5e                   	pop    %esi
  10120a:	5f                   	pop    %edi
  10120b:	5d                   	pop    %ebp
  10120c:	c3                   	ret    
  10120d:	90                   	nop

0010120e <__tcf_0>:
		  *		It also contains the Global Descriptor Table itself.
		  *		This class is implemented as a singleton, so only one instance of this class can be used (it is not possible to set up more than one GDT).
		  */
		class gdt
		{
			SINGLETON(gdt)
  10120e:	55                   	push   %ebp
  10120f:	89 e5                	mov    %esp,%ebp
  101211:	83 ec 18             	sub    $0x18,%esp
  101214:	c7 04 24 40 61 15 00 	movl   $0x156140,(%esp)
  10121b:	e8 2a 7e 00 00       	call   10904a <_ZN3hal3x863gdtD1Ev>
  101220:	c9                   	leave  
  101221:	c3                   	ret    

00101222 <_ZN6kernel9schedulerC1Ev>:
#include "include/scheduler.hpp"
#include "include/memmgr.hpp"

using kernel::scheduler;

scheduler::scheduler(  ) : running(nullptr), cntxt(nullptr)
  101222:	55                   	push   %ebp
  101223:	89 e5                	mov    %esp,%ebp
  101225:	83 ec 18             	sub    $0x18,%esp
  101228:	8b 45 08             	mov    0x8(%ebp),%eax
  10122b:	89 04 24             	mov    %eax,(%esp)
  10122e:	e8 31 b0 00 00       	call   10c264 <_ZN5tools4listIN6kernel6threadEEC1Ev>
  101233:	8b 45 08             	mov    0x8(%ebp),%eax
  101236:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
  10123d:	8b 45 08             	mov    0x8(%ebp),%eax
  101240:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
{

}
  101247:	c9                   	leave  
  101248:	c3                   	ret    
  101249:	90                   	nop

0010124a <_ZN6kernel9scheduler3addEPNS_6threadE>:

void scheduler::add( kernel::thread *thrd )
{
  10124a:	55                   	push   %ebp
  10124b:	89 e5                	mov    %esp,%ebp
  10124d:	83 ec 18             	sub    $0x18,%esp
	this->ready.push_back(thrd);
  101250:	8b 45 08             	mov    0x8(%ebp),%eax
  101253:	8b 55 0c             	mov    0xc(%ebp),%edx
  101256:	89 54 24 04          	mov    %edx,0x4(%esp)
  10125a:	89 04 24             	mov    %eax,(%esp)
  10125d:	e8 1c af 00 00       	call   10c17e <_ZN5tools4listIN6kernel6threadEE9push_backEPS2_>
}
  101262:	c9                   	leave  
  101263:	c3                   	ret    

00101264 <_ZN6kernel9scheduler6removeEPNS_6threadE>:

void scheduler::remove( kernel::thread *thrd )
{
  101264:	55                   	push   %ebp
  101265:	89 e5                	mov    %esp,%ebp
  101267:	53                   	push   %ebx
  101268:	83 ec 34             	sub    $0x34,%esp
	for(tools::list<thread>::iterator it = this->ready.begin(); it != this->ready.end(); it++)
  10126b:	8b 55 08             	mov    0x8(%ebp),%edx
  10126e:	8d 45 d8             	lea    -0x28(%ebp),%eax
  101271:	89 54 24 04          	mov    %edx,0x4(%esp)
  101275:	89 04 24             	mov    %eax,(%esp)
  101278:	e8 af ad 00 00       	call   10c02c <_ZN5tools4listIN6kernel6threadEE5beginEv>
  10127d:	83 ec 04             	sub    $0x4,%esp
  101280:	eb 55                	jmp    1012d7 <_ZN6kernel9scheduler6removeEPNS_6threadE+0x73>
	{
		if(*it == thrd)
  101282:	8d 45 d8             	lea    -0x28(%ebp),%eax
  101285:	89 04 24             	mov    %eax,(%esp)
  101288:	e8 e9 ad 00 00       	call   10c076 <_ZN5tools4listIN6kernel6threadEE8iteratordeEv>
  10128d:	3b 45 0c             	cmp    0xc(%ebp),%eax
  101290:	0f 94 c0             	sete   %al
  101293:	84 c0                	test   %al,%al
  101295:	74 23                	je     1012ba <_ZN6kernel9scheduler6removeEPNS_6threadE+0x56>
		{
			this->ready.erase(it);	
  101297:	8b 5d 08             	mov    0x8(%ebp),%ebx
  10129a:	8d 4d e0             	lea    -0x20(%ebp),%ecx
  10129d:	8b 45 d8             	mov    -0x28(%ebp),%eax
  1012a0:	8b 55 dc             	mov    -0x24(%ebp),%edx
  1012a3:	89 44 24 08          	mov    %eax,0x8(%esp)
  1012a7:	89 54 24 0c          	mov    %edx,0xc(%esp)
  1012ab:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  1012af:	89 0c 24             	mov    %ecx,(%esp)
  1012b2:	e8 cb ad 00 00       	call   10c082 <_ZN5tools4listIN6kernel6threadEE5eraseENS3_8iteratorE>
  1012b7:	83 ec 04             	sub    $0x4,%esp
	this->ready.push_back(thrd);
}

void scheduler::remove( kernel::thread *thrd )
{
	for(tools::list<thread>::iterator it = this->ready.begin(); it != this->ready.end(); it++)
  1012ba:	8d 45 e8             	lea    -0x18(%ebp),%eax
  1012bd:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  1012c4:	00 
  1012c5:	8d 55 d8             	lea    -0x28(%ebp),%edx
  1012c8:	89 54 24 04          	mov    %edx,0x4(%esp)
  1012cc:	89 04 24             	mov    %eax,(%esp)
  1012cf:	e8 5e af 00 00       	call   10c232 <_ZN5tools4listIN6kernel6threadEE8iteratorppEi>
  1012d4:	83 ec 04             	sub    $0x4,%esp
  1012d7:	8b 55 08             	mov    0x8(%ebp),%edx
  1012da:	8d 45 f0             	lea    -0x10(%ebp),%eax
  1012dd:	89 54 24 04          	mov    %edx,0x4(%esp)
  1012e1:	89 04 24             	mov    %eax,(%esp)
  1012e4:	e8 dd ae 00 00       	call   10c1c6 <_ZN5tools4listIN6kernel6threadEE3endEv>
  1012e9:	83 ec 04             	sub    $0x4,%esp
  1012ec:	8d 45 f0             	lea    -0x10(%ebp),%eax
  1012ef:	89 44 24 04          	mov    %eax,0x4(%esp)
  1012f3:	8d 45 d8             	lea    -0x28(%ebp),%eax
  1012f6:	89 04 24             	mov    %eax,(%esp)
  1012f9:	e8 14 af 00 00       	call   10c212 <_ZN5tools4listIN6kernel6threadEE8iteratorneERKS4_>
  1012fe:	84 c0                	test   %al,%al
  101300:	0f 95 c0             	setne  %al
  101303:	84 c0                	test   %al,%al
  101305:	0f 85 77 ff ff ff    	jne    101282 <_ZN6kernel9scheduler6removeEPNS_6threadE+0x1e>
		if(*it == thrd)
		{
			this->ready.erase(it);	
		}
	}
}
  10130b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10130e:	c9                   	leave  
  10130f:	c3                   	ret    

00101310 <_ZN6kernel9scheduler8scheduleEPN3hal3x863cpu9cpu_stateE>:

cpu::cpu_state *scheduler::schedule( cpu::cpu_state *cpu )
{
  101310:	55                   	push   %ebp
  101311:	89 e5                	mov    %esp,%ebp
  101313:	83 ec 28             	sub    $0x28,%esp
	if(!cpu)
  101316:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  10131a:	75 0a                	jne    101326 <_ZN6kernel9scheduler8scheduleEPN3hal3x863cpu9cpu_stateE+0x16>
	{
		return nullptr;
  10131c:	b8 00 00 00 00       	mov    $0x0,%eax
  101321:	e9 59 01 00 00       	jmp    10147f <_ZN6kernel9scheduler8scheduleEPN3hal3x863cpu9cpu_stateE+0x16f>
	}

	if(!this->ready.front())
  101326:	8b 45 08             	mov    0x8(%ebp),%eax
  101329:	89 04 24             	mov    %eax,(%esp)
  10132c:	e8 f3 b4 00 00       	call   10c824 <_ZN5tools4listIN6kernel6threadEE5frontEv>
  101331:	85 c0                	test   %eax,%eax
  101333:	0f 94 c0             	sete   %al
  101336:	84 c0                	test   %al,%al
  101338:	74 08                	je     101342 <_ZN6kernel9scheduler8scheduleEPN3hal3x863cpu9cpu_stateE+0x32>
	{
		return cpu;
  10133a:	8b 45 0c             	mov    0xc(%ebp),%eax
  10133d:	e9 3d 01 00 00       	jmp    10147f <_ZN6kernel9scheduler8scheduleEPN3hal3x863cpu9cpu_stateE+0x16f>
	}

	if(this->running)
  101342:	8b 45 08             	mov    0x8(%ebp),%eax
  101345:	8b 40 14             	mov    0x14(%eax),%eax
  101348:	85 c0                	test   %eax,%eax
  10134a:	74 2a                	je     101376 <_ZN6kernel9scheduler8scheduleEPN3hal3x863cpu9cpu_stateE+0x66>
	{
		(*this->running).save(cpu);
  10134c:	8b 45 08             	mov    0x8(%ebp),%eax
  10134f:	8b 40 14             	mov    0x14(%eax),%eax
  101352:	8b 55 0c             	mov    0xc(%ebp),%edx
  101355:	89 54 24 04          	mov    %edx,0x4(%esp)
  101359:	89 04 24             	mov    %eax,(%esp)
  10135c:	e8 65 f0 ff ff       	call   1003c6 <_ZN6kernel6thread4saveEPN3hal3x863cpu9cpu_stateE>

		this->ready.push_back(this->running);
  101361:	8b 45 08             	mov    0x8(%ebp),%eax
  101364:	8b 50 14             	mov    0x14(%eax),%edx
  101367:	8b 45 08             	mov    0x8(%ebp),%eax
  10136a:	89 54 24 04          	mov    %edx,0x4(%esp)
  10136e:	89 04 24             	mov    %eax,(%esp)
  101371:	e8 08 ae 00 00       	call   10c17e <_ZN5tools4listIN6kernel6threadEE9push_backEPS2_>
	}

	this->running = this->ready.pop_front();
  101376:	8b 45 08             	mov    0x8(%ebp),%eax
  101379:	89 04 24             	mov    %eax,(%esp)
  10137c:	e8 59 ac 00 00       	call   10bfda <_ZN5tools4listIN6kernel6threadEE9pop_frontEv>
  101381:	8b 55 08             	mov    0x8(%ebp),%edx
  101384:	89 42 14             	mov    %eax,0x14(%edx)

	if(this->running)
  101387:	8b 45 08             	mov    0x8(%ebp),%eax
  10138a:	8b 40 14             	mov    0x14(%eax),%eax
  10138d:	85 c0                	test   %eax,%eax
  10138f:	0f 84 cb 00 00 00    	je     101460 <_ZN6kernel9scheduler8scheduleEPN3hal3x863cpu9cpu_stateE+0x150>
	{
		cpu = (*this->running).restore();
  101395:	8b 45 08             	mov    0x8(%ebp),%eax
  101398:	8b 40 14             	mov    0x14(%eax),%eax
  10139b:	89 04 24             	mov    %eax,(%esp)
  10139e:	e8 31 f0 ff ff       	call   1003d4 <_ZN6kernel6thread7restoreEv>
  1013a3:	89 45 0c             	mov    %eax,0xc(%ebp)
	
		if(this->running->proc->cntxt != this->cntxt)
  1013a6:	8b 45 08             	mov    0x8(%ebp),%eax
  1013a9:	8b 40 14             	mov    0x14(%eax),%eax
  1013ac:	8b 40 18             	mov    0x18(%eax),%eax
  1013af:	8b 90 48 04 00 00    	mov    0x448(%eax),%edx
  1013b5:	8b 45 08             	mov    0x8(%ebp),%eax
  1013b8:	8b 40 18             	mov    0x18(%eax),%eax
  1013bb:	39 c2                	cmp    %eax,%edx
  1013bd:	0f 84 9d 00 00 00    	je     101460 <_ZN6kernel9scheduler8scheduleEPN3hal3x863cpu9cpu_stateE+0x150>
		{
			this->cntxt = this->running->proc->cntxt;
  1013c3:	8b 45 08             	mov    0x8(%ebp),%eax
  1013c6:	8b 40 14             	mov    0x14(%eax),%eax
  1013c9:	8b 40 18             	mov    0x18(%eax),%eax
  1013cc:	8b 90 48 04 00 00    	mov    0x448(%eax),%edx
  1013d2:	8b 45 08             	mov    0x8(%ebp),%eax
  1013d5:	89 50 18             	mov    %edx,0x18(%eax)

			if(this->running->proc->memory_version != kernel::memory_version && this->cntxt != kernel::cntxt)
  1013d8:	8b 45 08             	mov    0x8(%ebp),%eax
  1013db:	8b 40 14             	mov    0x14(%eax),%eax
  1013de:	8b 40 18             	mov    0x18(%eax),%eax
  1013e1:	8b 90 4c 04 00 00    	mov    0x44c(%eax),%edx
  1013e7:	a1 00 30 11 00       	mov    0x113000,%eax
  1013ec:	39 c2                	cmp    %eax,%edx
  1013ee:	74 62                	je     101452 <_ZN6kernel9scheduler8scheduleEPN3hal3x863cpu9cpu_stateE+0x142>
  1013f0:	8b 45 08             	mov    0x8(%ebp),%eax
  1013f3:	8b 50 18             	mov    0x18(%eax),%edx
  1013f6:	a1 04 30 11 00       	mov    0x113004,%eax
  1013fb:	39 c2                	cmp    %eax,%edx
  1013fd:	74 53                	je     101452 <_ZN6kernel9scheduler8scheduleEPN3hal3x863cpu9cpu_stateE+0x142>
			{
				(*this->cntxt).copy(*kernel::vmmgr().get_context(), vmm::kernel_space_base, bytes_to_pages(vmm::kernel_space_limit - vmm::kernel_space_base));
  1013ff:	e8 1c ec ff ff       	call   100020 <_ZN6kernel5vmmgrEv>
  101404:	89 04 24             	mov    %eax,(%esp)
  101407:	e8 a2 37 00 00       	call   104bae <_ZN3hal3x863vmm11get_contextEv>
  10140c:	8b 55 08             	mov    0x8(%ebp),%edx
  10140f:	8b 52 18             	mov    0x18(%edx),%edx
  101412:	c7 44 24 0c ff 3f 00 	movl   $0x3fff,0xc(%esp)
  101419:	00 
  10141a:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
  101421:	00 
  101422:	89 44 24 04          	mov    %eax,0x4(%esp)
  101426:	89 14 24             	mov    %edx,(%esp)
  101429:	e8 ce 47 00 00       	call   105bfc <_ZN3hal3x867context4copyERS1_jj>
			
				this->running->proc->memory_version = --kernel::memory_version;
  10142e:	8b 45 08             	mov    0x8(%ebp),%eax
  101431:	8b 40 14             	mov    0x14(%eax),%eax
  101434:	8b 40 18             	mov    0x18(%eax),%eax
  101437:	8b 15 00 30 11 00    	mov    0x113000,%edx
  10143d:	83 ea 01             	sub    $0x1,%edx
  101440:	89 15 00 30 11 00    	mov    %edx,0x113000
  101446:	8b 15 00 30 11 00    	mov    0x113000,%edx
  10144c:	89 90 4c 04 00 00    	mov    %edx,0x44c(%eax)
			}

			(*this->cntxt).activate();
  101452:	8b 45 08             	mov    0x8(%ebp),%eax
  101455:	8b 40 18             	mov    0x18(%eax),%eax
  101458:	89 04 24             	mov    %eax,(%esp)
  10145b:	e8 be 3f 00 00       	call   10541e <_ZN3hal3x867context8activateEv>
		}
	}

	#if defined(ARCH_X86) || defined(ARCH_X64)

	gdt &gdt = gdt::instance();
  101460:	e8 7b b3 00 00       	call   10c7e0 <_ZN3hal3x863gdt8instanceEv>
  101465:	89 45 f4             	mov    %eax,-0xc(%ebp)
	gdt.tss().tss[1] = (uint32_t)(cpu + 1);
  101468:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10146b:	89 04 24             	mov    %eax,(%esp)
  10146e:	e8 a7 b3 00 00       	call   10c81a <_ZN3hal3x863gdt3tssEv>
  101473:	8b 55 0c             	mov    0xc(%ebp),%edx
  101476:	83 c2 38             	add    $0x38,%edx
  101479:	89 50 04             	mov    %edx,0x4(%eax)

	#endif

	return cpu;
  10147c:	8b 45 0c             	mov    0xc(%ebp),%eax
}
  10147f:	c9                   	leave  
  101480:	c3                   	ret    
  101481:	90                   	nop

00101482 <__tcf_3>:
  101482:	55                   	push   %ebp
  101483:	89 e5                	mov    %esp,%ebp
  101485:	83 ec 18             	sub    $0x18,%esp
  101488:	c7 04 24 04 61 13 00 	movl   $0x136104,(%esp)
  10148f:	e8 0c b1 00 00       	call   10c5a0 <_ZN6kernel9threadmgrD1Ev>
  101494:	c9                   	leave  
  101495:	c3                   	ret    

00101496 <__tcf_4>:
  101496:	55                   	push   %ebp
  101497:	89 e5                	mov    %esp,%ebp
  101499:	83 ec 18             	sub    $0x18,%esp
  10149c:	c7 04 24 60 60 13 00 	movl   $0x136060,(%esp)
  1014a3:	e8 82 aa 00 00       	call   10bf2a <_ZN6kernel9schedulerD1Ev>
  1014a8:	c9                   	leave  
  1014a9:	c3                   	ret    

001014aa <_ZN6kernel7processC1EPKcS2_jPN3hal3x867contextE>:
#include <cstring>

using kernel::process;
using kernel::processmgr;

process::process( const char name[64], const char cmdline[1024], process::id_t parent, context *cntxt ) : memory_version(0)
  1014aa:	55                   	push   %ebp
  1014ab:	89 e5                	mov    %esp,%ebp
  1014ad:	53                   	push   %ebx
  1014ae:	83 ec 14             	sub    $0x14,%esp
  1014b1:	8b 45 08             	mov    0x8(%ebp),%eax
  1014b4:	c7 80 4c 04 00 00 00 	movl   $0x0,0x44c(%eax)
  1014bb:	00 00 00 
  1014be:	8b 45 08             	mov    0x8(%ebp),%eax
  1014c1:	05 54 04 00 00       	add    $0x454,%eax
  1014c6:	89 04 24             	mov    %eax,(%esp)
  1014c9:	e8 96 ad 00 00       	call   10c264 <_ZN5tools4listIN6kernel6threadEEC1Ev>
{
	strcpy(this->name, name);
  1014ce:	8b 45 08             	mov    0x8(%ebp),%eax
  1014d1:	8d 50 08             	lea    0x8(%eax),%edx
  1014d4:	8b 45 0c             	mov    0xc(%ebp),%eax
  1014d7:	89 44 24 04          	mov    %eax,0x4(%esp)
  1014db:	89 14 24             	mov    %edx,(%esp)
  1014de:	e8 2f 86 00 00       	call   109b12 <strcpy>
	strcpy(this->cmdline, cmdline);
  1014e3:	8b 45 08             	mov    0x8(%ebp),%eax
  1014e6:	8d 50 48             	lea    0x48(%eax),%edx
  1014e9:	8b 45 10             	mov    0x10(%ebp),%eax
  1014ec:	89 44 24 04          	mov    %eax,0x4(%esp)
  1014f0:	89 14 24             	mov    %edx,(%esp)
  1014f3:	e8 1a 86 00 00       	call   109b12 <strcpy>

	this->id = process::new_id();
  1014f8:	e8 33 b3 00 00       	call   10c830 <_ZN6kernel7process6new_idEv>
  1014fd:	8b 55 08             	mov    0x8(%ebp),%edx
  101500:	89 02                	mov    %eax,(%edx)

	this->parent = parent;
  101502:	8b 45 08             	mov    0x8(%ebp),%eax
  101505:	8b 55 14             	mov    0x14(%ebp),%edx
  101508:	89 50 04             	mov    %edx,0x4(%eax)

	this->cntxt = cntxt;
  10150b:	8b 45 08             	mov    0x8(%ebp),%eax
  10150e:	8b 55 18             	mov    0x18(%ebp),%edx
  101511:	89 90 48 04 00 00    	mov    %edx,0x448(%eax)

	this->memmgr = new vmm;
  101517:	c7 04 24 14 00 02 00 	movl   $0x20014,(%esp)
  10151e:	e8 7d 0c 00 00       	call   1021a0 <_Znwj>
  101523:	89 c3                	mov    %eax,%ebx
  101525:	89 1c 24             	mov    %ebx,(%esp)
  101528:	e8 91 2e 00 00       	call   1043be <_ZN3hal3x863vmmC1Ev>
  10152d:	8b 45 08             	mov    0x8(%ebp),%eax
  101530:	89 98 50 04 00 00    	mov    %ebx,0x450(%eax)
	(*this->memmgr).init(this->cntxt, vmm::user_space_base, vmm::user_space_limit);
  101536:	8b 45 08             	mov    0x8(%ebp),%eax
  101539:	8b 90 48 04 00 00    	mov    0x448(%eax),%edx
  10153f:	8b 45 08             	mov    0x8(%ebp),%eax
  101542:	8b 80 50 04 00 00    	mov    0x450(%eax),%eax
  101548:	c7 44 24 0c ff df bf 	movl   $0xffbfdfff,0xc(%esp)
  10154f:	ff 
  101550:	c7 44 24 08 00 00 00 	movl   $0x4000000,0x8(%esp)
  101557:	04 
  101558:	89 54 24 04          	mov    %edx,0x4(%esp)
  10155c:	89 04 24             	mov    %eax,(%esp)
  10155f:	e8 30 2f 00 00       	call   104494 <_ZN3hal3x863vmm4initEPNS0_7contextEjj>
}
  101564:	83 c4 14             	add    $0x14,%esp
  101567:	5b                   	pop    %ebx
  101568:	5d                   	pop    %ebp
  101569:	c3                   	ret    

0010156a <_ZN6kernel7processD1Ev>:

process::~process(  )
  10156a:	55                   	push   %ebp
  10156b:	89 e5                	mov    %esp,%ebp
  10156d:	53                   	push   %ebx
  10156e:	83 ec 44             	sub    $0x44,%esp
{
	scheduler &scheduler = scheduler::instance();
  101571:	e8 c7 a9 00 00       	call   10bf3d <_ZN6kernel9scheduler8instanceEv>
  101576:	89 45 f4             	mov    %eax,-0xc(%ebp)
	threadmgr &thrdmgr = threadmgr::instance();
  101579:	e8 35 b0 00 00       	call   10c5b3 <_ZN6kernel9threadmgr8instanceEv>
  10157e:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for(tools::list<thread>::iterator it = this->thrds.begin(); it != this->thrds.end(); it++)
  101581:	8b 45 08             	mov    0x8(%ebp),%eax
  101584:	8d 90 54 04 00 00    	lea    0x454(%eax),%edx
  10158a:	8d 45 d4             	lea    -0x2c(%ebp),%eax
  10158d:	89 54 24 04          	mov    %edx,0x4(%esp)
  101591:	89 04 24             	mov    %eax,(%esp)
  101594:	e8 93 aa 00 00       	call   10c02c <_ZN5tools4listIN6kernel6threadEE5beginEv>
  101599:	83 ec 04             	sub    $0x4,%esp
  10159c:	eb 6c                	jmp    10160a <_ZN6kernel7processD1Ev+0xa0>
	{
		thread *thrd = *it;
  10159e:	8d 45 d4             	lea    -0x2c(%ebp),%eax
  1015a1:	89 04 24             	mov    %eax,(%esp)
  1015a4:	e8 cd aa 00 00       	call   10c076 <_ZN5tools4listIN6kernel6threadEE8iteratordeEv>
  1015a9:	89 45 ec             	mov    %eax,-0x14(%ebp)

		if(thrd)
  1015ac:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
  1015b0:	74 24                	je     1015d6 <_ZN6kernel7processD1Ev+0x6c>
		{
			scheduler.remove(thrd);
  1015b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1015b5:	89 44 24 04          	mov    %eax,0x4(%esp)
  1015b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1015bc:	89 04 24             	mov    %eax,(%esp)
  1015bf:	e8 a0 fc ff ff       	call   101264 <_ZN6kernel9scheduler6removeEPNS_6threadE>
			thrdmgr.remove(thrd);
  1015c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1015c7:	89 44 24 04          	mov    %eax,0x4(%esp)
  1015cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1015ce:	89 04 24             	mov    %eax,(%esp)
  1015d1:	e8 64 ee ff ff       	call   10043a <_ZN6kernel9threadmgr6removeEPNS_6threadE>
		}
		
		delete thrd;
  1015d6:	8b 5d ec             	mov    -0x14(%ebp),%ebx
  1015d9:	85 db                	test   %ebx,%ebx
  1015db:	74 10                	je     1015ed <_ZN6kernel7processD1Ev+0x83>
  1015dd:	89 1c 24             	mov    %ebx,(%esp)
  1015e0:	e8 9d ec ff ff       	call   100282 <_ZN6kernel6threadD1Ev>
  1015e5:	89 1c 24             	mov    %ebx,(%esp)
  1015e8:	e8 e9 0b 00 00       	call   1021d6 <_ZdlPv>
process::~process(  )
{
	scheduler &scheduler = scheduler::instance();
	threadmgr &thrdmgr = threadmgr::instance();

	for(tools::list<thread>::iterator it = this->thrds.begin(); it != this->thrds.end(); it++)
  1015ed:	8d 45 dc             	lea    -0x24(%ebp),%eax
  1015f0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  1015f7:	00 
  1015f8:	8d 55 d4             	lea    -0x2c(%ebp),%edx
  1015fb:	89 54 24 04          	mov    %edx,0x4(%esp)
  1015ff:	89 04 24             	mov    %eax,(%esp)
  101602:	e8 2b ac 00 00       	call   10c232 <_ZN5tools4listIN6kernel6threadEE8iteratorppEi>
  101607:	83 ec 04             	sub    $0x4,%esp
  10160a:	8b 45 08             	mov    0x8(%ebp),%eax
  10160d:	8d 90 54 04 00 00    	lea    0x454(%eax),%edx
  101613:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  101616:	89 54 24 04          	mov    %edx,0x4(%esp)
  10161a:	89 04 24             	mov    %eax,(%esp)
  10161d:	e8 a4 ab 00 00       	call   10c1c6 <_ZN5tools4listIN6kernel6threadEE3endEv>
  101622:	83 ec 04             	sub    $0x4,%esp
  101625:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  101628:	89 44 24 04          	mov    %eax,0x4(%esp)
  10162c:	8d 45 d4             	lea    -0x2c(%ebp),%eax
  10162f:	89 04 24             	mov    %eax,(%esp)
  101632:	e8 db ab 00 00       	call   10c212 <_ZN5tools4listIN6kernel6threadEE8iteratorneERKS4_>
  101637:	84 c0                	test   %al,%al
  101639:	0f 95 c0             	setne  %al
  10163c:	84 c0                	test   %al,%al
  10163e:	0f 85 5a ff ff ff    	jne    10159e <_ZN6kernel7processD1Ev+0x34>
		}
		
		delete thrd;
	}

	delete this->memmgr;
  101644:	8b 45 08             	mov    0x8(%ebp),%eax
  101647:	8b 98 50 04 00 00    	mov    0x450(%eax),%ebx
  10164d:	85 db                	test   %ebx,%ebx
  10164f:	74 10                	je     101661 <_ZN6kernel7processD1Ev+0xf7>
  101651:	89 1c 24             	mov    %ebx,(%esp)
  101654:	e8 a1 2d 00 00       	call   1043fa <_ZN3hal3x863vmmD1Ev>
  101659:	89 1c 24             	mov    %ebx,(%esp)
  10165c:	e8 75 0b 00 00       	call   1021d6 <_ZdlPv>

	this->memmgr = new vmm;
	(*this->memmgr).init(this->cntxt, vmm::user_space_base, vmm::user_space_limit);
}

process::~process(  )
  101661:	8b 45 08             	mov    0x8(%ebp),%eax
  101664:	05 54 04 00 00       	add    $0x454,%eax
  101669:	89 04 24             	mov    %eax,(%esp)
  10166c:	e8 05 a9 00 00       	call   10bf76 <_ZN5tools4listIN6kernel6threadEED1Ev>
		
		delete thrd;
	}

	delete this->memmgr;
}
  101671:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  101674:	c9                   	leave  
  101675:	c3                   	ret    

00101676 <_ZN6kernel7process4infoEv>:

process::info_t process::info(  )
{
  101676:	55                   	push   %ebp
  101677:	89 e5                	mov    %esp,%ebp
  101679:	57                   	push   %edi
  10167a:	56                   	push   %esi
  10167b:	53                   	push   %ebx
  10167c:	83 ec 1c             	sub    $0x1c,%esp
	static process::info_t info;

	info.id 	= this->id;
  10167f:	8b 45 0c             	mov    0xc(%ebp),%eax
  101682:	8b 00                	mov    (%eax),%eax
  101684:	a3 60 30 13 00       	mov    %eax,0x133060
	info.parent 	= this->parent;
  101689:	8b 45 0c             	mov    0xc(%ebp),%eax
  10168c:	8b 40 04             	mov    0x4(%eax),%eax
  10168f:	a3 64 30 13 00       	mov    %eax,0x133064

	strcpy(info.name, this->name);
  101694:	8b 45 0c             	mov    0xc(%ebp),%eax
  101697:	83 c0 08             	add    $0x8,%eax
  10169a:	89 44 24 04          	mov    %eax,0x4(%esp)
  10169e:	c7 04 24 68 30 13 00 	movl   $0x133068,(%esp)
  1016a5:	e8 68 84 00 00       	call   109b12 <strcpy>
	strcpy(info.cmdline, this->cmdline);
  1016aa:	8b 45 0c             	mov    0xc(%ebp),%eax
  1016ad:	83 c0 48             	add    $0x48,%eax
  1016b0:	89 44 24 04          	mov    %eax,0x4(%esp)
  1016b4:	c7 04 24 a8 30 13 00 	movl   $0x1330a8,(%esp)
  1016bb:	e8 52 84 00 00       	call   109b12 <strcpy>

	return info;
  1016c0:	8b 45 08             	mov    0x8(%ebp),%eax
  1016c3:	89 c2                	mov    %eax,%edx
  1016c5:	bb 60 30 13 00       	mov    $0x133060,%ebx
  1016ca:	b8 12 01 00 00       	mov    $0x112,%eax
  1016cf:	89 d7                	mov    %edx,%edi
  1016d1:	89 de                	mov    %ebx,%esi
  1016d3:	89 c1                	mov    %eax,%ecx
  1016d5:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
  1016d7:	8b 45 08             	mov    0x8(%ebp),%eax
  1016da:	83 c4 1c             	add    $0x1c,%esp
  1016dd:	5b                   	pop    %ebx
  1016de:	5e                   	pop    %esi
  1016df:	5f                   	pop    %edi
  1016e0:	5d                   	pop    %ebp
  1016e1:	c2 04 00             	ret    $0x4

001016e4 <_ZN6kernel10processmgrC1Ev>:

processmgr::processmgr(  )
  1016e4:	55                   	push   %ebp
  1016e5:	89 e5                	mov    %esp,%ebp
  1016e7:	83 ec 18             	sub    $0x18,%esp
  1016ea:	8b 45 08             	mov    0x8(%ebp),%eax
  1016ed:	89 04 24             	mov    %eax,(%esp)
  1016f0:	e8 4f b1 00 00       	call   10c844 <_ZN5tools4listIN6kernel7processEEC1Ev>
{

}
  1016f5:	c9                   	leave  
  1016f6:	c3                   	ret    
  1016f7:	90                   	nop

001016f8 <_ZN6kernel10processmgr3addEPNS_7processE>:

void processmgr::add( process *proc )
{
  1016f8:	55                   	push   %ebp
  1016f9:	89 e5                	mov    %esp,%ebp
  1016fb:	83 ec 18             	sub    $0x18,%esp
	if(proc && this->get(proc) == nullptr)
  1016fe:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  101702:	74 1d                	je     101721 <_ZN6kernel10processmgr3addEPNS_7processE+0x29>
  101704:	8b 45 0c             	mov    0xc(%ebp),%eax
  101707:	89 44 24 04          	mov    %eax,0x4(%esp)
  10170b:	8b 45 08             	mov    0x8(%ebp),%eax
  10170e:	89 04 24             	mov    %eax,(%esp)
  101711:	e8 4a 02 00 00       	call   101960 <_ZN6kernel10processmgr3getEPNS_7processE>
  101716:	85 c0                	test   %eax,%eax
  101718:	75 07                	jne    101721 <_ZN6kernel10processmgr3addEPNS_7processE+0x29>
  10171a:	b8 01 00 00 00       	mov    $0x1,%eax
  10171f:	eb 05                	jmp    101726 <_ZN6kernel10processmgr3addEPNS_7processE+0x2e>
  101721:	b8 00 00 00 00       	mov    $0x0,%eax
  101726:	84 c0                	test   %al,%al
  101728:	74 12                	je     10173c <_ZN6kernel10processmgr3addEPNS_7processE+0x44>
	{
		this->procs.push_back(proc);
  10172a:	8b 45 08             	mov    0x8(%ebp),%eax
  10172d:	8b 55 0c             	mov    0xc(%ebp),%edx
  101730:	89 54 24 04          	mov    %edx,0x4(%esp)
  101734:	89 04 24             	mov    %eax,(%esp)
  101737:	e8 a0 b1 00 00       	call   10c8dc <_ZN5tools4listIN6kernel7processEE9push_backEPS2_>
	}
}
  10173c:	c9                   	leave  
  10173d:	c3                   	ret    

0010173e <_ZN6kernel10processmgr6removeEPNS_7processE>:

void processmgr::remove( process *proc )
{
  10173e:	55                   	push   %ebp
  10173f:	89 e5                	mov    %esp,%ebp
  101741:	53                   	push   %ebx
  101742:	83 ec 34             	sub    $0x34,%esp
	for(tools::list<process>::iterator it = this->procs.begin(); it != this->procs.end(); it++)
  101745:	8b 55 08             	mov    0x8(%ebp),%edx
  101748:	8d 45 d8             	lea    -0x28(%ebp),%eax
  10174b:	89 54 24 04          	mov    %edx,0x4(%esp)
  10174f:	89 04 24             	mov    %eax,(%esp)
  101752:	e8 4b af 00 00       	call   10c6a2 <_ZN5tools4listIN6kernel7processEE5beginEv>
  101757:	83 ec 04             	sub    $0x4,%esp
  10175a:	eb 55                	jmp    1017b1 <_ZN6kernel10processmgr6removeEPNS_7processE+0x73>
	{
		if(*it == proc)
  10175c:	8d 45 d8             	lea    -0x28(%ebp),%eax
  10175f:	89 04 24             	mov    %eax,(%esp)
  101762:	e8 85 af 00 00       	call   10c6ec <_ZN5tools4listIN6kernel7processEE8iteratordeEv>
  101767:	3b 45 0c             	cmp    0xc(%ebp),%eax
  10176a:	0f 94 c0             	sete   %al
  10176d:	84 c0                	test   %al,%al
  10176f:	74 23                	je     101794 <_ZN6kernel10processmgr6removeEPNS_7processE+0x56>
		{
			this->procs.erase(it);	
  101771:	8b 5d 08             	mov    0x8(%ebp),%ebx
  101774:	8d 4d e0             	lea    -0x20(%ebp),%ecx
  101777:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10177a:	8b 55 dc             	mov    -0x24(%ebp),%edx
  10177d:	89 44 24 08          	mov    %eax,0x8(%esp)
  101781:	89 54 24 0c          	mov    %edx,0xc(%esp)
  101785:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  101789:	89 0c 24             	mov    %ecx,(%esp)
  10178c:	e8 67 af 00 00       	call   10c6f8 <_ZN5tools4listIN6kernel7processEE5eraseENS3_8iteratorE>
  101791:	83 ec 04             	sub    $0x4,%esp
	}
}

void processmgr::remove( process *proc )
{
	for(tools::list<process>::iterator it = this->procs.begin(); it != this->procs.end(); it++)
  101794:	8d 45 e8             	lea    -0x18(%ebp),%eax
  101797:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  10179e:	00 
  10179f:	8d 55 d8             	lea    -0x28(%ebp),%edx
  1017a2:	89 54 24 04          	mov    %edx,0x4(%esp)
  1017a6:	89 04 24             	mov    %eax,(%esp)
  1017a9:	e8 e2 b1 00 00       	call   10c990 <_ZN5tools4listIN6kernel7processEE8iteratorppEi>
  1017ae:	83 ec 04             	sub    $0x4,%esp
  1017b1:	8b 55 08             	mov    0x8(%ebp),%edx
  1017b4:	8d 45 f0             	lea    -0x10(%ebp),%eax
  1017b7:	89 54 24 04          	mov    %edx,0x4(%esp)
  1017bb:	89 04 24             	mov    %eax,(%esp)
  1017be:	e8 61 b1 00 00       	call   10c924 <_ZN5tools4listIN6kernel7processEE3endEv>
  1017c3:	83 ec 04             	sub    $0x4,%esp
  1017c6:	8d 45 f0             	lea    -0x10(%ebp),%eax
  1017c9:	89 44 24 04          	mov    %eax,0x4(%esp)
  1017cd:	8d 45 d8             	lea    -0x28(%ebp),%eax
  1017d0:	89 04 24             	mov    %eax,(%esp)
  1017d3:	e8 98 b1 00 00       	call   10c970 <_ZN5tools4listIN6kernel7processEE8iteratorneERKS4_>
  1017d8:	84 c0                	test   %al,%al
  1017da:	0f 95 c0             	setne  %al
  1017dd:	84 c0                	test   %al,%al
  1017df:	0f 85 77 ff ff ff    	jne    10175c <_ZN6kernel10processmgr6removeEPNS_7processE+0x1e>
		if(*it == proc)
		{
			this->procs.erase(it);	
		}
	}
}
  1017e5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  1017e8:	c9                   	leave  
  1017e9:	c3                   	ret    

001017ea <_ZN6kernel10processmgr3getEj>:

process *processmgr::get( process::id_t id )
{
  1017ea:	55                   	push   %ebp
  1017eb:	89 e5                	mov    %esp,%ebp
  1017ed:	83 ec 38             	sub    $0x38,%esp
	if(this->procs.empty())
  1017f0:	8b 45 08             	mov    0x8(%ebp),%eax
  1017f3:	89 04 24             	mov    %eax,(%esp)
  1017f6:	e8 45 ae 00 00       	call   10c640 <_ZN5tools4listIN6kernel7processEE5emptyEv>
  1017fb:	84 c0                	test   %al,%al
  1017fd:	0f 95 c0             	setne  %al
  101800:	84 c0                	test   %al,%al
  101802:	74 0a                	je     10180e <_ZN6kernel10processmgr3getEj+0x24>
	{
		return nullptr;
  101804:	b8 00 00 00 00       	mov    $0x0,%eax
  101809:	e9 8d 00 00 00       	jmp    10189b <_ZN6kernel10processmgr3getEj+0xb1>
	}

	for(tools::list<process>::iterator it = this->procs.begin(); it != this->procs.end(); it++)
  10180e:	8b 55 08             	mov    0x8(%ebp),%edx
  101811:	8d 45 e0             	lea    -0x20(%ebp),%eax
  101814:	89 54 24 04          	mov    %edx,0x4(%esp)
  101818:	89 04 24             	mov    %eax,(%esp)
  10181b:	e8 82 ae 00 00       	call   10c6a2 <_ZN5tools4listIN6kernel7processEE5beginEv>
  101820:	83 ec 04             	sub    $0x4,%esp
  101823:	eb 41                	jmp    101866 <_ZN6kernel10processmgr3getEj+0x7c>
	{
		if(it->id == id)
  101825:	8d 45 e0             	lea    -0x20(%ebp),%eax
  101828:	89 04 24             	mov    %eax,(%esp)
  10182b:	e8 92 b1 00 00       	call   10c9c2 <_ZN5tools4listIN6kernel7processEE8iteratorptEv>
  101830:	8b 00                	mov    (%eax),%eax
  101832:	3b 45 0c             	cmp    0xc(%ebp),%eax
  101835:	0f 94 c0             	sete   %al
  101838:	84 c0                	test   %al,%al
  10183a:	74 0d                	je     101849 <_ZN6kernel10processmgr3getEj+0x5f>
		{
			return *it;
  10183c:	8d 45 e0             	lea    -0x20(%ebp),%eax
  10183f:	89 04 24             	mov    %eax,(%esp)
  101842:	e8 a5 ae 00 00       	call   10c6ec <_ZN5tools4listIN6kernel7processEE8iteratordeEv>
  101847:	eb 52                	jmp    10189b <_ZN6kernel10processmgr3getEj+0xb1>
	if(this->procs.empty())
	{
		return nullptr;
	}

	for(tools::list<process>::iterator it = this->procs.begin(); it != this->procs.end(); it++)
  101849:	8d 45 e8             	lea    -0x18(%ebp),%eax
  10184c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  101853:	00 
  101854:	8d 55 e0             	lea    -0x20(%ebp),%edx
  101857:	89 54 24 04          	mov    %edx,0x4(%esp)
  10185b:	89 04 24             	mov    %eax,(%esp)
  10185e:	e8 2d b1 00 00       	call   10c990 <_ZN5tools4listIN6kernel7processEE8iteratorppEi>
  101863:	83 ec 04             	sub    $0x4,%esp
  101866:	8b 55 08             	mov    0x8(%ebp),%edx
  101869:	8d 45 f0             	lea    -0x10(%ebp),%eax
  10186c:	89 54 24 04          	mov    %edx,0x4(%esp)
  101870:	89 04 24             	mov    %eax,(%esp)
  101873:	e8 ac b0 00 00       	call   10c924 <_ZN5tools4listIN6kernel7processEE3endEv>
  101878:	83 ec 04             	sub    $0x4,%esp
  10187b:	8d 45 f0             	lea    -0x10(%ebp),%eax
  10187e:	89 44 24 04          	mov    %eax,0x4(%esp)
  101882:	8d 45 e0             	lea    -0x20(%ebp),%eax
  101885:	89 04 24             	mov    %eax,(%esp)
  101888:	e8 e3 b0 00 00       	call   10c970 <_ZN5tools4listIN6kernel7processEE8iteratorneERKS4_>
  10188d:	84 c0                	test   %al,%al
  10188f:	0f 95 c0             	setne  %al
  101892:	84 c0                	test   %al,%al
  101894:	75 8f                	jne    101825 <_ZN6kernel10processmgr3getEj+0x3b>
		{
			return *it;
		}
	}

	return nullptr;
  101896:	b8 00 00 00 00       	mov    $0x0,%eax
}
  10189b:	c9                   	leave  
  10189c:	c3                   	ret    
  10189d:	90                   	nop

0010189e <_ZN6kernel10processmgr3getEPKc>:

process *processmgr::get( const char name[64] )
{
  10189e:	55                   	push   %ebp
  10189f:	89 e5                	mov    %esp,%ebp
  1018a1:	83 ec 38             	sub    $0x38,%esp
	if(this->procs.empty())
  1018a4:	8b 45 08             	mov    0x8(%ebp),%eax
  1018a7:	89 04 24             	mov    %eax,(%esp)
  1018aa:	e8 91 ad 00 00       	call   10c640 <_ZN5tools4listIN6kernel7processEE5emptyEv>
  1018af:	84 c0                	test   %al,%al
  1018b1:	0f 95 c0             	setne  %al
  1018b4:	84 c0                	test   %al,%al
  1018b6:	74 0a                	je     1018c2 <_ZN6kernel10processmgr3getEPKc+0x24>
	{
		return nullptr;
  1018b8:	b8 00 00 00 00       	mov    $0x0,%eax
  1018bd:	e9 9c 00 00 00       	jmp    10195e <_ZN6kernel10processmgr3getEPKc+0xc0>
	}

	for(tools::list<process>::iterator it = this->procs.begin(); it != this->procs.end(); it++)
  1018c2:	8b 55 08             	mov    0x8(%ebp),%edx
  1018c5:	8d 45 e0             	lea    -0x20(%ebp),%eax
  1018c8:	89 54 24 04          	mov    %edx,0x4(%esp)
  1018cc:	89 04 24             	mov    %eax,(%esp)
  1018cf:	e8 ce ad 00 00       	call   10c6a2 <_ZN5tools4listIN6kernel7processEE5beginEv>
  1018d4:	83 ec 04             	sub    $0x4,%esp
  1018d7:	eb 50                	jmp    101929 <_ZN6kernel10processmgr3getEPKc+0x8b>
	{
		if(!strcmp(it->name, name))
  1018d9:	8d 45 e0             	lea    -0x20(%ebp),%eax
  1018dc:	89 04 24             	mov    %eax,(%esp)
  1018df:	e8 de b0 00 00       	call   10c9c2 <_ZN5tools4listIN6kernel7processEE8iteratorptEv>
  1018e4:	8d 50 08             	lea    0x8(%eax),%edx
  1018e7:	8b 45 0c             	mov    0xc(%ebp),%eax
  1018ea:	89 44 24 04          	mov    %eax,0x4(%esp)
  1018ee:	89 14 24             	mov    %edx,(%esp)
  1018f1:	e8 b4 83 00 00       	call   109caa <strcmp>
  1018f6:	85 c0                	test   %eax,%eax
  1018f8:	0f 94 c0             	sete   %al
  1018fb:	84 c0                	test   %al,%al
  1018fd:	74 0d                	je     10190c <_ZN6kernel10processmgr3getEPKc+0x6e>
		{
			return *it;
  1018ff:	8d 45 e0             	lea    -0x20(%ebp),%eax
  101902:	89 04 24             	mov    %eax,(%esp)
  101905:	e8 e2 ad 00 00       	call   10c6ec <_ZN5tools4listIN6kernel7processEE8iteratordeEv>
  10190a:	eb 52                	jmp    10195e <_ZN6kernel10processmgr3getEPKc+0xc0>
	if(this->procs.empty())
	{
		return nullptr;
	}

	for(tools::list<process>::iterator it = this->procs.begin(); it != this->procs.end(); it++)
  10190c:	8d 45 e8             	lea    -0x18(%ebp),%eax
  10190f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  101916:	00 
  101917:	8d 55 e0             	lea    -0x20(%ebp),%edx
  10191a:	89 54 24 04          	mov    %edx,0x4(%esp)
  10191e:	89 04 24             	mov    %eax,(%esp)
  101921:	e8 6a b0 00 00       	call   10c990 <_ZN5tools4listIN6kernel7processEE8iteratorppEi>
  101926:	83 ec 04             	sub    $0x4,%esp
  101929:	8b 55 08             	mov    0x8(%ebp),%edx
  10192c:	8d 45 f0             	lea    -0x10(%ebp),%eax
  10192f:	89 54 24 04          	mov    %edx,0x4(%esp)
  101933:	89 04 24             	mov    %eax,(%esp)
  101936:	e8 e9 af 00 00       	call   10c924 <_ZN5tools4listIN6kernel7processEE3endEv>
  10193b:	83 ec 04             	sub    $0x4,%esp
  10193e:	8d 45 f0             	lea    -0x10(%ebp),%eax
  101941:	89 44 24 04          	mov    %eax,0x4(%esp)
  101945:	8d 45 e0             	lea    -0x20(%ebp),%eax
  101948:	89 04 24             	mov    %eax,(%esp)
  10194b:	e8 20 b0 00 00       	call   10c970 <_ZN5tools4listIN6kernel7processEE8iteratorneERKS4_>
  101950:	84 c0                	test   %al,%al
  101952:	0f 95 c0             	setne  %al
  101955:	84 c0                	test   %al,%al
  101957:	75 80                	jne    1018d9 <_ZN6kernel10processmgr3getEPKc+0x3b>
		{
			return *it;
		}
	}

	return nullptr;
  101959:	b8 00 00 00 00       	mov    $0x0,%eax
}
  10195e:	c9                   	leave  
  10195f:	c3                   	ret    

00101960 <_ZN6kernel10processmgr3getEPNS_7processE>:

process *processmgr::get( process *proc )
{
  101960:	55                   	push   %ebp
  101961:	89 e5                	mov    %esp,%ebp
  101963:	83 ec 38             	sub    $0x38,%esp
	if(this->procs.empty())
  101966:	8b 45 08             	mov    0x8(%ebp),%eax
  101969:	89 04 24             	mov    %eax,(%esp)
  10196c:	e8 cf ac 00 00       	call   10c640 <_ZN5tools4listIN6kernel7processEE5emptyEv>
  101971:	84 c0                	test   %al,%al
  101973:	0f 95 c0             	setne  %al
  101976:	84 c0                	test   %al,%al
  101978:	74 0a                	je     101984 <_ZN6kernel10processmgr3getEPNS_7processE+0x24>
	{
		return nullptr;
  10197a:	b8 00 00 00 00       	mov    $0x0,%eax
  10197f:	e9 8b 00 00 00       	jmp    101a0f <_ZN6kernel10processmgr3getEPNS_7processE+0xaf>
	}

	for(tools::list<process>::iterator it = this->procs.begin(); it != this->procs.end(); it++)
  101984:	8b 55 08             	mov    0x8(%ebp),%edx
  101987:	8d 45 e0             	lea    -0x20(%ebp),%eax
  10198a:	89 54 24 04          	mov    %edx,0x4(%esp)
  10198e:	89 04 24             	mov    %eax,(%esp)
  101991:	e8 0c ad 00 00       	call   10c6a2 <_ZN5tools4listIN6kernel7processEE5beginEv>
  101996:	83 ec 04             	sub    $0x4,%esp
  101999:	eb 3f                	jmp    1019da <_ZN6kernel10processmgr3getEPNS_7processE+0x7a>
	{
		if(*it == proc)
  10199b:	8d 45 e0             	lea    -0x20(%ebp),%eax
  10199e:	89 04 24             	mov    %eax,(%esp)
  1019a1:	e8 46 ad 00 00       	call   10c6ec <_ZN5tools4listIN6kernel7processEE8iteratordeEv>
  1019a6:	3b 45 0c             	cmp    0xc(%ebp),%eax
  1019a9:	0f 94 c0             	sete   %al
  1019ac:	84 c0                	test   %al,%al
  1019ae:	74 0d                	je     1019bd <_ZN6kernel10processmgr3getEPNS_7processE+0x5d>
		{
			return *it;
  1019b0:	8d 45 e0             	lea    -0x20(%ebp),%eax
  1019b3:	89 04 24             	mov    %eax,(%esp)
  1019b6:	e8 31 ad 00 00       	call   10c6ec <_ZN5tools4listIN6kernel7processEE8iteratordeEv>
  1019bb:	eb 52                	jmp    101a0f <_ZN6kernel10processmgr3getEPNS_7processE+0xaf>
	if(this->procs.empty())
	{
		return nullptr;
	}

	for(tools::list<process>::iterator it = this->procs.begin(); it != this->procs.end(); it++)
  1019bd:	8d 45 e8             	lea    -0x18(%ebp),%eax
  1019c0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  1019c7:	00 
  1019c8:	8d 55 e0             	lea    -0x20(%ebp),%edx
  1019cb:	89 54 24 04          	mov    %edx,0x4(%esp)
  1019cf:	89 04 24             	mov    %eax,(%esp)
  1019d2:	e8 b9 af 00 00       	call   10c990 <_ZN5tools4listIN6kernel7processEE8iteratorppEi>
  1019d7:	83 ec 04             	sub    $0x4,%esp
  1019da:	8b 55 08             	mov    0x8(%ebp),%edx
  1019dd:	8d 45 f0             	lea    -0x10(%ebp),%eax
  1019e0:	89 54 24 04          	mov    %edx,0x4(%esp)
  1019e4:	89 04 24             	mov    %eax,(%esp)
  1019e7:	e8 38 af 00 00       	call   10c924 <_ZN5tools4listIN6kernel7processEE3endEv>
  1019ec:	83 ec 04             	sub    $0x4,%esp
  1019ef:	8d 45 f0             	lea    -0x10(%ebp),%eax
  1019f2:	89 44 24 04          	mov    %eax,0x4(%esp)
  1019f6:	8d 45 e0             	lea    -0x20(%ebp),%eax
  1019f9:	89 04 24             	mov    %eax,(%esp)
  1019fc:	e8 6f af 00 00       	call   10c970 <_ZN5tools4listIN6kernel7processEE8iteratorneERKS4_>
  101a01:	84 c0                	test   %al,%al
  101a03:	0f 95 c0             	setne  %al
  101a06:	84 c0                	test   %al,%al
  101a08:	75 91                	jne    10199b <_ZN6kernel10processmgr3getEPNS_7processE+0x3b>
		{
			return *it;
		}
	}

	return nullptr;
  101a0a:	b8 00 00 00 00       	mov    $0x0,%eax
}
  101a0f:	c9                   	leave  
  101a10:	c3                   	ret    
  101a11:	90                   	nop

00101a12 <_ZN6kernel4heapC1Ev>:

using kernel::heap;

heap kernel::hpmmgr;

heap::heap(  )
  101a12:	55                   	push   %ebp
  101a13:	89 e5                	mov    %esp,%ebp
  101a15:	83 ec 18             	sub    $0x18,%esp
  101a18:	8b 45 08             	mov    0x8(%ebp),%eax
  101a1b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
{
	this->first 	   = (heap::item*)vmmgr().alloc(vmm::present | vmm::write, 4);
  101a21:	e8 fa e5 ff ff       	call   100020 <_ZN6kernel5vmmgrEv>
  101a26:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
  101a2d:	00 
  101a2e:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
  101a35:	00 
  101a36:	89 04 24             	mov    %eax,(%esp)
  101a39:	e8 68 2c 00 00       	call   1046a6 <_ZN3hal3x863vmm5allocEjj>
  101a3e:	89 c2                	mov    %eax,%edx
  101a40:	8b 45 08             	mov    0x8(%ebp),%eax
  101a43:	89 10                	mov    %edx,(%eax)
	this->first->flags = heap::flag_free;
  101a45:	8b 45 08             	mov    0x8(%ebp),%eax
  101a48:	8b 00                	mov    (%eax),%eax
  101a4a:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
	this->first->size  = memory::page_size_byte * 4;
  101a50:	8b 45 08             	mov    0x8(%ebp),%eax
  101a53:	8b 00                	mov    (%eax),%eax
  101a55:	c7 40 04 00 40 00 00 	movl   $0x4000,0x4(%eax)
	this->first->next  = nullptr;
  101a5c:	8b 45 08             	mov    0x8(%ebp),%eax
  101a5f:	8b 00                	mov    (%eax),%eax
  101a61:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	this->first->prev  = nullptr;
  101a68:	8b 45 08             	mov    0x8(%ebp),%eax
  101a6b:	8b 00                	mov    (%eax),%eax
  101a6d:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
}
  101a74:	c9                   	leave  
  101a75:	c3                   	ret    

00101a76 <_ZN6kernel4heapD1Ev>:

heap::~heap(  )
  101a76:	55                   	push   %ebp
  101a77:	89 e5                	mov    %esp,%ebp
{
	this->first = nullptr;
  101a79:	8b 45 08             	mov    0x8(%ebp),%eax
  101a7c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
  101a82:	5d                   	pop    %ebp
  101a83:	c3                   	ret    

00101a84 <_ZN6kernel4heap5allocEj>:

void *heap::alloc( size_t size )
{
  101a84:	55                   	push   %ebp
  101a85:	89 e5                	mov    %esp,%ebp
  101a87:	83 ec 38             	sub    $0x38,%esp
	while(1)
	{
		if(size >= 4096)
  101a8a:	81 7d 0c ff 0f 00 00 	cmpl   $0xfff,0xc(%ebp)
  101a91:	76 12                	jbe    101aa5 <_ZN6kernel4heap5allocEj+0x21>
		{
			this->enlarge(size);
  101a93:	8b 45 0c             	mov    0xc(%ebp),%eax
  101a96:	89 44 24 04          	mov    %eax,0x4(%esp)
  101a9a:	8b 45 08             	mov    0x8(%ebp),%eax
  101a9d:	89 04 24             	mov    %eax,(%esp)
  101aa0:	e8 ff 02 00 00       	call   101da4 <_ZN6kernel4heap7enlargeEj>
		}

		if(!this->first)
  101aa5:	8b 45 08             	mov    0x8(%ebp),%eax
  101aa8:	8b 00                	mov    (%eax),%eax
  101aaa:	85 c0                	test   %eax,%eax
  101aac:	75 12                	jne    101ac0 <_ZN6kernel4heap5allocEj+0x3c>
		{
			this->enlarge(size);
  101aae:	8b 45 0c             	mov    0xc(%ebp),%eax
  101ab1:	89 44 24 04          	mov    %eax,0x4(%esp)
  101ab5:	8b 45 08             	mov    0x8(%ebp),%eax
  101ab8:	89 04 24             	mov    %eax,(%esp)
  101abb:	e8 e4 02 00 00       	call   101da4 <_ZN6kernel4heap7enlargeEj>
		}

		heap::item *itm = this->first;
  101ac0:	8b 45 08             	mov    0x8(%ebp),%eax
  101ac3:	8b 00                	mov    (%eax),%eax
  101ac5:	89 45 f4             	mov    %eax,-0xc(%ebp)

		while(itm)
  101ac8:	e9 d1 00 00 00       	jmp    101b9e <_ZN6kernel4heap5allocEj+0x11a>
		{
			if(itm->size >= (size + sizeof(heap::item)) && itm->flags & heap::flag_free)
  101acd:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101ad0:	8b 40 04             	mov    0x4(%eax),%eax
  101ad3:	8b 55 0c             	mov    0xc(%ebp),%edx
  101ad6:	83 c2 10             	add    $0x10,%edx
  101ad9:	39 d0                	cmp    %edx,%eax
  101adb:	0f 82 b4 00 00 00    	jb     101b95 <_ZN6kernel4heap5allocEj+0x111>
  101ae1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101ae4:	8b 00                	mov    (%eax),%eax
  101ae6:	83 e0 01             	and    $0x1,%eax
  101ae9:	85 c0                	test   %eax,%eax
  101aeb:	0f 84 a4 00 00 00    	je     101b95 <_ZN6kernel4heap5allocEj+0x111>
			{
				size_t ratio = itm->size / (size + sizeof(heap::item));
  101af1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101af4:	8b 40 04             	mov    0x4(%eax),%eax
  101af7:	8b 55 0c             	mov    0xc(%ebp),%edx
  101afa:	8d 4a 10             	lea    0x10(%edx),%ecx
  101afd:	ba 00 00 00 00       	mov    $0x0,%edx
  101b02:	f7 f1                	div    %ecx
  101b04:	89 45 f0             	mov    %eax,-0x10(%ebp)

				if(ratio >= 2)
  101b07:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
  101b0b:	76 65                	jbe    101b72 <_ZN6kernel4heap5allocEj+0xee>
				{
					this->remove(itm);
  101b0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101b10:	89 44 24 04          	mov    %eax,0x4(%esp)
  101b14:	8b 45 08             	mov    0x8(%ebp),%eax
  101b17:	89 04 24             	mov    %eax,(%esp)
  101b1a:	e8 8f 01 00 00       	call   101cae <_ZN6kernel4heap6removeEPNS0_4itemE>

					heap::item *part_1;
					heap::item *part_2;

					this->split(itm, &part_1, &part_2, ratio);
  101b1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101b22:	89 44 24 10          	mov    %eax,0x10(%esp)
  101b26:	8d 45 e8             	lea    -0x18(%ebp),%eax
  101b29:	89 44 24 0c          	mov    %eax,0xc(%esp)
  101b2d:	8d 45 ec             	lea    -0x14(%ebp),%eax
  101b30:	89 44 24 08          	mov    %eax,0x8(%esp)
  101b34:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101b37:	89 44 24 04          	mov    %eax,0x4(%esp)
  101b3b:	8b 45 08             	mov    0x8(%ebp),%eax
  101b3e:	89 04 24             	mov    %eax,(%esp)
  101b41:	e8 ce 01 00 00       	call   101d14 <_ZN6kernel4heap5splitEPNS0_4itemEPS2_S3_j>
	
					this->insert(part_2);
  101b46:	8b 45 e8             	mov    -0x18(%ebp),%eax
  101b49:	89 44 24 04          	mov    %eax,0x4(%esp)
  101b4d:	8b 45 08             	mov    0x8(%ebp),%eax
  101b50:	89 04 24             	mov    %eax,(%esp)
  101b53:	e8 18 01 00 00       	call   101c70 <_ZN6kernel4heap6insertEPNS0_4itemE>

					part_1->flags = heap::flag_used;
  101b58:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101b5b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
					part_2->flags = heap::flag_free;
  101b61:	8b 45 e8             	mov    -0x18(%ebp),%eax
  101b64:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

					return item_to_ptr(part_1);
  101b6a:	8b 45 ec             	mov    -0x14(%ebp),%eax
  101b6d:	83 c0 10             	add    $0x10,%eax
  101b70:	eb 4d                	jmp    101bbf <_ZN6kernel4heap5allocEj+0x13b>
				}
				else
				{
					this->remove(itm);
  101b72:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101b75:	89 44 24 04          	mov    %eax,0x4(%esp)
  101b79:	8b 45 08             	mov    0x8(%ebp),%eax
  101b7c:	89 04 24             	mov    %eax,(%esp)
  101b7f:	e8 2a 01 00 00       	call   101cae <_ZN6kernel4heap6removeEPNS0_4itemE>

					itm->flags = heap::flag_used;
  101b84:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101b87:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

					return item_to_ptr(itm);
  101b8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101b90:	83 c0 10             	add    $0x10,%eax
  101b93:	eb 2a                	jmp    101bbf <_ZN6kernel4heap5allocEj+0x13b>
				}
			}

			itm = itm->next;
  101b95:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101b98:	8b 40 08             	mov    0x8(%eax),%eax
  101b9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
			this->enlarge(size);
		}

		heap::item *itm = this->first;

		while(itm)
  101b9e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  101ba2:	0f 85 25 ff ff ff    	jne    101acd <_ZN6kernel4heap5allocEj+0x49>
			}

			itm = itm->next;
		}

		this->enlarge(size);
  101ba8:	8b 45 0c             	mov    0xc(%ebp),%eax
  101bab:	89 44 24 04          	mov    %eax,0x4(%esp)
  101baf:	8b 45 08             	mov    0x8(%ebp),%eax
  101bb2:	89 04 24             	mov    %eax,(%esp)
  101bb5:	e8 ea 01 00 00       	call   101da4 <_ZN6kernel4heap7enlargeEj>
	}
  101bba:	e9 cb fe ff ff       	jmp    101a8a <_ZN6kernel4heap5allocEj+0x6>
}
  101bbf:	c9                   	leave  
  101bc0:	c3                   	ret    
  101bc1:	90                   	nop

00101bc2 <_ZN6kernel4heap4freeEPv>:

void heap::free( void *ptr )
{
  101bc2:	55                   	push   %ebp
  101bc3:	89 e5                	mov    %esp,%ebp
  101bc5:	53                   	push   %ebx
  101bc6:	83 ec 24             	sub    $0x24,%esp
	if(ptr)
  101bc9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  101bcd:	0f 84 96 00 00 00    	je     101c69 <_ZN6kernel4heap4freeEPv+0xa7>
	{
		heap::item *itm = ptr_to_item(ptr);
  101bd3:	8b 45 0c             	mov    0xc(%ebp),%eax
  101bd6:	83 e8 10             	sub    $0x10,%eax
  101bd9:	89 45 f4             	mov    %eax,-0xc(%ebp)

		if(!(itm->flags & heap::flag_free))
  101bdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101bdf:	8b 00                	mov    (%eax),%eax
  101be1:	83 e0 01             	and    $0x1,%eax
  101be4:	85 c0                	test   %eax,%eax
  101be6:	75 1d                	jne    101c05 <_ZN6kernel4heap4freeEPv+0x43>
		{
			this->insert(itm);
  101be8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101beb:	89 44 24 04          	mov    %eax,0x4(%esp)
  101bef:	8b 45 08             	mov    0x8(%ebp),%eax
  101bf2:	89 04 24             	mov    %eax,(%esp)
  101bf5:	e8 76 00 00 00       	call   101c70 <_ZN6kernel4heap6insertEPNS0_4itemE>

			itm->flags = heap::flag_free;
  101bfa:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101bfd:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
  101c03:	eb 64                	jmp    101c69 <_ZN6kernel4heap4freeEPv+0xa7>
		}
		else
		{
			kout << "[heap] double free or corruption (" << output::hex << itm->flags << "): " << ptr << output::endl;
  101c05:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101c08:	8b 18                	mov    (%eax),%ebx
  101c0a:	c7 44 24 04 f0 e3 10 	movl   $0x10e3f0,0x4(%esp)
  101c11:	00 
  101c12:	c7 04 24 50 30 13 00 	movl   $0x133050,(%esp)
  101c19:	e8 a0 ee ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  101c1e:	c7 44 24 04 ef cb 10 	movl   $0x10cbef,0x4(%esp)
  101c25:	00 
  101c26:	89 04 24             	mov    %eax,(%esp)
  101c29:	e8 90 af 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  101c2e:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  101c32:	89 04 24             	mov    %eax,(%esp)
  101c35:	e8 50 ed ff ff       	call   10098a <_ZN6kernel6outputlsEj>
  101c3a:	c7 44 24 04 13 e4 10 	movl   $0x10e413,0x4(%esp)
  101c41:	00 
  101c42:	89 04 24             	mov    %eax,(%esp)
  101c45:	e8 74 ee ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  101c4a:	8b 55 0c             	mov    0xc(%ebp),%edx
  101c4d:	89 54 24 04          	mov    %edx,0x4(%esp)
  101c51:	89 04 24             	mov    %eax,(%esp)
  101c54:	e8 1d ee ff ff       	call   100a76 <_ZN6kernel6outputlsEPv>
  101c59:	c7 44 24 04 d1 cb 10 	movl   $0x10cbd1,0x4(%esp)
  101c60:	00 
  101c61:	89 04 24             	mov    %eax,(%esp)
  101c64:	e8 55 af 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
		}
	}
}
  101c69:	83 c4 24             	add    $0x24,%esp
  101c6c:	5b                   	pop    %ebx
  101c6d:	5d                   	pop    %ebp
  101c6e:	c3                   	ret    
  101c6f:	90                   	nop

00101c70 <_ZN6kernel4heap6insertEPNS0_4itemE>:

void heap::insert( heap::item *itm )
{
  101c70:	55                   	push   %ebp
  101c71:	89 e5                	mov    %esp,%ebp
	if(itm)
  101c73:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  101c77:	74 33                	je     101cac <_ZN6kernel4heap6insertEPNS0_4itemE+0x3c>
	{
		itm->next = this->first;
  101c79:	8b 45 08             	mov    0x8(%ebp),%eax
  101c7c:	8b 10                	mov    (%eax),%edx
  101c7e:	8b 45 0c             	mov    0xc(%ebp),%eax
  101c81:	89 50 08             	mov    %edx,0x8(%eax)
		itm->prev = nullptr;
  101c84:	8b 45 0c             	mov    0xc(%ebp),%eax
  101c87:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

		if(itm->next)
  101c8e:	8b 45 0c             	mov    0xc(%ebp),%eax
  101c91:	8b 40 08             	mov    0x8(%eax),%eax
  101c94:	85 c0                	test   %eax,%eax
  101c96:	74 0c                	je     101ca4 <_ZN6kernel4heap6insertEPNS0_4itemE+0x34>
		{
			itm->next->prev = itm;
  101c98:	8b 45 0c             	mov    0xc(%ebp),%eax
  101c9b:	8b 40 08             	mov    0x8(%eax),%eax
  101c9e:	8b 55 0c             	mov    0xc(%ebp),%edx
  101ca1:	89 50 0c             	mov    %edx,0xc(%eax)
		}

		this->first = itm;
  101ca4:	8b 45 08             	mov    0x8(%ebp),%eax
  101ca7:	8b 55 0c             	mov    0xc(%ebp),%edx
  101caa:	89 10                	mov    %edx,(%eax)
	}
}
  101cac:	5d                   	pop    %ebp
  101cad:	c3                   	ret    

00101cae <_ZN6kernel4heap6removeEPNS0_4itemE>:

void heap::remove( heap::item *itm )
{
  101cae:	55                   	push   %ebp
  101caf:	89 e5                	mov    %esp,%ebp
	if(itm)
  101cb1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  101cb5:	74 5b                	je     101d12 <_ZN6kernel4heap6removeEPNS0_4itemE+0x64>
	{
		if(itm->next)
  101cb7:	8b 45 0c             	mov    0xc(%ebp),%eax
  101cba:	8b 40 08             	mov    0x8(%eax),%eax
  101cbd:	85 c0                	test   %eax,%eax
  101cbf:	74 0f                	je     101cd0 <_ZN6kernel4heap6removeEPNS0_4itemE+0x22>
		{
			itm->next->prev = itm->prev;
  101cc1:	8b 45 0c             	mov    0xc(%ebp),%eax
  101cc4:	8b 40 08             	mov    0x8(%eax),%eax
  101cc7:	8b 55 0c             	mov    0xc(%ebp),%edx
  101cca:	8b 52 0c             	mov    0xc(%edx),%edx
  101ccd:	89 50 0c             	mov    %edx,0xc(%eax)
		}

		if(itm->prev)
  101cd0:	8b 45 0c             	mov    0xc(%ebp),%eax
  101cd3:	8b 40 0c             	mov    0xc(%eax),%eax
  101cd6:	85 c0                	test   %eax,%eax
  101cd8:	74 0f                	je     101ce9 <_ZN6kernel4heap6removeEPNS0_4itemE+0x3b>
		{
			itm->prev->next = itm->next;
  101cda:	8b 45 0c             	mov    0xc(%ebp),%eax
  101cdd:	8b 40 0c             	mov    0xc(%eax),%eax
  101ce0:	8b 55 0c             	mov    0xc(%ebp),%edx
  101ce3:	8b 52 08             	mov    0x8(%edx),%edx
  101ce6:	89 50 08             	mov    %edx,0x8(%eax)
		}

		if(itm == this->first)
  101ce9:	8b 45 08             	mov    0x8(%ebp),%eax
  101cec:	8b 00                	mov    (%eax),%eax
  101cee:	3b 45 0c             	cmp    0xc(%ebp),%eax
  101cf1:	75 0b                	jne    101cfe <_ZN6kernel4heap6removeEPNS0_4itemE+0x50>
		{
			this->first = itm->next;
  101cf3:	8b 45 0c             	mov    0xc(%ebp),%eax
  101cf6:	8b 50 08             	mov    0x8(%eax),%edx
  101cf9:	8b 45 08             	mov    0x8(%ebp),%eax
  101cfc:	89 10                	mov    %edx,(%eax)
		}

		itm->next = nullptr;
  101cfe:	8b 45 0c             	mov    0xc(%ebp),%eax
  101d01:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
		itm->prev = nullptr;
  101d08:	8b 45 0c             	mov    0xc(%ebp),%eax
  101d0b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
  101d12:	5d                   	pop    %ebp
  101d13:	c3                   	ret    

00101d14 <_ZN6kernel4heap5splitEPNS0_4itemEPS2_S3_j>:

void heap::split( heap::item *itm, heap::item **part_1, heap::item **part_2, size_t ratio )
{
  101d14:	55                   	push   %ebp
  101d15:	89 e5                	mov    %esp,%ebp
  101d17:	83 ec 18             	sub    $0x18,%esp
	this->remove(itm);
  101d1a:	8b 45 0c             	mov    0xc(%ebp),%eax
  101d1d:	89 44 24 04          	mov    %eax,0x4(%esp)
  101d21:	8b 45 08             	mov    0x8(%ebp),%eax
  101d24:	89 04 24             	mov    %eax,(%esp)
  101d27:	e8 82 ff ff ff       	call   101cae <_ZN6kernel4heap6removeEPNS0_4itemE>

	size_t size = itm->size / ratio;
  101d2c:	8b 45 0c             	mov    0xc(%ebp),%eax
  101d2f:	8b 40 04             	mov    0x4(%eax),%eax
  101d32:	ba 00 00 00 00       	mov    $0x0,%edx
  101d37:	f7 75 18             	divl   0x18(%ebp)
  101d3a:	89 45 fc             	mov    %eax,-0x4(%ebp)

	heap::item *p1 = itm;
  101d3d:	8b 45 0c             	mov    0xc(%ebp),%eax
  101d40:	89 45 f8             	mov    %eax,-0x8(%ebp)
	heap::item *p2 = (heap::item*)((uintptr_t)itm + size);
  101d43:	8b 55 0c             	mov    0xc(%ebp),%edx
  101d46:	8b 45 fc             	mov    -0x4(%ebp),%eax
  101d49:	01 d0                	add    %edx,%eax
  101d4b:	89 45 f4             	mov    %eax,-0xc(%ebp)

	p1->next = nullptr;
  101d4e:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101d51:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	p1->prev = nullptr;
  101d58:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101d5b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	p2->next = nullptr;
  101d62:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101d65:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	p2->prev = nullptr;
  101d6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101d6f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

	p1->size = size;
  101d76:	8b 45 f8             	mov    -0x8(%ebp),%eax
  101d79:	8b 55 fc             	mov    -0x4(%ebp),%edx
  101d7c:	89 50 04             	mov    %edx,0x4(%eax)
	p2->size = size * (ratio - 1);
  101d7f:	8b 45 18             	mov    0x18(%ebp),%eax
  101d82:	83 e8 01             	sub    $0x1,%eax
  101d85:	0f af 45 fc          	imul   -0x4(%ebp),%eax
  101d89:	89 c2                	mov    %eax,%edx
  101d8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101d8e:	89 50 04             	mov    %edx,0x4(%eax)

	*part_1 = p1;
  101d91:	8b 45 10             	mov    0x10(%ebp),%eax
  101d94:	8b 55 f8             	mov    -0x8(%ebp),%edx
  101d97:	89 10                	mov    %edx,(%eax)
	*part_2 = p2;
  101d99:	8b 45 14             	mov    0x14(%ebp),%eax
  101d9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
  101d9f:	89 10                	mov    %edx,(%eax)
}
  101da1:	c9                   	leave  
  101da2:	c3                   	ret    
  101da3:	90                   	nop

00101da4 <_ZN6kernel4heap7enlargeEj>:

void heap::enlarge( size_t size )
{
  101da4:	55                   	push   %ebp
  101da5:	89 e5                	mov    %esp,%ebp
  101da7:	53                   	push   %ebx
  101da8:	83 ec 24             	sub    $0x24,%esp
	heap::item *new_itm = (heap::item*)vmmgr().alloc(vmm::present | vmm::write, bytes_to_pages(size + sizeof(heap::item)));
  101dab:	8b 45 0c             	mov    0xc(%ebp),%eax
  101dae:	05 0f 10 00 00       	add    $0x100f,%eax
  101db3:	c1 e8 0c             	shr    $0xc,%eax
  101db6:	89 c3                	mov    %eax,%ebx
  101db8:	e8 63 e2 ff ff       	call   100020 <_ZN6kernel5vmmgrEv>
  101dbd:	89 5c 24 08          	mov    %ebx,0x8(%esp)
  101dc1:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
  101dc8:	00 
  101dc9:	89 04 24             	mov    %eax,(%esp)
  101dcc:	e8 d5 28 00 00       	call   1046a6 <_ZN3hal3x863vmm5allocEjj>
  101dd1:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(!new_itm)
  101dd4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  101dd8:	75 04                	jne    101dde <_ZN6kernel4heap7enlargeEj+0x3a>
	{
		/**
		  * FIXME This is an ugly hack
		  */
		asm("int $0x20");
  101dda:	cd 20                	int    $0x20

		return;
  101ddc:	eb 31                	jmp    101e0f <_ZN6kernel4heap7enlargeEj+0x6b>
	}

	new_itm->flags = heap::flag_free;
  101dde:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101de1:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
	new_itm->size  = bytes_to_pages(size + sizeof(heap::item)) * memory::page_size_byte;
  101de7:	8b 45 0c             	mov    0xc(%ebp),%eax
  101dea:	05 0f 10 00 00       	add    $0x100f,%eax
  101def:	c1 e8 0c             	shr    $0xc,%eax
  101df2:	c1 e0 0c             	shl    $0xc,%eax
  101df5:	89 c2                	mov    %eax,%edx
  101df7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101dfa:	89 50 04             	mov    %edx,0x4(%eax)

	this->insert(new_itm);
  101dfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101e00:	89 44 24 04          	mov    %eax,0x4(%esp)
  101e04:	8b 45 08             	mov    0x8(%ebp),%eax
  101e07:	89 04 24             	mov    %eax,(%esp)
  101e0a:	e8 61 fe ff ff       	call   101c70 <_ZN6kernel4heap6insertEPNS0_4itemE>
}
  101e0f:	83 c4 24             	add    $0x24,%esp
  101e12:	5b                   	pop    %ebx
  101e13:	5d                   	pop    %ebp
  101e14:	c3                   	ret    

00101e15 <_ZN6kernel6mallocEj>:

void *kernel::malloc( size_t size )
{
  101e15:	55                   	push   %ebp
  101e16:	89 e5                	mov    %esp,%ebp
  101e18:	83 ec 18             	sub    $0x18,%esp
	return hpmmgr.alloc(size);
  101e1b:	8b 45 08             	mov    0x8(%ebp),%eax
  101e1e:	89 44 24 04          	mov    %eax,0x4(%esp)
  101e22:	c7 04 24 a8 34 13 00 	movl   $0x1334a8,(%esp)
  101e29:	e8 56 fc ff ff       	call   101a84 <_ZN6kernel4heap5allocEj>
}
  101e2e:	c9                   	leave  
  101e2f:	c3                   	ret    

00101e30 <_ZN6kernel6callocEjj>:

void *kernel::calloc( size_t n, size_t size )
{
  101e30:	55                   	push   %ebp
  101e31:	89 e5                	mov    %esp,%ebp
  101e33:	83 ec 28             	sub    $0x28,%esp
	void *ptr = hpmmgr.alloc(n * size);
  101e36:	8b 45 08             	mov    0x8(%ebp),%eax
  101e39:	0f af 45 0c          	imul   0xc(%ebp),%eax
  101e3d:	89 44 24 04          	mov    %eax,0x4(%esp)
  101e41:	c7 04 24 a8 34 13 00 	movl   $0x1334a8,(%esp)
  101e48:	e8 37 fc ff ff       	call   101a84 <_ZN6kernel4heap5allocEj>
  101e4d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(ptr)
  101e50:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  101e54:	74 1e                	je     101e74 <_ZN6kernel6callocEjj+0x44>
	{
		memset(ptr, 0, n * size);
  101e56:	8b 45 08             	mov    0x8(%ebp),%eax
  101e59:	0f af 45 0c          	imul   0xc(%ebp),%eax
  101e5d:	89 44 24 08          	mov    %eax,0x8(%esp)
  101e61:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  101e68:	00 
  101e69:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101e6c:	89 04 24             	mov    %eax,(%esp)
  101e6f:	e8 4b 81 00 00       	call   109fbf <memset>
	}

	return ptr;
  101e74:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
  101e77:	c9                   	leave  
  101e78:	c3                   	ret    

00101e79 <_ZN6kernel7reallocEPvj>:

void *kernel::realloc( void *ptr, size_t size )
{
  101e79:	55                   	push   %ebp
  101e7a:	89 e5                	mov    %esp,%ebp
  101e7c:	83 ec 28             	sub    $0x28,%esp
	if(ptr)
  101e7f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  101e83:	0f 84 8f 00 00 00    	je     101f18 <_ZN6kernel7reallocEPvj+0x9f>
	{
		heap::item *itm = ptr_to_item(ptr);
  101e89:	8b 45 08             	mov    0x8(%ebp),%eax
  101e8c:	83 e8 10             	sub    $0x10,%eax
  101e8f:	89 45 f4             	mov    %eax,-0xc(%ebp)

		if(size != itm->size)
  101e92:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101e95:	8b 40 04             	mov    0x4(%eax),%eax
  101e98:	3b 45 0c             	cmp    0xc(%ebp),%eax
  101e9b:	74 76                	je     101f13 <_ZN6kernel7reallocEPvj+0x9a>
		{
			void *new_ptr = hpmmgr.alloc(size);
  101e9d:	8b 45 0c             	mov    0xc(%ebp),%eax
  101ea0:	89 44 24 04          	mov    %eax,0x4(%esp)
  101ea4:	c7 04 24 a8 34 13 00 	movl   $0x1334a8,(%esp)
  101eab:	e8 d4 fb ff ff       	call   101a84 <_ZN6kernel4heap5allocEj>
  101eb0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		
			if(new_ptr)
  101eb3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  101eb7:	74 42                	je     101efb <_ZN6kernel7reallocEPvj+0x82>
			{
				if(size > itm->size)
  101eb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101ebc:	8b 40 04             	mov    0x4(%eax),%eax
  101ebf:	3b 45 0c             	cmp    0xc(%ebp),%eax
  101ec2:	73 1e                	jae    101ee2 <_ZN6kernel7reallocEPvj+0x69>
				{
					memcpy(new_ptr, ptr, itm->size);
  101ec4:	8b 45 f4             	mov    -0xc(%ebp),%eax
  101ec7:	8b 40 04             	mov    0x4(%eax),%eax
  101eca:	89 44 24 08          	mov    %eax,0x8(%esp)
  101ece:	8b 45 08             	mov    0x8(%ebp),%eax
  101ed1:	89 44 24 04          	mov    %eax,0x4(%esp)
  101ed5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101ed8:	89 04 24             	mov    %eax,(%esp)
  101edb:	e8 f9 7b 00 00       	call   109ad9 <memcpy>
  101ee0:	eb 19                	jmp    101efb <_ZN6kernel7reallocEPvj+0x82>
				}
				else
				{
					memcpy(new_ptr, ptr, size);
  101ee2:	8b 45 0c             	mov    0xc(%ebp),%eax
  101ee5:	89 44 24 08          	mov    %eax,0x8(%esp)
  101ee9:	8b 45 08             	mov    0x8(%ebp),%eax
  101eec:	89 44 24 04          	mov    %eax,0x4(%esp)
  101ef0:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101ef3:	89 04 24             	mov    %eax,(%esp)
  101ef6:	e8 de 7b 00 00       	call   109ad9 <memcpy>
				}
			}	

			hpmmgr.free(ptr);
  101efb:	8b 45 08             	mov    0x8(%ebp),%eax
  101efe:	89 44 24 04          	mov    %eax,0x4(%esp)
  101f02:	c7 04 24 a8 34 13 00 	movl   $0x1334a8,(%esp)
  101f09:	e8 b4 fc ff ff       	call   101bc2 <_ZN6kernel4heap4freeEPv>
	
			return new_ptr;
  101f0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101f11:	eb 18                	jmp    101f2b <_ZN6kernel7reallocEPvj+0xb2>
		}

		return ptr;
  101f13:	8b 45 08             	mov    0x8(%ebp),%eax
  101f16:	eb 13                	jmp    101f2b <_ZN6kernel7reallocEPvj+0xb2>
	}
	else
	{
		return hpmmgr.alloc(size);
  101f18:	8b 45 0c             	mov    0xc(%ebp),%eax
  101f1b:	89 44 24 04          	mov    %eax,0x4(%esp)
  101f1f:	c7 04 24 a8 34 13 00 	movl   $0x1334a8,(%esp)
  101f26:	e8 59 fb ff ff       	call   101a84 <_ZN6kernel4heap5allocEj>
	}
}
  101f2b:	c9                   	leave  
  101f2c:	c3                   	ret    

00101f2d <_ZN6kernel4freeEPv>:

void kernel::free( void *ptr )
{
  101f2d:	55                   	push   %ebp
  101f2e:	89 e5                	mov    %esp,%ebp
  101f30:	83 ec 18             	sub    $0x18,%esp
	hpmmgr.free(ptr);
  101f33:	8b 45 08             	mov    0x8(%ebp),%eax
  101f36:	89 44 24 04          	mov    %eax,0x4(%esp)
  101f3a:	c7 04 24 a8 34 13 00 	movl   $0x1334a8,(%esp)
  101f41:	e8 7c fc ff ff       	call   101bc2 <_ZN6kernel4heap4freeEPv>
}
  101f46:	c9                   	leave  
  101f47:	c3                   	ret    

00101f48 <_Z41__static_initialization_and_destruction_0ii>:
  101f48:	55                   	push   %ebp
  101f49:	89 e5                	mov    %esp,%ebp
  101f4b:	83 ec 18             	sub    $0x18,%esp
  101f4e:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
  101f52:	75 15                	jne    101f69 <_Z41__static_initialization_and_destruction_0ii+0x21>
  101f54:	81 7d 0c ff ff 00 00 	cmpl   $0xffff,0xc(%ebp)
  101f5b:	75 0c                	jne    101f69 <_Z41__static_initialization_and_destruction_0ii+0x21>
#define item_to_ptr(itm)	((void*)      ((uintptr_t)itm + sizeof(heap::item)))	
#define ptr_to_item(ptr)	((heap::item*)((uintptr_t)ptr - sizeof(heap::item)))

using kernel::heap;

heap kernel::hpmmgr;
  101f5d:	c7 04 24 a8 34 13 00 	movl   $0x1334a8,(%esp)
  101f64:	e8 a9 fa ff ff       	call   101a12 <_ZN6kernel4heapC1Ev>
  101f69:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  101f6d:	75 15                	jne    101f84 <_Z41__static_initialization_and_destruction_0ii+0x3c>
  101f6f:	81 7d 0c ff ff 00 00 	cmpl   $0xffff,0xc(%ebp)
  101f76:	75 0c                	jne    101f84 <_Z41__static_initialization_and_destruction_0ii+0x3c>
  101f78:	c7 04 24 a8 34 13 00 	movl   $0x1334a8,(%esp)
  101f7f:	e8 f2 fa ff ff       	call   101a76 <_ZN6kernel4heapD1Ev>
}

void kernel::free( void *ptr )
{
	hpmmgr.free(ptr);
}
  101f84:	c9                   	leave  
  101f85:	c3                   	ret    

00101f86 <_GLOBAL__sub_I__ZN6kernel6hpmmgrE>:
  101f86:	55                   	push   %ebp
  101f87:	89 e5                	mov    %esp,%ebp
  101f89:	83 ec 18             	sub    $0x18,%esp
  101f8c:	c7 44 24 04 ff ff 00 	movl   $0xffff,0x4(%esp)
  101f93:	00 
  101f94:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  101f9b:	e8 a8 ff ff ff       	call   101f48 <_Z41__static_initialization_and_destruction_0ii>
  101fa0:	c9                   	leave  
  101fa1:	c3                   	ret    

00101fa2 <_GLOBAL__sub_D__ZN6kernel6hpmmgrE>:
  101fa2:	55                   	push   %ebp
  101fa3:	89 e5                	mov    %esp,%ebp
  101fa5:	83 ec 18             	sub    $0x18,%esp
  101fa8:	c7 44 24 04 ff ff 00 	movl   $0xffff,0x4(%esp)
  101faf:	00 
  101fb0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  101fb7:	e8 8c ff ff ff       	call   101f48 <_Z41__static_initialization_and_destruction_0ii>
  101fbc:	c9                   	leave  
  101fbd:	c3                   	ret    

00101fbe <_ZN6kernel3tarC1Ej>:
#include <number.hpp>
#include <cstring>

using kernel::tar;

tar::tar( uintptr_t addr ) : objects(0), size(0)
  101fbe:	55                   	push   %ebp
  101fbf:	89 e5                	mov    %esp,%ebp
  101fc1:	83 ec 28             	sub    $0x28,%esp
  101fc4:	8b 45 08             	mov    0x8(%ebp),%eax
  101fc7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  101fcd:	8b 45 08             	mov    0x8(%ebp),%eax
  101fd0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
{
	if(addr)
  101fd7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  101fdb:	0f 84 b8 00 00 00    	je     102099 <_ZN6kernel3tarC1Ej+0xdb>
	{
		for(size_t index = 0; ; index++)
  101fe1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		{
			tar::header_t *header = (tar::header_t*)addr;
  101fe8:	8b 45 0c             	mov    0xc(%ebp),%eax
  101feb:	89 45 f0             	mov    %eax,-0x10(%ebp)

			if(header->name[0] == '\0')
  101fee:	8b 45 f0             	mov    -0x10(%ebp),%eax
  101ff1:	0f b6 00             	movzbl (%eax),%eax
  101ff4:	84 c0                	test   %al,%al
  101ff6:	75 06                	jne    101ffe <_ZN6kernel3tarC1Ej+0x40>
			{
				break;
  101ff8:	90                   	nop
  101ff9:	e9 9b 00 00 00       	jmp    102099 <_ZN6kernel3tarC1Ej+0xdb>
			}

			size_t size = tools::stoi(header->size, 8);
  101ffe:	8b 45 f0             	mov    -0x10(%ebp),%eax
  102001:	83 c0 7c             	add    $0x7c,%eax
  102004:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
  10200b:	00 
  10200c:	89 04 24             	mov    %eax,(%esp)
  10200f:	e8 6d 12 00 00       	call   103281 <_ZN5tools4stoiEPKcj>
  102014:	89 45 ec             	mov    %eax,-0x14(%ebp)

			this->objects	+= 1;
  102017:	8b 45 08             	mov    0x8(%ebp),%eax
  10201a:	8b 00                	mov    (%eax),%eax
  10201c:	8d 50 01             	lea    0x1(%eax),%edx
  10201f:	8b 45 08             	mov    0x8(%ebp),%eax
  102022:	89 10                	mov    %edx,(%eax)
			this->size 	+= size;
  102024:	8b 45 08             	mov    0x8(%ebp),%eax
  102027:	8b 50 04             	mov    0x4(%eax),%edx
  10202a:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10202d:	01 c2                	add    %eax,%edx
  10202f:	8b 45 08             	mov    0x8(%ebp),%eax
  102032:	89 50 04             	mov    %edx,0x4(%eax)

			this->headers    	= (tar::header_t**)kernel::realloc(this->headers, this->objects * this->size);
  102035:	8b 45 08             	mov    0x8(%ebp),%eax
  102038:	8b 10                	mov    (%eax),%edx
  10203a:	8b 45 08             	mov    0x8(%ebp),%eax
  10203d:	8b 40 04             	mov    0x4(%eax),%eax
  102040:	0f af d0             	imul   %eax,%edx
  102043:	8b 45 08             	mov    0x8(%ebp),%eax
  102046:	8b 40 08             	mov    0x8(%eax),%eax
  102049:	89 54 24 04          	mov    %edx,0x4(%esp)
  10204d:	89 04 24             	mov    %eax,(%esp)
  102050:	e8 24 fe ff ff       	call   101e79 <_ZN6kernel7reallocEPvj>
  102055:	8b 55 08             	mov    0x8(%ebp),%edx
  102058:	89 42 08             	mov    %eax,0x8(%edx)
			this->headers[index] 	= header;
  10205b:	8b 45 08             	mov    0x8(%ebp),%eax
  10205e:	8b 40 08             	mov    0x8(%eax),%eax
  102061:	8b 55 f4             	mov    -0xc(%ebp),%edx
  102064:	c1 e2 02             	shl    $0x2,%edx
  102067:	01 c2                	add    %eax,%edx
  102069:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10206c:	89 02                	mov    %eax,(%edx)

			addr += ((size / 512) + 1) * 512;
  10206e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102071:	c1 e8 09             	shr    $0x9,%eax
  102074:	83 c0 01             	add    $0x1,%eax
  102077:	c1 e0 09             	shl    $0x9,%eax
  10207a:	01 45 0c             	add    %eax,0xc(%ebp)

			if(size % 512)
  10207d:	8b 45 ec             	mov    -0x14(%ebp),%eax
  102080:	25 ff 01 00 00       	and    $0x1ff,%eax
  102085:	85 c0                	test   %eax,%eax
  102087:	74 07                	je     102090 <_ZN6kernel3tarC1Ej+0xd2>
			{
            			addr += 512;
  102089:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)

tar::tar( uintptr_t addr ) : objects(0), size(0)
{
	if(addr)
	{
		for(size_t index = 0; ; index++)
  102090:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)

			if(size % 512)
			{
            			addr += 512;
			}
		} 
  102094:	e9 4f ff ff ff       	jmp    101fe8 <_ZN6kernel3tarC1Ej+0x2a>
	}
}
  102099:	c9                   	leave  
  10209a:	c3                   	ret    
  10209b:	90                   	nop

0010209c <_ZN6kernel3tar4readEPKcPcj>:

size_t tar::read( const char *name, char *buffer, size_t size )
{
  10209c:	55                   	push   %ebp
  10209d:	89 e5                	mov    %esp,%ebp
  10209f:	83 ec 28             	sub    $0x28,%esp
	if(!buffer)
  1020a2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  1020a6:	75 0a                	jne    1020b2 <_ZN6kernel3tar4readEPKcPcj+0x16>
	{
		return 0;
  1020a8:	b8 00 00 00 00       	mov    $0x0,%eax
  1020ad:	e9 c3 00 00 00       	jmp    102175 <_ZN6kernel3tar4readEPKcPcj+0xd9>
	}

	tar::header_t *header = nullptr;
  1020b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(size_t index = 0; index < this->objects; index++)
  1020b9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  1020c0:	eb 41                	jmp    102103 <_ZN6kernel3tar4readEPKcPcj+0x67>
	{
		if(!strcmp(this->headers[index]->name, name))
  1020c2:	8b 45 08             	mov    0x8(%ebp),%eax
  1020c5:	8b 40 08             	mov    0x8(%eax),%eax
  1020c8:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1020cb:	c1 e2 02             	shl    $0x2,%edx
  1020ce:	01 d0                	add    %edx,%eax
  1020d0:	8b 00                	mov    (%eax),%eax
  1020d2:	8b 55 0c             	mov    0xc(%ebp),%edx
  1020d5:	89 54 24 04          	mov    %edx,0x4(%esp)
  1020d9:	89 04 24             	mov    %eax,(%esp)
  1020dc:	e8 c9 7b 00 00       	call   109caa <strcmp>
  1020e1:	85 c0                	test   %eax,%eax
  1020e3:	0f 94 c0             	sete   %al
  1020e6:	84 c0                	test   %al,%al
  1020e8:	74 15                	je     1020ff <_ZN6kernel3tar4readEPKcPcj+0x63>
		{
			header = this->headers[index];
  1020ea:	8b 45 08             	mov    0x8(%ebp),%eax
  1020ed:	8b 40 08             	mov    0x8(%eax),%eax
  1020f0:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1020f3:	c1 e2 02             	shl    $0x2,%edx
  1020f6:	01 d0                	add    %edx,%eax
  1020f8:	8b 00                	mov    (%eax),%eax
  1020fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
			
			break;
  1020fd:	eb 0e                	jmp    10210d <_ZN6kernel3tar4readEPKcPcj+0x71>
		return 0;
	}

	tar::header_t *header = nullptr;

	for(size_t index = 0; index < this->objects; index++)
  1020ff:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  102103:	8b 45 08             	mov    0x8(%ebp),%eax
  102106:	8b 00                	mov    (%eax),%eax
  102108:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  10210b:	77 b5                	ja     1020c2 <_ZN6kernel3tar4readEPKcPcj+0x26>
			
			break;
		}
	}

	if(header)
  10210d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  102111:	74 5d                	je     102170 <_ZN6kernel3tar4readEPKcPcj+0xd4>
	{
		if((size_t)tools::stoi(header->size, 8) < size)
  102113:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102116:	83 c0 7c             	add    $0x7c,%eax
  102119:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
  102120:	00 
  102121:	89 04 24             	mov    %eax,(%esp)
  102124:	e8 58 11 00 00       	call   103281 <_ZN5tools4stoiEPKcj>
  102129:	3b 45 14             	cmp    0x14(%ebp),%eax
  10212c:	0f 92 c0             	setb   %al
  10212f:	84 c0                	test   %al,%al
  102131:	74 19                	je     10214c <_ZN6kernel3tar4readEPKcPcj+0xb0>
		{
			size = tools::stoi(header->size, 8);
  102133:	8b 45 f4             	mov    -0xc(%ebp),%eax
  102136:	83 c0 7c             	add    $0x7c,%eax
  102139:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
  102140:	00 
  102141:	89 04 24             	mov    %eax,(%esp)
  102144:	e8 38 11 00 00       	call   103281 <_ZN5tools4stoiEPKcj>
  102149:	89 45 14             	mov    %eax,0x14(%ebp)
		}

		memcpy(buffer, (char*)(header + 1), size);
  10214c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10214f:	8d 90 00 02 00 00    	lea    0x200(%eax),%edx
  102155:	8b 45 14             	mov    0x14(%ebp),%eax
  102158:	89 44 24 08          	mov    %eax,0x8(%esp)
  10215c:	89 54 24 04          	mov    %edx,0x4(%esp)
  102160:	8b 45 10             	mov    0x10(%ebp),%eax
  102163:	89 04 24             	mov    %eax,(%esp)
  102166:	e8 6e 79 00 00       	call   109ad9 <memcpy>

		return size;
  10216b:	8b 45 14             	mov    0x14(%ebp),%eax
  10216e:	eb 05                	jmp    102175 <_ZN6kernel3tar4readEPKcPcj+0xd9>
	}

	return 0;
  102170:	b8 00 00 00 00       	mov    $0x0,%eax
}
  102175:	c9                   	leave  
  102176:	c3                   	ret    
  102177:	90                   	nop

00102178 <__tcf_0>:
  102178:	55                   	push   %ebp
  102179:	89 e5                	mov    %esp,%ebp
  10217b:	83 ec 18             	sub    $0x18,%esp
  10217e:	c7 04 24 40 61 15 00 	movl   $0x156140,(%esp)
  102185:	e8 c0 6e 00 00       	call   10904a <_ZN3hal3x863gdtD1Ev>
  10218a:	c9                   	leave  
  10218b:	c3                   	ret    

0010218c <__tcf_1>:
		  *		It also contains the Interrupt Descriptor Table itself.
		  *		This class is implemented as a singleton, so only one instance of this class can be used (it is not possible to set up more than one IDT).
		  */
		class idt
		{
			SINGLETON(idt)
  10218c:	55                   	push   %ebp
  10218d:	89 e5                	mov    %esp,%ebp
  10218f:	83 ec 18             	sub    $0x18,%esp
  102192:	c7 04 24 40 62 15 00 	movl   $0x156240,(%esp)
  102199:	e8 16 3b 00 00       	call   105cb4 <_ZN3hal3x863idtD1Ev>
  10219e:	c9                   	leave  
  10219f:	c3                   	ret    

001021a0 <_Znwj>:
  *
  * @param	size		Number of bytes to be allocated
  * @return			Pointer to allocated memory or null pointer if allocation failed
  */
void *operator new( size_t size )
{
  1021a0:	55                   	push   %ebp
  1021a1:	89 e5                	mov    %esp,%ebp
  1021a3:	83 ec 18             	sub    $0x18,%esp
	return kernel::calloc(1, size);
  1021a6:	8b 45 08             	mov    0x8(%ebp),%eax
  1021a9:	89 44 24 04          	mov    %eax,0x4(%esp)
  1021ad:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  1021b4:	e8 77 fc ff ff       	call   101e30 <_ZN6kernel6callocEjj>
}
  1021b9:	c9                   	leave  
  1021ba:	c3                   	ret    

001021bb <_Znaj>:
  *
  * @param	size		Number of bytes to be allocated
  * @return			Pointer to allocated memory or null pointer if allocation failed
  */
void *operator new[]( size_t  size )
{
  1021bb:	55                   	push   %ebp
  1021bc:	89 e5                	mov    %esp,%ebp
  1021be:	83 ec 18             	sub    $0x18,%esp
	return kernel::calloc(1, size);
  1021c1:	8b 45 08             	mov    0x8(%ebp),%eax
  1021c4:	89 44 24 04          	mov    %eax,0x4(%esp)
  1021c8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  1021cf:	e8 5c fc ff ff       	call   101e30 <_ZN6kernel6callocEjj>
}
  1021d4:	c9                   	leave  
  1021d5:	c3                   	ret    

001021d6 <_ZdlPv>:
  * @brief	Default deallocation function; std-c++
  *
  * @param	ptr		Pointer to the memory block to be deallocated
  */
void operator delete( void *ptr )
{
  1021d6:	55                   	push   %ebp
  1021d7:	89 e5                	mov    %esp,%ebp
  1021d9:	83 ec 18             	sub    $0x18,%esp
	kernel::free(ptr);
  1021dc:	8b 45 08             	mov    0x8(%ebp),%eax
  1021df:	89 04 24             	mov    %eax,(%esp)
  1021e2:	e8 46 fd ff ff       	call   101f2d <_ZN6kernel4freeEPv>
}
  1021e7:	c9                   	leave  
  1021e8:	c3                   	ret    

001021e9 <_ZdaPv>:
  * @brief	Default deallocation function (used for arrays); std-c++
  *
  * @param	ptr		Pointer to the memory block to be deallocated
  */
void operator delete[]( void *ptr )
{
  1021e9:	55                   	push   %ebp
  1021ea:	89 e5                	mov    %esp,%ebp
  1021ec:	83 ec 18             	sub    $0x18,%esp
	kernel::free(ptr);
  1021ef:	8b 45 08             	mov    0x8(%ebp),%eax
  1021f2:	89 04 24             	mov    %eax,(%esp)
  1021f5:	e8 33 fd ff ff       	call   101f2d <_ZN6kernel4freeEPv>
}
  1021fa:	c9                   	leave  
  1021fb:	c3                   	ret    

001021fc <__tcf_2>:
  1021fc:	55                   	push   %ebp
  1021fd:	89 e5                	mov    %esp,%ebp
  1021ff:	83 ec 18             	sub    $0x18,%esp
  102202:	c7 04 24 e0 60 13 00 	movl   $0x1360e0,(%esp)
  102209:	e8 46 a3 00 00       	call   10c554 <_ZN6kernel10processmgrD1Ev>
  10220e:	c9                   	leave  
  10220f:	c3                   	ret    

00102210 <__tcf_3>:
  102210:	55                   	push   %ebp
  102211:	89 e5                	mov    %esp,%ebp
  102213:	83 ec 18             	sub    $0x18,%esp
  102216:	c7 04 24 04 61 13 00 	movl   $0x136104,(%esp)
  10221d:	e8 7e a3 00 00       	call   10c5a0 <_ZN6kernel9threadmgrD1Ev>
  102222:	c9                   	leave  
  102223:	c3                   	ret    

00102224 <__tcf_4>:
  102224:	55                   	push   %ebp
  102225:	89 e5                	mov    %esp,%ebp
  102227:	83 ec 18             	sub    $0x18,%esp
  10222a:	c7 04 24 60 60 13 00 	movl   $0x136060,(%esp)
  102231:	e8 f4 9c 00 00       	call   10bf2a <_ZN6kernel9schedulerD1Ev>
  102236:	c9                   	leave  
  102237:	c3                   	ret    

00102238 <thread_entry>:
extern "C"
{
	static char chr  = 'A';
	
	void thread_entry(  )
	{
  102238:	55                   	push   %ebp
  102239:	89 e5                	mov    %esp,%ebp
  10223b:	83 ec 28             	sub    $0x28,%esp
		char my_chr = chr++;
  10223e:	0f b6 05 0c d0 10 00 	movzbl 0x10d00c,%eax
  102245:	8d 50 01             	lea    0x1(%eax),%edx
  102248:	88 15 0c d0 10 00    	mov    %dl,0x10d00c
  10224e:	88 45 f7             	mov    %al,-0x9(%ebp)

		while(1)
		{	
			kout << my_chr;
  102251:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
  102255:	89 44 24 04          	mov    %eax,0x4(%esp)
  102259:	c7 04 24 50 30 13 00 	movl   $0x133050,(%esp)
  102260:	e8 7f e6 ff ff       	call   1008e4 <_ZN6kernel6outputlsEc>

			asm("int $0xFF" : : "a"(syscall::exit_thread));
  102265:	b8 11 00 00 00       	mov    $0x11,%eax
  10226a:	cd ff                	int    $0xff
		}
  10226c:	eb e3                	jmp    102251 <thread_entry+0x19>

0010226e <_ZZ4initENKUlPN3hal3x863cpu9cpu_stateEE_clES3_>:
	thrdmgr.add(thrd14);

	/*
	Initialise the syscall interface
	*/
	intr::handler(0xFF, []( cpu::cpu_state *cpu ) { return syscall::handle(cpu); });
  10226e:	55                   	push   %ebp
  10226f:	89 e5                	mov    %esp,%ebp
  102271:	83 ec 18             	sub    $0x18,%esp
  102274:	8b 45 0c             	mov    0xc(%ebp),%eax
  102277:	89 04 24             	mov    %eax,(%esp)
  10227a:	e8 e6 e8 ff ff       	call   100b65 <_ZN6kernel7syscall6handleEPN3hal3x863cpu9cpu_stateE>
  10227f:	c9                   	leave  
  102280:	c3                   	ret    
  102281:	90                   	nop

00102282 <_ZZ4initENUlPN3hal3x863cpu9cpu_stateEE_4_FUNES3_>:
  102282:	55                   	push   %ebp
  102283:	89 e5                	mov    %esp,%ebp
  102285:	83 ec 18             	sub    $0x18,%esp
  102288:	8b 45 08             	mov    0x8(%ebp),%eax
  10228b:	89 44 24 04          	mov    %eax,0x4(%esp)
  10228f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  102296:	e8 d3 ff ff ff       	call   10226e <_ZZ4initENKUlPN3hal3x863cpu9cpu_stateEE_clES3_>
  10229b:	c9                   	leave  
  10229c:	c3                   	ret    
  10229d:	90                   	nop

0010229e <_ZZ4initENKUlPN3hal3x863cpu9cpu_stateEE_cvPFS3_S3_EEv>:
  10229e:	55                   	push   %ebp
  10229f:	89 e5                	mov    %esp,%ebp
  1022a1:	b8 82 22 10 00       	mov    $0x102282,%eax
  1022a6:	5d                   	pop    %ebp
  1022a7:	c3                   	ret    

001022a8 <_ZZ4initENKUlPN3hal3x863cpu9cpu_stateEE0_clES3_>:
	intr::handler(0xEE, []( cpu::cpu_state *cpu ) { kernel::scheduler &sched = kernel::scheduler::instance(); return sched.schedule(cpu); });
  1022a8:	55                   	push   %ebp
  1022a9:	89 e5                	mov    %esp,%ebp
  1022ab:	83 ec 28             	sub    $0x28,%esp
  1022ae:	e8 8a 9c 00 00       	call   10bf3d <_ZN6kernel9scheduler8instanceEv>
  1022b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1022b6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1022b9:	89 44 24 04          	mov    %eax,0x4(%esp)
  1022bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1022c0:	89 04 24             	mov    %eax,(%esp)
  1022c3:	e8 48 f0 ff ff       	call   101310 <_ZN6kernel9scheduler8scheduleEPN3hal3x863cpu9cpu_stateE>
  1022c8:	c9                   	leave  
  1022c9:	c3                   	ret    

001022ca <_ZZ4initENUlPN3hal3x863cpu9cpu_stateEE0_4_FUNES3_>:
  1022ca:	55                   	push   %ebp
  1022cb:	89 e5                	mov    %esp,%ebp
  1022cd:	83 ec 18             	sub    $0x18,%esp
  1022d0:	8b 45 08             	mov    0x8(%ebp),%eax
  1022d3:	89 44 24 04          	mov    %eax,0x4(%esp)
  1022d7:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1022de:	e8 c5 ff ff ff       	call   1022a8 <_ZZ4initENKUlPN3hal3x863cpu9cpu_stateEE0_clES3_>
  1022e3:	c9                   	leave  
  1022e4:	c3                   	ret    
  1022e5:	90                   	nop

001022e6 <_ZZ4initENKUlPN3hal3x863cpu9cpu_stateEE0_cvPFS3_S3_EEv>:
  1022e6:	55                   	push   %ebp
  1022e7:	89 e5                	mov    %esp,%ebp
  1022e9:	b8 ca 22 10 00       	mov    $0x1022ca,%eax
  1022ee:	5d                   	pop    %ebp
  1022ef:	c3                   	ret    

001022f0 <init>:
		}
	}
}

void init( multiboot::info *mbs, uint32_t mb_magic )
{
  1022f0:	55                   	push   %ebp
  1022f1:	89 e5                	mov    %esp,%ebp
  1022f3:	57                   	push   %edi
  1022f4:	56                   	push   %esi
  1022f5:	53                   	push   %ebx
  1022f6:	81 ec bc 02 00 00    	sub    $0x2bc,%esp
	kout << "QUARTUS " << arch_string << output::endl;
  1022fc:	8b 1d a4 d1 10 00    	mov    0x10d1a4,%ebx
  102302:	c7 44 24 04 00 e5 10 	movl   $0x10e500,0x4(%esp)
  102309:	00 
  10230a:	c7 04 24 50 30 13 00 	movl   $0x133050,(%esp)
  102311:	e8 a8 e7 ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  102316:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  10231a:	89 04 24             	mov    %eax,(%esp)
  10231d:	e8 9c e7 ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  102322:	c7 44 24 04 d1 cb 10 	movl   $0x10cbd1,0x4(%esp)
  102329:	00 
  10232a:	89 04 24             	mov    %eax,(%esp)
  10232d:	e8 8c a8 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>

	#ifdef ARCH_USE_MULTIBOOT
	if(mb_magic != multiboot::magic)
  102332:	81 7d 0c 02 b0 ad 2b 	cmpl   $0x2badb002,0xc(%ebp)
  102339:	74 29                	je     102364 <init+0x74>
	{
		kout << "Error: no multiboot bootloader!" << output::endl;
  10233b:	c7 44 24 04 0c e5 10 	movl   $0x10e50c,0x4(%esp)
  102342:	00 
  102343:	c7 04 24 50 30 13 00 	movl   $0x133050,(%esp)
  10234a:	e8 6f e7 ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  10234f:	c7 44 24 04 d1 cb 10 	movl   $0x10cbd1,0x4(%esp)
  102356:	00 
  102357:	89 04 24             	mov    %eax,(%esp)
  10235a:	e8 5f a8 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
		cpu::halt();
  10235f:	e8 bc a1 00 00       	call   10c520 <_ZN3hal3x863cpu4haltEv>
	}

	switch(multiboot::error err = multiboot::check_mbs(mbs))
  102364:	8b 45 08             	mov    0x8(%ebp),%eax
  102367:	89 04 24             	mov    %eax,(%esp)
  10236a:	e8 19 16 00 00       	call   103988 <_ZN9multiboot9check_mbsEPNS_4infoE>
  10236f:	89 45 dc             	mov    %eax,-0x24(%ebp)
  102372:	8b 45 dc             	mov    -0x24(%ebp),%eax
  102375:	83 f8 02             	cmp    $0x2,%eax
  102378:	74 7f                	je     1023f9 <init+0x109>
  10237a:	83 f8 03             	cmp    $0x3,%eax
  10237d:	0f 84 e3 00 00 00    	je     102466 <init+0x176>
  102383:	83 f8 01             	cmp    $0x1,%eax
  102386:	0f 85 44 01 00 00    	jne    1024d0 <init+0x1e0>
	{
		case multiboot::error::no_mbs:
			kout << output::endl << "No multibootstructure! (" << output::hex << err << ")" << output::endl;
  10238c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
  10238f:	c7 44 24 04 d1 cb 10 	movl   $0x10cbd1,0x4(%esp)
  102396:	00 
  102397:	c7 04 24 50 30 13 00 	movl   $0x133050,(%esp)
  10239e:	e8 1b a8 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  1023a3:	c7 44 24 04 2c e5 10 	movl   $0x10e52c,0x4(%esp)
  1023aa:	00 
  1023ab:	89 04 24             	mov    %eax,(%esp)
  1023ae:	e8 0b e7 ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  1023b3:	c7 44 24 04 ef cb 10 	movl   $0x10cbef,0x4(%esp)
  1023ba:	00 
  1023bb:	89 04 24             	mov    %eax,(%esp)
  1023be:	e8 fb a7 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  1023c3:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  1023c7:	89 04 24             	mov    %eax,(%esp)
  1023ca:	e8 a1 e5 ff ff       	call   100970 <_ZN6kernel6outputlsEi>
  1023cf:	c7 44 24 04 45 e5 10 	movl   $0x10e545,0x4(%esp)
  1023d6:	00 
  1023d7:	89 04 24             	mov    %eax,(%esp)
  1023da:	e8 df e6 ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  1023df:	c7 44 24 04 d1 cb 10 	movl   $0x10cbd1,0x4(%esp)
  1023e6:	00 
  1023e7:	89 04 24             	mov    %eax,(%esp)
  1023ea:	e8 cf a7 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
			cpu::halt();
  1023ef:	e8 2c a1 00 00       	call   10c520 <_ZN3hal3x863cpu4haltEv>
		break;
  1023f4:	e9 3b 01 00 00       	jmp    102534 <init+0x244>

		case multiboot::error::no_mbs_mods_addr:
			kout << output::endl << "No module structure! (" << output::hex << err << ")" << output::endl;
  1023f9:	8b 5d dc             	mov    -0x24(%ebp),%ebx
  1023fc:	c7 44 24 04 d1 cb 10 	movl   $0x10cbd1,0x4(%esp)
  102403:	00 
  102404:	c7 04 24 50 30 13 00 	movl   $0x133050,(%esp)
  10240b:	e8 ae a7 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  102410:	c7 44 24 04 47 e5 10 	movl   $0x10e547,0x4(%esp)
  102417:	00 
  102418:	89 04 24             	mov    %eax,(%esp)
  10241b:	e8 9e e6 ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  102420:	c7 44 24 04 ef cb 10 	movl   $0x10cbef,0x4(%esp)
  102427:	00 
  102428:	89 04 24             	mov    %eax,(%esp)
  10242b:	e8 8e a7 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  102430:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  102434:	89 04 24             	mov    %eax,(%esp)
  102437:	e8 34 e5 ff ff       	call   100970 <_ZN6kernel6outputlsEi>
  10243c:	c7 44 24 04 45 e5 10 	movl   $0x10e545,0x4(%esp)
  102443:	00 
  102444:	89 04 24             	mov    %eax,(%esp)
  102447:	e8 72 e6 ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  10244c:	c7 44 24 04 d1 cb 10 	movl   $0x10cbd1,0x4(%esp)
  102453:	00 
  102454:	89 04 24             	mov    %eax,(%esp)
  102457:	e8 62 a7 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
			cpu::halt();
  10245c:	e8 bf a0 00 00       	call   10c520 <_ZN3hal3x863cpu4haltEv>
		break;
  102461:	e9 ce 00 00 00       	jmp    102534 <init+0x244>
		
		case multiboot::error::no_mbs_mmap_addr:
			kout << output::endl << "No memory map! (" << output::hex << err << ")" << output::endl;
  102466:	8b 5d dc             	mov    -0x24(%ebp),%ebx
  102469:	c7 44 24 04 d1 cb 10 	movl   $0x10cbd1,0x4(%esp)
  102470:	00 
  102471:	c7 04 24 50 30 13 00 	movl   $0x133050,(%esp)
  102478:	e8 41 a7 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  10247d:	c7 44 24 04 5e e5 10 	movl   $0x10e55e,0x4(%esp)
  102484:	00 
  102485:	89 04 24             	mov    %eax,(%esp)
  102488:	e8 31 e6 ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  10248d:	c7 44 24 04 ef cb 10 	movl   $0x10cbef,0x4(%esp)
  102494:	00 
  102495:	89 04 24             	mov    %eax,(%esp)
  102498:	e8 21 a7 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  10249d:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  1024a1:	89 04 24             	mov    %eax,(%esp)
  1024a4:	e8 c7 e4 ff ff       	call   100970 <_ZN6kernel6outputlsEi>
  1024a9:	c7 44 24 04 45 e5 10 	movl   $0x10e545,0x4(%esp)
  1024b0:	00 
  1024b1:	89 04 24             	mov    %eax,(%esp)
  1024b4:	e8 05 e6 ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  1024b9:	c7 44 24 04 d1 cb 10 	movl   $0x10cbd1,0x4(%esp)
  1024c0:	00 
  1024c1:	89 04 24             	mov    %eax,(%esp)
  1024c4:	e8 f5 a6 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
			cpu::halt();
  1024c9:	e8 52 a0 00 00       	call   10c520 <_ZN3hal3x863cpu4haltEv>
		break;
  1024ce:	eb 64                	jmp    102534 <init+0x244>
		
		default:
			kout << output::endl << "check_mbs OK! (" << output::hex << err << ")" << output::endl;
  1024d0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
  1024d3:	c7 44 24 04 d1 cb 10 	movl   $0x10cbd1,0x4(%esp)
  1024da:	00 
  1024db:	c7 04 24 50 30 13 00 	movl   $0x133050,(%esp)
  1024e2:	e8 d7 a6 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  1024e7:	c7 44 24 04 6f e5 10 	movl   $0x10e56f,0x4(%esp)
  1024ee:	00 
  1024ef:	89 04 24             	mov    %eax,(%esp)
  1024f2:	e8 c7 e5 ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  1024f7:	c7 44 24 04 ef cb 10 	movl   $0x10cbef,0x4(%esp)
  1024fe:	00 
  1024ff:	89 04 24             	mov    %eax,(%esp)
  102502:	e8 b7 a6 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  102507:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  10250b:	89 04 24             	mov    %eax,(%esp)
  10250e:	e8 5d e4 ff ff       	call   100970 <_ZN6kernel6outputlsEi>
  102513:	c7 44 24 04 45 e5 10 	movl   $0x10e545,0x4(%esp)
  10251a:	00 
  10251b:	89 04 24             	mov    %eax,(%esp)
  10251e:	e8 9b e5 ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  102523:	c7 44 24 04 d1 cb 10 	movl   $0x10cbd1,0x4(%esp)
  10252a:	00 
  10252b:	89 04 24             	mov    %eax,(%esp)
  10252e:	e8 8b a6 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
		break;
  102533:	90                   	nop
	}

	kout << output::endl << "Magic number   (eax): " << output::hex << mb_magic;
  102534:	c7 44 24 04 d1 cb 10 	movl   $0x10cbd1,0x4(%esp)
  10253b:	00 
  10253c:	c7 04 24 50 30 13 00 	movl   $0x133050,(%esp)
  102543:	e8 76 a6 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  102548:	c7 44 24 04 7f e5 10 	movl   $0x10e57f,0x4(%esp)
  10254f:	00 
  102550:	89 04 24             	mov    %eax,(%esp)
  102553:	e8 66 e5 ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  102558:	c7 44 24 04 ef cb 10 	movl   $0x10cbef,0x4(%esp)
  10255f:	00 
  102560:	89 04 24             	mov    %eax,(%esp)
  102563:	e8 56 a6 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  102568:	8b 55 0c             	mov    0xc(%ebp),%edx
  10256b:	89 54 24 04          	mov    %edx,0x4(%esp)
  10256f:	89 04 24             	mov    %eax,(%esp)
  102572:	e8 13 e4 ff ff       	call   10098a <_ZN6kernel6outputlsEj>

	kout << output::endl << "Multiboot info (ebx): " << output::hex << mbs;
  102577:	c7 44 24 04 d1 cb 10 	movl   $0x10cbd1,0x4(%esp)
  10257e:	00 
  10257f:	c7 04 24 50 30 13 00 	movl   $0x133050,(%esp)
  102586:	e8 33 a6 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  10258b:	c7 44 24 04 96 e5 10 	movl   $0x10e596,0x4(%esp)
  102592:	00 
  102593:	89 04 24             	mov    %eax,(%esp)
  102596:	e8 23 e5 ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  10259b:	c7 44 24 04 ef cb 10 	movl   $0x10cbef,0x4(%esp)
  1025a2:	00 
  1025a3:	89 04 24             	mov    %eax,(%esp)
  1025a6:	e8 13 a6 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  1025ab:	8b 55 08             	mov    0x8(%ebp),%edx
  1025ae:	89 54 24 04          	mov    %edx,0x4(%esp)
  1025b2:	89 04 24             	mov    %eax,(%esp)
  1025b5:	e8 bc e4 ff ff       	call   100a76 <_ZN6kernel6outputlsEPv>
	kout << output::endl << "flags:                " << output::hex << mbs->flags;
  1025ba:	8b 45 08             	mov    0x8(%ebp),%eax
  1025bd:	8b 18                	mov    (%eax),%ebx
  1025bf:	c7 44 24 04 d1 cb 10 	movl   $0x10cbd1,0x4(%esp)
  1025c6:	00 
  1025c7:	c7 04 24 50 30 13 00 	movl   $0x133050,(%esp)
  1025ce:	e8 eb a5 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  1025d3:	c7 44 24 04 ad e5 10 	movl   $0x10e5ad,0x4(%esp)
  1025da:	00 
  1025db:	89 04 24             	mov    %eax,(%esp)
  1025de:	e8 db e4 ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  1025e3:	c7 44 24 04 ef cb 10 	movl   $0x10cbef,0x4(%esp)
  1025ea:	00 
  1025eb:	89 04 24             	mov    %eax,(%esp)
  1025ee:	e8 cb a5 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  1025f3:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  1025f7:	89 04 24             	mov    %eax,(%esp)
  1025fa:	e8 8b e3 ff ff       	call   10098a <_ZN6kernel6outputlsEj>
	kout << output::endl << "mem_lower:            " << output::dec << mbs->mem_lower;
  1025ff:	8b 45 08             	mov    0x8(%ebp),%eax
  102602:	8b 58 04             	mov    0x4(%eax),%ebx
  102605:	c7 44 24 04 d1 cb 10 	movl   $0x10cbd1,0x4(%esp)
  10260c:	00 
  10260d:	c7 04 24 50 30 13 00 	movl   $0x133050,(%esp)
  102614:	e8 a5 a5 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  102619:	c7 44 24 04 c4 e5 10 	movl   $0x10e5c4,0x4(%esp)
  102620:	00 
  102621:	89 04 24             	mov    %eax,(%esp)
  102624:	e8 95 e4 ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  102629:	c7 44 24 04 54 cc 10 	movl   $0x10cc54,0x4(%esp)
  102630:	00 
  102631:	89 04 24             	mov    %eax,(%esp)
  102634:	e8 85 a5 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  102639:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  10263d:	89 04 24             	mov    %eax,(%esp)
  102640:	e8 45 e3 ff ff       	call   10098a <_ZN6kernel6outputlsEj>
	kout << output::endl << "mem_upper:            " << output::dec << mbs->mem_upper;
  102645:	8b 45 08             	mov    0x8(%ebp),%eax
  102648:	8b 58 08             	mov    0x8(%eax),%ebx
  10264b:	c7 44 24 04 d1 cb 10 	movl   $0x10cbd1,0x4(%esp)
  102652:	00 
  102653:	c7 04 24 50 30 13 00 	movl   $0x133050,(%esp)
  10265a:	e8 5f a5 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  10265f:	c7 44 24 04 db e5 10 	movl   $0x10e5db,0x4(%esp)
  102666:	00 
  102667:	89 04 24             	mov    %eax,(%esp)
  10266a:	e8 4f e4 ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  10266f:	c7 44 24 04 54 cc 10 	movl   $0x10cc54,0x4(%esp)
  102676:	00 
  102677:	89 04 24             	mov    %eax,(%esp)
  10267a:	e8 3f a5 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  10267f:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  102683:	89 04 24             	mov    %eax,(%esp)
  102686:	e8 ff e2 ff ff       	call   10098a <_ZN6kernel6outputlsEj>
	kout << output::endl << "bootdevice:           " << output::hex << mbs->bootdevice;
  10268b:	8b 45 08             	mov    0x8(%ebp),%eax
  10268e:	8b 58 0c             	mov    0xc(%eax),%ebx
  102691:	c7 44 24 04 d1 cb 10 	movl   $0x10cbd1,0x4(%esp)
  102698:	00 
  102699:	c7 04 24 50 30 13 00 	movl   $0x133050,(%esp)
  1026a0:	e8 19 a5 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  1026a5:	c7 44 24 04 f2 e5 10 	movl   $0x10e5f2,0x4(%esp)
  1026ac:	00 
  1026ad:	89 04 24             	mov    %eax,(%esp)
  1026b0:	e8 09 e4 ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  1026b5:	c7 44 24 04 ef cb 10 	movl   $0x10cbef,0x4(%esp)
  1026bc:	00 
  1026bd:	89 04 24             	mov    %eax,(%esp)
  1026c0:	e8 f9 a4 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  1026c5:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  1026c9:	89 04 24             	mov    %eax,(%esp)
  1026cc:	e8 b9 e2 ff ff       	call   10098a <_ZN6kernel6outputlsEj>
	kout << output::endl << "cmdline:              " << (const char*)mbs->cmdline;
  1026d1:	8b 45 08             	mov    0x8(%ebp),%eax
  1026d4:	8b 40 10             	mov    0x10(%eax),%eax
  1026d7:	89 c3                	mov    %eax,%ebx
  1026d9:	c7 44 24 04 d1 cb 10 	movl   $0x10cbd1,0x4(%esp)
  1026e0:	00 
  1026e1:	c7 04 24 50 30 13 00 	movl   $0x133050,(%esp)
  1026e8:	e8 d1 a4 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  1026ed:	c7 44 24 04 09 e6 10 	movl   $0x10e609,0x4(%esp)
  1026f4:	00 
  1026f5:	89 04 24             	mov    %eax,(%esp)
  1026f8:	e8 c1 e3 ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  1026fd:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  102701:	89 04 24             	mov    %eax,(%esp)
  102704:	e8 b5 e3 ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
	kout << output::endl << "mods_count:           " << output::dec << mbs->mods_count;
  102709:	8b 45 08             	mov    0x8(%ebp),%eax
  10270c:	8b 58 14             	mov    0x14(%eax),%ebx
  10270f:	c7 44 24 04 d1 cb 10 	movl   $0x10cbd1,0x4(%esp)
  102716:	00 
  102717:	c7 04 24 50 30 13 00 	movl   $0x133050,(%esp)
  10271e:	e8 9b a4 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  102723:	c7 44 24 04 20 e6 10 	movl   $0x10e620,0x4(%esp)
  10272a:	00 
  10272b:	89 04 24             	mov    %eax,(%esp)
  10272e:	e8 8b e3 ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  102733:	c7 44 24 04 54 cc 10 	movl   $0x10cc54,0x4(%esp)
  10273a:	00 
  10273b:	89 04 24             	mov    %eax,(%esp)
  10273e:	e8 7b a4 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  102743:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  102747:	89 04 24             	mov    %eax,(%esp)
  10274a:	e8 3b e2 ff ff       	call   10098a <_ZN6kernel6outputlsEj>
	kout << output::endl << "mods_addr:            " << output::hex << mbs->mods_addr;
  10274f:	8b 45 08             	mov    0x8(%ebp),%eax
  102752:	8b 58 18             	mov    0x18(%eax),%ebx
  102755:	c7 44 24 04 d1 cb 10 	movl   $0x10cbd1,0x4(%esp)
  10275c:	00 
  10275d:	c7 04 24 50 30 13 00 	movl   $0x133050,(%esp)
  102764:	e8 55 a4 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  102769:	c7 44 24 04 37 e6 10 	movl   $0x10e637,0x4(%esp)
  102770:	00 
  102771:	89 04 24             	mov    %eax,(%esp)
  102774:	e8 45 e3 ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  102779:	c7 44 24 04 ef cb 10 	movl   $0x10cbef,0x4(%esp)
  102780:	00 
  102781:	89 04 24             	mov    %eax,(%esp)
  102784:	e8 35 a4 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  102789:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  10278d:	89 04 24             	mov    %eax,(%esp)
  102790:	e8 f5 e1 ff ff       	call   10098a <_ZN6kernel6outputlsEj>
	kout << output::endl << "mmap_length:          " << output::dec << mbs->mmap_length;
  102795:	8b 45 08             	mov    0x8(%ebp),%eax
  102798:	8b 58 2c             	mov    0x2c(%eax),%ebx
  10279b:	c7 44 24 04 d1 cb 10 	movl   $0x10cbd1,0x4(%esp)
  1027a2:	00 
  1027a3:	c7 04 24 50 30 13 00 	movl   $0x133050,(%esp)
  1027aa:	e8 0f a4 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  1027af:	c7 44 24 04 4e e6 10 	movl   $0x10e64e,0x4(%esp)
  1027b6:	00 
  1027b7:	89 04 24             	mov    %eax,(%esp)
  1027ba:	e8 ff e2 ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  1027bf:	c7 44 24 04 54 cc 10 	movl   $0x10cc54,0x4(%esp)
  1027c6:	00 
  1027c7:	89 04 24             	mov    %eax,(%esp)
  1027ca:	e8 ef a3 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  1027cf:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  1027d3:	89 04 24             	mov    %eax,(%esp)
  1027d6:	e8 af e1 ff ff       	call   10098a <_ZN6kernel6outputlsEj>
	kout << output::endl << "mmap_addr:            " << output::hex << mbs->mmap_addr;
  1027db:	8b 45 08             	mov    0x8(%ebp),%eax
  1027de:	8b 58 30             	mov    0x30(%eax),%ebx
  1027e1:	c7 44 24 04 d1 cb 10 	movl   $0x10cbd1,0x4(%esp)
  1027e8:	00 
  1027e9:	c7 04 24 50 30 13 00 	movl   $0x133050,(%esp)
  1027f0:	e8 c9 a3 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  1027f5:	c7 44 24 04 65 e6 10 	movl   $0x10e665,0x4(%esp)
  1027fc:	00 
  1027fd:	89 04 24             	mov    %eax,(%esp)
  102800:	e8 b9 e2 ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  102805:	c7 44 24 04 ef cb 10 	movl   $0x10cbef,0x4(%esp)
  10280c:	00 
  10280d:	89 04 24             	mov    %eax,(%esp)
  102810:	e8 a9 a3 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  102815:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  102819:	89 04 24             	mov    %eax,(%esp)
  10281c:	e8 69 e1 ff ff       	call   10098a <_ZN6kernel6outputlsEj>
	kout << output::endl << "boot_loader_name:     " << (const char*)mbs->boot_loader_name << output::endl;
  102821:	8b 45 08             	mov    0x8(%ebp),%eax
  102824:	8b 40 40             	mov    0x40(%eax),%eax
  102827:	89 c3                	mov    %eax,%ebx
  102829:	c7 44 24 04 d1 cb 10 	movl   $0x10cbd1,0x4(%esp)
  102830:	00 
  102831:	c7 04 24 50 30 13 00 	movl   $0x133050,(%esp)
  102838:	e8 81 a3 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  10283d:	c7 44 24 04 7c e6 10 	movl   $0x10e67c,0x4(%esp)
  102844:	00 
  102845:	89 04 24             	mov    %eax,(%esp)
  102848:	e8 71 e2 ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  10284d:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  102851:	89 04 24             	mov    %eax,(%esp)
  102854:	e8 65 e2 ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  102859:	c7 44 24 04 d1 cb 10 	movl   $0x10cbd1,0x4(%esp)
  102860:	00 
  102861:	89 04 24             	mov    %eax,(%esp)
  102864:	e8 55 a3 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>

	#if defined(ARCH_X86) || defined(ARCH_X64)
	/*
	Initialise the GDT
	*/
	gdt &gdt = gdt::instance();
  102869:	e8 72 9f 00 00       	call   10c7e0 <_ZN3hal3x863gdt8instanceEv>
  10286e:	89 45 d8             	mov    %eax,-0x28(%ebp)
	gdt.init();
  102871:	8b 45 d8             	mov    -0x28(%ebp),%eax
  102874:	89 04 24             	mov    %eax,(%esp)
  102877:	e8 d4 67 00 00       	call   109050 <_ZN3hal3x863gdt4initEv>
	gdt.load();
  10287c:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10287f:	89 04 24             	mov    %eax,(%esp)
  102882:	e8 db 68 00 00       	call   109162 <_ZN3hal3x863gdt4loadEv>

	/*
	Initialise the IDT
	*/
	idt &idt = idt::instance();
  102887:	e8 89 a3 00 00       	call   10cc15 <_ZN3hal3x863idt8instanceEv>
  10288c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	idt.init();
  10288f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  102892:	89 04 24             	mov    %eax,(%esp)
  102895:	e8 20 34 00 00       	call   105cba <_ZN3hal3x863idt4initEv>
	idt.load();
  10289a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
  10289d:	89 04 24             	mov    %eax,(%esp)
  1028a0:	e8 f3 5e 00 00       	call   108798 <_ZN3hal3x863idt4loadEv>
	#endif

	/*
	Initialise the PIC
	*/
	pic &pic = pic::instance();
  1028a5:	e8 52 96 00 00       	call   10befc <_ZN3hal3x863pic8instanceEv>
  1028aa:	89 45 d0             	mov    %eax,-0x30(%ebp)
	pic.init();
  1028ad:	8b 45 d0             	mov    -0x30(%ebp),%eax
  1028b0:	89 04 24             	mov    %eax,(%esp)
  1028b3:	e8 58 18 00 00       	call   104110 <_ZN3hal3x863pic4initEv>
	*/

	/*
	Initialise the Physical Memory Manager
	*/
	pmm &pmm = pmm::instance();
  1028b8:	e8 6a 9c 00 00       	call   10c527 <_ZN3hal3x863pmm8instanceEv>
  1028bd:	89 45 cc             	mov    %eax,-0x34(%ebp)

	switch(pmm::error err = pmm.init(mbs))
  1028c0:	8b 45 08             	mov    0x8(%ebp),%eax
  1028c3:	89 44 24 04          	mov    %eax,0x4(%esp)
  1028c7:	8b 45 cc             	mov    -0x34(%ebp),%eax
  1028ca:	89 04 24             	mov    %eax,(%esp)
  1028cd:	e8 02 60 00 00       	call   1088d4 <_ZN3hal3x863pmm4initEPN9multiboot4infoE>
  1028d2:	89 45 c8             	mov    %eax,-0x38(%ebp)
  1028d5:	8b 45 c8             	mov    -0x38(%ebp),%eax
  1028d8:	83 f8 01             	cmp    $0x1,%eax
  1028db:	74 0a                	je     1028e7 <init+0x5f7>
  1028dd:	83 f8 02             	cmp    $0x2,%eax
  1028e0:	74 72                	je     102954 <init+0x664>
  1028e2:	e9 d7 00 00 00       	jmp    1029be <init+0x6ce>
	{
		case pmm::error::no_kernel_addr:
			kout << output::endl << "No kernel address! (" << output::hex << err << ")" << output::endl;
  1028e7:	8b 5d c8             	mov    -0x38(%ebp),%ebx
  1028ea:	c7 44 24 04 d1 cb 10 	movl   $0x10cbd1,0x4(%esp)
  1028f1:	00 
  1028f2:	c7 04 24 50 30 13 00 	movl   $0x133050,(%esp)
  1028f9:	e8 c0 a2 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  1028fe:	c7 44 24 04 93 e6 10 	movl   $0x10e693,0x4(%esp)
  102905:	00 
  102906:	89 04 24             	mov    %eax,(%esp)
  102909:	e8 b0 e1 ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  10290e:	c7 44 24 04 ef cb 10 	movl   $0x10cbef,0x4(%esp)
  102915:	00 
  102916:	89 04 24             	mov    %eax,(%esp)
  102919:	e8 a0 a2 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  10291e:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  102922:	89 04 24             	mov    %eax,(%esp)
  102925:	e8 46 e0 ff ff       	call   100970 <_ZN6kernel6outputlsEi>
  10292a:	c7 44 24 04 45 e5 10 	movl   $0x10e545,0x4(%esp)
  102931:	00 
  102932:	89 04 24             	mov    %eax,(%esp)
  102935:	e8 84 e1 ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  10293a:	c7 44 24 04 d1 cb 10 	movl   $0x10cbd1,0x4(%esp)
  102941:	00 
  102942:	89 04 24             	mov    %eax,(%esp)
  102945:	e8 74 a2 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
			cpu::halt();
  10294a:	e8 d1 9b 00 00       	call   10c520 <_ZN3hal3x863cpu4haltEv>
		break;
  10294f:	e9 ce 00 00 00       	jmp    102a22 <init+0x732>

		case pmm::error::no_memory_map:
			kout << output::endl << "No memory map! (" << output::hex << err << ")" << output::endl;
  102954:	8b 5d c8             	mov    -0x38(%ebp),%ebx
  102957:	c7 44 24 04 d1 cb 10 	movl   $0x10cbd1,0x4(%esp)
  10295e:	00 
  10295f:	c7 04 24 50 30 13 00 	movl   $0x133050,(%esp)
  102966:	e8 53 a2 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  10296b:	c7 44 24 04 5e e5 10 	movl   $0x10e55e,0x4(%esp)
  102972:	00 
  102973:	89 04 24             	mov    %eax,(%esp)
  102976:	e8 43 e1 ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  10297b:	c7 44 24 04 ef cb 10 	movl   $0x10cbef,0x4(%esp)
  102982:	00 
  102983:	89 04 24             	mov    %eax,(%esp)
  102986:	e8 33 a2 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  10298b:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  10298f:	89 04 24             	mov    %eax,(%esp)
  102992:	e8 d9 df ff ff       	call   100970 <_ZN6kernel6outputlsEi>
  102997:	c7 44 24 04 45 e5 10 	movl   $0x10e545,0x4(%esp)
  10299e:	00 
  10299f:	89 04 24             	mov    %eax,(%esp)
  1029a2:	e8 17 e1 ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  1029a7:	c7 44 24 04 d1 cb 10 	movl   $0x10cbd1,0x4(%esp)
  1029ae:	00 
  1029af:	89 04 24             	mov    %eax,(%esp)
  1029b2:	e8 07 a2 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
			cpu::halt();
  1029b7:	e8 64 9b 00 00       	call   10c520 <_ZN3hal3x863cpu4haltEv>
		break;
  1029bc:	eb 64                	jmp    102a22 <init+0x732>

		default:
			kout << output::endl << "pmm init OK! (" << output::hex << err << ")" << output::endl;
  1029be:	8b 5d c8             	mov    -0x38(%ebp),%ebx
  1029c1:	c7 44 24 04 d1 cb 10 	movl   $0x10cbd1,0x4(%esp)
  1029c8:	00 
  1029c9:	c7 04 24 50 30 13 00 	movl   $0x133050,(%esp)
  1029d0:	e8 e9 a1 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  1029d5:	c7 44 24 04 a8 e6 10 	movl   $0x10e6a8,0x4(%esp)
  1029dc:	00 
  1029dd:	89 04 24             	mov    %eax,(%esp)
  1029e0:	e8 d9 e0 ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  1029e5:	c7 44 24 04 ef cb 10 	movl   $0x10cbef,0x4(%esp)
  1029ec:	00 
  1029ed:	89 04 24             	mov    %eax,(%esp)
  1029f0:	e8 c9 a1 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  1029f5:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  1029f9:	89 04 24             	mov    %eax,(%esp)
  1029fc:	e8 6f df ff ff       	call   100970 <_ZN6kernel6outputlsEi>
  102a01:	c7 44 24 04 45 e5 10 	movl   $0x10e545,0x4(%esp)
  102a08:	00 
  102a09:	89 04 24             	mov    %eax,(%esp)
  102a0c:	e8 ad e0 ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  102a11:	c7 44 24 04 d1 cb 10 	movl   $0x10cbd1,0x4(%esp)
  102a18:	00 
  102a19:	89 04 24             	mov    %eax,(%esp)
  102a1c:	e8 9d a1 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
		break;
  102a21:	90                   	nop
	}

	/*
	Create virtual memory context for the kernel
	*/
	context kernel_context = context();
  102a22:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
  102a28:	89 04 24             	mov    %eax,(%esp)
  102a2b:	e8 3e 27 00 00       	call   10516e <_ZN3hal3x867contextC1Ev>

	/*
	Initialise the Virtual Memory Manager
	*/
	switch(vmm::error err = vmmgr().init(&kernel_context, vmm::kernel_space_base, vmm::kernel_space_limit))
  102a30:	e8 eb d5 ff ff       	call   100020 <_ZN6kernel5vmmgrEv>
  102a35:	c7 44 24 0c ff ff ff 	movl   $0x3ffffff,0xc(%esp)
  102a3c:	03 
  102a3d:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
  102a44:	00 
  102a45:	8d 95 78 ff ff ff    	lea    -0x88(%ebp),%edx
  102a4b:	89 54 24 04          	mov    %edx,0x4(%esp)
  102a4f:	89 04 24             	mov    %eax,(%esp)
  102a52:	e8 3d 1a 00 00       	call   104494 <_ZN3hal3x863vmm4initEPNS0_7contextEjj>
  102a57:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  102a5a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
  102a5d:	83 f8 01             	cmp    $0x1,%eax
  102a60:	75 6a                	jne    102acc <init+0x7dc>
	{
		case vmm::error::no_kernel_addr:
			kout << output::endl << "No kernel address! (" << output::hex << err << ")" << output::endl;
  102a62:	8b 5d c4             	mov    -0x3c(%ebp),%ebx
  102a65:	c7 44 24 04 d1 cb 10 	movl   $0x10cbd1,0x4(%esp)
  102a6c:	00 
  102a6d:	c7 04 24 50 30 13 00 	movl   $0x133050,(%esp)
  102a74:	e8 45 a1 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  102a79:	c7 44 24 04 93 e6 10 	movl   $0x10e693,0x4(%esp)
  102a80:	00 
  102a81:	89 04 24             	mov    %eax,(%esp)
  102a84:	e8 35 e0 ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  102a89:	c7 44 24 04 ef cb 10 	movl   $0x10cbef,0x4(%esp)
  102a90:	00 
  102a91:	89 04 24             	mov    %eax,(%esp)
  102a94:	e8 25 a1 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  102a99:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  102a9d:	89 04 24             	mov    %eax,(%esp)
  102aa0:	e8 cb de ff ff       	call   100970 <_ZN6kernel6outputlsEi>
  102aa5:	c7 44 24 04 45 e5 10 	movl   $0x10e545,0x4(%esp)
  102aac:	00 
  102aad:	89 04 24             	mov    %eax,(%esp)
  102ab0:	e8 09 e0 ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  102ab5:	c7 44 24 04 d1 cb 10 	movl   $0x10cbd1,0x4(%esp)
  102abc:	00 
  102abd:	89 04 24             	mov    %eax,(%esp)
  102ac0:	e8 f9 a0 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
			cpu::halt();
  102ac5:	e8 56 9a 00 00       	call   10c520 <_ZN3hal3x863cpu4haltEv>
		break;
  102aca:	eb 64                	jmp    102b30 <init+0x840>

		default:
			kout << output::endl << "vmm init OK! (" << output::hex << err << ")" << output::endl;
  102acc:	8b 5d c4             	mov    -0x3c(%ebp),%ebx
  102acf:	c7 44 24 04 d1 cb 10 	movl   $0x10cbd1,0x4(%esp)
  102ad6:	00 
  102ad7:	c7 04 24 50 30 13 00 	movl   $0x133050,(%esp)
  102ade:	e8 db a0 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  102ae3:	c7 44 24 04 b7 e6 10 	movl   $0x10e6b7,0x4(%esp)
  102aea:	00 
  102aeb:	89 04 24             	mov    %eax,(%esp)
  102aee:	e8 cb df ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  102af3:	c7 44 24 04 ef cb 10 	movl   $0x10cbef,0x4(%esp)
  102afa:	00 
  102afb:	89 04 24             	mov    %eax,(%esp)
  102afe:	e8 bb a0 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  102b03:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  102b07:	89 04 24             	mov    %eax,(%esp)
  102b0a:	e8 61 de ff ff       	call   100970 <_ZN6kernel6outputlsEi>
  102b0f:	c7 44 24 04 45 e5 10 	movl   $0x10e545,0x4(%esp)
  102b16:	00 
  102b17:	89 04 24             	mov    %eax,(%esp)
  102b1a:	e8 9f df ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  102b1f:	c7 44 24 04 d1 cb 10 	movl   $0x10cbd1,0x4(%esp)
  102b26:	00 
  102b27:	89 04 24             	mov    %eax,(%esp)
  102b2a:	e8 8f a0 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
		break;
  102b2f:	90                   	nop
	}

	/*
	Video-memory mapping
	*/
	vmmgr().map(memory::videomem, memory::videomem, vmm::present | vmm::write);
  102b30:	e8 eb d4 ff ff       	call   100020 <_ZN6kernel5vmmgrEv>
  102b35:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  102b3c:	00 
  102b3d:	c7 44 24 08 00 80 0b 	movl   $0xb8000,0x8(%esp)
  102b44:	00 
  102b45:	c7 44 24 04 00 80 0b 	movl   $0xb8000,0x4(%esp)
  102b4c:	00 
  102b4d:	89 04 24             	mov    %eax,(%esp)
  102b50:	e8 6f 1e 00 00       	call   1049c4 <_ZN3hal3x863vmm3mapEjjj>

	/*
	Multibootinformation mapping
	*/
	vmmgr().map(align4k((uintptr_t)mbs), align4k((uintptr_t)mbs), vmm::present);
  102b55:	8b 45 08             	mov    0x8(%ebp),%eax
  102b58:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  102b5d:	89 c6                	mov    %eax,%esi
  102b5f:	8b 45 08             	mov    0x8(%ebp),%eax
  102b62:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  102b67:	89 c3                	mov    %eax,%ebx
  102b69:	e8 b2 d4 ff ff       	call   100020 <_ZN6kernel5vmmgrEv>
  102b6e:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  102b75:	00 
  102b76:	89 74 24 08          	mov    %esi,0x8(%esp)
  102b7a:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  102b7e:	89 04 24             	mov    %eax,(%esp)
  102b81:	e8 3e 1e 00 00       	call   1049c4 <_ZN3hal3x863vmm3mapEjjj>
	vmmgr().map(align4k((uintptr_t)mbs->cmdline), align4k((uintptr_t)mbs->cmdline), vmm::present);
  102b86:	8b 45 08             	mov    0x8(%ebp),%eax
  102b89:	8b 40 10             	mov    0x10(%eax),%eax
  102b8c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  102b91:	89 c6                	mov    %eax,%esi
  102b93:	8b 45 08             	mov    0x8(%ebp),%eax
  102b96:	8b 40 10             	mov    0x10(%eax),%eax
  102b99:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  102b9e:	89 c3                	mov    %eax,%ebx
  102ba0:	e8 7b d4 ff ff       	call   100020 <_ZN6kernel5vmmgrEv>
  102ba5:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  102bac:	00 
  102bad:	89 74 24 08          	mov    %esi,0x8(%esp)
  102bb1:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  102bb5:	89 04 24             	mov    %eax,(%esp)
  102bb8:	e8 07 1e 00 00       	call   1049c4 <_ZN3hal3x863vmm3mapEjjj>
	vmmgr().map(align4k((uintptr_t)mbs->boot_loader_name), align4k((uintptr_t)mbs->boot_loader_name), vmm::present);
  102bbd:	8b 45 08             	mov    0x8(%ebp),%eax
  102bc0:	8b 40 40             	mov    0x40(%eax),%eax
  102bc3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  102bc8:	89 c6                	mov    %eax,%esi
  102bca:	8b 45 08             	mov    0x8(%ebp),%eax
  102bcd:	8b 40 40             	mov    0x40(%eax),%eax
  102bd0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  102bd5:	89 c3                	mov    %eax,%ebx
  102bd7:	e8 44 d4 ff ff       	call   100020 <_ZN6kernel5vmmgrEv>
  102bdc:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  102be3:	00 
  102be4:	89 74 24 08          	mov    %esi,0x8(%esp)
  102be8:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  102bec:	89 04 24             	mov    %eax,(%esp)
  102bef:	e8 d0 1d 00 00       	call   1049c4 <_ZN3hal3x863vmm3mapEjjj>
	vmmgr().map(align4k((uintptr_t)mbs->mods_addr), align4k((uintptr_t)mbs->mods_addr), vmm::present, ((sizeof(multiboot::mods) * mbs->mods_count + 4095) / 4096));
  102bf4:	8b 45 08             	mov    0x8(%ebp),%eax
  102bf7:	8b 40 14             	mov    0x14(%eax),%eax
  102bfa:	c1 e0 04             	shl    $0x4,%eax
  102bfd:	05 ff 0f 00 00       	add    $0xfff,%eax
  102c02:	c1 e8 0c             	shr    $0xc,%eax
  102c05:	89 c7                	mov    %eax,%edi
  102c07:	8b 45 08             	mov    0x8(%ebp),%eax
  102c0a:	8b 40 18             	mov    0x18(%eax),%eax
  102c0d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  102c12:	89 c6                	mov    %eax,%esi
  102c14:	8b 45 08             	mov    0x8(%ebp),%eax
  102c17:	8b 40 18             	mov    0x18(%eax),%eax
  102c1a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  102c1f:	89 c3                	mov    %eax,%ebx
  102c21:	e8 fa d3 ff ff       	call   100020 <_ZN6kernel5vmmgrEv>
  102c26:	89 7c 24 10          	mov    %edi,0x10(%esp)
  102c2a:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  102c31:	00 
  102c32:	89 74 24 08          	mov    %esi,0x8(%esp)
  102c36:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  102c3a:	89 04 24             	mov    %eax,(%esp)
  102c3d:	e8 fc 1d 00 00       	call   104a3e <_ZN3hal3x863vmm3mapEjjjj>

	multiboot::mods *mods = (multiboot::mods*)mbs->mods_addr;
  102c42:	8b 45 08             	mov    0x8(%ebp),%eax
  102c45:	8b 40 18             	mov    0x18(%eax),%eax
  102c48:	89 45 c0             	mov    %eax,-0x40(%ebp)

	for(size_t index = 0; index < mbs->mods_count; index++)
  102c4b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
  102c52:	eb 57                	jmp    102cab <init+0x9bb>
	{
		for(uintptr_t addr = mods[index].mod_start; addr < mods[index].mod_end; addr += memory::page_size_byte)
  102c54:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  102c57:	c1 e0 04             	shl    $0x4,%eax
  102c5a:	89 c2                	mov    %eax,%edx
  102c5c:	8b 45 c0             	mov    -0x40(%ebp),%eax
  102c5f:	01 d0                	add    %edx,%eax
  102c61:	8b 00                	mov    (%eax),%eax
  102c63:	89 45 e0             	mov    %eax,-0x20(%ebp)
  102c66:	eb 2a                	jmp    102c92 <init+0x9a2>
		{
			vmmgr().map(addr, addr, vmm::present);
  102c68:	e8 b3 d3 ff ff       	call   100020 <_ZN6kernel5vmmgrEv>
  102c6d:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  102c74:	00 
  102c75:	8b 55 e0             	mov    -0x20(%ebp),%edx
  102c78:	89 54 24 08          	mov    %edx,0x8(%esp)
  102c7c:	8b 55 e0             	mov    -0x20(%ebp),%edx
  102c7f:	89 54 24 04          	mov    %edx,0x4(%esp)
  102c83:	89 04 24             	mov    %eax,(%esp)
  102c86:	e8 39 1d 00 00       	call   1049c4 <_ZN3hal3x863vmm3mapEjjj>

	multiboot::mods *mods = (multiboot::mods*)mbs->mods_addr;

	for(size_t index = 0; index < mbs->mods_count; index++)
	{
		for(uintptr_t addr = mods[index].mod_start; addr < mods[index].mod_end; addr += memory::page_size_byte)
  102c8b:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
  102c92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  102c95:	c1 e0 04             	shl    $0x4,%eax
  102c98:	89 c2                	mov    %eax,%edx
  102c9a:	8b 45 c0             	mov    -0x40(%ebp),%eax
  102c9d:	01 d0                	add    %edx,%eax
  102c9f:	8b 40 04             	mov    0x4(%eax),%eax
  102ca2:	3b 45 e0             	cmp    -0x20(%ebp),%eax
  102ca5:	77 c1                	ja     102c68 <init+0x978>
	vmmgr().map(align4k((uintptr_t)mbs->boot_loader_name), align4k((uintptr_t)mbs->boot_loader_name), vmm::present);
	vmmgr().map(align4k((uintptr_t)mbs->mods_addr), align4k((uintptr_t)mbs->mods_addr), vmm::present, ((sizeof(multiboot::mods) * mbs->mods_count + 4095) / 4096));

	multiboot::mods *mods = (multiboot::mods*)mbs->mods_addr;

	for(size_t index = 0; index < mbs->mods_count; index++)
  102ca7:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
  102cab:	8b 45 08             	mov    0x8(%ebp),%eax
  102cae:	8b 40 14             	mov    0x14(%eax),%eax
  102cb1:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
  102cb4:	77 9e                	ja     102c54 <init+0x964>
	}

	/*
	Activate the kernel virtual-memory context
	*/
	kernel_context.activate();
  102cb6:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
  102cbc:	89 04 24             	mov    %eax,(%esp)
  102cbf:	e8 5a 27 00 00       	call   10541e <_ZN3hal3x867context8activateEv>
	kernel::cntxt = &kernel_context;
  102cc4:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
  102cca:	a3 04 30 11 00       	mov    %eax,0x113004
	Initialise the system-timer
	*/
	#if defined(ARCH_X86) || defined(ARCH_X64)

	time_t year, month, day, hour, min, sec;
	cmos::date(&year, &month, &day);
  102ccf:	8d 85 6c ff ff ff    	lea    -0x94(%ebp),%eax
  102cd5:	89 44 24 08          	mov    %eax,0x8(%esp)
  102cd9:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
  102cdf:	89 44 24 04          	mov    %eax,0x4(%esp)
  102ce3:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
  102ce9:	89 04 24             	mov    %eax,(%esp)
  102cec:	e8 f2 23 00 00       	call   1050e3 <_ZN3hal3x864cmos4dateEPlS2_S2_>
	cmos::time(&hour, &min, &sec);
  102cf1:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
  102cf7:	89 44 24 08          	mov    %eax,0x8(%esp)
  102cfb:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
  102d01:	89 44 24 04          	mov    %eax,0x4(%esp)
  102d05:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
  102d0b:	89 04 24             	mov    %eax,(%esp)
  102d0e:	e8 6b 23 00 00       	call   10507e <_ZN3hal3x864cmos4timeEPlS2_S2_>

	pit::init(pit::channel_0, pit::rate, 500);
  102d13:	c7 44 24 08 f4 01 00 	movl   $0x1f4,0x8(%esp)
  102d1a:	00 
  102d1b:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  102d22:	00 
  102d23:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  102d2a:	e8 dc 0c 00 00       	call   103a0b <_ZN3hal3x863pit4initENS1_7channelENS1_4modeEl>

	timer::init(0, unixtime(year, month, day, hour, min, sec), 500);
  102d2f:	8b bd 60 ff ff ff    	mov    -0xa0(%ebp),%edi
  102d35:	8b b5 64 ff ff ff    	mov    -0x9c(%ebp),%esi
  102d3b:	8b 9d 68 ff ff ff    	mov    -0x98(%ebp),%ebx
  102d41:	8b 8d 6c ff ff ff    	mov    -0x94(%ebp),%ecx
  102d47:	8b 95 70 ff ff ff    	mov    -0x90(%ebp),%edx
  102d4d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
  102d53:	89 7c 24 14          	mov    %edi,0x14(%esp)
  102d57:	89 74 24 10          	mov    %esi,0x10(%esp)
  102d5b:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
  102d5f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
  102d63:	89 54 24 04          	mov    %edx,0x4(%esp)
  102d67:	89 04 24             	mov    %eax,(%esp)
  102d6a:	e8 21 7d 00 00       	call   10aa90 <unixtime>
  102d6f:	c7 44 24 08 f4 01 00 	movl   $0x1f4,0x8(%esp)
  102d76:	00 
  102d77:	89 44 24 04          	mov    %eax,0x4(%esp)
  102d7b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  102d82:	e8 f3 d2 ff ff       	call   10007a <_ZN6kernel5timer4initEhll>

	time_t time = timer::time;
  102d87:	a1 3c 30 13 00       	mov    0x13303c,%eax
  102d8c:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)

	kout << output::endl << ctime(&time);
  102d92:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
  102d98:	89 04 24             	mov    %eax,(%esp)
  102d9b:	e8 e0 7e 00 00       	call   10ac80 <ctime>
  102da0:	89 c3                	mov    %eax,%ebx
  102da2:	c7 44 24 04 d1 cb 10 	movl   $0x10cbd1,0x4(%esp)
  102da9:	00 
  102daa:	c7 04 24 50 30 13 00 	movl   $0x133050,(%esp)
  102db1:	e8 08 9e 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>
  102db6:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  102dba:	89 04 24             	mov    %eax,(%esp)
  102dbd:	e8 fc dc ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
	#endif

	/*
	Get an instance of the process an thread managers
	*/
	processmgr &procmgr   = processmgr::instance(); 
  102dc2:	e8 a0 97 00 00       	call   10c567 <_ZN6kernel10processmgr8instanceEv>
  102dc7:	89 45 bc             	mov    %eax,-0x44(%ebp)
	threadmgr  &thrdmgr   = threadmgr::instance(); 
  102dca:	e8 e4 97 00 00       	call   10c5b3 <_ZN6kernel9threadmgr8instanceEv>
  102dcf:	89 45 b8             	mov    %eax,-0x48(%ebp)
	scheduler  &scheduler = scheduler::instance();
  102dd2:	e8 66 91 00 00       	call   10bf3d <_ZN6kernel9scheduler8instanceEv>
  102dd7:	89 45 b4             	mov    %eax,-0x4c(%ebp)


	/*
	Spawn first process
	*/
	process *proc0 = new process("proc0", "", 0, &kernel_context);
  102dda:	c7 04 24 68 04 00 00 	movl   $0x468,(%esp)
  102de1:	e8 ba f3 ff ff       	call   1021a0 <_Znwj>
  102de6:	89 c3                	mov    %eax,%ebx
  102de8:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
  102dee:	89 44 24 10          	mov    %eax,0x10(%esp)
  102df2:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  102df9:	00 
  102dfa:	c7 44 24 08 c6 e6 10 	movl   $0x10e6c6,0x8(%esp)
  102e01:	00 
  102e02:	c7 44 24 04 c7 e6 10 	movl   $0x10e6c7,0x4(%esp)
  102e09:	00 
  102e0a:	89 1c 24             	mov    %ebx,(%esp)
  102e0d:	e8 98 e6 ff ff       	call   1014aa <_ZN6kernel7processC1EPKcS2_jPN3hal3x867contextE>
  102e12:	89 5d b0             	mov    %ebx,-0x50(%ebp)

	procmgr.add(proc0);
  102e15:	8b 45 b0             	mov    -0x50(%ebp),%eax
  102e18:	89 44 24 04          	mov    %eax,0x4(%esp)
  102e1c:	8b 45 bc             	mov    -0x44(%ebp),%eax
  102e1f:	89 04 24             	mov    %eax,(%esp)
  102e22:	e8 d1 e8 ff ff       	call   1016f8 <_ZN6kernel10processmgr3addEPNS_7processE>

	thread *thrd00 = new thread(proc0, (uintptr_t)thread_entry, thread::kernel);
  102e27:	c7 04 24 1c 00 00 00 	movl   $0x1c,(%esp)
  102e2e:	e8 6d f3 ff ff       	call   1021a0 <_Znwj>
  102e33:	89 c3                	mov    %eax,%ebx
  102e35:	b8 38 22 10 00       	mov    $0x102238,%eax
  102e3a:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  102e41:	00 
  102e42:	89 44 24 08          	mov    %eax,0x8(%esp)
  102e46:	8b 45 b0             	mov    -0x50(%ebp),%eax
  102e49:	89 44 24 04          	mov    %eax,0x4(%esp)
  102e4d:	89 1c 24             	mov    %ebx,(%esp)
  102e50:	e8 f5 d2 ff ff       	call   10014a <_ZN6kernel6threadC1EPNS_7processEjj>
  102e55:	89 5d ac             	mov    %ebx,-0x54(%ebp)
	thread *thrd01 = new thread(proc0, (uintptr_t)thread_entry, thread::kernel);
  102e58:	c7 04 24 1c 00 00 00 	movl   $0x1c,(%esp)
  102e5f:	e8 3c f3 ff ff       	call   1021a0 <_Znwj>
  102e64:	89 c3                	mov    %eax,%ebx
  102e66:	b8 38 22 10 00       	mov    $0x102238,%eax
  102e6b:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  102e72:	00 
  102e73:	89 44 24 08          	mov    %eax,0x8(%esp)
  102e77:	8b 45 b0             	mov    -0x50(%ebp),%eax
  102e7a:	89 44 24 04          	mov    %eax,0x4(%esp)
  102e7e:	89 1c 24             	mov    %ebx,(%esp)
  102e81:	e8 c4 d2 ff ff       	call   10014a <_ZN6kernel6threadC1EPNS_7processEjj>
  102e86:	89 5d a8             	mov    %ebx,-0x58(%ebp)
	thread *thrd02 = new thread(proc0, (uintptr_t)thread_entry, thread::kernel);
  102e89:	c7 04 24 1c 00 00 00 	movl   $0x1c,(%esp)
  102e90:	e8 0b f3 ff ff       	call   1021a0 <_Znwj>
  102e95:	89 c3                	mov    %eax,%ebx
  102e97:	b8 38 22 10 00       	mov    $0x102238,%eax
  102e9c:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  102ea3:	00 
  102ea4:	89 44 24 08          	mov    %eax,0x8(%esp)
  102ea8:	8b 45 b0             	mov    -0x50(%ebp),%eax
  102eab:	89 44 24 04          	mov    %eax,0x4(%esp)
  102eaf:	89 1c 24             	mov    %ebx,(%esp)
  102eb2:	e8 93 d2 ff ff       	call   10014a <_ZN6kernel6threadC1EPNS_7processEjj>
  102eb7:	89 5d a4             	mov    %ebx,-0x5c(%ebp)
	thread *thrd03 = new thread(proc0, (uintptr_t)thread_entry, thread::kernel);
  102eba:	c7 04 24 1c 00 00 00 	movl   $0x1c,(%esp)
  102ec1:	e8 da f2 ff ff       	call   1021a0 <_Znwj>
  102ec6:	89 c3                	mov    %eax,%ebx
  102ec8:	b8 38 22 10 00       	mov    $0x102238,%eax
  102ecd:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  102ed4:	00 
  102ed5:	89 44 24 08          	mov    %eax,0x8(%esp)
  102ed9:	8b 45 b0             	mov    -0x50(%ebp),%eax
  102edc:	89 44 24 04          	mov    %eax,0x4(%esp)
  102ee0:	89 1c 24             	mov    %ebx,(%esp)
  102ee3:	e8 62 d2 ff ff       	call   10014a <_ZN6kernel6threadC1EPNS_7processEjj>
  102ee8:	89 5d a0             	mov    %ebx,-0x60(%ebp)
	thread *thrd04 = new thread(proc0, (uintptr_t)thread_entry, thread::kernel);
  102eeb:	c7 04 24 1c 00 00 00 	movl   $0x1c,(%esp)
  102ef2:	e8 a9 f2 ff ff       	call   1021a0 <_Znwj>
  102ef7:	89 c3                	mov    %eax,%ebx
  102ef9:	b8 38 22 10 00       	mov    $0x102238,%eax
  102efe:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  102f05:	00 
  102f06:	89 44 24 08          	mov    %eax,0x8(%esp)
  102f0a:	8b 45 b0             	mov    -0x50(%ebp),%eax
  102f0d:	89 44 24 04          	mov    %eax,0x4(%esp)
  102f11:	89 1c 24             	mov    %ebx,(%esp)
  102f14:	e8 31 d2 ff ff       	call   10014a <_ZN6kernel6threadC1EPNS_7processEjj>
  102f19:	89 5d 9c             	mov    %ebx,-0x64(%ebp)

	scheduler.add(thrd00);
  102f1c:	8b 45 ac             	mov    -0x54(%ebp),%eax
  102f1f:	89 44 24 04          	mov    %eax,0x4(%esp)
  102f23:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  102f26:	89 04 24             	mov    %eax,(%esp)
  102f29:	e8 1c e3 ff ff       	call   10124a <_ZN6kernel9scheduler3addEPNS_6threadE>
	scheduler.add(thrd01);
  102f2e:	8b 45 a8             	mov    -0x58(%ebp),%eax
  102f31:	89 44 24 04          	mov    %eax,0x4(%esp)
  102f35:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  102f38:	89 04 24             	mov    %eax,(%esp)
  102f3b:	e8 0a e3 ff ff       	call   10124a <_ZN6kernel9scheduler3addEPNS_6threadE>
	scheduler.add(thrd02);
  102f40:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  102f43:	89 44 24 04          	mov    %eax,0x4(%esp)
  102f47:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  102f4a:	89 04 24             	mov    %eax,(%esp)
  102f4d:	e8 f8 e2 ff ff       	call   10124a <_ZN6kernel9scheduler3addEPNS_6threadE>
	scheduler.add(thrd03);
  102f52:	8b 45 a0             	mov    -0x60(%ebp),%eax
  102f55:	89 44 24 04          	mov    %eax,0x4(%esp)
  102f59:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  102f5c:	89 04 24             	mov    %eax,(%esp)
  102f5f:	e8 e6 e2 ff ff       	call   10124a <_ZN6kernel9scheduler3addEPNS_6threadE>
	scheduler.add(thrd04);
  102f64:	8b 45 9c             	mov    -0x64(%ebp),%eax
  102f67:	89 44 24 04          	mov    %eax,0x4(%esp)
  102f6b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  102f6e:	89 04 24             	mov    %eax,(%esp)
  102f71:	e8 d4 e2 ff ff       	call   10124a <_ZN6kernel9scheduler3addEPNS_6threadE>

	thrdmgr.add(thrd00);
  102f76:	8b 45 ac             	mov    -0x54(%ebp),%eax
  102f79:	89 44 24 04          	mov    %eax,0x4(%esp)
  102f7d:	8b 45 b8             	mov    -0x48(%ebp),%eax
  102f80:	89 04 24             	mov    %eax,(%esp)
  102f83:	e8 6c d4 ff ff       	call   1003f4 <_ZN6kernel9threadmgr3addEPNS_6threadE>
	thrdmgr.add(thrd01);
  102f88:	8b 45 a8             	mov    -0x58(%ebp),%eax
  102f8b:	89 44 24 04          	mov    %eax,0x4(%esp)
  102f8f:	8b 45 b8             	mov    -0x48(%ebp),%eax
  102f92:	89 04 24             	mov    %eax,(%esp)
  102f95:	e8 5a d4 ff ff       	call   1003f4 <_ZN6kernel9threadmgr3addEPNS_6threadE>
	thrdmgr.add(thrd02);
  102f9a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
  102f9d:	89 44 24 04          	mov    %eax,0x4(%esp)
  102fa1:	8b 45 b8             	mov    -0x48(%ebp),%eax
  102fa4:	89 04 24             	mov    %eax,(%esp)
  102fa7:	e8 48 d4 ff ff       	call   1003f4 <_ZN6kernel9threadmgr3addEPNS_6threadE>
	thrdmgr.add(thrd03);
  102fac:	8b 45 a0             	mov    -0x60(%ebp),%eax
  102faf:	89 44 24 04          	mov    %eax,0x4(%esp)
  102fb3:	8b 45 b8             	mov    -0x48(%ebp),%eax
  102fb6:	89 04 24             	mov    %eax,(%esp)
  102fb9:	e8 36 d4 ff ff       	call   1003f4 <_ZN6kernel9threadmgr3addEPNS_6threadE>
	thrdmgr.add(thrd04);
  102fbe:	8b 45 9c             	mov    -0x64(%ebp),%eax
  102fc1:	89 44 24 04          	mov    %eax,0x4(%esp)
  102fc5:	8b 45 b8             	mov    -0x48(%ebp),%eax
  102fc8:	89 04 24             	mov    %eax,(%esp)
  102fcb:	e8 24 d4 ff ff       	call   1003f4 <_ZN6kernel9threadmgr3addEPNS_6threadE>
	

	/*
	Spawn new process
	*/
	process *proc1 = new process("proc1", "", 0, &kernel_context);
  102fd0:	c7 04 24 68 04 00 00 	movl   $0x468,(%esp)
  102fd7:	e8 c4 f1 ff ff       	call   1021a0 <_Znwj>
  102fdc:	89 c3                	mov    %eax,%ebx
  102fde:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
  102fe4:	89 44 24 10          	mov    %eax,0x10(%esp)
  102fe8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  102fef:	00 
  102ff0:	c7 44 24 08 c6 e6 10 	movl   $0x10e6c6,0x8(%esp)
  102ff7:	00 
  102ff8:	c7 44 24 04 cd e6 10 	movl   $0x10e6cd,0x4(%esp)
  102fff:	00 
  103000:	89 1c 24             	mov    %ebx,(%esp)
  103003:	e8 a2 e4 ff ff       	call   1014aa <_ZN6kernel7processC1EPKcS2_jPN3hal3x867contextE>
  103008:	89 5d 98             	mov    %ebx,-0x68(%ebp)

	procmgr.add(proc1);
  10300b:	8b 45 98             	mov    -0x68(%ebp),%eax
  10300e:	89 44 24 04          	mov    %eax,0x4(%esp)
  103012:	8b 45 bc             	mov    -0x44(%ebp),%eax
  103015:	89 04 24             	mov    %eax,(%esp)
  103018:	e8 db e6 ff ff       	call   1016f8 <_ZN6kernel10processmgr3addEPNS_7processE>

	thread *thrd10 = new thread(proc1, (uintptr_t)thread_entry, thread::kernel);
  10301d:	c7 04 24 1c 00 00 00 	movl   $0x1c,(%esp)
  103024:	e8 77 f1 ff ff       	call   1021a0 <_Znwj>
  103029:	89 c3                	mov    %eax,%ebx
  10302b:	b8 38 22 10 00       	mov    $0x102238,%eax
  103030:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  103037:	00 
  103038:	89 44 24 08          	mov    %eax,0x8(%esp)
  10303c:	8b 45 98             	mov    -0x68(%ebp),%eax
  10303f:	89 44 24 04          	mov    %eax,0x4(%esp)
  103043:	89 1c 24             	mov    %ebx,(%esp)
  103046:	e8 ff d0 ff ff       	call   10014a <_ZN6kernel6threadC1EPNS_7processEjj>
  10304b:	89 5d 94             	mov    %ebx,-0x6c(%ebp)
	thread *thrd11 = new thread(proc1, (uintptr_t)thread_entry, thread::kernel);
  10304e:	c7 04 24 1c 00 00 00 	movl   $0x1c,(%esp)
  103055:	e8 46 f1 ff ff       	call   1021a0 <_Znwj>
  10305a:	89 c3                	mov    %eax,%ebx
  10305c:	b8 38 22 10 00       	mov    $0x102238,%eax
  103061:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  103068:	00 
  103069:	89 44 24 08          	mov    %eax,0x8(%esp)
  10306d:	8b 45 98             	mov    -0x68(%ebp),%eax
  103070:	89 44 24 04          	mov    %eax,0x4(%esp)
  103074:	89 1c 24             	mov    %ebx,(%esp)
  103077:	e8 ce d0 ff ff       	call   10014a <_ZN6kernel6threadC1EPNS_7processEjj>
  10307c:	89 5d 90             	mov    %ebx,-0x70(%ebp)
	thread *thrd12 = new thread(proc1, (uintptr_t)thread_entry, thread::kernel);
  10307f:	c7 04 24 1c 00 00 00 	movl   $0x1c,(%esp)
  103086:	e8 15 f1 ff ff       	call   1021a0 <_Znwj>
  10308b:	89 c3                	mov    %eax,%ebx
  10308d:	b8 38 22 10 00       	mov    $0x102238,%eax
  103092:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  103099:	00 
  10309a:	89 44 24 08          	mov    %eax,0x8(%esp)
  10309e:	8b 45 98             	mov    -0x68(%ebp),%eax
  1030a1:	89 44 24 04          	mov    %eax,0x4(%esp)
  1030a5:	89 1c 24             	mov    %ebx,(%esp)
  1030a8:	e8 9d d0 ff ff       	call   10014a <_ZN6kernel6threadC1EPNS_7processEjj>
  1030ad:	89 5d 8c             	mov    %ebx,-0x74(%ebp)
	thread *thrd13 = new thread(proc1, (uintptr_t)thread_entry, thread::kernel);
  1030b0:	c7 04 24 1c 00 00 00 	movl   $0x1c,(%esp)
  1030b7:	e8 e4 f0 ff ff       	call   1021a0 <_Znwj>
  1030bc:	89 c3                	mov    %eax,%ebx
  1030be:	b8 38 22 10 00       	mov    $0x102238,%eax
  1030c3:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  1030ca:	00 
  1030cb:	89 44 24 08          	mov    %eax,0x8(%esp)
  1030cf:	8b 45 98             	mov    -0x68(%ebp),%eax
  1030d2:	89 44 24 04          	mov    %eax,0x4(%esp)
  1030d6:	89 1c 24             	mov    %ebx,(%esp)
  1030d9:	e8 6c d0 ff ff       	call   10014a <_ZN6kernel6threadC1EPNS_7processEjj>
  1030de:	89 5d 88             	mov    %ebx,-0x78(%ebp)
	thread *thrd14 = new thread(proc1, (uintptr_t)thread_entry, thread::kernel);
  1030e1:	c7 04 24 1c 00 00 00 	movl   $0x1c,(%esp)
  1030e8:	e8 b3 f0 ff ff       	call   1021a0 <_Znwj>
  1030ed:	89 c3                	mov    %eax,%ebx
  1030ef:	b8 38 22 10 00       	mov    $0x102238,%eax
  1030f4:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
  1030fb:	00 
  1030fc:	89 44 24 08          	mov    %eax,0x8(%esp)
  103100:	8b 45 98             	mov    -0x68(%ebp),%eax
  103103:	89 44 24 04          	mov    %eax,0x4(%esp)
  103107:	89 1c 24             	mov    %ebx,(%esp)
  10310a:	e8 3b d0 ff ff       	call   10014a <_ZN6kernel6threadC1EPNS_7processEjj>
  10310f:	89 5d 84             	mov    %ebx,-0x7c(%ebp)

	scheduler.add(thrd10);
  103112:	8b 45 94             	mov    -0x6c(%ebp),%eax
  103115:	89 44 24 04          	mov    %eax,0x4(%esp)
  103119:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  10311c:	89 04 24             	mov    %eax,(%esp)
  10311f:	e8 26 e1 ff ff       	call   10124a <_ZN6kernel9scheduler3addEPNS_6threadE>
	scheduler.add(thrd11);
  103124:	8b 45 90             	mov    -0x70(%ebp),%eax
  103127:	89 44 24 04          	mov    %eax,0x4(%esp)
  10312b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  10312e:	89 04 24             	mov    %eax,(%esp)
  103131:	e8 14 e1 ff ff       	call   10124a <_ZN6kernel9scheduler3addEPNS_6threadE>
	scheduler.add(thrd12);
  103136:	8b 45 8c             	mov    -0x74(%ebp),%eax
  103139:	89 44 24 04          	mov    %eax,0x4(%esp)
  10313d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  103140:	89 04 24             	mov    %eax,(%esp)
  103143:	e8 02 e1 ff ff       	call   10124a <_ZN6kernel9scheduler3addEPNS_6threadE>
	scheduler.add(thrd13);
  103148:	8b 45 88             	mov    -0x78(%ebp),%eax
  10314b:	89 44 24 04          	mov    %eax,0x4(%esp)
  10314f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  103152:	89 04 24             	mov    %eax,(%esp)
  103155:	e8 f0 e0 ff ff       	call   10124a <_ZN6kernel9scheduler3addEPNS_6threadE>
	scheduler.add(thrd14);
  10315a:	8b 45 84             	mov    -0x7c(%ebp),%eax
  10315d:	89 44 24 04          	mov    %eax,0x4(%esp)
  103161:	8b 45 b4             	mov    -0x4c(%ebp),%eax
  103164:	89 04 24             	mov    %eax,(%esp)
  103167:	e8 de e0 ff ff       	call   10124a <_ZN6kernel9scheduler3addEPNS_6threadE>

	thrdmgr.add(thrd10);
  10316c:	8b 45 94             	mov    -0x6c(%ebp),%eax
  10316f:	89 44 24 04          	mov    %eax,0x4(%esp)
  103173:	8b 45 b8             	mov    -0x48(%ebp),%eax
  103176:	89 04 24             	mov    %eax,(%esp)
  103179:	e8 76 d2 ff ff       	call   1003f4 <_ZN6kernel9threadmgr3addEPNS_6threadE>
	thrdmgr.add(thrd11);
  10317e:	8b 45 90             	mov    -0x70(%ebp),%eax
  103181:	89 44 24 04          	mov    %eax,0x4(%esp)
  103185:	8b 45 b8             	mov    -0x48(%ebp),%eax
  103188:	89 04 24             	mov    %eax,(%esp)
  10318b:	e8 64 d2 ff ff       	call   1003f4 <_ZN6kernel9threadmgr3addEPNS_6threadE>
	thrdmgr.add(thrd12);
  103190:	8b 45 8c             	mov    -0x74(%ebp),%eax
  103193:	89 44 24 04          	mov    %eax,0x4(%esp)
  103197:	8b 45 b8             	mov    -0x48(%ebp),%eax
  10319a:	89 04 24             	mov    %eax,(%esp)
  10319d:	e8 52 d2 ff ff       	call   1003f4 <_ZN6kernel9threadmgr3addEPNS_6threadE>
	thrdmgr.add(thrd13);
  1031a2:	8b 45 88             	mov    -0x78(%ebp),%eax
  1031a5:	89 44 24 04          	mov    %eax,0x4(%esp)
  1031a9:	8b 45 b8             	mov    -0x48(%ebp),%eax
  1031ac:	89 04 24             	mov    %eax,(%esp)
  1031af:	e8 40 d2 ff ff       	call   1003f4 <_ZN6kernel9threadmgr3addEPNS_6threadE>
	thrdmgr.add(thrd14);
  1031b4:	8b 45 84             	mov    -0x7c(%ebp),%eax
  1031b7:	89 44 24 04          	mov    %eax,0x4(%esp)
  1031bb:	8b 45 b8             	mov    -0x48(%ebp),%eax
  1031be:	89 04 24             	mov    %eax,(%esp)
  1031c1:	e8 2e d2 ff ff       	call   1003f4 <_ZN6kernel9threadmgr3addEPNS_6threadE>

	/*
	Initialise the syscall interface
	*/
	intr::handler(0xFF, []( cpu::cpu_state *cpu ) { return syscall::handle(cpu); });
  1031c6:	8d 85 7e ff ff ff    	lea    -0x82(%ebp),%eax
  1031cc:	89 04 24             	mov    %eax,(%esp)
  1031cf:	e8 ca f0 ff ff       	call   10229e <_ZZ4initENKUlPN3hal3x863cpu9cpu_stateEE_cvPFS3_S3_EEv>
  1031d4:	89 44 24 04          	mov    %eax,0x4(%esp)
  1031d8:	c7 04 24 ff 00 00 00 	movl   $0xff,(%esp)
  1031df:	e8 07 09 00 00       	call   103aeb <_ZN3hal3x864intr7handlerEjPFPNS0_3cpu9cpu_stateES4_E>
	intr::handler(0xEE, []( cpu::cpu_state *cpu ) { kernel::scheduler &sched = kernel::scheduler::instance(); return sched.schedule(cpu); });
  1031e4:	8d 85 7f ff ff ff    	lea    -0x81(%ebp),%eax
  1031ea:	89 04 24             	mov    %eax,(%esp)
  1031ed:	e8 f4 f0 ff ff       	call   1022e6 <_ZZ4initENKUlPN3hal3x863cpu9cpu_stateEE0_cvPFS3_S3_EEv>
  1031f2:	89 44 24 04          	mov    %eax,0x4(%esp)
  1031f6:	c7 04 24 ee 00 00 00 	movl   $0xee,(%esp)
  1031fd:	e8 e9 08 00 00       	call   103aeb <_ZN3hal3x864intr7handlerEjPFPNS0_3cpu9cpu_stateES4_E>

	

	tar *initrd = new tar(mods[0].mod_start);
  103202:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
  103209:	e8 92 ef ff ff       	call   1021a0 <_Znwj>
  10320e:	89 c3                	mov    %eax,%ebx
  103210:	8b 45 c0             	mov    -0x40(%ebp),%eax
  103213:	8b 00                	mov    (%eax),%eax
  103215:	89 44 24 04          	mov    %eax,0x4(%esp)
  103219:	89 1c 24             	mov    %ebx,(%esp)
  10321c:	e8 9d ed ff ff       	call   101fbe <_ZN6kernel3tarC1Ej>
  103221:	89 5d 80             	mov    %ebx,-0x80(%ebp)

	char buffer[512];

	initrd->read("file.txt", buffer, 512);
  103224:	c7 44 24 0c 00 02 00 	movl   $0x200,0xc(%esp)
  10322b:	00 
  10322c:	8d 85 5c fd ff ff    	lea    -0x2a4(%ebp),%eax
  103232:	89 44 24 08          	mov    %eax,0x8(%esp)
  103236:	c7 44 24 04 d3 e6 10 	movl   $0x10e6d3,0x4(%esp)
  10323d:	00 
  10323e:	8b 45 80             	mov    -0x80(%ebp),%eax
  103241:	89 04 24             	mov    %eax,(%esp)
  103244:	e8 53 ee ff ff       	call   10209c <_ZN6kernel3tar4readEPKcPcj>

	kout << buffer << output::endl;
  103249:	8d 85 5c fd ff ff    	lea    -0x2a4(%ebp),%eax
  10324f:	89 44 24 04          	mov    %eax,0x4(%esp)
  103253:	c7 04 24 50 30 13 00 	movl   $0x133050,(%esp)
  10325a:	e8 5f d8 ff ff       	call   100abe <_ZN6kernel6outputlsEPKc>
  10325f:	c7 44 24 04 d1 cb 10 	movl   $0x10cbd1,0x4(%esp)
  103266:	00 
  103267:	89 04 24             	mov    %eax,(%esp)
  10326a:	e8 4f 99 00 00       	call   10cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>

	delete initrd;
  10326f:	8b 45 80             	mov    -0x80(%ebp),%eax
  103272:	89 04 24             	mov    %eax,(%esp)
  103275:	e8 5c ef ff ff       	call   1021d6 <_ZdlPv>

	/*
	Enable interrupts; give control to threads
	*/
	intr::enable();
  10327a:	e8 cf 99 00 00       	call   10cc4e <_ZN3hal3x864intr6enableEv>
  10327f:	eb fe                	jmp    10327f <init+0xf8f>

00103281 <_ZN5tools4stoiEPKcj>:
#include "include/number.hpp"

int tools::stoi( const char *str, unsigned int base )
{
  103281:	55                   	push   %ebp
  103282:	89 e5                	mov    %esp,%ebp
  103284:	83 ec 10             	sub    $0x10,%esp
	int number = 0;
  103287:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	
	int sign = 1;
  10328e:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	
	while( *str == ' ' || *str == '\t' || *str == '\r' || *str == '\n' || *str == '\v' )
  103295:	eb 04                	jmp    10329b <_ZN5tools4stoiEPKcj+0x1a>
	{
		str++;
  103297:	83 45 08 01          	addl   $0x1,0x8(%ebp)
{
	int number = 0;
	
	int sign = 1;
	
	while( *str == ' ' || *str == '\t' || *str == '\r' || *str == '\n' || *str == '\v' )
  10329b:	8b 45 08             	mov    0x8(%ebp),%eax
  10329e:	0f b6 00             	movzbl (%eax),%eax
  1032a1:	3c 20                	cmp    $0x20,%al
  1032a3:	74 f2                	je     103297 <_ZN5tools4stoiEPKcj+0x16>
  1032a5:	8b 45 08             	mov    0x8(%ebp),%eax
  1032a8:	0f b6 00             	movzbl (%eax),%eax
  1032ab:	3c 09                	cmp    $0x9,%al
  1032ad:	74 e8                	je     103297 <_ZN5tools4stoiEPKcj+0x16>
  1032af:	8b 45 08             	mov    0x8(%ebp),%eax
  1032b2:	0f b6 00             	movzbl (%eax),%eax
  1032b5:	3c 0d                	cmp    $0xd,%al
  1032b7:	74 de                	je     103297 <_ZN5tools4stoiEPKcj+0x16>
  1032b9:	8b 45 08             	mov    0x8(%ebp),%eax
  1032bc:	0f b6 00             	movzbl (%eax),%eax
  1032bf:	3c 0a                	cmp    $0xa,%al
  1032c1:	74 d4                	je     103297 <_ZN5tools4stoiEPKcj+0x16>
  1032c3:	8b 45 08             	mov    0x8(%ebp),%eax
  1032c6:	0f b6 00             	movzbl (%eax),%eax
  1032c9:	3c 0b                	cmp    $0xb,%al
  1032cb:	74 ca                	je     103297 <_ZN5tools4stoiEPKcj+0x16>
	{
		str++;
	}

	if(*str == '-')
  1032cd:	8b 45 08             	mov    0x8(%ebp),%eax
  1032d0:	0f b6 00             	movzbl (%eax),%eax
  1032d3:	3c 2d                	cmp    $0x2d,%al
  1032d5:	75 0b                	jne    1032e2 <_ZN5tools4stoiEPKcj+0x61>
	{
		sign = -1;
  1032d7:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

		str++;
  1032de:	83 45 08 01          	addl   $0x1,0x8(%ebp)
	}

	while(*str != '\0')
  1032e2:	e9 ac 00 00 00       	jmp    103393 <_ZN5tools4stoiEPKcj+0x112>
	{
		unsigned char digit = *str;
  1032e7:	8b 45 08             	mov    0x8(%ebp),%eax
  1032ea:	0f b6 00             	movzbl (%eax),%eax
  1032ed:	88 45 f7             	mov    %al,-0x9(%ebp)

		if(digit >= '0' && digit <= '9')
  1032f0:	80 7d f7 2f          	cmpb   $0x2f,-0x9(%ebp)
  1032f4:	76 2c                	jbe    103322 <_ZN5tools4stoiEPKcj+0xa1>
  1032f6:	80 7d f7 39          	cmpb   $0x39,-0x9(%ebp)
  1032fa:	77 26                	ja     103322 <_ZN5tools4stoiEPKcj+0xa1>
		{
			if((unsigned char)(digit - '0') < base)
  1032fc:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  103300:	83 e8 30             	sub    $0x30,%eax
  103303:	0f b6 c0             	movzbl %al,%eax
  103306:	3b 45 0c             	cmp    0xc(%ebp),%eax
  103309:	73 15                	jae    103320 <_ZN5tools4stoiEPKcj+0x9f>
			{
				number = number * base + (digit - '0');
  10330b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10330e:	0f af 45 0c          	imul   0xc(%ebp),%eax
  103312:	89 c2                	mov    %eax,%edx
  103314:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  103318:	01 d0                	add    %edx,%eax
  10331a:	83 e8 30             	sub    $0x30,%eax
  10331d:	89 45 fc             	mov    %eax,-0x4(%ebp)
	{
		unsigned char digit = *str;

		if(digit >= '0' && digit <= '9')
		{
			if((unsigned char)(digit - '0') < base)
  103320:	eb 6d                	jmp    10338f <_ZN5tools4stoiEPKcj+0x10e>
			{
				number = number * base + (digit - '0');
			}
		}
		else if(digit >= 'A' && digit <= 'Z')
  103322:	80 7d f7 40          	cmpb   $0x40,-0x9(%ebp)
  103326:	76 2c                	jbe    103354 <_ZN5tools4stoiEPKcj+0xd3>
  103328:	80 7d f7 5a          	cmpb   $0x5a,-0x9(%ebp)
  10332c:	77 26                	ja     103354 <_ZN5tools4stoiEPKcj+0xd3>
		{
			if((unsigned char)(digit - 55) < base)
  10332e:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  103332:	83 e8 37             	sub    $0x37,%eax
  103335:	0f b6 c0             	movzbl %al,%eax
  103338:	3b 45 0c             	cmp    0xc(%ebp),%eax
  10333b:	73 15                	jae    103352 <_ZN5tools4stoiEPKcj+0xd1>
			{
				number = number * base + (digit - 55);
  10333d:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103340:	0f af 45 0c          	imul   0xc(%ebp),%eax
  103344:	89 c2                	mov    %eax,%edx
  103346:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  10334a:	01 d0                	add    %edx,%eax
  10334c:	83 e8 37             	sub    $0x37,%eax
  10334f:	89 45 fc             	mov    %eax,-0x4(%ebp)
				number = number * base + (digit - '0');
			}
		}
		else if(digit >= 'A' && digit <= 'Z')
		{
			if((unsigned char)(digit - 55) < base)
  103352:	eb 3b                	jmp    10338f <_ZN5tools4stoiEPKcj+0x10e>
			{
				number = number * base + (digit - 55);
			}
		}
		else if(digit >= 'a' && digit <= 'z')
  103354:	80 7d f7 60          	cmpb   $0x60,-0x9(%ebp)
  103358:	76 2c                	jbe    103386 <_ZN5tools4stoiEPKcj+0x105>
  10335a:	80 7d f7 7a          	cmpb   $0x7a,-0x9(%ebp)
  10335e:	77 26                	ja     103386 <_ZN5tools4stoiEPKcj+0x105>
		{
			if((unsigned char)(digit - 87) < base)
  103360:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  103364:	83 e8 57             	sub    $0x57,%eax
  103367:	0f b6 c0             	movzbl %al,%eax
  10336a:	3b 45 0c             	cmp    0xc(%ebp),%eax
  10336d:	73 15                	jae    103384 <_ZN5tools4stoiEPKcj+0x103>
			{
				number = number * base + (digit - 87);
  10336f:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103372:	0f af 45 0c          	imul   0xc(%ebp),%eax
  103376:	89 c2                	mov    %eax,%edx
  103378:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
  10337c:	01 d0                	add    %edx,%eax
  10337e:	83 e8 57             	sub    $0x57,%eax
  103381:	89 45 fc             	mov    %eax,-0x4(%ebp)
				number = number * base + (digit - 55);
			}
		}
		else if(digit >= 'a' && digit <= 'z')
		{
			if((unsigned char)(digit - 87) < base)
  103384:	eb 09                	jmp    10338f <_ZN5tools4stoiEPKcj+0x10e>
				number = number * base + (digit - 87);
			}
		}
		else
		{
			return (number * sign);
  103386:	8b 45 fc             	mov    -0x4(%ebp),%eax
  103389:	0f af 45 f8          	imul   -0x8(%ebp),%eax
  10338d:	eb 19                	jmp    1033a8 <_ZN5tools4stoiEPKcj+0x127>
		}

		str++;
  10338f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
		sign = -1;

		str++;
	}

	while(*str != '\0')
  103393:	8b 45 08             	mov    0x8(%ebp),%eax
  103396:	0f b6 00             	movzbl (%eax),%eax
  103399:	84 c0                	test   %al,%al
  10339b:	0f 85 46 ff ff ff    	jne    1032e7 <_ZN5tools4stoiEPKcj+0x66>
		}

		str++;
	}

	return (number * sign);
  1033a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1033a4:	0f af 45 f8          	imul   -0x8(%ebp),%eax
}
  1033a8:	c9                   	leave  
  1033a9:	c3                   	ret    

001033aa <_ZN5tools3bcd6decodeEh>:
#include "include/bcd.hpp"

uint8_t  tools::bcd::decode( uint8_t  input )
{
  1033aa:	55                   	push   %ebp
  1033ab:	89 e5                	mov    %esp,%ebp
  1033ad:	83 ec 14             	sub    $0x14,%esp
  1033b0:	8b 45 08             	mov    0x8(%ebp),%eax
  1033b3:	88 45 ec             	mov    %al,-0x14(%ebp)
	uint8_t output = 0;
  1033b6:	c6 45 ff 00          	movb   $0x0,-0x1(%ebp)

	output = output * 10 + ((input & 0xF0) >> 4);
  1033ba:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
  1033be:	89 d0                	mov    %edx,%eax
  1033c0:	c1 e0 02             	shl    $0x2,%eax
  1033c3:	01 d0                	add    %edx,%eax
  1033c5:	01 c0                	add    %eax,%eax
  1033c7:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
  1033cb:	c0 ea 04             	shr    $0x4,%dl
  1033ce:	01 d0                	add    %edx,%eax
  1033d0:	88 45 ff             	mov    %al,-0x1(%ebp)
	output = output * 10 + ((input & 0x0F) >> 0);
  1033d3:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
  1033d7:	89 d0                	mov    %edx,%eax
  1033d9:	c1 e0 02             	shl    $0x2,%eax
  1033dc:	01 d0                	add    %edx,%eax
  1033de:	01 c0                	add    %eax,%eax
  1033e0:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
  1033e4:	83 e2 0f             	and    $0xf,%edx
  1033e7:	01 d0                	add    %edx,%eax
  1033e9:	88 45 ff             	mov    %al,-0x1(%ebp)
	
	return output;
  1033ec:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
  1033f0:	c9                   	leave  
  1033f1:	c3                   	ret    

001033f2 <_ZN5tools3bcd6decodeEt>:

uint16_t tools::bcd::decode( uint16_t input )
{
  1033f2:	55                   	push   %ebp
  1033f3:	89 e5                	mov    %esp,%ebp
  1033f5:	83 ec 14             	sub    $0x14,%esp
  1033f8:	8b 45 08             	mov    0x8(%ebp),%eax
  1033fb:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	uint16_t output = 0;
  1033ff:	66 c7 45 fe 00 00    	movw   $0x0,-0x2(%ebp)

	output = output * 10 + ((input & 0xF000) >> 12);
  103405:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
  103409:	89 d0                	mov    %edx,%eax
  10340b:	c1 e0 02             	shl    $0x2,%eax
  10340e:	01 d0                	add    %edx,%eax
  103410:	01 c0                	add    %eax,%eax
  103412:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
  103416:	66 c1 ea 0c          	shr    $0xc,%dx
  10341a:	01 d0                	add    %edx,%eax
  10341c:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	output = output * 10 + ((input & 0x0F00) >> 8);
  103420:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
  103424:	89 d0                	mov    %edx,%eax
  103426:	c1 e0 02             	shl    $0x2,%eax
  103429:	01 d0                	add    %edx,%eax
  10342b:	01 c0                	add    %eax,%eax
  10342d:	89 c2                	mov    %eax,%edx
  10342f:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
  103433:	25 00 0f 00 00       	and    $0xf00,%eax
  103438:	c1 f8 08             	sar    $0x8,%eax
  10343b:	01 d0                	add    %edx,%eax
  10343d:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	output = output * 10 + ((input & 0x00F0) >> 4);
  103441:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
  103445:	89 d0                	mov    %edx,%eax
  103447:	c1 e0 02             	shl    $0x2,%eax
  10344a:	01 d0                	add    %edx,%eax
  10344c:	01 c0                	add    %eax,%eax
  10344e:	89 c2                	mov    %eax,%edx
  103450:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
  103454:	25 f0 00 00 00       	and    $0xf0,%eax
  103459:	c1 f8 04             	sar    $0x4,%eax
  10345c:	01 d0                	add    %edx,%eax
  10345e:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	output = output * 10 + ((input & 0x000F) >> 0);
  103462:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
  103466:	89 d0                	mov    %edx,%eax
  103468:	c1 e0 02             	shl    $0x2,%eax
  10346b:	01 d0                	add    %edx,%eax
  10346d:	01 c0                	add    %eax,%eax
  10346f:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
  103473:	83 e2 0f             	and    $0xf,%edx
  103476:	01 d0                	add    %edx,%eax
  103478:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	
	return output;
  10347c:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
}
  103480:	c9                   	leave  
  103481:	c3                   	ret    

00103482 <_ZN5tools3bcd6decodeEj>:

uint32_t tools::bcd::decode( uint32_t input )
{
  103482:	55                   	push   %ebp
  103483:	89 e5                	mov    %esp,%ebp
  103485:	83 ec 10             	sub    $0x10,%esp
	uint32_t output = 0;
  103488:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

	output = output * 10 + ((input & 0xF0000000) >> 28);
  10348f:	8b 55 fc             	mov    -0x4(%ebp),%edx
  103492:	89 d0                	mov    %edx,%eax
  103494:	c1 e0 02             	shl    $0x2,%eax
  103497:	01 d0                	add    %edx,%eax
  103499:	01 c0                	add    %eax,%eax
  10349b:	8b 55 08             	mov    0x8(%ebp),%edx
  10349e:	c1 ea 1c             	shr    $0x1c,%edx
  1034a1:	01 d0                	add    %edx,%eax
  1034a3:	89 45 fc             	mov    %eax,-0x4(%ebp)
	output = output * 10 + ((input & 0x0F000000) >> 24);
  1034a6:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1034a9:	89 d0                	mov    %edx,%eax
  1034ab:	c1 e0 02             	shl    $0x2,%eax
  1034ae:	01 d0                	add    %edx,%eax
  1034b0:	01 c0                	add    %eax,%eax
  1034b2:	8b 55 08             	mov    0x8(%ebp),%edx
  1034b5:	81 e2 00 00 00 0f    	and    $0xf000000,%edx
  1034bb:	c1 ea 18             	shr    $0x18,%edx
  1034be:	01 d0                	add    %edx,%eax
  1034c0:	89 45 fc             	mov    %eax,-0x4(%ebp)
	output = output * 10 + ((input & 0x00F00000) >> 20);
  1034c3:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1034c6:	89 d0                	mov    %edx,%eax
  1034c8:	c1 e0 02             	shl    $0x2,%eax
  1034cb:	01 d0                	add    %edx,%eax
  1034cd:	01 c0                	add    %eax,%eax
  1034cf:	8b 55 08             	mov    0x8(%ebp),%edx
  1034d2:	81 e2 00 00 f0 00    	and    $0xf00000,%edx
  1034d8:	c1 ea 14             	shr    $0x14,%edx
  1034db:	01 d0                	add    %edx,%eax
  1034dd:	89 45 fc             	mov    %eax,-0x4(%ebp)
	output = output * 10 + ((input & 0x000F0000) >> 16);
  1034e0:	8b 55 fc             	mov    -0x4(%ebp),%edx
  1034e3:	89 d0                	mov    %edx,%eax
  1034e5:	c1 e0 02             	shl    $0x2,%eax
  1034e8:	01 d0                	add    %edx,%eax
  1034ea:	01 c0                	add    %eax,%eax
  1034ec:	8b 55 08             	mov    0x8(%ebp),%edx
  1034ef:	81 e2 00 00 0f 00    	and    $0xf0000,%edx
  1034f5:	c1 ea 10             	shr    $0x10,%edx
  1034f8:	01 d0                	add    %edx,%eax
  1034fa:	89 45 fc             	mov    %eax,-0x4(%ebp)
	output = output * 10 + ((input & 0x0000F000) >> 12);
  1034fd:	8b 55 fc             	mov    -0x4(%ebp),%edx
  103500:	89 d0                	mov    %edx,%eax
  103502:	c1 e0 02             	shl    $0x2,%eax
  103505:	01 d0                	add    %edx,%eax
  103507:	01 c0                	add    %eax,%eax
  103509:	8b 55 08             	mov    0x8(%ebp),%edx
  10350c:	81 e2 00 f0 00 00    	and    $0xf000,%edx
  103512:	c1 ea 0c             	shr    $0xc,%edx
  103515:	01 d0                	add    %edx,%eax
  103517:	89 45 fc             	mov    %eax,-0x4(%ebp)
	output = output * 10 + ((input & 0x00000F00) >> 8);
  10351a:	8b 55 fc             	mov    -0x4(%ebp),%edx
  10351d:	89 d0                	mov    %edx,%eax
  10351f:	c1 e0 02             	shl    $0x2,%eax
  103522:	01 d0                	add    %edx,%eax
  103524:	01 c0                	add    %eax,%eax
  103526:	8b 55 08             	mov    0x8(%ebp),%edx
  103529:	81 e2 00 0f 00 00    	and    $0xf00,%edx
  10352f:	c1 ea 08             	shr    $0x8,%edx
  103532:	01 d0                	add    %edx,%eax
  103534:	89 45 fc             	mov    %eax,-0x4(%ebp)
	output = output * 10 + ((input & 0x000000F0) >> 4);
  103537:	8b 55 fc             	mov    -0x4(%ebp),%edx
  10353a:	89 d0                	mov    %edx,%eax
  10353c:	c1 e0 02             	shl    $0x2,%eax
  10353f:	01 d0                	add    %edx,%eax
  103541:	01 c0                	add    %eax,%eax
  103543:	8b 55 08             	mov    0x8(%ebp),%edx
  103546:	81 e2 f0 00 00 00    	and    $0xf0,%edx
  10354c:	c1 ea 04             	shr    $0x4,%edx
  10354f:	01 d0                	add    %edx,%eax
  103551:	89 45 fc             	mov    %eax,-0x4(%ebp)
	output = output * 10 + ((input & 0x0000000F) >> 0);
  103554:	8b 55 fc             	mov    -0x4(%ebp),%edx
  103557:	89 d0                	mov    %edx,%eax
  103559:	c1 e0 02             	shl    $0x2,%eax
  10355c:	01 d0                	add    %edx,%eax
  10355e:	01 c0                	add    %eax,%eax
  103560:	8b 55 08             	mov    0x8(%ebp),%edx
  103563:	83 e2 0f             	and    $0xf,%edx
  103566:	01 d0                	add    %edx,%eax
  103568:	89 45 fc             	mov    %eax,-0x4(%ebp)
	
	return output;
  10356b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  10356e:	c9                   	leave  
  10356f:	c3                   	ret    

00103570 <_ZN5tools3bcd6encodeEh>:

uint8_t  tools::bcd::encode( uint8_t  input )
{
  103570:	55                   	push   %ebp
  103571:	89 e5                	mov    %esp,%ebp
  103573:	83 ec 14             	sub    $0x14,%esp
  103576:	8b 45 08             	mov    0x8(%ebp),%eax
  103579:	88 45 ec             	mov    %al,-0x14(%ebp)
	uint8_t output = 0;
  10357c:	c6 45 ff 00          	movb   $0x0,-0x1(%ebp)

	output |= ((input % 10) << 0) & 0x0F;
  103580:	0f b6 4d ec          	movzbl -0x14(%ebp),%ecx
  103584:	0f b6 d1             	movzbl %cl,%edx
  103587:	89 d0                	mov    %edx,%eax
  103589:	c1 e0 02             	shl    $0x2,%eax
  10358c:	01 d0                	add    %edx,%eax
  10358e:	c1 e0 03             	shl    $0x3,%eax
  103591:	01 d0                	add    %edx,%eax
  103593:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  10359a:	01 d0                	add    %edx,%eax
  10359c:	66 c1 e8 08          	shr    $0x8,%ax
  1035a0:	89 c2                	mov    %eax,%edx
  1035a2:	c0 ea 03             	shr    $0x3,%dl
  1035a5:	89 d0                	mov    %edx,%eax
  1035a7:	c1 e0 02             	shl    $0x2,%eax
  1035aa:	01 d0                	add    %edx,%eax
  1035ac:	01 c0                	add    %eax,%eax
  1035ae:	29 c1                	sub    %eax,%ecx
  1035b0:	89 ca                	mov    %ecx,%edx
  1035b2:	89 d0                	mov    %edx,%eax
  1035b4:	83 e0 0f             	and    $0xf,%eax
  1035b7:	89 c2                	mov    %eax,%edx
  1035b9:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
  1035bd:	09 d0                	or     %edx,%eax
  1035bf:	88 45 ff             	mov    %al,-0x1(%ebp)

	input  /= 10; 
  1035c2:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
  1035c6:	0f b6 d0             	movzbl %al,%edx
  1035c9:	89 d0                	mov    %edx,%eax
  1035cb:	c1 e0 02             	shl    $0x2,%eax
  1035ce:	01 d0                	add    %edx,%eax
  1035d0:	c1 e0 03             	shl    $0x3,%eax
  1035d3:	01 d0                	add    %edx,%eax
  1035d5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  1035dc:	01 d0                	add    %edx,%eax
  1035de:	66 c1 e8 08          	shr    $0x8,%ax
  1035e2:	c0 e8 03             	shr    $0x3,%al
  1035e5:	88 45 ec             	mov    %al,-0x14(%ebp)

	output |= ((input % 10) << 4) & 0xF0;
  1035e8:	0f b6 4d ec          	movzbl -0x14(%ebp),%ecx
  1035ec:	0f b6 d1             	movzbl %cl,%edx
  1035ef:	89 d0                	mov    %edx,%eax
  1035f1:	c1 e0 02             	shl    $0x2,%eax
  1035f4:	01 d0                	add    %edx,%eax
  1035f6:	c1 e0 03             	shl    $0x3,%eax
  1035f9:	01 d0                	add    %edx,%eax
  1035fb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  103602:	01 d0                	add    %edx,%eax
  103604:	66 c1 e8 08          	shr    $0x8,%ax
  103608:	89 c2                	mov    %eax,%edx
  10360a:	c0 ea 03             	shr    $0x3,%dl
  10360d:	89 d0                	mov    %edx,%eax
  10360f:	c1 e0 02             	shl    $0x2,%eax
  103612:	01 d0                	add    %edx,%eax
  103614:	01 c0                	add    %eax,%eax
  103616:	29 c1                	sub    %eax,%ecx
  103618:	89 ca                	mov    %ecx,%edx
  10361a:	0f b6 c2             	movzbl %dl,%eax
  10361d:	c1 e0 04             	shl    $0x4,%eax
  103620:	89 c2                	mov    %eax,%edx
  103622:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
  103626:	09 d0                	or     %edx,%eax
  103628:	88 45 ff             	mov    %al,-0x1(%ebp)
	
	return output;
  10362b:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
  10362f:	c9                   	leave  
  103630:	c3                   	ret    

00103631 <_ZN5tools3bcd6encodeEt>:

uint16_t tools::bcd::encode( uint16_t input )
{
  103631:	55                   	push   %ebp
  103632:	89 e5                	mov    %esp,%ebp
  103634:	83 ec 14             	sub    $0x14,%esp
  103637:	8b 45 08             	mov    0x8(%ebp),%eax
  10363a:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	uint16_t output = 0;
  10363e:	66 c7 45 fe 00 00    	movw   $0x0,-0x2(%ebp)

	output |= ((input % 10) <<  0) & 0x000F;
  103644:	0f b7 4d ec          	movzwl -0x14(%ebp),%ecx
  103648:	0f b7 c1             	movzwl %cx,%eax
  10364b:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
  103651:	c1 e8 10             	shr    $0x10,%eax
  103654:	89 c2                	mov    %eax,%edx
  103656:	66 c1 ea 03          	shr    $0x3,%dx
  10365a:	89 d0                	mov    %edx,%eax
  10365c:	c1 e0 02             	shl    $0x2,%eax
  10365f:	01 d0                	add    %edx,%eax
  103661:	01 c0                	add    %eax,%eax
  103663:	29 c1                	sub    %eax,%ecx
  103665:	89 ca                	mov    %ecx,%edx
  103667:	89 d0                	mov    %edx,%eax
  103669:	83 e0 0f             	and    $0xf,%eax
  10366c:	89 c2                	mov    %eax,%edx
  10366e:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
  103672:	09 d0                	or     %edx,%eax
  103674:	66 89 45 fe          	mov    %ax,-0x2(%ebp)

	input  /= 10; 
  103678:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
  10367c:	0f b7 c0             	movzwl %ax,%eax
  10367f:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
  103685:	c1 e8 10             	shr    $0x10,%eax
  103688:	66 c1 e8 03          	shr    $0x3,%ax
  10368c:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	output |= ((input % 10) <<  4) & 0x00F0;
  103690:	0f b7 4d ec          	movzwl -0x14(%ebp),%ecx
  103694:	0f b7 c1             	movzwl %cx,%eax
  103697:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
  10369d:	c1 e8 10             	shr    $0x10,%eax
  1036a0:	89 c2                	mov    %eax,%edx
  1036a2:	66 c1 ea 03          	shr    $0x3,%dx
  1036a6:	89 d0                	mov    %edx,%eax
  1036a8:	c1 e0 02             	shl    $0x2,%eax
  1036ab:	01 d0                	add    %edx,%eax
  1036ad:	01 c0                	add    %eax,%eax
  1036af:	29 c1                	sub    %eax,%ecx
  1036b1:	89 ca                	mov    %ecx,%edx
  1036b3:	0f b7 c2             	movzwl %dx,%eax
  1036b6:	c1 e0 04             	shl    $0x4,%eax
  1036b9:	0f b6 d0             	movzbl %al,%edx
  1036bc:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
  1036c0:	09 d0                	or     %edx,%eax
  1036c2:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	
	input  /= 10; 
  1036c6:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
  1036ca:	0f b7 c0             	movzwl %ax,%eax
  1036cd:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
  1036d3:	c1 e8 10             	shr    $0x10,%eax
  1036d6:	66 c1 e8 03          	shr    $0x3,%ax
  1036da:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	output |= ((input % 10) <<  8) & 0x0F00;
  1036de:	0f b7 4d ec          	movzwl -0x14(%ebp),%ecx
  1036e2:	0f b7 c1             	movzwl %cx,%eax
  1036e5:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
  1036eb:	c1 e8 10             	shr    $0x10,%eax
  1036ee:	89 c2                	mov    %eax,%edx
  1036f0:	66 c1 ea 03          	shr    $0x3,%dx
  1036f4:	89 d0                	mov    %edx,%eax
  1036f6:	c1 e0 02             	shl    $0x2,%eax
  1036f9:	01 d0                	add    %edx,%eax
  1036fb:	01 c0                	add    %eax,%eax
  1036fd:	29 c1                	sub    %eax,%ecx
  1036ff:	89 ca                	mov    %ecx,%edx
  103701:	0f b7 c2             	movzwl %dx,%eax
  103704:	c1 e0 08             	shl    $0x8,%eax
  103707:	66 25 00 0f          	and    $0xf00,%ax
  10370b:	89 c2                	mov    %eax,%edx
  10370d:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
  103711:	09 d0                	or     %edx,%eax
  103713:	66 89 45 fe          	mov    %ax,-0x2(%ebp)

	input  /= 10; 
  103717:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
  10371b:	0f b7 c0             	movzwl %ax,%eax
  10371e:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
  103724:	c1 e8 10             	shr    $0x10,%eax
  103727:	66 c1 e8 03          	shr    $0x3,%ax
  10372b:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	output |= ((input % 10) << 12) & 0xF000;
  10372f:	0f b7 4d ec          	movzwl -0x14(%ebp),%ecx
  103733:	0f b7 c1             	movzwl %cx,%eax
  103736:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
  10373c:	c1 e8 10             	shr    $0x10,%eax
  10373f:	89 c2                	mov    %eax,%edx
  103741:	66 c1 ea 03          	shr    $0x3,%dx
  103745:	89 d0                	mov    %edx,%eax
  103747:	c1 e0 02             	shl    $0x2,%eax
  10374a:	01 d0                	add    %edx,%eax
  10374c:	01 c0                	add    %eax,%eax
  10374e:	29 c1                	sub    %eax,%ecx
  103750:	89 ca                	mov    %ecx,%edx
  103752:	0f b7 c2             	movzwl %dx,%eax
  103755:	c1 e0 0c             	shl    $0xc,%eax
  103758:	89 c2                	mov    %eax,%edx
  10375a:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
  10375e:	09 d0                	or     %edx,%eax
  103760:	66 89 45 fe          	mov    %ax,-0x2(%ebp)

	return output;
  103764:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
}
  103768:	c9                   	leave  
  103769:	c3                   	ret    

0010376a <_ZN5tools3bcd6encodeEj>:

uint32_t tools::bcd::encode( uint32_t input )
{
  10376a:	55                   	push   %ebp
  10376b:	89 e5                	mov    %esp,%ebp
  10376d:	83 ec 10             	sub    $0x10,%esp
	uint32_t output = 0;
  103770:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

	output |= ((input % 10) <<  0) & 0x00000000F;
  103777:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10377a:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
  10377f:	89 c8                	mov    %ecx,%eax
  103781:	f7 e2                	mul    %edx
  103783:	c1 ea 03             	shr    $0x3,%edx
  103786:	89 d0                	mov    %edx,%eax
  103788:	c1 e0 02             	shl    $0x2,%eax
  10378b:	01 d0                	add    %edx,%eax
  10378d:	01 c0                	add    %eax,%eax
  10378f:	29 c1                	sub    %eax,%ecx
  103791:	89 ca                	mov    %ecx,%edx
  103793:	89 d0                	mov    %edx,%eax
  103795:	83 e0 0f             	and    $0xf,%eax
  103798:	09 45 fc             	or     %eax,-0x4(%ebp)

	input  /= 10; 
  10379b:	8b 45 08             	mov    0x8(%ebp),%eax
  10379e:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
  1037a3:	f7 e2                	mul    %edx
  1037a5:	89 d0                	mov    %edx,%eax
  1037a7:	c1 e8 03             	shr    $0x3,%eax
  1037aa:	89 45 08             	mov    %eax,0x8(%ebp)
	output |= ((input % 10) <<  4) & 0x0000000F0;
  1037ad:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1037b0:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
  1037b5:	89 c8                	mov    %ecx,%eax
  1037b7:	f7 e2                	mul    %edx
  1037b9:	c1 ea 03             	shr    $0x3,%edx
  1037bc:	89 d0                	mov    %edx,%eax
  1037be:	c1 e0 02             	shl    $0x2,%eax
  1037c1:	01 d0                	add    %edx,%eax
  1037c3:	01 c0                	add    %eax,%eax
  1037c5:	29 c1                	sub    %eax,%ecx
  1037c7:	89 ca                	mov    %ecx,%edx
  1037c9:	89 d0                	mov    %edx,%eax
  1037cb:	c1 e0 04             	shl    $0x4,%eax
  1037ce:	0f b6 c0             	movzbl %al,%eax
  1037d1:	09 45 fc             	or     %eax,-0x4(%ebp)
	
	input  /= 10; 
  1037d4:	8b 45 08             	mov    0x8(%ebp),%eax
  1037d7:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
  1037dc:	f7 e2                	mul    %edx
  1037de:	89 d0                	mov    %edx,%eax
  1037e0:	c1 e8 03             	shr    $0x3,%eax
  1037e3:	89 45 08             	mov    %eax,0x8(%ebp)
	output |= ((input % 10) <<  8) & 0x000000F00;
  1037e6:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1037e9:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
  1037ee:	89 c8                	mov    %ecx,%eax
  1037f0:	f7 e2                	mul    %edx
  1037f2:	c1 ea 03             	shr    $0x3,%edx
  1037f5:	89 d0                	mov    %edx,%eax
  1037f7:	c1 e0 02             	shl    $0x2,%eax
  1037fa:	01 d0                	add    %edx,%eax
  1037fc:	01 c0                	add    %eax,%eax
  1037fe:	29 c1                	sub    %eax,%ecx
  103800:	89 ca                	mov    %ecx,%edx
  103802:	89 d0                	mov    %edx,%eax
  103804:	c1 e0 08             	shl    $0x8,%eax
  103807:	25 00 0f 00 00       	and    $0xf00,%eax
  10380c:	09 45 fc             	or     %eax,-0x4(%ebp)

	input  /= 10; 
  10380f:	8b 45 08             	mov    0x8(%ebp),%eax
  103812:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
  103817:	f7 e2                	mul    %edx
  103819:	89 d0                	mov    %edx,%eax
  10381b:	c1 e8 03             	shr    $0x3,%eax
  10381e:	89 45 08             	mov    %eax,0x8(%ebp)
	output |= ((input % 10) << 12) & 0x0000F000;
  103821:	8b 4d 08             	mov    0x8(%ebp),%ecx
  103824:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
  103829:	89 c8                	mov    %ecx,%eax
  10382b:	f7 e2                	mul    %edx
  10382d:	c1 ea 03             	shr    $0x3,%edx
  103830:	89 d0                	mov    %edx,%eax
  103832:	c1 e0 02             	shl    $0x2,%eax
  103835:	01 d0                	add    %edx,%eax
  103837:	01 c0                	add    %eax,%eax
  103839:	29 c1                	sub    %eax,%ecx
  10383b:	89 ca                	mov    %ecx,%edx
  10383d:	89 d0                	mov    %edx,%eax
  10383f:	c1 e0 0c             	shl    $0xc,%eax
  103842:	0f b7 c0             	movzwl %ax,%eax
  103845:	09 45 fc             	or     %eax,-0x4(%ebp)

	input  /= 10; 
  103848:	8b 45 08             	mov    0x8(%ebp),%eax
  10384b:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
  103850:	f7 e2                	mul    %edx
  103852:	89 d0                	mov    %edx,%eax
  103854:	c1 e8 03             	shr    $0x3,%eax
  103857:	89 45 08             	mov    %eax,0x8(%ebp)
	output |= ((input % 10) << 16) & 0x000F0000;
  10385a:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10385d:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
  103862:	89 c8                	mov    %ecx,%eax
  103864:	f7 e2                	mul    %edx
  103866:	c1 ea 03             	shr    $0x3,%edx
  103869:	89 d0                	mov    %edx,%eax
  10386b:	c1 e0 02             	shl    $0x2,%eax
  10386e:	01 d0                	add    %edx,%eax
  103870:	01 c0                	add    %eax,%eax
  103872:	29 c1                	sub    %eax,%ecx
  103874:	89 ca                	mov    %ecx,%edx
  103876:	89 d0                	mov    %edx,%eax
  103878:	c1 e0 10             	shl    $0x10,%eax
  10387b:	25 00 00 0f 00       	and    $0xf0000,%eax
  103880:	09 45 fc             	or     %eax,-0x4(%ebp)

	input  /= 10; 
  103883:	8b 45 08             	mov    0x8(%ebp),%eax
  103886:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
  10388b:	f7 e2                	mul    %edx
  10388d:	89 d0                	mov    %edx,%eax
  10388f:	c1 e8 03             	shr    $0x3,%eax
  103892:	89 45 08             	mov    %eax,0x8(%ebp)
	output |= ((input % 10) << 20) & 0x00F00000;
  103895:	8b 4d 08             	mov    0x8(%ebp),%ecx
  103898:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
  10389d:	89 c8                	mov    %ecx,%eax
  10389f:	f7 e2                	mul    %edx
  1038a1:	c1 ea 03             	shr    $0x3,%edx
  1038a4:	89 d0                	mov    %edx,%eax
  1038a6:	c1 e0 02             	shl    $0x2,%eax
  1038a9:	01 d0                	add    %edx,%eax
  1038ab:	01 c0                	add    %eax,%eax
  1038ad:	29 c1                	sub    %eax,%ecx
  1038af:	89 ca                	mov    %ecx,%edx
  1038b1:	89 d0                	mov    %edx,%eax
  1038b3:	c1 e0 14             	shl    $0x14,%eax
  1038b6:	25 00 00 f0 00       	and    $0xf00000,%eax
  1038bb:	09 45 fc             	or     %eax,-0x4(%ebp)

	input  /= 10; 
  1038be:	8b 45 08             	mov    0x8(%ebp),%eax
  1038c1:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
  1038c6:	f7 e2                	mul    %edx
  1038c8:	89 d0                	mov    %edx,%eax
  1038ca:	c1 e8 03             	shr    $0x3,%eax
  1038cd:	89 45 08             	mov    %eax,0x8(%ebp)
	output |= ((input % 10) << 24) & 0x0F000000;
  1038d0:	8b 4d 08             	mov    0x8(%ebp),%ecx
  1038d3:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
  1038d8:	89 c8                	mov    %ecx,%eax
  1038da:	f7 e2                	mul    %edx
  1038dc:	c1 ea 03             	shr    $0x3,%edx
  1038df:	89 d0                	mov    %edx,%eax
  1038e1:	c1 e0 02             	shl    $0x2,%eax
  1038e4:	01 d0                	add    %edx,%eax
  1038e6:	01 c0                	add    %eax,%eax
  1038e8:	29 c1                	sub    %eax,%ecx
  1038ea:	89 ca                	mov    %ecx,%edx
  1038ec:	89 d0                	mov    %edx,%eax
  1038ee:	c1 e0 18             	shl    $0x18,%eax
  1038f1:	25 00 00 00 0f       	and    $0xf000000,%eax
  1038f6:	09 45 fc             	or     %eax,-0x4(%ebp)

	input  /= 10; 
  1038f9:	8b 45 08             	mov    0x8(%ebp),%eax
  1038fc:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
  103901:	f7 e2                	mul    %edx
  103903:	89 d0                	mov    %edx,%eax
  103905:	c1 e8 03             	shr    $0x3,%eax
  103908:	89 45 08             	mov    %eax,0x8(%ebp)
	output |= ((input % 10) << 28) & 0xF0000000;
  10390b:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10390e:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
  103913:	89 c8                	mov    %ecx,%eax
  103915:	f7 e2                	mul    %edx
  103917:	c1 ea 03             	shr    $0x3,%edx
  10391a:	89 d0                	mov    %edx,%eax
  10391c:	c1 e0 02             	shl    $0x2,%eax
  10391f:	01 d0                	add    %edx,%eax
  103921:	01 c0                	add    %eax,%eax
  103923:	29 c1                	sub    %eax,%ecx
  103925:	89 ca                	mov    %ecx,%edx
  103927:	89 d0                	mov    %edx,%eax
  103929:	c1 e0 1c             	shl    $0x1c,%eax
  10392c:	09 45 fc             	or     %eax,-0x4(%ebp)

	return output;
  10392f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  103932:	c9                   	leave  
  103933:	c3                   	ret    

00103934 <ctors>:
{
	ctor start_ctors;
	ctor end_ctors;

	void ctors(  )
	{
  103934:	55                   	push   %ebp
  103935:	89 e5                	mov    %esp,%ebp
  103937:	83 ec 18             	sub    $0x18,%esp
		for(ctor *i = &start_ctors; i != &end_ctors; i++)
  10393a:	c7 45 f4 00 d0 10 00 	movl   $0x10d000,-0xc(%ebp)
  103941:	eb 0b                	jmp    10394e <ctors+0x1a>
		{
			(*i)();
  103943:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103946:	8b 00                	mov    (%eax),%eax
  103948:	ff d0                	call   *%eax
	ctor start_ctors;
	ctor end_ctors;

	void ctors(  )
	{
		for(ctor *i = &start_ctors; i != &end_ctors; i++)
  10394a:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
  10394e:	81 7d f4 0c d0 10 00 	cmpl   $0x10d00c,-0xc(%ebp)
  103955:	75 ec                	jne    103943 <ctors+0xf>
		{
			(*i)();
		}
	}
  103957:	c9                   	leave  
  103958:	c3                   	ret    

00103959 <dtors>:
{
	dtor start_dtors;
	dtor end_dtors;

	void dtors(  )
	{
  103959:	55                   	push   %ebp
  10395a:	89 e5                	mov    %esp,%ebp
  10395c:	83 ec 18             	sub    $0x18,%esp
		for(dtor *i = &start_dtors; i != &end_dtors; i++)
  10395f:	c7 45 f4 b4 34 13 00 	movl   $0x1334b4,-0xc(%ebp)
  103966:	eb 0b                	jmp    103973 <dtors+0x1a>
		{
			(*i)();
  103968:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10396b:	8b 00                	mov    (%eax),%eax
  10396d:	ff d0                	call   *%eax
	dtor start_dtors;
	dtor end_dtors;

	void dtors(  )
	{
		for(dtor *i = &start_dtors; i != &end_dtors; i++)
  10396f:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
  103973:	81 7d f4 b8 34 13 00 	cmpl   $0x1334b8,-0xc(%ebp)
  10397a:	75 ec                	jne    103968 <dtors+0xf>
		{
			(*i)();
		}
	}
  10397c:	c9                   	leave  
  10397d:	c3                   	ret    

0010397e <__cxa_pure_virtual>:
extern "C" 
{
	void __cxa_pure_virtual()
	{
  10397e:	55                   	push   %ebp
  10397f:	89 e5                	mov    %esp,%ebp
extern "C" 
{
	void __cxa_pure_virtual()
  103981:	eb fe                	jmp    103981 <__cxa_pure_virtual+0x3>

00103983 <atexit>:
extern "C" 
{
	void atexit()
	{
  103983:	55                   	push   %ebp
  103984:	89 e5                	mov    %esp,%ebp

	}
  103986:	5d                   	pop    %ebp
  103987:	c3                   	ret    

00103988 <_ZN9multiboot9check_mbsEPNS_4infoE>:
#include "include/multiboot.hpp"

multiboot::error multiboot::check_mbs( multiboot::info *mbs )
{
  103988:	55                   	push   %ebp
  103989:	89 e5                	mov    %esp,%ebp
	if(!mbs)
  10398b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  10398f:	75 07                	jne    103998 <_ZN9multiboot9check_mbsEPNS_4infoE+0x10>
	{
		return multiboot::error::no_mbs;
  103991:	b8 01 00 00 00       	mov    $0x1,%eax
  103996:	eb 71                	jmp    103a09 <_ZN9multiboot9check_mbsEPNS_4infoE+0x81>
	}

	if(!mbs->cmdline)
  103998:	8b 45 08             	mov    0x8(%ebp),%eax
  10399b:	8b 40 10             	mov    0x10(%eax),%eax
  10399e:	85 c0                	test   %eax,%eax
  1039a0:	75 0c                	jne    1039ae <_ZN9multiboot9check_mbsEPNS_4infoE+0x26>
	{
		mbs->cmdline = multiboot::empty_cmdline;
  1039a2:	8b 15 58 e7 10 00    	mov    0x10e758,%edx
  1039a8:	8b 45 08             	mov    0x8(%ebp),%eax
  1039ab:	89 50 10             	mov    %edx,0x10(%eax)
	}

	if(mbs->mods_count > 0 && !mbs->mods_addr)
  1039ae:	8b 45 08             	mov    0x8(%ebp),%eax
  1039b1:	8b 40 14             	mov    0x14(%eax),%eax
  1039b4:	85 c0                	test   %eax,%eax
  1039b6:	74 11                	je     1039c9 <_ZN9multiboot9check_mbsEPNS_4infoE+0x41>
  1039b8:	8b 45 08             	mov    0x8(%ebp),%eax
  1039bb:	8b 40 18             	mov    0x18(%eax),%eax
  1039be:	85 c0                	test   %eax,%eax
  1039c0:	75 07                	jne    1039c9 <_ZN9multiboot9check_mbsEPNS_4infoE+0x41>
	{
		return multiboot::error::no_mbs_mods_addr;
  1039c2:	b8 02 00 00 00       	mov    $0x2,%eax
  1039c7:	eb 40                	jmp    103a09 <_ZN9multiboot9check_mbsEPNS_4infoE+0x81>
	}
	
	if(static_cast<int32_t>(mbs->mods_count) < 0)
  1039c9:	8b 45 08             	mov    0x8(%ebp),%eax
  1039cc:	8b 40 14             	mov    0x14(%eax),%eax
  1039cf:	85 c0                	test   %eax,%eax
  1039d1:	79 0a                	jns    1039dd <_ZN9multiboot9check_mbsEPNS_4infoE+0x55>
	{
		mbs->mods_count = 0;
  1039d3:	8b 45 08             	mov    0x8(%ebp),%eax
  1039d6:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
	}

	if(!mbs->boot_loader_name)
  1039dd:	8b 45 08             	mov    0x8(%ebp),%eax
  1039e0:	8b 40 40             	mov    0x40(%eax),%eax
  1039e3:	85 c0                	test   %eax,%eax
  1039e5:	75 0c                	jne    1039f3 <_ZN9multiboot9check_mbsEPNS_4infoE+0x6b>
	{
		mbs->boot_loader_name = multiboot::no_loader_name;
  1039e7:	8b 15 64 e7 10 00    	mov    0x10e764,%edx
  1039ed:	8b 45 08             	mov    0x8(%ebp),%eax
  1039f0:	89 50 40             	mov    %edx,0x40(%eax)
	}

	if(!mbs->mmap_addr)
  1039f3:	8b 45 08             	mov    0x8(%ebp),%eax
  1039f6:	8b 40 30             	mov    0x30(%eax),%eax
  1039f9:	85 c0                	test   %eax,%eax
  1039fb:	75 07                	jne    103a04 <_ZN9multiboot9check_mbsEPNS_4infoE+0x7c>
	{
		return multiboot::error::no_mbs_mmap_addr;
  1039fd:	b8 03 00 00 00       	mov    $0x3,%eax
  103a02:	eb 05                	jmp    103a09 <_ZN9multiboot9check_mbsEPNS_4infoE+0x81>
	}

	return multiboot::error::mbs_check_ok;
  103a04:	b8 00 00 00 00       	mov    $0x0,%eax
}
  103a09:	5d                   	pop    %ebp
  103a0a:	c3                   	ret    

00103a0b <_ZN3hal3x863pit4initENS1_7channelENS1_4modeEl>:
#include "include/ioports.hpp"

using namespace hal::x86;

void pit::init( pit::channel ch, pit::mode md, time_t freq )
{
  103a0b:	55                   	push   %ebp
  103a0c:	89 e5                	mov    %esp,%ebp
  103a0e:	83 ec 28             	sub    $0x28,%esp
	time_t counter = pit::internal_freq / freq;
  103a11:	b8 de 34 12 00       	mov    $0x1234de,%eax
  103a16:	99                   	cltd   
  103a17:	f7 7d 10             	idivl  0x10(%ebp)
  103a1a:	89 45 f4             	mov    %eax,-0xc(%ebp)

	io::outb(pit::init_port, (ch << 6) | (0x03 << 4) | (md << 1));
  103a1d:	8b 45 08             	mov    0x8(%ebp),%eax
  103a20:	c1 e0 06             	shl    $0x6,%eax
  103a23:	83 c8 30             	or     $0x30,%eax
  103a26:	89 c2                	mov    %eax,%edx
  103a28:	8b 45 0c             	mov    0xc(%ebp),%eax
  103a2b:	01 c0                	add    %eax,%eax
  103a2d:	09 d0                	or     %edx,%eax
  103a2f:	0f b6 c0             	movzbl %al,%eax
  103a32:	89 44 24 04          	mov    %eax,0x4(%esp)
  103a36:	c7 04 24 43 00 00 00 	movl   $0x43,(%esp)
  103a3d:	e8 42 60 00 00       	call   109a84 <_ZN3hal3x862io4outbEth>
		
	switch(ch)							
  103a42:	8b 45 08             	mov    0x8(%ebp),%eax
  103a45:	83 f8 01             	cmp    $0x1,%eax
  103a48:	74 3e                	je     103a88 <_ZN3hal3x863pit4initENS1_7channelENS1_4modeEl+0x7d>
  103a4a:	83 f8 02             	cmp    $0x2,%eax
  103a4d:	74 6a                	je     103ab9 <_ZN3hal3x863pit4initENS1_7channelENS1_4modeEl+0xae>
  103a4f:	85 c0                	test   %eax,%eax
  103a51:	0f 85 92 00 00 00    	jne    103ae9 <_ZN3hal3x863pit4initENS1_7channelENS1_4modeEl+0xde>
	{
		case pit::channel_0:
			io::outb(0x40, counter & 0xFF);		
  103a57:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103a5a:	0f b6 c0             	movzbl %al,%eax
  103a5d:	89 44 24 04          	mov    %eax,0x4(%esp)
  103a61:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
  103a68:	e8 17 60 00 00       	call   109a84 <_ZN3hal3x862io4outbEth>
   			io::outb(0x40, counter >> 8);
  103a6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103a70:	c1 f8 08             	sar    $0x8,%eax
  103a73:	0f b6 c0             	movzbl %al,%eax
  103a76:	89 44 24 04          	mov    %eax,0x4(%esp)
  103a7a:	c7 04 24 40 00 00 00 	movl   $0x40,(%esp)
  103a81:	e8 fe 5f 00 00       	call   109a84 <_ZN3hal3x862io4outbEth>
		break;
  103a86:	eb 61                	jmp    103ae9 <_ZN3hal3x863pit4initENS1_7channelENS1_4modeEl+0xde>

		case pit::channel_1:
			io::outb(0x41, counter & 0xFF);
  103a88:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103a8b:	0f b6 c0             	movzbl %al,%eax
  103a8e:	89 44 24 04          	mov    %eax,0x4(%esp)
  103a92:	c7 04 24 41 00 00 00 	movl   $0x41,(%esp)
  103a99:	e8 e6 5f 00 00       	call   109a84 <_ZN3hal3x862io4outbEth>
   			io::outb(0x41, counter >> 8);
  103a9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103aa1:	c1 f8 08             	sar    $0x8,%eax
  103aa4:	0f b6 c0             	movzbl %al,%eax
  103aa7:	89 44 24 04          	mov    %eax,0x4(%esp)
  103aab:	c7 04 24 41 00 00 00 	movl   $0x41,(%esp)
  103ab2:	e8 cd 5f 00 00       	call   109a84 <_ZN3hal3x862io4outbEth>
		break;
  103ab7:	eb 30                	jmp    103ae9 <_ZN3hal3x863pit4initENS1_7channelENS1_4modeEl+0xde>

		case pit::channel_2:
			io::outb(0x42, counter & 0xFF);
  103ab9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103abc:	0f b6 c0             	movzbl %al,%eax
  103abf:	89 44 24 04          	mov    %eax,0x4(%esp)
  103ac3:	c7 04 24 42 00 00 00 	movl   $0x42,(%esp)
  103aca:	e8 b5 5f 00 00       	call   109a84 <_ZN3hal3x862io4outbEth>
   			io::outb(0x42, counter >> 8);
  103acf:	8b 45 f4             	mov    -0xc(%ebp),%eax
  103ad2:	c1 f8 08             	sar    $0x8,%eax
  103ad5:	0f b6 c0             	movzbl %al,%eax
  103ad8:	89 44 24 04          	mov    %eax,0x4(%esp)
  103adc:	c7 04 24 42 00 00 00 	movl   $0x42,(%esp)
  103ae3:	e8 9c 5f 00 00       	call   109a84 <_ZN3hal3x862io4outbEth>
		break;
  103ae8:	90                   	nop
	}
}
  103ae9:	c9                   	leave  
  103aea:	c3                   	ret    

00103aeb <_ZN3hal3x864intr7handlerEjPFPNS0_3cpu9cpu_stateES4_E>:

/*
Register a handler for Interrupts
*/
void intr::handler( uint32_t intr, intr::handler_t handler )
{
  103aeb:	55                   	push   %ebp
  103aec:	89 e5                	mov    %esp,%ebp
	handlers[intr] = handler;
  103aee:	8b 45 08             	mov    0x8(%ebp),%eax
  103af1:	8b 55 0c             	mov    0xc(%ebp),%edx
  103af4:	89 14 85 c0 34 13 00 	mov    %edx,0x1334c0(,%eax,4)
}
  103afb:	5d                   	pop    %ebp
  103afc:	c3                   	ret    

00103afd <_ZN3hal3x864intr4ncexEPFPNS0_3cpu9cpu_stateES4_E>:

/*
Handler for non critical exceptions
*/
void intr::ncex( handler_t handler )
{
  103afd:	55                   	push   %ebp
  103afe:	89 e5                	mov    %esp,%ebp
	ncex_handler = handler;
  103b00:	8b 45 08             	mov    0x8(%ebp),%eax
  103b03:	a3 c0 38 13 00       	mov    %eax,0x1338c0
}
  103b08:	5d                   	pop    %ebp
  103b09:	c3                   	ret    

00103b0a <_Z16handle_exceptionPN3hal3x863cpu9cpu_stateE>:

/*
Handler for Exceptions
*/
cpu::cpu_state *handle_exception( cpu::cpu_state *cpu )
{
  103b0a:	55                   	push   %ebp
  103b0b:	89 e5                	mov    %esp,%ebp
  103b0d:	56                   	push   %esi
  103b0e:	53                   	push   %ebx
  103b0f:	83 ec 20             	sub    $0x20,%esp
	cpu::cpu_state *new_cpu = cpu;
  103b12:	8b 45 08             	mov    0x8(%ebp),%eax
  103b15:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(ncex_handler != intr::null_handler && ((cpu->intr == 0x0E && cpu->error & 0x04) || cpu->intr == 0xEE))
  103b18:	a1 c0 38 13 00       	mov    0x1338c0,%eax
  103b1d:	85 c0                	test   %eax,%eax
  103b1f:	74 3a                	je     103b5b <_Z16handle_exceptionPN3hal3x863cpu9cpu_stateE+0x51>
  103b21:	8b 45 08             	mov    0x8(%ebp),%eax
  103b24:	8b 40 1c             	mov    0x1c(%eax),%eax
  103b27:	83 f8 0e             	cmp    $0xe,%eax
  103b2a:	75 0d                	jne    103b39 <_Z16handle_exceptionPN3hal3x863cpu9cpu_stateE+0x2f>
  103b2c:	8b 45 08             	mov    0x8(%ebp),%eax
  103b2f:	8b 40 20             	mov    0x20(%eax),%eax
  103b32:	83 e0 04             	and    $0x4,%eax
  103b35:	85 c0                	test   %eax,%eax
  103b37:	75 0d                	jne    103b46 <_Z16handle_exceptionPN3hal3x863cpu9cpu_stateE+0x3c>
  103b39:	8b 45 08             	mov    0x8(%ebp),%eax
  103b3c:	8b 40 1c             	mov    0x1c(%eax),%eax
  103b3f:	3d ee 00 00 00       	cmp    $0xee,%eax
  103b44:	75 15                	jne    103b5b <_Z16handle_exceptionPN3hal3x863cpu9cpu_stateE+0x51>
	{
		new_cpu = ncex_handler(cpu);
  103b46:	a1 c0 38 13 00       	mov    0x1338c0,%eax
  103b4b:	8b 55 08             	mov    0x8(%ebp),%edx
  103b4e:	89 14 24             	mov    %edx,(%esp)
  103b51:	ff d0                	call   *%eax
  103b53:	89 45 f4             	mov    %eax,-0xc(%ebp)
  103b56:	e9 f2 04 00 00       	jmp    10404d <_Z16handle_exceptionPN3hal3x863cpu9cpu_stateE+0x543>
	}
	else
	{
		screen.clear();
  103b5b:	c7 04 24 d4 38 13 00 	movl   $0x1338d4,(%esp)
  103b62:	e8 4d 59 00 00       	call   1094b4 <_ZN3hal3x865video5clearEv>

		if(/*cpu->intr >= intr::exception_base && */cpu->intr <= intr::exception_limit)
  103b67:	8b 45 08             	mov    0x8(%ebp),%eax
  103b6a:	8b 40 1c             	mov    0x1c(%eax),%eax
  103b6d:	83 f8 2f             	cmp    $0x2f,%eax
  103b70:	0f 87 75 02 00 00    	ja     103deb <_Z16handle_exceptionPN3hal3x863cpu9cpu_stateE+0x2e1>
		{							
			screen << color::red << "\tEXCEPTION!\t    " << error_name[cpu->intr] << "   " << error_type[cpu->intr] << video::endl;
  103b76:	8b 45 08             	mov    0x8(%ebp),%eax
  103b79:	8b 40 1c             	mov    0x1c(%eax),%eax
  103b7c:	8b 1c 85 e0 d0 10 00 	mov    0x10d0e0(,%eax,4),%ebx
  103b83:	8b 45 08             	mov    0x8(%ebp),%eax
  103b86:	8b 40 1c             	mov    0x1c(%eax),%eax
  103b89:	8b 34 85 20 d0 10 00 	mov    0x10d020(,%eax,4),%esi
  103b90:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  103b97:	00 
  103b98:	c7 04 24 d4 38 13 00 	movl   $0x1338d4,(%esp)
  103b9f:	e8 0e 5e 00 00       	call   1099b2 <_ZN3hal3x865videolsENS0_5color7color_tE>
  103ba4:	c7 44 24 04 a5 ea 10 	movl   $0x10eaa5,0x4(%esp)
  103bab:	00 
  103bac:	89 04 24             	mov    %eax,(%esp)
  103baf:	e8 e0 5d 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  103bb4:	89 74 24 04          	mov    %esi,0x4(%esp)
  103bb8:	89 04 24             	mov    %eax,(%esp)
  103bbb:	e8 d4 5d 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  103bc0:	c7 44 24 04 b6 ea 10 	movl   $0x10eab6,0x4(%esp)
  103bc7:	00 
  103bc8:	89 04 24             	mov    %eax,(%esp)
  103bcb:	e8 c4 5d 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  103bd0:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  103bd4:	89 04 24             	mov    %eax,(%esp)
  103bd7:	e8 b8 5d 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  103bdc:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  103be3:	00 
  103be4:	89 04 24             	mov    %eax,(%esp)
  103be7:	e8 8e 90 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
	
			screen << color::white << video::endl << "################################################################################" << video::endl;
  103bec:	c7 44 24 04 0f 00 00 	movl   $0xf,0x4(%esp)
  103bf3:	00 
  103bf4:	c7 04 24 d4 38 13 00 	movl   $0x1338d4,(%esp)
  103bfb:	e8 b2 5d 00 00       	call   1099b2 <_ZN3hal3x865videolsENS0_5color7color_tE>
  103c00:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  103c07:	00 
  103c08:	89 04 24             	mov    %eax,(%esp)
  103c0b:	e8 6a 90 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
  103c10:	c7 44 24 04 bc ea 10 	movl   $0x10eabc,0x4(%esp)
  103c17:	00 
  103c18:	89 04 24             	mov    %eax,(%esp)
  103c1b:	e8 74 5d 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  103c20:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  103c27:	00 
  103c28:	89 04 24             	mov    %eax,(%esp)
  103c2b:	e8 4a 90 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
			screen << color::brown << video::endl << "                     QUARTUS " << arch_string << "  # " << __DATE__ << "  " << __TIME__ << video::endl;
  103c30:	8b 1d a4 d1 10 00    	mov    0x10d1a4,%ebx
  103c36:	c7 44 24 04 06 00 00 	movl   $0x6,0x4(%esp)
  103c3d:	00 
  103c3e:	c7 04 24 d4 38 13 00 	movl   $0x1338d4,(%esp)
  103c45:	e8 68 5d 00 00       	call   1099b2 <_ZN3hal3x865videolsENS0_5color7color_tE>
  103c4a:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  103c51:	00 
  103c52:	89 04 24             	mov    %eax,(%esp)
  103c55:	e8 20 90 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
  103c5a:	c7 44 24 04 0d eb 10 	movl   $0x10eb0d,0x4(%esp)
  103c61:	00 
  103c62:	89 04 24             	mov    %eax,(%esp)
  103c65:	e8 2a 5d 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  103c6a:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  103c6e:	89 04 24             	mov    %eax,(%esp)
  103c71:	e8 1e 5d 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  103c76:	c7 44 24 04 2b eb 10 	movl   $0x10eb2b,0x4(%esp)
  103c7d:	00 
  103c7e:	89 04 24             	mov    %eax,(%esp)
  103c81:	e8 0e 5d 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  103c86:	c7 44 24 04 30 eb 10 	movl   $0x10eb30,0x4(%esp)
  103c8d:	00 
  103c8e:	89 04 24             	mov    %eax,(%esp)
  103c91:	e8 fe 5c 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  103c96:	c7 44 24 04 3c eb 10 	movl   $0x10eb3c,0x4(%esp)
  103c9d:	00 
  103c9e:	89 04 24             	mov    %eax,(%esp)
  103ca1:	e8 ee 5c 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  103ca6:	c7 44 24 04 3f eb 10 	movl   $0x10eb3f,0x4(%esp)
  103cad:	00 
  103cae:	89 04 24             	mov    %eax,(%esp)
  103cb1:	e8 de 5c 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  103cb6:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  103cbd:	00 
  103cbe:	89 04 24             	mov    %eax,(%esp)
  103cc1:	e8 b4 8f 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
			screen << color::white << video::endl << "################################################################################" << video::endl;
  103cc6:	c7 44 24 04 0f 00 00 	movl   $0xf,0x4(%esp)
  103ccd:	00 
  103cce:	c7 04 24 d4 38 13 00 	movl   $0x1338d4,(%esp)
  103cd5:	e8 d8 5c 00 00       	call   1099b2 <_ZN3hal3x865videolsENS0_5color7color_tE>
  103cda:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  103ce1:	00 
  103ce2:	89 04 24             	mov    %eax,(%esp)
  103ce5:	e8 90 8f 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
  103cea:	c7 44 24 04 bc ea 10 	movl   $0x10eabc,0x4(%esp)
  103cf1:	00 
  103cf2:	89 04 24             	mov    %eax,(%esp)
  103cf5:	e8 9a 5c 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  103cfa:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  103d01:	00 
  103d02:	89 04 24             	mov    %eax,(%esp)
  103d05:	e8 70 8f 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
	
			cpu::dump(cpu);
  103d0a:	8b 45 08             	mov    0x8(%ebp),%eax
  103d0d:	89 04 24             	mov    %eax,(%esp)
  103d10:	e8 a3 0e 00 00       	call   104bb8 <_ZN3hal3x863cpu4dumpEPNS1_9cpu_stateE>

			screen << color::white << video::endl << "################################################################################" << video::endl;
  103d15:	c7 44 24 04 0f 00 00 	movl   $0xf,0x4(%esp)
  103d1c:	00 
  103d1d:	c7 04 24 d4 38 13 00 	movl   $0x1338d4,(%esp)
  103d24:	e8 89 5c 00 00       	call   1099b2 <_ZN3hal3x865videolsENS0_5color7color_tE>
  103d29:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  103d30:	00 
  103d31:	89 04 24             	mov    %eax,(%esp)
  103d34:	e8 41 8f 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
  103d39:	c7 44 24 04 bc ea 10 	movl   $0x10eabc,0x4(%esp)
  103d40:	00 
  103d41:	89 04 24             	mov    %eax,(%esp)
  103d44:	e8 4b 5c 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  103d49:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  103d50:	00 
  103d51:	89 04 24             	mov    %eax,(%esp)
  103d54:	e8 21 8f 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
			screen << color::white << video::endl << "\t  System has been shut down to prevent damage on your computer" << video::endl;
  103d59:	c7 44 24 04 0f 00 00 	movl   $0xf,0x4(%esp)
  103d60:	00 
  103d61:	c7 04 24 d4 38 13 00 	movl   $0x1338d4,(%esp)
  103d68:	e8 45 5c 00 00       	call   1099b2 <_ZN3hal3x865videolsENS0_5color7color_tE>
  103d6d:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  103d74:	00 
  103d75:	89 04 24             	mov    %eax,(%esp)
  103d78:	e8 fd 8e 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
  103d7d:	c7 44 24 04 48 eb 10 	movl   $0x10eb48,0x4(%esp)
  103d84:	00 
  103d85:	89 04 24             	mov    %eax,(%esp)
  103d88:	e8 07 5c 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  103d8d:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  103d94:	00 
  103d95:	89 04 24             	mov    %eax,(%esp)
  103d98:	e8 dd 8e 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
			screen << color::white << video::endl << "################################################################################" << video::endl;
  103d9d:	c7 44 24 04 0f 00 00 	movl   $0xf,0x4(%esp)
  103da4:	00 
  103da5:	c7 04 24 d4 38 13 00 	movl   $0x1338d4,(%esp)
  103dac:	e8 01 5c 00 00       	call   1099b2 <_ZN3hal3x865videolsENS0_5color7color_tE>
  103db1:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  103db8:	00 
  103db9:	89 04 24             	mov    %eax,(%esp)
  103dbc:	e8 b9 8e 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
  103dc1:	c7 44 24 04 bc ea 10 	movl   $0x10eabc,0x4(%esp)
  103dc8:	00 
  103dc9:	89 04 24             	mov    %eax,(%esp)
  103dcc:	e8 c3 5b 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  103dd1:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  103dd8:	00 
  103dd9:	89 04 24             	mov    %eax,(%esp)
  103ddc:	e8 99 8e 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>

			cpu::halt();
  103de1:	e8 3a 87 00 00       	call   10c520 <_ZN3hal3x863cpu4haltEv>
  103de6:	e9 62 02 00 00       	jmp    10404d <_Z16handle_exceptionPN3hal3x863cpu9cpu_stateE+0x543>
		}
		else
		{				
			screen << color::red << "\tUNKNOWN ERROR!\t" << no_error_name << "   " << no_error_type << video::endl;
  103deb:	8b 1d a0 d1 10 00    	mov    0x10d1a0,%ebx
  103df1:	8b 35 9c d1 10 00    	mov    0x10d19c,%esi
  103df7:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  103dfe:	00 
  103dff:	c7 04 24 d4 38 13 00 	movl   $0x1338d4,(%esp)
  103e06:	e8 a7 5b 00 00       	call   1099b2 <_ZN3hal3x865videolsENS0_5color7color_tE>
  103e0b:	c7 44 24 04 88 eb 10 	movl   $0x10eb88,0x4(%esp)
  103e12:	00 
  103e13:	89 04 24             	mov    %eax,(%esp)
  103e16:	e8 79 5b 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  103e1b:	89 74 24 04          	mov    %esi,0x4(%esp)
  103e1f:	89 04 24             	mov    %eax,(%esp)
  103e22:	e8 6d 5b 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  103e27:	c7 44 24 04 b6 ea 10 	movl   $0x10eab6,0x4(%esp)
  103e2e:	00 
  103e2f:	89 04 24             	mov    %eax,(%esp)
  103e32:	e8 5d 5b 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  103e37:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  103e3b:	89 04 24             	mov    %eax,(%esp)
  103e3e:	e8 51 5b 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  103e43:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  103e4a:	00 
  103e4b:	89 04 24             	mov    %eax,(%esp)
  103e4e:	e8 27 8e 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
	
			screen << color::white << video::endl << "################################################################################" << video::endl;
  103e53:	c7 44 24 04 0f 00 00 	movl   $0xf,0x4(%esp)
  103e5a:	00 
  103e5b:	c7 04 24 d4 38 13 00 	movl   $0x1338d4,(%esp)
  103e62:	e8 4b 5b 00 00       	call   1099b2 <_ZN3hal3x865videolsENS0_5color7color_tE>
  103e67:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  103e6e:	00 
  103e6f:	89 04 24             	mov    %eax,(%esp)
  103e72:	e8 03 8e 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
  103e77:	c7 44 24 04 bc ea 10 	movl   $0x10eabc,0x4(%esp)
  103e7e:	00 
  103e7f:	89 04 24             	mov    %eax,(%esp)
  103e82:	e8 0d 5b 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  103e87:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  103e8e:	00 
  103e8f:	89 04 24             	mov    %eax,(%esp)
  103e92:	e8 e3 8d 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
			screen << color::brown << video::endl << "                     QUARTUS " << arch_string << "  # " << __DATE__ << "  " << __TIME__ << video::endl;
  103e97:	8b 1d a4 d1 10 00    	mov    0x10d1a4,%ebx
  103e9d:	c7 44 24 04 06 00 00 	movl   $0x6,0x4(%esp)
  103ea4:	00 
  103ea5:	c7 04 24 d4 38 13 00 	movl   $0x1338d4,(%esp)
  103eac:	e8 01 5b 00 00       	call   1099b2 <_ZN3hal3x865videolsENS0_5color7color_tE>
  103eb1:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  103eb8:	00 
  103eb9:	89 04 24             	mov    %eax,(%esp)
  103ebc:	e8 b9 8d 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
  103ec1:	c7 44 24 04 0d eb 10 	movl   $0x10eb0d,0x4(%esp)
  103ec8:	00 
  103ec9:	89 04 24             	mov    %eax,(%esp)
  103ecc:	e8 c3 5a 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  103ed1:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  103ed5:	89 04 24             	mov    %eax,(%esp)
  103ed8:	e8 b7 5a 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  103edd:	c7 44 24 04 2b eb 10 	movl   $0x10eb2b,0x4(%esp)
  103ee4:	00 
  103ee5:	89 04 24             	mov    %eax,(%esp)
  103ee8:	e8 a7 5a 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  103eed:	c7 44 24 04 30 eb 10 	movl   $0x10eb30,0x4(%esp)
  103ef4:	00 
  103ef5:	89 04 24             	mov    %eax,(%esp)
  103ef8:	e8 97 5a 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  103efd:	c7 44 24 04 3c eb 10 	movl   $0x10eb3c,0x4(%esp)
  103f04:	00 
  103f05:	89 04 24             	mov    %eax,(%esp)
  103f08:	e8 87 5a 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  103f0d:	c7 44 24 04 3f eb 10 	movl   $0x10eb3f,0x4(%esp)
  103f14:	00 
  103f15:	89 04 24             	mov    %eax,(%esp)
  103f18:	e8 77 5a 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  103f1d:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  103f24:	00 
  103f25:	89 04 24             	mov    %eax,(%esp)
  103f28:	e8 4d 8d 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
			screen << color::white << video::endl << "################################################################################" << video::endl;
  103f2d:	c7 44 24 04 0f 00 00 	movl   $0xf,0x4(%esp)
  103f34:	00 
  103f35:	c7 04 24 d4 38 13 00 	movl   $0x1338d4,(%esp)
  103f3c:	e8 71 5a 00 00       	call   1099b2 <_ZN3hal3x865videolsENS0_5color7color_tE>
  103f41:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  103f48:	00 
  103f49:	89 04 24             	mov    %eax,(%esp)
  103f4c:	e8 29 8d 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
  103f51:	c7 44 24 04 bc ea 10 	movl   $0x10eabc,0x4(%esp)
  103f58:	00 
  103f59:	89 04 24             	mov    %eax,(%esp)
  103f5c:	e8 33 5a 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  103f61:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  103f68:	00 
  103f69:	89 04 24             	mov    %eax,(%esp)
  103f6c:	e8 09 8d 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
	
			cpu::dump(cpu);
  103f71:	8b 45 08             	mov    0x8(%ebp),%eax
  103f74:	89 04 24             	mov    %eax,(%esp)
  103f77:	e8 3c 0c 00 00       	call   104bb8 <_ZN3hal3x863cpu4dumpEPNS1_9cpu_stateE>

			screen << color::white << video::endl << "################################################################################" << video::endl;
  103f7c:	c7 44 24 04 0f 00 00 	movl   $0xf,0x4(%esp)
  103f83:	00 
  103f84:	c7 04 24 d4 38 13 00 	movl   $0x1338d4,(%esp)
  103f8b:	e8 22 5a 00 00       	call   1099b2 <_ZN3hal3x865videolsENS0_5color7color_tE>
  103f90:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  103f97:	00 
  103f98:	89 04 24             	mov    %eax,(%esp)
  103f9b:	e8 da 8c 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
  103fa0:	c7 44 24 04 bc ea 10 	movl   $0x10eabc,0x4(%esp)
  103fa7:	00 
  103fa8:	89 04 24             	mov    %eax,(%esp)
  103fab:	e8 e4 59 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  103fb0:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  103fb7:	00 
  103fb8:	89 04 24             	mov    %eax,(%esp)
  103fbb:	e8 ba 8c 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
			screen << color::white << video::endl << "\t  System has been shut down to prevent damage on your computer" << video::endl;
  103fc0:	c7 44 24 04 0f 00 00 	movl   $0xf,0x4(%esp)
  103fc7:	00 
  103fc8:	c7 04 24 d4 38 13 00 	movl   $0x1338d4,(%esp)
  103fcf:	e8 de 59 00 00       	call   1099b2 <_ZN3hal3x865videolsENS0_5color7color_tE>
  103fd4:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  103fdb:	00 
  103fdc:	89 04 24             	mov    %eax,(%esp)
  103fdf:	e8 96 8c 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
  103fe4:	c7 44 24 04 48 eb 10 	movl   $0x10eb48,0x4(%esp)
  103feb:	00 
  103fec:	89 04 24             	mov    %eax,(%esp)
  103fef:	e8 a0 59 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  103ff4:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  103ffb:	00 
  103ffc:	89 04 24             	mov    %eax,(%esp)
  103fff:	e8 76 8c 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
			screen << color::white << video::endl << "################################################################################" << video::endl;
  104004:	c7 44 24 04 0f 00 00 	movl   $0xf,0x4(%esp)
  10400b:	00 
  10400c:	c7 04 24 d4 38 13 00 	movl   $0x1338d4,(%esp)
  104013:	e8 9a 59 00 00       	call   1099b2 <_ZN3hal3x865videolsENS0_5color7color_tE>
  104018:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  10401f:	00 
  104020:	89 04 24             	mov    %eax,(%esp)
  104023:	e8 52 8c 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
  104028:	c7 44 24 04 bc ea 10 	movl   $0x10eabc,0x4(%esp)
  10402f:	00 
  104030:	89 04 24             	mov    %eax,(%esp)
  104033:	e8 5c 59 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  104038:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  10403f:	00 
  104040:	89 04 24             	mov    %eax,(%esp)
  104043:	e8 32 8c 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>

			cpu::halt();
  104048:	e8 d3 84 00 00       	call   10c520 <_ZN3hal3x863cpu4haltEv>
		}
	}

	return new_cpu;
  10404d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
  104050:	83 c4 20             	add    $0x20,%esp
  104053:	5b                   	pop    %ebx
  104054:	5e                   	pop    %esi
  104055:	5d                   	pop    %ebp
  104056:	c3                   	ret    

00104057 <handle_interrupt>:
/*
Handler for all Interrupts
*/
extern "C" cpu::cpu_state *handle_interrupt( cpu::cpu_state *cpu );
cpu::cpu_state *handle_interrupt( cpu::cpu_state *cpu )
{
  104057:	55                   	push   %ebp
  104058:	89 e5                	mov    %esp,%ebp
  10405a:	83 ec 28             	sub    $0x28,%esp
	cpu::cpu_state *new_cpu = cpu;
  10405d:	8b 45 08             	mov    0x8(%ebp),%eax
  104060:	89 45 f4             	mov    %eax,-0xc(%ebp)

	/*
	Exceptions
	*/
	if(/*cpu->intr >= intr::exception_base && */cpu->intr <= intr::exception_limit) 							
  104063:	8b 45 08             	mov    0x8(%ebp),%eax
  104066:	8b 40 1c             	mov    0x1c(%eax),%eax
  104069:	83 f8 2f             	cmp    $0x2f,%eax
  10406c:	77 10                	ja     10407e <handle_interrupt+0x27>
	{	
		new_cpu = handle_exception(cpu);
  10406e:	8b 45 08             	mov    0x8(%ebp),%eax
  104071:	89 04 24             	mov    %eax,(%esp)
  104074:	e8 91 fa ff ff       	call   103b0a <_Z16handle_exceptionPN3hal3x863cpu9cpu_stateE>
  104079:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10407c:	eb 39                	jmp    1040b7 <handle_interrupt+0x60>
      	}
	/*
	Interrupts with registered handlers; e.g. IRQs
	*/
	else if(handlers[cpu->intr] != intr::null_handler)
  10407e:	8b 45 08             	mov    0x8(%ebp),%eax
  104081:	8b 40 1c             	mov    0x1c(%eax),%eax
  104084:	8b 04 85 c0 34 13 00 	mov    0x1334c0(,%eax,4),%eax
  10408b:	85 c0                	test   %eax,%eax
  10408d:	74 1a                	je     1040a9 <handle_interrupt+0x52>
	{
		new_cpu = handlers[cpu->intr](cpu);
  10408f:	8b 45 08             	mov    0x8(%ebp),%eax
  104092:	8b 40 1c             	mov    0x1c(%eax),%eax
  104095:	8b 04 85 c0 34 13 00 	mov    0x1334c0(,%eax,4),%eax
  10409c:	8b 55 08             	mov    0x8(%ebp),%edx
  10409f:	89 14 24             	mov    %edx,(%esp)
  1040a2:	ff d0                	call   *%eax
  1040a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1040a7:	eb 0e                	jmp    1040b7 <handle_interrupt+0x60>
	/*
	Interrupts without registered handlers;
	*/
	else
	{
		new_cpu = handle_exception(cpu);
  1040a9:	8b 45 08             	mov    0x8(%ebp),%eax
  1040ac:	89 04 24             	mov    %eax,(%esp)
  1040af:	e8 56 fa ff ff       	call   103b0a <_Z16handle_exceptionPN3hal3x863cpu9cpu_stateE>
  1040b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	return new_cpu;
  1040b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
  1040ba:	c9                   	leave  
  1040bb:	c3                   	ret    

001040bc <_ZN3hal3x863picC1Ev>:
#include "include/pic.hpp"
#include "include/ioports.hpp"

using namespace hal::x86;

pic::pic(  )
  1040bc:	55                   	push   %ebp
  1040bd:	89 e5                	mov    %esp,%ebp
{

}
  1040bf:	5d                   	pop    %ebp
  1040c0:	c3                   	ret    
  1040c1:	90                   	nop

001040c2 <_ZZN3hal3x863pic4initEvENKUlPNS0_3cpu9cpu_stateEE_clES4_>:
	this->mask(0xFFFF);

	//register the same handler for all IRQs
	for(uint32_t i = pic::irq_base; i < pic::irq_limit; i++)
	{
		intr::handler(i, []( cpu::cpu_state *cpu ) { pic &pic = pic::instance(); cpu = pic.irq(cpu); return cpu; });
  1040c2:	55                   	push   %ebp
  1040c3:	89 e5                	mov    %esp,%ebp
  1040c5:	83 ec 28             	sub    $0x28,%esp
  1040c8:	e8 2f 7e 00 00       	call   10befc <_ZN3hal3x863pic8instanceEv>
  1040cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1040d0:	8b 45 0c             	mov    0xc(%ebp),%eax
  1040d3:	89 44 24 04          	mov    %eax,0x4(%esp)
  1040d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1040da:	89 04 24             	mov    %eax,(%esp)
  1040dd:	e8 88 02 00 00       	call   10436a <_ZN3hal3x863pic3irqEPNS0_3cpu9cpu_stateE>
  1040e2:	89 45 0c             	mov    %eax,0xc(%ebp)
  1040e5:	8b 45 0c             	mov    0xc(%ebp),%eax
  1040e8:	c9                   	leave  
  1040e9:	c3                   	ret    

001040ea <_ZZN3hal3x863pic4initEvENUlPNS0_3cpu9cpu_stateEE_4_FUNES4_>:
  1040ea:	55                   	push   %ebp
  1040eb:	89 e5                	mov    %esp,%ebp
  1040ed:	83 ec 18             	sub    $0x18,%esp
  1040f0:	8b 45 08             	mov    0x8(%ebp),%eax
  1040f3:	89 44 24 04          	mov    %eax,0x4(%esp)
  1040f7:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1040fe:	e8 bf ff ff ff       	call   1040c2 <_ZZN3hal3x863pic4initEvENKUlPNS0_3cpu9cpu_stateEE_clES4_>
  104103:	c9                   	leave  
  104104:	c3                   	ret    
  104105:	90                   	nop

00104106 <_ZZN3hal3x863pic4initEvENKUlPNS0_3cpu9cpu_stateEE_cvPFS4_S4_EEv>:
  104106:	55                   	push   %ebp
  104107:	89 e5                	mov    %esp,%ebp
  104109:	b8 ea 40 10 00       	mov    $0x1040ea,%eax
  10410e:	5d                   	pop    %ebp
  10410f:	c3                   	ret    

00104110 <_ZN3hal3x863pic4initEv>:

/*
Initialise the PIC
*/
void pic::init(  )
{
  104110:	55                   	push   %ebp
  104111:	89 e5                	mov    %esp,%ebp
  104113:	83 ec 28             	sub    $0x28,%esp
	//remap the IRQs - master pic
	io::outb(pic::pic1_cmd, 0x11);
  104116:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  10411d:	00 
  10411e:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  104125:	e8 5a 59 00 00       	call   109a84 <_ZN3hal3x862io4outbEth>
	io::outb(pic::pic1_data, pic::irq_base);
  10412a:	c7 44 24 04 30 00 00 	movl   $0x30,0x4(%esp)
  104131:	00 
  104132:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  104139:	e8 46 59 00 00       	call   109a84 <_ZN3hal3x862io4outbEth>
	io::outb(pic::pic1_data, 0x04);
  10413e:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  104145:	00 
  104146:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  10414d:	e8 32 59 00 00       	call   109a84 <_ZN3hal3x862io4outbEth>
	io::outb(pic::pic1_data, 0x01);
  104152:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  104159:	00 
  10415a:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  104161:	e8 1e 59 00 00       	call   109a84 <_ZN3hal3x862io4outbEth>

	//remap the IRQs - slave pic
	io::outb(pic::pic2_cmd, 0x11);
  104166:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  10416d:	00 
  10416e:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  104175:	e8 0a 59 00 00       	call   109a84 <_ZN3hal3x862io4outbEth>
	io::outb(pic::pic2_data, pic::irq_base + 8);
  10417a:	c7 44 24 04 38 00 00 	movl   $0x38,0x4(%esp)
  104181:	00 
  104182:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  104189:	e8 f6 58 00 00       	call   109a84 <_ZN3hal3x862io4outbEth>
	io::outb(pic::pic2_data, 0x04);
  10418e:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  104195:	00 
  104196:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  10419d:	e8 e2 58 00 00       	call   109a84 <_ZN3hal3x862io4outbEth>
	io::outb(pic::pic2_data, 0x01);
  1041a2:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  1041a9:	00 
  1041aa:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  1041b1:	e8 ce 58 00 00       	call   109a84 <_ZN3hal3x862io4outbEth>

	//disable all IRQs
	this->mask(0xFFFF);
  1041b6:	c7 44 24 04 ff ff 00 	movl   $0xffff,0x4(%esp)
  1041bd:	00 
  1041be:	8b 45 08             	mov    0x8(%ebp),%eax
  1041c1:	89 04 24             	mov    %eax,(%esp)
  1041c4:	e8 6b 00 00 00       	call   104234 <_ZN3hal3x863pic4maskEt>

	//register the same handler for all IRQs
	for(uint32_t i = pic::irq_base; i < pic::irq_limit; i++)
  1041c9:	c7 45 f4 30 00 00 00 	movl   $0x30,-0xc(%ebp)
  1041d0:	eb 1e                	jmp    1041f0 <_ZN3hal3x863pic4initEv+0xe0>
	{
		intr::handler(i, []( cpu::cpu_state *cpu ) { pic &pic = pic::instance(); cpu = pic.irq(cpu); return cpu; });
  1041d2:	8d 45 f3             	lea    -0xd(%ebp),%eax
  1041d5:	89 04 24             	mov    %eax,(%esp)
  1041d8:	e8 29 ff ff ff       	call   104106 <_ZZN3hal3x863pic4initEvENKUlPNS0_3cpu9cpu_stateEE_cvPFS4_S4_EEv>
  1041dd:	89 44 24 04          	mov    %eax,0x4(%esp)
  1041e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1041e4:	89 04 24             	mov    %eax,(%esp)
  1041e7:	e8 ff f8 ff ff       	call   103aeb <_ZN3hal3x864intr7handlerEjPFPNS0_3cpu9cpu_stateES4_E>

	//disable all IRQs
	this->mask(0xFFFF);

	//register the same handler for all IRQs
	for(uint32_t i = pic::irq_base; i < pic::irq_limit; i++)
  1041ec:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  1041f0:	83 7d f4 3e          	cmpl   $0x3e,-0xc(%ebp)
  1041f4:	76 dc                	jbe    1041d2 <_ZN3hal3x863pic4initEv+0xc2>
	{
		intr::handler(i, []( cpu::cpu_state *cpu ) { pic &pic = pic::instance(); cpu = pic.irq(cpu); return cpu; });
	}
}
  1041f6:	c9                   	leave  
  1041f7:	c3                   	ret    

001041f8 <_ZN3hal3x863pic4maskEv>:

/*
get the irq-mask
*/
uint16_t pic::mask(  )
{
  1041f8:	55                   	push   %ebp
  1041f9:	89 e5                	mov    %esp,%ebp
  1041fb:	83 ec 28             	sub    $0x28,%esp
	uint16_t mask1 = (uint16_t)io::inb(pic::pic1_data);
  1041fe:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  104205:	e8 22 58 00 00       	call   109a2c <_ZN3hal3x862io3inbEt>
  10420a:	0f b6 c0             	movzbl %al,%eax
  10420d:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	uint16_t mask2 = (uint16_t)io::inb(pic::pic2_data) << 8;
  104211:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  104218:	e8 0f 58 00 00       	call   109a2c <_ZN3hal3x862io3inbEt>
  10421d:	0f b6 c0             	movzbl %al,%eax
  104220:	c1 e0 08             	shl    $0x8,%eax
  104223:	66 89 45 f4          	mov    %ax,-0xc(%ebp)

	return mask1 | mask2;
  104227:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
  10422b:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
  10422f:	09 d0                	or     %edx,%eax
}
  104231:	c9                   	leave  
  104232:	c3                   	ret    
  104233:	90                   	nop

00104234 <_ZN3hal3x863pic4maskEt>:

/*
set the irq-mask
*/
uint16_t pic::mask( uint16_t mask )
{
  104234:	55                   	push   %ebp
  104235:	89 e5                	mov    %esp,%ebp
  104237:	83 ec 28             	sub    $0x28,%esp
  10423a:	8b 45 0c             	mov    0xc(%ebp),%eax
  10423d:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
	uint16_t ret = this->mask();
  104241:	8b 45 08             	mov    0x8(%ebp),%eax
  104244:	89 04 24             	mov    %eax,(%esp)
  104247:	e8 ac ff ff ff       	call   1041f8 <_ZN3hal3x863pic4maskEv>
  10424c:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	
	io::outb(pic::pic1_data, (uint8_t)mask);
  104250:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  104254:	0f b6 c0             	movzbl %al,%eax
  104257:	89 44 24 04          	mov    %eax,0x4(%esp)
  10425b:	c7 04 24 21 00 00 00 	movl   $0x21,(%esp)
  104262:	e8 1d 58 00 00       	call   109a84 <_ZN3hal3x862io4outbEth>
	io::outb(pic::pic2_data, (uint8_t)mask >> 8);
  104267:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
  10426b:	0f b6 c0             	movzbl %al,%eax
  10426e:	c1 f8 08             	sar    $0x8,%eax
  104271:	0f b6 c0             	movzbl %al,%eax
  104274:	89 44 24 04          	mov    %eax,0x4(%esp)
  104278:	c7 04 24 a1 00 00 00 	movl   $0xa1,(%esp)
  10427f:	e8 00 58 00 00       	call   109a84 <_ZN3hal3x862io4outbEth>

	return ret;
  104284:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
}
  104288:	c9                   	leave  
  104289:	c3                   	ret    

0010428a <_ZN3hal3x863pic6enableEh>:

/*
enable an irq
*/
void pic::enable( uint8_t irq )
{
  10428a:	55                   	push   %ebp
  10428b:	89 e5                	mov    %esp,%ebp
  10428d:	53                   	push   %ebx
  10428e:	83 ec 14             	sub    $0x14,%esp
  104291:	8b 45 0c             	mov    0xc(%ebp),%eax
  104294:	88 45 f4             	mov    %al,-0xc(%ebp)
	mask(this->mask() ^ (1 << (uint16_t)irq));
  104297:	8b 45 08             	mov    0x8(%ebp),%eax
  10429a:	89 04 24             	mov    %eax,(%esp)
  10429d:	e8 56 ff ff ff       	call   1041f8 <_ZN3hal3x863pic4maskEv>
  1042a2:	89 c2                	mov    %eax,%edx
  1042a4:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
  1042a8:	bb 01 00 00 00       	mov    $0x1,%ebx
  1042ad:	89 c1                	mov    %eax,%ecx
  1042af:	d3 e3                	shl    %cl,%ebx
  1042b1:	89 d8                	mov    %ebx,%eax
  1042b3:	31 d0                	xor    %edx,%eax
  1042b5:	0f b7 c0             	movzwl %ax,%eax
  1042b8:	89 44 24 04          	mov    %eax,0x4(%esp)
  1042bc:	8b 45 08             	mov    0x8(%ebp),%eax
  1042bf:	89 04 24             	mov    %eax,(%esp)
  1042c2:	e8 6d ff ff ff       	call   104234 <_ZN3hal3x863pic4maskEt>
}
  1042c7:	83 c4 14             	add    $0x14,%esp
  1042ca:	5b                   	pop    %ebx
  1042cb:	5d                   	pop    %ebp
  1042cc:	c3                   	ret    
  1042cd:	90                   	nop

001042ce <_ZN3hal3x863pic7disableEh>:

/*
disable an irq
*/
void pic::disable( uint8_t irq )
{
  1042ce:	55                   	push   %ebp
  1042cf:	89 e5                	mov    %esp,%ebp
  1042d1:	53                   	push   %ebx
  1042d2:	83 ec 14             	sub    $0x14,%esp
  1042d5:	8b 45 0c             	mov    0xc(%ebp),%eax
  1042d8:	88 45 f4             	mov    %al,-0xc(%ebp)
	mask(this->mask() | (1 << (uint16_t)irq));
  1042db:	8b 45 08             	mov    0x8(%ebp),%eax
  1042de:	89 04 24             	mov    %eax,(%esp)
  1042e1:	e8 12 ff ff ff       	call   1041f8 <_ZN3hal3x863pic4maskEv>
  1042e6:	89 c2                	mov    %eax,%edx
  1042e8:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
  1042ec:	bb 01 00 00 00       	mov    $0x1,%ebx
  1042f1:	89 c1                	mov    %eax,%ecx
  1042f3:	d3 e3                	shl    %cl,%ebx
  1042f5:	89 d8                	mov    %ebx,%eax
  1042f7:	09 d0                	or     %edx,%eax
  1042f9:	0f b7 c0             	movzwl %ax,%eax
  1042fc:	89 44 24 04          	mov    %eax,0x4(%esp)
  104300:	8b 45 08             	mov    0x8(%ebp),%eax
  104303:	89 04 24             	mov    %eax,(%esp)
  104306:	e8 29 ff ff ff       	call   104234 <_ZN3hal3x863pic4maskEt>
}
  10430b:	83 c4 14             	add    $0x14,%esp
  10430e:	5b                   	pop    %ebx
  10430f:	5d                   	pop    %ebp
  104310:	c3                   	ret    
  104311:	90                   	nop

00104312 <_ZN3hal3x863pic3eoiEh>:

/*
send the end of interrupt to the pic
*/
void pic::eoi( uint8_t irq )
{
  104312:	55                   	push   %ebp
  104313:	89 e5                	mov    %esp,%ebp
  104315:	83 ec 18             	sub    $0x18,%esp
  104318:	8b 45 0c             	mov    0xc(%ebp),%eax
  10431b:	88 45 f4             	mov    %al,-0xc(%ebp)
	if(irq >= 0x07) 						
  10431e:	80 7d f4 06          	cmpb   $0x6,-0xc(%ebp)
  104322:	76 14                	jbe    104338 <_ZN3hal3x863pic3eoiEh+0x26>
	{
		io::outb(pic::pic2_cmd, 0x20);
  104324:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  10432b:	00 
  10432c:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
  104333:	e8 4c 57 00 00       	call   109a84 <_ZN3hal3x862io4outbEth>
	}

	io::outb(pic::pic1_cmd, 0x20);
  104338:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  10433f:	00 
  104340:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
  104347:	e8 38 57 00 00       	call   109a84 <_ZN3hal3x862io4outbEth>
}
  10434c:	c9                   	leave  
  10434d:	c3                   	ret    

0010434e <_ZN3hal3x863pic7handlerEhPFPNS0_3cpu9cpu_stateES4_E>:

/*
set handler for irq
*/
void pic::handler( uint8_t irq, pic::handler_t handler )
{
  10434e:	55                   	push   %ebp
  10434f:	89 e5                	mov    %esp,%ebp
  104351:	83 ec 04             	sub    $0x4,%esp
  104354:	8b 45 0c             	mov    0xc(%ebp),%eax
  104357:	88 45 fc             	mov    %al,-0x4(%ebp)
	handlers[irq] = handler;
  10435a:	0f b6 55 fc          	movzbl -0x4(%ebp),%edx
  10435e:	8b 45 08             	mov    0x8(%ebp),%eax
  104361:	8b 4d 10             	mov    0x10(%ebp),%ecx
  104364:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
}
  104367:	c9                   	leave  
  104368:	c3                   	ret    
  104369:	90                   	nop

0010436a <_ZN3hal3x863pic3irqEPNS0_3cpu9cpu_stateE>:

/*
Handler for all IRQs
*/
cpu::cpu_state *pic::irq( cpu::cpu_state *cpu )
{
  10436a:	55                   	push   %ebp
  10436b:	89 e5                	mov    %esp,%ebp
  10436d:	83 ec 28             	sub    $0x28,%esp
	cpu::cpu_state *new_cpu = cpu;
  104370:	8b 45 0c             	mov    0xc(%ebp),%eax
  104373:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32_t irq = cpu->intr - pic::irq_base;
  104376:	8b 45 0c             	mov    0xc(%ebp),%eax
  104379:	8b 40 1c             	mov    0x1c(%eax),%eax
  10437c:	83 e8 30             	sub    $0x30,%eax
  10437f:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(this->handlers[irq] != pic::null_handler)
  104382:	8b 45 08             	mov    0x8(%ebp),%eax
  104385:	8b 55 f0             	mov    -0x10(%ebp),%edx
  104388:	8b 04 90             	mov    (%eax,%edx,4),%eax
  10438b:	85 c0                	test   %eax,%eax
  10438d:	74 14                	je     1043a3 <_ZN3hal3x863pic3irqEPNS0_3cpu9cpu_stateE+0x39>
	{
		new_cpu = this->handlers[irq](cpu);
  10438f:	8b 45 08             	mov    0x8(%ebp),%eax
  104392:	8b 55 f0             	mov    -0x10(%ebp),%edx
  104395:	8b 04 90             	mov    (%eax,%edx,4),%eax
  104398:	8b 55 0c             	mov    0xc(%ebp),%edx
  10439b:	89 14 24             	mov    %edx,(%esp)
  10439e:	ff d0                	call   *%eax
  1043a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	this->eoi(irq);
  1043a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1043a6:	0f b6 c0             	movzbl %al,%eax
  1043a9:	89 44 24 04          	mov    %eax,0x4(%esp)
  1043ad:	8b 45 08             	mov    0x8(%ebp),%eax
  1043b0:	89 04 24             	mov    %eax,(%esp)
  1043b3:	e8 5a ff ff ff       	call   104312 <_ZN3hal3x863pic3eoiEh>

	return new_cpu;
  1043b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
  1043bb:	c9                   	leave  
  1043bc:	c3                   	ret    
  1043bd:	90                   	nop

001043be <_ZN3hal3x863vmmC1Ev>:
#include "include/vmm.hpp"

using namespace hal::x86;

vmm::vmm(  ) : cntxt(nullptr), addr_space_base(0x0), addr_space_limit(0x0)
  1043be:	55                   	push   %ebp
  1043bf:	89 e5                	mov    %esp,%ebp
  1043c1:	8b 45 08             	mov    0x8(%ebp),%eax
  1043c4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  1043ca:	8b 45 08             	mov    0x8(%ebp),%eax
  1043cd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  1043d4:	8b 45 08             	mov    0x8(%ebp),%eax
  1043d7:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
  1043de:	8b 45 08             	mov    0x8(%ebp),%eax
  1043e1:	c7 80 0c 00 02 00 00 	movl   $0x0,0x2000c(%eax)
  1043e8:	00 00 00 
  1043eb:	8b 45 08             	mov    0x8(%ebp),%eax
  1043ee:	c7 80 10 00 02 00 00 	movl   $0x0,0x20010(%eax)
  1043f5:	00 00 00 
{
		
}
  1043f8:	5d                   	pop    %ebp
  1043f9:	c3                   	ret    

001043fa <_ZN3hal3x863vmmD1Ev>:

vmm::~vmm(  )
  1043fa:	55                   	push   %ebp
  1043fb:	89 e5                	mov    %esp,%ebp
  1043fd:	53                   	push   %ebx
  1043fe:	83 ec 24             	sub    $0x24,%esp
{
	for(size_t x = bitmap_px(this->addr_space_base); x <= bitmap_px(this->addr_space_limit); x++)
  104401:	8b 45 08             	mov    0x8(%ebp),%eax
  104404:	8b 40 04             	mov    0x4(%eax),%eax
  104407:	c1 e8 11             	shr    $0x11,%eax
  10440a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  10440d:	eb 71                	jmp    104480 <_ZN3hal3x863vmmD1Ev+0x86>
	{
		if(this->bitmap[x] != 0xFFFFFFFF)
  10440f:	8b 45 08             	mov    0x8(%ebp),%eax
  104412:	8b 55 f4             	mov    -0xc(%ebp),%edx
  104415:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
  104419:	83 f8 ff             	cmp    $0xffffffff,%eax
  10441c:	74 5e                	je     10447c <_ZN3hal3x863vmmD1Ev+0x82>
		{
			for(size_t y = 0; y < 32 && x <= bitmap_px(this->addr_space_limit); y++)
  10441e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  104425:	eb 41                	jmp    104468 <_ZN3hal3x863vmmD1Ev+0x6e>
			{
				if(!(this->bitmap[x] & (1 << y)))
  104427:	8b 45 08             	mov    0x8(%ebp),%eax
  10442a:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10442d:	8b 54 90 0c          	mov    0xc(%eax,%edx,4),%edx
  104431:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104434:	bb 01 00 00 00       	mov    $0x1,%ebx
  104439:	89 c1                	mov    %eax,%ecx
  10443b:	d3 e3                	shl    %cl,%ebx
  10443d:	89 d8                	mov    %ebx,%eax
  10443f:	21 d0                	and    %edx,%eax
  104441:	85 c0                	test   %eax,%eax
  104443:	75 1f                	jne    104464 <_ZN3hal3x863vmmD1Ev+0x6a>
				{
					this->free(addr(x,y));
  104445:	8b 45 f4             	mov    -0xc(%ebp),%eax
  104448:	c1 e0 05             	shl    $0x5,%eax
  10444b:	89 c2                	mov    %eax,%edx
  10444d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104450:	01 d0                	add    %edx,%eax
  104452:	c1 e0 0c             	shl    $0xc,%eax
  104455:	89 44 24 04          	mov    %eax,0x4(%esp)
  104459:	8b 45 08             	mov    0x8(%ebp),%eax
  10445c:	89 04 24             	mov    %eax,(%esp)
  10445f:	e8 86 04 00 00       	call   1048ea <_ZN3hal3x863vmm4freeEj>
{
	for(size_t x = bitmap_px(this->addr_space_base); x <= bitmap_px(this->addr_space_limit); x++)
	{
		if(this->bitmap[x] != 0xFFFFFFFF)
		{
			for(size_t y = 0; y < 32 && x <= bitmap_px(this->addr_space_limit); y++)
  104464:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  104468:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
  10446c:	77 0e                	ja     10447c <_ZN3hal3x863vmmD1Ev+0x82>
  10446e:	8b 45 08             	mov    0x8(%ebp),%eax
  104471:	8b 40 08             	mov    0x8(%eax),%eax
  104474:	c1 e8 11             	shr    $0x11,%eax
  104477:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  10447a:	73 ab                	jae    104427 <_ZN3hal3x863vmmD1Ev+0x2d>
		
}

vmm::~vmm(  )
{
	for(size_t x = bitmap_px(this->addr_space_base); x <= bitmap_px(this->addr_space_limit); x++)
  10447c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  104480:	8b 45 08             	mov    0x8(%ebp),%eax
  104483:	8b 40 08             	mov    0x8(%eax),%eax
  104486:	c1 e8 11             	shr    $0x11,%eax
  104489:	3b 45 f4             	cmp    -0xc(%ebp),%eax
  10448c:	73 81                	jae    10440f <_ZN3hal3x863vmmD1Ev+0x15>
					this->free(addr(x,y));
				}
			}
		}
	}
}
  10448e:	83 c4 24             	add    $0x24,%esp
  104491:	5b                   	pop    %ebx
  104492:	5d                   	pop    %ebp
  104493:	c3                   	ret    

00104494 <_ZN3hal3x863vmm4initEPNS0_7contextEjj>:

vmm::error vmm::init( context *cntxt, uintptr_t base, uintptr_t limit )
{
  104494:	55                   	push   %ebp
  104495:	89 e5                	mov    %esp,%ebp
  104497:	56                   	push   %esi
  104498:	53                   	push   %ebx
  104499:	83 ec 10             	sub    $0x10,%esp
	this->cntxt = cntxt;
  10449c:	8b 45 08             	mov    0x8(%ebp),%eax
  10449f:	8b 55 0c             	mov    0xc(%ebp),%edx
  1044a2:	89 10                	mov    %edx,(%eax)

	this->addr_space_base  = base;
  1044a4:	8b 45 08             	mov    0x8(%ebp),%eax
  1044a7:	8b 55 10             	mov    0x10(%ebp),%edx
  1044aa:	89 50 04             	mov    %edx,0x4(%eax)
	this->addr_space_limit = limit;
  1044ad:	8b 45 08             	mov    0x8(%ebp),%eax
  1044b0:	8b 55 14             	mov    0x14(%ebp),%edx
  1044b3:	89 50 08             	mov    %edx,0x8(%eax)

	for(size_t x = 0; x < vmm::bitmap_size; x++)
  1044b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  1044bd:	eb 12                	jmp    1044d1 <_ZN3hal3x863vmm4initEPNS0_7contextEjj+0x3d>
	{
		this->bitmap[x] = 0x00000000;
  1044bf:	8b 45 08             	mov    0x8(%ebp),%eax
  1044c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1044c5:	c7 44 90 0c 00 00 00 	movl   $0x0,0xc(%eax,%edx,4)
  1044cc:	00 
	this->cntxt = cntxt;

	this->addr_space_base  = base;
	this->addr_space_limit = limit;

	for(size_t x = 0; x < vmm::bitmap_size; x++)
  1044cd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  1044d1:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
  1044d8:	76 e5                	jbe    1044bf <_ZN3hal3x863vmm4initEPNS0_7contextEjj+0x2b>
	{
		this->bitmap[x] = 0x00000000;
	}

	for(uintptr_t addr = this->addr_space_base; addr < this->addr_space_limit; addr += memory::page_size_byte)
  1044da:	8b 45 08             	mov    0x8(%ebp),%eax
  1044dd:	8b 40 04             	mov    0x4(%eax),%eax
  1044e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
  1044e3:	eb 33                	jmp    104518 <_ZN3hal3x863vmm4initEPNS0_7contextEjj+0x84>
	{
		set_bit(this->bitmap[bitmap_px(addr)], bitmap_py(addr));
  1044e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1044e8:	c1 e8 11             	shr    $0x11,%eax
  1044eb:	8b 55 08             	mov    0x8(%ebp),%edx
  1044ee:	8b 5c 82 0c          	mov    0xc(%edx,%eax,4),%ebx
  1044f2:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1044f5:	c1 ea 0c             	shr    $0xc,%edx
  1044f8:	83 e2 1f             	and    $0x1f,%edx
  1044fb:	be 01 00 00 00       	mov    $0x1,%esi
  104500:	89 d1                	mov    %edx,%ecx
  104502:	d3 e6                	shl    %cl,%esi
  104504:	89 f2                	mov    %esi,%edx
  104506:	09 d3                	or     %edx,%ebx
  104508:	89 d9                	mov    %ebx,%ecx
  10450a:	8b 55 08             	mov    0x8(%ebp),%edx
  10450d:	89 4c 82 0c          	mov    %ecx,0xc(%edx,%eax,4)
	for(size_t x = 0; x < vmm::bitmap_size; x++)
	{
		this->bitmap[x] = 0x00000000;
	}

	for(uintptr_t addr = this->addr_space_base; addr < this->addr_space_limit; addr += memory::page_size_byte)
  104511:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
  104518:	8b 45 08             	mov    0x8(%ebp),%eax
  10451b:	8b 40 08             	mov    0x8(%eax),%eax
  10451e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  104521:	77 c2                	ja     1044e5 <_ZN3hal3x863vmm4initEPNS0_7contextEjj+0x51>
	{
		set_bit(this->bitmap[bitmap_px(addr)], bitmap_py(addr));
	}

	if(!memory::kernel_base || !memory::kernel_limit)
  104523:	a1 68 ec 10 00       	mov    0x10ec68,%eax
  104528:	85 c0                	test   %eax,%eax
  10452a:	74 09                	je     104535 <_ZN3hal3x863vmm4initEPNS0_7contextEjj+0xa1>
  10452c:	a1 6c ec 10 00       	mov    0x10ec6c,%eax
  104531:	85 c0                	test   %eax,%eax
  104533:	75 0a                	jne    10453f <_ZN3hal3x863vmm4initEPNS0_7contextEjj+0xab>
	{
		return vmm::error::no_kernel_addr;
  104535:	b8 01 00 00 00       	mov    $0x1,%eax
  10453a:	e9 8f 00 00 00       	jmp    1045ce <_ZN3hal3x863vmm4initEPNS0_7contextEjj+0x13a>
	}

	for(uintptr_t addr = memory::kernel_base; addr < memory::kernel_limit; addr += memory::page_size_byte)
  10453f:	a1 68 ec 10 00       	mov    0x10ec68,%eax
  104544:	89 45 ec             	mov    %eax,-0x14(%ebp)
  104547:	eb 33                	jmp    10457c <_ZN3hal3x863vmm4initEPNS0_7contextEjj+0xe8>
	{
		clear_bit(this->bitmap[bitmap_px(addr)], bitmap_py(addr));
  104549:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10454c:	c1 e8 11             	shr    $0x11,%eax
  10454f:	8b 55 08             	mov    0x8(%ebp),%edx
  104552:	8b 5c 82 0c          	mov    0xc(%edx,%eax,4),%ebx
  104556:	8b 55 ec             	mov    -0x14(%ebp),%edx
  104559:	c1 ea 0c             	shr    $0xc,%edx
  10455c:	83 e2 1f             	and    $0x1f,%edx
  10455f:	be 01 00 00 00       	mov    $0x1,%esi
  104564:	89 d1                	mov    %edx,%ecx
  104566:	d3 e6                	shl    %cl,%esi
  104568:	89 f2                	mov    %esi,%edx
  10456a:	31 d3                	xor    %edx,%ebx
  10456c:	89 d9                	mov    %ebx,%ecx
  10456e:	8b 55 08             	mov    0x8(%ebp),%edx
  104571:	89 4c 82 0c          	mov    %ecx,0xc(%edx,%eax,4)
	if(!memory::kernel_base || !memory::kernel_limit)
	{
		return vmm::error::no_kernel_addr;
	}

	for(uintptr_t addr = memory::kernel_base; addr < memory::kernel_limit; addr += memory::page_size_byte)
  104575:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
  10457c:	a1 6c ec 10 00       	mov    0x10ec6c,%eax
  104581:	39 45 ec             	cmp    %eax,-0x14(%ebp)
  104584:	72 c3                	jb     104549 <_ZN3hal3x863vmm4initEPNS0_7contextEjj+0xb5>
	{
		clear_bit(this->bitmap[bitmap_px(addr)], bitmap_py(addr));
	}

	clear_bit(this->bitmap[bitmap_px(0x0)], bitmap_py(0x0));
  104586:	8b 45 08             	mov    0x8(%ebp),%eax
  104589:	8b 40 0c             	mov    0xc(%eax),%eax
  10458c:	83 f0 01             	xor    $0x1,%eax
  10458f:	89 c2                	mov    %eax,%edx
  104591:	8b 45 08             	mov    0x8(%ebp),%eax
  104594:	89 50 0c             	mov    %edx,0xc(%eax)
	clear_bit(this->bitmap[bitmap_px((uintptr_t)this->bitmap)], bitmap_py((uintptr_t)this->bitmap));
  104597:	8b 45 08             	mov    0x8(%ebp),%eax
  10459a:	83 c0 0c             	add    $0xc,%eax
  10459d:	c1 e8 11             	shr    $0x11,%eax
  1045a0:	8b 55 08             	mov    0x8(%ebp),%edx
  1045a3:	8b 5c 82 0c          	mov    0xc(%edx,%eax,4),%ebx
  1045a7:	8b 55 08             	mov    0x8(%ebp),%edx
  1045aa:	83 c2 0c             	add    $0xc,%edx
  1045ad:	c1 ea 0c             	shr    $0xc,%edx
  1045b0:	83 e2 1f             	and    $0x1f,%edx
  1045b3:	be 01 00 00 00       	mov    $0x1,%esi
  1045b8:	89 d1                	mov    %edx,%ecx
  1045ba:	d3 e6                	shl    %cl,%esi
  1045bc:	89 f2                	mov    %esi,%edx
  1045be:	89 d9                	mov    %ebx,%ecx
  1045c0:	31 d1                	xor    %edx,%ecx
  1045c2:	8b 55 08             	mov    0x8(%ebp),%edx
  1045c5:	89 4c 82 0c          	mov    %ecx,0xc(%edx,%eax,4)

	return vmm::error::init_ok;
  1045c9:	b8 00 00 00 00       	mov    $0x0,%eax
}
  1045ce:	83 c4 10             	add    $0x10,%esp
  1045d1:	5b                   	pop    %ebx
  1045d2:	5e                   	pop    %esi
  1045d3:	5d                   	pop    %ebp
  1045d4:	c3                   	ret    
  1045d5:	90                   	nop

001045d6 <_ZN3hal3x863vmm5allocEj>:

uintptr_t vmm::alloc( uint32_t flags )
{
  1045d6:	55                   	push   %ebp
  1045d7:	89 e5                	mov    %esp,%ebp
  1045d9:	56                   	push   %esi
  1045da:	53                   	push   %ebx
  1045db:	83 ec 20             	sub    $0x20,%esp
	pmm &pmm = pmm::instance();
  1045de:	e8 44 7f 00 00       	call   10c527 <_ZN3hal3x863pmm8instanceEv>
  1045e3:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uintptr_t phys = pmm.alloc();
  1045e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1045e9:	89 04 24             	mov    %eax,(%esp)
  1045ec:	e8 a9 44 00 00       	call   108a9a <_ZN3hal3x863pmm5allocEv>
  1045f1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uintptr_t virt = 0x0;
  1045f4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	if(!phys)
  1045fb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  1045ff:	75 0a                	jne    10460b <_ZN3hal3x863vmm5allocEj+0x35>
	{
		return 0x0;
  104601:	b8 00 00 00 00       	mov    $0x0,%eax
  104606:	e9 93 00 00 00       	jmp    10469e <_ZN3hal3x863vmm5allocEj+0xc8>
	}

	if(this->fast_access)
  10460b:	8b 45 08             	mov    0x8(%ebp),%eax
  10460e:	8b 80 0c 00 02 00    	mov    0x2000c(%eax),%eax
  104614:	85 c0                	test   %eax,%eax
  104616:	74 6c                	je     104684 <_ZN3hal3x863vmm5allocEj+0xae>
	{
		virt = fast_access;
  104618:	8b 45 08             	mov    0x8(%ebp),%eax
  10461b:	8b 80 0c 00 02 00    	mov    0x2000c(%eax),%eax
  104621:	89 45 ec             	mov    %eax,-0x14(%ebp)

		clear_bit(this->bitmap[bitmap_px(virt)], bitmap_py(virt));
  104624:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104627:	c1 e8 11             	shr    $0x11,%eax
  10462a:	8b 55 08             	mov    0x8(%ebp),%edx
  10462d:	8b 5c 82 0c          	mov    0xc(%edx,%eax,4),%ebx
  104631:	8b 55 ec             	mov    -0x14(%ebp),%edx
  104634:	c1 ea 0c             	shr    $0xc,%edx
  104637:	83 e2 1f             	and    $0x1f,%edx
  10463a:	be 01 00 00 00       	mov    $0x1,%esi
  10463f:	89 d1                	mov    %edx,%ecx
  104641:	d3 e6                	shl    %cl,%esi
  104643:	89 f2                	mov    %esi,%edx
  104645:	31 d3                	xor    %edx,%ebx
  104647:	89 d9                	mov    %ebx,%ecx
  104649:	8b 55 08             	mov    0x8(%ebp),%edx
  10464c:	89 4c 82 0c          	mov    %ecx,0xc(%edx,%eax,4)

		fast_access = 0x0;
  104650:	8b 45 08             	mov    0x8(%ebp),%eax
  104653:	c7 80 0c 00 02 00 00 	movl   $0x0,0x2000c(%eax)
  10465a:	00 00 00 

		this->cntxt->map(virt, phys, flags);
  10465d:	8b 45 08             	mov    0x8(%ebp),%eax
  104660:	8b 00                	mov    (%eax),%eax
  104662:	8b 55 0c             	mov    0xc(%ebp),%edx
  104665:	89 54 24 0c          	mov    %edx,0xc(%esp)
  104669:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10466c:	89 54 24 08          	mov    %edx,0x8(%esp)
  104670:	8b 55 ec             	mov    -0x14(%ebp),%edx
  104673:	89 54 24 04          	mov    %edx,0x4(%esp)
  104677:	89 04 24             	mov    %eax,(%esp)
  10467a:	e8 db 0d 00 00       	call   10545a <_ZN3hal3x867context3mapEjjj>

		return virt;
  10467f:	8b 45 ec             	mov    -0x14(%ebp),%eax
  104682:	eb 1a                	jmp    10469e <_ZN3hal3x863vmm5allocEj+0xc8>
	}

	return this->alloc(flags, 1);
  104684:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
  10468b:	00 
  10468c:	8b 45 0c             	mov    0xc(%ebp),%eax
  10468f:	89 44 24 04          	mov    %eax,0x4(%esp)
  104693:	8b 45 08             	mov    0x8(%ebp),%eax
  104696:	89 04 24             	mov    %eax,(%esp)
  104699:	e8 08 00 00 00       	call   1046a6 <_ZN3hal3x863vmm5allocEjj>
}
  10469e:	83 c4 20             	add    $0x20,%esp
  1046a1:	5b                   	pop    %ebx
  1046a2:	5e                   	pop    %esi
  1046a3:	5d                   	pop    %ebp
  1046a4:	c3                   	ret    
  1046a5:	90                   	nop

001046a6 <_ZN3hal3x863vmm5allocEjj>:

uintptr_t vmm::alloc( uint32_t flags, size_t n )
{
  1046a6:	55                   	push   %ebp
  1046a7:	89 e5                	mov    %esp,%ebp
  1046a9:	56                   	push   %esi
  1046aa:	53                   	push   %ebx
  1046ab:	83 ec 30             	sub    $0x30,%esp
	pmm &pmm = pmm::instance();
  1046ae:	e8 74 7e 00 00       	call   10c527 <_ZN3hal3x863pmm8instanceEv>
  1046b3:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	uintptr_t phys = 0x0;
  1046b6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uintptr_t virt = 0x0;
  1046bd:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)

	size_t counter = 0;
  1046c4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if(this->speedup_x > bitmap_px(this->addr_space_limit) || this->speedup_x < bitmap_px(this->addr_space_base))
  1046cb:	8b 45 08             	mov    0x8(%ebp),%eax
  1046ce:	8b 90 10 00 02 00    	mov    0x20010(%eax),%edx
  1046d4:	8b 45 08             	mov    0x8(%ebp),%eax
  1046d7:	8b 40 08             	mov    0x8(%eax),%eax
  1046da:	c1 e8 11             	shr    $0x11,%eax
  1046dd:	39 c2                	cmp    %eax,%edx
  1046df:	77 16                	ja     1046f7 <_ZN3hal3x863vmm5allocEjj+0x51>
  1046e1:	8b 45 08             	mov    0x8(%ebp),%eax
  1046e4:	8b 90 10 00 02 00    	mov    0x20010(%eax),%edx
  1046ea:	8b 45 08             	mov    0x8(%ebp),%eax
  1046ed:	8b 40 04             	mov    0x4(%eax),%eax
  1046f0:	c1 e8 11             	shr    $0x11,%eax
  1046f3:	39 c2                	cmp    %eax,%edx
  1046f5:	73 14                	jae    10470b <_ZN3hal3x863vmm5allocEjj+0x65>
	{
		this->speedup_x = bitmap_px(this->addr_space_base);
  1046f7:	8b 45 08             	mov    0x8(%ebp),%eax
  1046fa:	8b 40 04             	mov    0x4(%eax),%eax
  1046fd:	c1 e8 11             	shr    $0x11,%eax
  104700:	89 c2                	mov    %eax,%edx
  104702:	8b 45 08             	mov    0x8(%ebp),%eax
  104705:	89 90 10 00 02 00    	mov    %edx,0x20010(%eax)
	}

	for(size_t x = this->speedup_x; x <= bitmap_px(this->addr_space_limit) && counter < n; x++)
  10470b:	8b 45 08             	mov    0x8(%ebp),%eax
  10470e:	8b 80 10 00 02 00    	mov    0x20010(%eax),%eax
  104714:	89 45 f0             	mov    %eax,-0x10(%ebp)
  104717:	e9 a8 01 00 00       	jmp    1048c4 <_ZN3hal3x863vmm5allocEjj+0x21e>
	{
		if(this->bitmap[x])
  10471c:	8b 45 08             	mov    0x8(%ebp),%eax
  10471f:	8b 55 f0             	mov    -0x10(%ebp),%edx
  104722:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
  104726:	85 c0                	test   %eax,%eax
  104728:	0f 84 92 01 00 00    	je     1048c0 <_ZN3hal3x863vmm5allocEjj+0x21a>
		{
			this->speedup_x = x;
  10472e:	8b 45 08             	mov    0x8(%ebp),%eax
  104731:	8b 55 f0             	mov    -0x10(%ebp),%edx
  104734:	89 90 10 00 02 00    	mov    %edx,0x20010(%eax)

			for(size_t y = 0; y < 32 && counter < n; y++)
  10473a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  104741:	e9 68 01 00 00       	jmp    1048ae <_ZN3hal3x863vmm5allocEjj+0x208>
			{
				if((x > bitmap_px(this->addr_space_limit) /*&& y >= bitmap_py(this->addr_space_limit)*/))
  104746:	8b 45 08             	mov    0x8(%ebp),%eax
  104749:	8b 40 08             	mov    0x8(%eax),%eax
  10474c:	c1 e8 11             	shr    $0x11,%eax
  10474f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  104752:	73 0a                	jae    10475e <_ZN3hal3x863vmm5allocEjj+0xb8>
				{
					return 0x0;
  104754:	b8 00 00 00 00       	mov    $0x0,%eax
  104759:	e9 85 01 00 00       	jmp    1048e3 <_ZN3hal3x863vmm5allocEjj+0x23d>
				}
				else if(/*x >= bitmap_px(this->addr_space_base) &&*/ x <= bitmap_px(this->addr_space_limit) && ((x == bitmap_px(this->addr_space_base) && y >= bitmap_py(this->addr_space_base)) || x > bitmap_px(this->addr_space_base)))
  10475e:	8b 45 08             	mov    0x8(%ebp),%eax
  104761:	8b 40 08             	mov    0x8(%eax),%eax
  104764:	c1 e8 11             	shr    $0x11,%eax
  104767:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  10476a:	0f 82 33 01 00 00    	jb     1048a3 <_ZN3hal3x863vmm5allocEjj+0x1fd>
  104770:	8b 45 08             	mov    0x8(%ebp),%eax
  104773:	8b 40 04             	mov    0x4(%eax),%eax
  104776:	c1 e8 11             	shr    $0x11,%eax
  104779:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  10477c:	75 11                	jne    10478f <_ZN3hal3x863vmm5allocEjj+0xe9>
  10477e:	8b 45 08             	mov    0x8(%ebp),%eax
  104781:	8b 40 04             	mov    0x4(%eax),%eax
  104784:	c1 e8 0c             	shr    $0xc,%eax
  104787:	83 e0 1f             	and    $0x1f,%eax
  10478a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  10478d:	76 12                	jbe    1047a1 <_ZN3hal3x863vmm5allocEjj+0xfb>
  10478f:	8b 45 08             	mov    0x8(%ebp),%eax
  104792:	8b 40 04             	mov    0x4(%eax),%eax
  104795:	c1 e8 11             	shr    $0x11,%eax
  104798:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  10479b:	0f 83 02 01 00 00    	jae    1048a3 <_ZN3hal3x863vmm5allocEjj+0x1fd>
				{
					if(this->bitmap[x] & (1 << y))
  1047a1:	8b 45 08             	mov    0x8(%ebp),%eax
  1047a4:	8b 55 f0             	mov    -0x10(%ebp),%edx
  1047a7:	8b 54 90 0c          	mov    0xc(%eax,%edx,4),%edx
  1047ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1047ae:	bb 01 00 00 00       	mov    $0x1,%ebx
  1047b3:	89 c1                	mov    %eax,%ecx
  1047b5:	d3 e3                	shl    %cl,%ebx
  1047b7:	89 d8                	mov    %ebx,%eax
  1047b9:	21 d0                	and    %edx,%eax
  1047bb:	85 c0                	test   %eax,%eax
  1047bd:	0f 84 d7 00 00 00    	je     10489a <_ZN3hal3x863vmm5allocEjj+0x1f4>
					{
						counter++;
  1047c3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)

						if(counter >= n)
  1047c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1047ca:	3b 45 10             	cmp    0x10(%ebp),%eax
  1047cd:	0f 82 c5 00 00 00    	jb     104898 <_ZN3hal3x863vmm5allocEjj+0x1f2>
						{
							virt = addr(x, y) - (n - 1) * memory::page_size_byte;
  1047d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1047d6:	c1 e0 05             	shl    $0x5,%eax
  1047d9:	89 c2                	mov    %eax,%edx
  1047db:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1047de:	01 d0                	add    %edx,%eax
  1047e0:	2b 45 10             	sub    0x10(%ebp),%eax
  1047e3:	83 c0 01             	add    $0x1,%eax
  1047e6:	c1 e0 0c             	shl    $0xc,%eax
  1047e9:	89 45 dc             	mov    %eax,-0x24(%ebp)

							for(size_t i = 0; i < n; i++)
  1047ec:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  1047f3:	e9 8f 00 00 00       	jmp    104887 <_ZN3hal3x863vmm5allocEjj+0x1e1>
							{
								clear_bit(this->bitmap[bitmap_px((virt + i * memory::page_size_byte))], bitmap_py((virt + i * memory::page_size_byte)));
  1047f8:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1047fb:	c1 e0 0c             	shl    $0xc,%eax
  1047fe:	89 c2                	mov    %eax,%edx
  104800:	8b 45 dc             	mov    -0x24(%ebp),%eax
  104803:	01 d0                	add    %edx,%eax
  104805:	c1 e8 11             	shr    $0x11,%eax
  104808:	8b 55 08             	mov    0x8(%ebp),%edx
  10480b:	8b 5c 82 0c          	mov    0xc(%edx,%eax,4),%ebx
  10480f:	8b 55 e8             	mov    -0x18(%ebp),%edx
  104812:	89 d1                	mov    %edx,%ecx
  104814:	c1 e1 0c             	shl    $0xc,%ecx
  104817:	8b 55 dc             	mov    -0x24(%ebp),%edx
  10481a:	01 ca                	add    %ecx,%edx
  10481c:	c1 ea 0c             	shr    $0xc,%edx
  10481f:	83 e2 1f             	and    $0x1f,%edx
  104822:	be 01 00 00 00       	mov    $0x1,%esi
  104827:	89 d1                	mov    %edx,%ecx
  104829:	d3 e6                	shl    %cl,%esi
  10482b:	89 f2                	mov    %esi,%edx
  10482d:	31 d3                	xor    %edx,%ebx
  10482f:	89 d9                	mov    %ebx,%ecx
  104831:	8b 55 08             	mov    0x8(%ebp),%edx
  104834:	89 4c 82 0c          	mov    %ecx,0xc(%edx,%eax,4)

								phys = pmm.alloc();
  104838:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10483b:	89 04 24             	mov    %eax,(%esp)
  10483e:	e8 57 42 00 00       	call   108a9a <_ZN3hal3x863pmm5allocEv>
  104843:	89 45 e0             	mov    %eax,-0x20(%ebp)

								if(!phys)
  104846:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
  10484a:	75 0a                	jne    104856 <_ZN3hal3x863vmm5allocEjj+0x1b0>
								{
									return 0x0;
  10484c:	b8 00 00 00 00       	mov    $0x0,%eax
  104851:	e9 8d 00 00 00       	jmp    1048e3 <_ZN3hal3x863vmm5allocEjj+0x23d>
								}

								this->cntxt->map((virt + i * memory::page_size_byte), phys, flags);
  104856:	8b 45 e8             	mov    -0x18(%ebp),%eax
  104859:	c1 e0 0c             	shl    $0xc,%eax
  10485c:	89 c2                	mov    %eax,%edx
  10485e:	8b 45 dc             	mov    -0x24(%ebp),%eax
  104861:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  104864:	8b 45 08             	mov    0x8(%ebp),%eax
  104867:	8b 00                	mov    (%eax),%eax
  104869:	8b 55 0c             	mov    0xc(%ebp),%edx
  10486c:	89 54 24 0c          	mov    %edx,0xc(%esp)
  104870:	8b 55 e0             	mov    -0x20(%ebp),%edx
  104873:	89 54 24 08          	mov    %edx,0x8(%esp)
  104877:	89 4c 24 04          	mov    %ecx,0x4(%esp)
  10487b:	89 04 24             	mov    %eax,(%esp)
  10487e:	e8 d7 0b 00 00       	call   10545a <_ZN3hal3x867context3mapEjjj>

						if(counter >= n)
						{
							virt = addr(x, y) - (n - 1) * memory::page_size_byte;

							for(size_t i = 0; i < n; i++)
  104883:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
  104887:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10488a:	3b 45 10             	cmp    0x10(%ebp),%eax
  10488d:	0f 82 65 ff ff ff    	jb     1047f8 <_ZN3hal3x863vmm5allocEjj+0x152>
								}

								this->cntxt->map((virt + i * memory::page_size_byte), phys, flags);
							}

							return virt;
  104893:	8b 45 dc             	mov    -0x24(%ebp),%eax
  104896:	eb 4b                	jmp    1048e3 <_ZN3hal3x863vmm5allocEjj+0x23d>
						}
					}
					else
					{
						counter = 0;
					}
  104898:	eb 10                	jmp    1048aa <_ZN3hal3x863vmm5allocEjj+0x204>
							return virt;
						}
					}
					else
					{
						counter = 0;
  10489a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
					}
  1048a1:	eb 07                	jmp    1048aa <_ZN3hal3x863vmm5allocEjj+0x204>
				}
				else
				{
					counter = 0;
  1048a3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	{
		if(this->bitmap[x])
		{
			this->speedup_x = x;

			for(size_t y = 0; y < 32 && counter < n; y++)
  1048aa:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
  1048ae:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
  1048b2:	77 0c                	ja     1048c0 <_ZN3hal3x863vmm5allocEjj+0x21a>
  1048b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1048b7:	3b 45 10             	cmp    0x10(%ebp),%eax
  1048ba:	0f 82 86 fe ff ff    	jb     104746 <_ZN3hal3x863vmm5allocEjj+0xa0>
	if(this->speedup_x > bitmap_px(this->addr_space_limit) || this->speedup_x < bitmap_px(this->addr_space_base))
	{
		this->speedup_x = bitmap_px(this->addr_space_base);
	}

	for(size_t x = this->speedup_x; x <= bitmap_px(this->addr_space_limit) && counter < n; x++)
  1048c0:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  1048c4:	8b 45 08             	mov    0x8(%ebp),%eax
  1048c7:	8b 40 08             	mov    0x8(%eax),%eax
  1048ca:	c1 e8 11             	shr    $0x11,%eax
  1048cd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  1048d0:	72 0c                	jb     1048de <_ZN3hal3x863vmm5allocEjj+0x238>
  1048d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1048d5:	3b 45 10             	cmp    0x10(%ebp),%eax
  1048d8:	0f 82 3e fe ff ff    	jb     10471c <_ZN3hal3x863vmm5allocEjj+0x76>
				}
			}
		}
	}

	return 0x0;
  1048de:	b8 00 00 00 00       	mov    $0x0,%eax
}
  1048e3:	83 c4 30             	add    $0x30,%esp
  1048e6:	5b                   	pop    %ebx
  1048e7:	5e                   	pop    %esi
  1048e8:	5d                   	pop    %ebp
  1048e9:	c3                   	ret    

001048ea <_ZN3hal3x863vmm4freeEj>:

void vmm::free( uintptr_t addr )
{
  1048ea:	55                   	push   %ebp
  1048eb:	89 e5                	mov    %esp,%ebp
  1048ed:	56                   	push   %esi
  1048ee:	53                   	push   %ebx
  1048ef:	83 ec 20             	sub    $0x20,%esp
	if(addr < this->addr_space_base || addr > this->addr_space_limit)
  1048f2:	8b 45 08             	mov    0x8(%ebp),%eax
  1048f5:	8b 40 04             	mov    0x4(%eax),%eax
  1048f8:	3b 45 0c             	cmp    0xc(%ebp),%eax
  1048fb:	77 0b                	ja     104908 <_ZN3hal3x863vmm4freeEj+0x1e>
  1048fd:	8b 45 08             	mov    0x8(%ebp),%eax
  104900:	8b 40 08             	mov    0x8(%eax),%eax
  104903:	3b 45 0c             	cmp    0xc(%ebp),%eax
  104906:	73 02                	jae    10490a <_ZN3hal3x863vmm4freeEj+0x20>
	{
		return;
  104908:	eb 7d                	jmp    104987 <_ZN3hal3x863vmm4freeEj+0x9d>
	}

	uintptr_t phys = this->cntxt->phys(addr);
  10490a:	8b 45 08             	mov    0x8(%ebp),%eax
  10490d:	8b 00                	mov    (%eax),%eax
  10490f:	8b 55 0c             	mov    0xc(%ebp),%edx
  104912:	89 54 24 04          	mov    %edx,0x4(%esp)
  104916:	89 04 24             	mov    %eax,(%esp)
  104919:	e8 66 0f 00 00       	call   105884 <_ZN3hal3x867context4physEj>
  10491e:	89 45 f4             	mov    %eax,-0xc(%ebp)

	pmm &pmm = pmm::instance();
  104921:	e8 01 7c 00 00       	call   10c527 <_ZN3hal3x863pmm8instanceEv>
  104926:	89 45 f0             	mov    %eax,-0x10(%ebp)
	pmm.free(phys);
  104929:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10492c:	89 44 24 04          	mov    %eax,0x4(%esp)
  104930:	8b 45 f0             	mov    -0x10(%ebp),%eax
  104933:	89 04 24             	mov    %eax,(%esp)
  104936:	e8 43 45 00 00       	call   108e7e <_ZN3hal3x863pmm4freeEj>

	this->cntxt->umap(addr);
  10493b:	8b 45 08             	mov    0x8(%ebp),%eax
  10493e:	8b 00                	mov    (%eax),%eax
  104940:	8b 55 0c             	mov    0xc(%ebp),%edx
  104943:	89 54 24 04          	mov    %edx,0x4(%esp)
  104947:	89 04 24             	mov    %eax,(%esp)
  10494a:	e8 b9 0e 00 00       	call   105808 <_ZN3hal3x867context4umapEj>

	set_bit(this->bitmap[bitmap_px(addr)], bitmap_py(addr));
  10494f:	8b 45 0c             	mov    0xc(%ebp),%eax
  104952:	c1 e8 11             	shr    $0x11,%eax
  104955:	8b 55 08             	mov    0x8(%ebp),%edx
  104958:	8b 5c 82 0c          	mov    0xc(%edx,%eax,4),%ebx
  10495c:	8b 55 0c             	mov    0xc(%ebp),%edx
  10495f:	c1 ea 0c             	shr    $0xc,%edx
  104962:	83 e2 1f             	and    $0x1f,%edx
  104965:	be 01 00 00 00       	mov    $0x1,%esi
  10496a:	89 d1                	mov    %edx,%ecx
  10496c:	d3 e6                	shl    %cl,%esi
  10496e:	89 f2                	mov    %esi,%edx
  104970:	09 d3                	or     %edx,%ebx
  104972:	89 d9                	mov    %ebx,%ecx
  104974:	8b 55 08             	mov    0x8(%ebp),%edx
  104977:	89 4c 82 0c          	mov    %ecx,0xc(%edx,%eax,4)

	this->fast_access = addr;
  10497b:	8b 45 08             	mov    0x8(%ebp),%eax
  10497e:	8b 55 0c             	mov    0xc(%ebp),%edx
  104981:	89 90 0c 00 02 00    	mov    %edx,0x2000c(%eax)
}
  104987:	83 c4 20             	add    $0x20,%esp
  10498a:	5b                   	pop    %ebx
  10498b:	5e                   	pop    %esi
  10498c:	5d                   	pop    %ebp
  10498d:	c3                   	ret    

0010498e <_ZN3hal3x863vmm4freeEjj>:

void vmm::free( uintptr_t addr, size_t n )
{
  10498e:	55                   	push   %ebp
  10498f:	89 e5                	mov    %esp,%ebp
  104991:	83 ec 18             	sub    $0x18,%esp
	while(n--)
  104994:	eb 19                	jmp    1049af <_ZN3hal3x863vmm4freeEjj+0x21>
	{
		this->free(addr);
  104996:	8b 45 0c             	mov    0xc(%ebp),%eax
  104999:	89 44 24 04          	mov    %eax,0x4(%esp)
  10499d:	8b 45 08             	mov    0x8(%ebp),%eax
  1049a0:	89 04 24             	mov    %eax,(%esp)
  1049a3:	e8 42 ff ff ff       	call   1048ea <_ZN3hal3x863vmm4freeEj>
		
		addr += memory::page_size_byte;
  1049a8:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
	this->fast_access = addr;
}

void vmm::free( uintptr_t addr, size_t n )
{
	while(n--)
  1049af:	8b 45 10             	mov    0x10(%ebp),%eax
  1049b2:	8d 50 ff             	lea    -0x1(%eax),%edx
  1049b5:	89 55 10             	mov    %edx,0x10(%ebp)
  1049b8:	85 c0                	test   %eax,%eax
  1049ba:	0f 95 c0             	setne  %al
  1049bd:	84 c0                	test   %al,%al
  1049bf:	75 d5                	jne    104996 <_ZN3hal3x863vmm4freeEjj+0x8>
	{
		this->free(addr);
		
		addr += memory::page_size_byte;
	}
}
  1049c1:	c9                   	leave  
  1049c2:	c3                   	ret    
  1049c3:	90                   	nop

001049c4 <_ZN3hal3x863vmm3mapEjjj>:

bool vmm::map( uintptr_t virt, uintptr_t phys, uint32_t flags )
{
  1049c4:	55                   	push   %ebp
  1049c5:	89 e5                	mov    %esp,%ebp
  1049c7:	56                   	push   %esi
  1049c8:	53                   	push   %ebx
  1049c9:	83 ec 10             	sub    $0x10,%esp
	if(virt < this->addr_space_base || virt > this->addr_space_limit)
  1049cc:	8b 45 08             	mov    0x8(%ebp),%eax
  1049cf:	8b 40 04             	mov    0x4(%eax),%eax
  1049d2:	3b 45 0c             	cmp    0xc(%ebp),%eax
  1049d5:	77 0b                	ja     1049e2 <_ZN3hal3x863vmm3mapEjjj+0x1e>
  1049d7:	8b 45 08             	mov    0x8(%ebp),%eax
  1049da:	8b 40 08             	mov    0x8(%eax),%eax
  1049dd:	3b 45 0c             	cmp    0xc(%ebp),%eax
  1049e0:	73 07                	jae    1049e9 <_ZN3hal3x863vmm3mapEjjj+0x25>
	{
		return false;
  1049e2:	b8 00 00 00 00       	mov    $0x0,%eax
  1049e7:	eb 4e                	jmp    104a37 <_ZN3hal3x863vmm3mapEjjj+0x73>
	}

	clear_bit(this->bitmap[bitmap_px(virt)], bitmap_py(virt));
  1049e9:	8b 45 0c             	mov    0xc(%ebp),%eax
  1049ec:	c1 e8 11             	shr    $0x11,%eax
  1049ef:	8b 55 08             	mov    0x8(%ebp),%edx
  1049f2:	8b 5c 82 0c          	mov    0xc(%edx,%eax,4),%ebx
  1049f6:	8b 55 0c             	mov    0xc(%ebp),%edx
  1049f9:	c1 ea 0c             	shr    $0xc,%edx
  1049fc:	83 e2 1f             	and    $0x1f,%edx
  1049ff:	be 01 00 00 00       	mov    $0x1,%esi
  104a04:	89 d1                	mov    %edx,%ecx
  104a06:	d3 e6                	shl    %cl,%esi
  104a08:	89 f2                	mov    %esi,%edx
  104a0a:	31 d3                	xor    %edx,%ebx
  104a0c:	89 d9                	mov    %ebx,%ecx
  104a0e:	8b 55 08             	mov    0x8(%ebp),%edx
  104a11:	89 4c 82 0c          	mov    %ecx,0xc(%edx,%eax,4)

	return this->cntxt->map(virt, phys, flags);
  104a15:	8b 45 08             	mov    0x8(%ebp),%eax
  104a18:	8b 00                	mov    (%eax),%eax
  104a1a:	8b 55 14             	mov    0x14(%ebp),%edx
  104a1d:	89 54 24 0c          	mov    %edx,0xc(%esp)
  104a21:	8b 55 10             	mov    0x10(%ebp),%edx
  104a24:	89 54 24 08          	mov    %edx,0x8(%esp)
  104a28:	8b 55 0c             	mov    0xc(%ebp),%edx
  104a2b:	89 54 24 04          	mov    %edx,0x4(%esp)
  104a2f:	89 04 24             	mov    %eax,(%esp)
  104a32:	e8 23 0a 00 00       	call   10545a <_ZN3hal3x867context3mapEjjj>
}
  104a37:	83 c4 10             	add    $0x10,%esp
  104a3a:	5b                   	pop    %ebx
  104a3b:	5e                   	pop    %esi
  104a3c:	5d                   	pop    %ebp
  104a3d:	c3                   	ret    

00104a3e <_ZN3hal3x863vmm3mapEjjjj>:

bool vmm::map( uintptr_t virt, uintptr_t phys, uint32_t flags, size_t n )
{
  104a3e:	55                   	push   %ebp
  104a3f:	89 e5                	mov    %esp,%ebp
  104a41:	56                   	push   %esi
  104a42:	53                   	push   %ebx
  104a43:	83 ec 20             	sub    $0x20,%esp
	if(virt < this->addr_space_base || virt > this->addr_space_limit || (virt + memory::page_size_byte * n) > this->addr_space_limit)
  104a46:	8b 45 08             	mov    0x8(%ebp),%eax
  104a49:	8b 40 04             	mov    0x4(%eax),%eax
  104a4c:	3b 45 0c             	cmp    0xc(%ebp),%eax
  104a4f:	77 22                	ja     104a73 <_ZN3hal3x863vmm3mapEjjjj+0x35>
  104a51:	8b 45 08             	mov    0x8(%ebp),%eax
  104a54:	8b 40 08             	mov    0x8(%eax),%eax
  104a57:	3b 45 0c             	cmp    0xc(%ebp),%eax
  104a5a:	72 17                	jb     104a73 <_ZN3hal3x863vmm3mapEjjjj+0x35>
  104a5c:	8b 45 18             	mov    0x18(%ebp),%eax
  104a5f:	c1 e0 0c             	shl    $0xc,%eax
  104a62:	89 c2                	mov    %eax,%edx
  104a64:	8b 45 0c             	mov    0xc(%ebp),%eax
  104a67:	01 c2                	add    %eax,%edx
  104a69:	8b 45 08             	mov    0x8(%ebp),%eax
  104a6c:	8b 40 08             	mov    0x8(%eax),%eax
  104a6f:	39 c2                	cmp    %eax,%edx
  104a71:	76 07                	jbe    104a7a <_ZN3hal3x863vmm3mapEjjjj+0x3c>
	{
		return false;
  104a73:	b8 00 00 00 00       	mov    $0x0,%eax
  104a78:	eb 55                	jmp    104acf <_ZN3hal3x863vmm3mapEjjjj+0x91>
	}

	clear_bit(this->bitmap[bitmap_px(virt)], bitmap_py(virt));
  104a7a:	8b 45 0c             	mov    0xc(%ebp),%eax
  104a7d:	c1 e8 11             	shr    $0x11,%eax
  104a80:	8b 55 08             	mov    0x8(%ebp),%edx
  104a83:	8b 5c 82 0c          	mov    0xc(%edx,%eax,4),%ebx
  104a87:	8b 55 0c             	mov    0xc(%ebp),%edx
  104a8a:	c1 ea 0c             	shr    $0xc,%edx
  104a8d:	83 e2 1f             	and    $0x1f,%edx
  104a90:	be 01 00 00 00       	mov    $0x1,%esi
  104a95:	89 d1                	mov    %edx,%ecx
  104a97:	d3 e6                	shl    %cl,%esi
  104a99:	89 f2                	mov    %esi,%edx
  104a9b:	31 d3                	xor    %edx,%ebx
  104a9d:	89 d9                	mov    %ebx,%ecx
  104a9f:	8b 55 08             	mov    0x8(%ebp),%edx
  104aa2:	89 4c 82 0c          	mov    %ecx,0xc(%edx,%eax,4)

	return this->cntxt->map(virt, phys, flags, n);
  104aa6:	8b 45 08             	mov    0x8(%ebp),%eax
  104aa9:	8b 00                	mov    (%eax),%eax
  104aab:	8b 55 18             	mov    0x18(%ebp),%edx
  104aae:	89 54 24 10          	mov    %edx,0x10(%esp)
  104ab2:	8b 55 14             	mov    0x14(%ebp),%edx
  104ab5:	89 54 24 0c          	mov    %edx,0xc(%esp)
  104ab9:	8b 55 10             	mov    0x10(%ebp),%edx
  104abc:	89 54 24 08          	mov    %edx,0x8(%esp)
  104ac0:	8b 55 0c             	mov    0xc(%ebp),%edx
  104ac3:	89 54 24 04          	mov    %edx,0x4(%esp)
  104ac7:	89 04 24             	mov    %eax,(%esp)
  104aca:	e8 cd 0c 00 00       	call   10579c <_ZN3hal3x867context3mapEjjjj>
}
  104acf:	83 c4 20             	add    $0x20,%esp
  104ad2:	5b                   	pop    %ebx
  104ad3:	5e                   	pop    %esi
  104ad4:	5d                   	pop    %ebp
  104ad5:	c3                   	ret    

00104ad6 <_ZN3hal3x863vmm5checkEj>:

bool vmm::check( uintptr_t addr )
{
  104ad6:	55                   	push   %ebp
  104ad7:	89 e5                	mov    %esp,%ebp
  104ad9:	53                   	push   %ebx
	if(addr < this->addr_space_base || addr > this->addr_space_limit)
  104ada:	8b 45 08             	mov    0x8(%ebp),%eax
  104add:	8b 40 04             	mov    0x4(%eax),%eax
  104ae0:	3b 45 0c             	cmp    0xc(%ebp),%eax
  104ae3:	77 0b                	ja     104af0 <_ZN3hal3x863vmm5checkEj+0x1a>
  104ae5:	8b 45 08             	mov    0x8(%ebp),%eax
  104ae8:	8b 40 08             	mov    0x8(%eax),%eax
  104aeb:	3b 45 0c             	cmp    0xc(%ebp),%eax
  104aee:	73 07                	jae    104af7 <_ZN3hal3x863vmm5checkEj+0x21>
	{
		return false;
  104af0:	b8 00 00 00 00       	mov    $0x0,%eax
  104af5:	eb 27                	jmp    104b1e <_ZN3hal3x863vmm5checkEj+0x48>
	}

	return this->bitmap[bitmap_px(addr)] & (1 << bitmap_py(addr));
  104af7:	8b 45 0c             	mov    0xc(%ebp),%eax
  104afa:	c1 e8 11             	shr    $0x11,%eax
  104afd:	89 c2                	mov    %eax,%edx
  104aff:	8b 45 08             	mov    0x8(%ebp),%eax
  104b02:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
  104b06:	89 c2                	mov    %eax,%edx
  104b08:	8b 45 0c             	mov    0xc(%ebp),%eax
  104b0b:	c1 e8 0c             	shr    $0xc,%eax
  104b0e:	83 e0 1f             	and    $0x1f,%eax
  104b11:	bb 01 00 00 00       	mov    $0x1,%ebx
  104b16:	89 c1                	mov    %eax,%ecx
  104b18:	d3 e3                	shl    %cl,%ebx
  104b1a:	89 d8                	mov    %ebx,%eax
  104b1c:	21 d0                	and    %edx,%eax
}
  104b1e:	5b                   	pop    %ebx
  104b1f:	5d                   	pop    %ebp
  104b20:	c3                   	ret    
  104b21:	90                   	nop

00104b22 <_ZN3hal3x863vmm5checkEjj>:

bool vmm::check( uintptr_t addr, size_t n )
{
  104b22:	55                   	push   %ebp
  104b23:	89 e5                	mov    %esp,%ebp
  104b25:	53                   	push   %ebx
	if(addr < this->addr_space_base || addr > this->addr_space_limit || (addr + memory::page_size_byte * n) > this->addr_space_limit)
  104b26:	8b 45 08             	mov    0x8(%ebp),%eax
  104b29:	8b 40 04             	mov    0x4(%eax),%eax
  104b2c:	3b 45 0c             	cmp    0xc(%ebp),%eax
  104b2f:	77 22                	ja     104b53 <_ZN3hal3x863vmm5checkEjj+0x31>
  104b31:	8b 45 08             	mov    0x8(%ebp),%eax
  104b34:	8b 40 08             	mov    0x8(%eax),%eax
  104b37:	3b 45 0c             	cmp    0xc(%ebp),%eax
  104b3a:	72 17                	jb     104b53 <_ZN3hal3x863vmm5checkEjj+0x31>
  104b3c:	8b 45 10             	mov    0x10(%ebp),%eax
  104b3f:	c1 e0 0c             	shl    $0xc,%eax
  104b42:	89 c2                	mov    %eax,%edx
  104b44:	8b 45 0c             	mov    0xc(%ebp),%eax
  104b47:	01 c2                	add    %eax,%edx
  104b49:	8b 45 08             	mov    0x8(%ebp),%eax
  104b4c:	8b 40 08             	mov    0x8(%eax),%eax
  104b4f:	39 c2                	cmp    %eax,%edx
  104b51:	76 07                	jbe    104b5a <_ZN3hal3x863vmm5checkEjj+0x38>
	{
		return false;
  104b53:	b8 00 00 00 00       	mov    $0x0,%eax
  104b58:	eb 50                	jmp    104baa <_ZN3hal3x863vmm5checkEjj+0x88>
	}

	while(n--)
  104b5a:	eb 37                	jmp    104b93 <_ZN3hal3x863vmm5checkEjj+0x71>
	{
		if(!(this->bitmap[bitmap_px(addr)] & (1 << bitmap_py(addr))))
  104b5c:	8b 45 0c             	mov    0xc(%ebp),%eax
  104b5f:	c1 e8 11             	shr    $0x11,%eax
  104b62:	89 c2                	mov    %eax,%edx
  104b64:	8b 45 08             	mov    0x8(%ebp),%eax
  104b67:	8b 54 90 0c          	mov    0xc(%eax,%edx,4),%edx
  104b6b:	8b 45 0c             	mov    0xc(%ebp),%eax
  104b6e:	c1 e8 0c             	shr    $0xc,%eax
  104b71:	83 e0 1f             	and    $0x1f,%eax
  104b74:	bb 01 00 00 00       	mov    $0x1,%ebx
  104b79:	89 c1                	mov    %eax,%ecx
  104b7b:	d3 e3                	shl    %cl,%ebx
  104b7d:	89 d8                	mov    %ebx,%eax
  104b7f:	21 d0                	and    %edx,%eax
  104b81:	85 c0                	test   %eax,%eax
  104b83:	75 07                	jne    104b8c <_ZN3hal3x863vmm5checkEjj+0x6a>
		{
			return false;
  104b85:	b8 00 00 00 00       	mov    $0x0,%eax
  104b8a:	eb 1e                	jmp    104baa <_ZN3hal3x863vmm5checkEjj+0x88>
		}

		addr += memory::page_size_byte;
  104b8c:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
	if(addr < this->addr_space_base || addr > this->addr_space_limit || (addr + memory::page_size_byte * n) > this->addr_space_limit)
	{
		return false;
	}

	while(n--)
  104b93:	8b 45 10             	mov    0x10(%ebp),%eax
  104b96:	8d 50 ff             	lea    -0x1(%eax),%edx
  104b99:	89 55 10             	mov    %edx,0x10(%ebp)
  104b9c:	85 c0                	test   %eax,%eax
  104b9e:	0f 95 c0             	setne  %al
  104ba1:	84 c0                	test   %al,%al
  104ba3:	75 b7                	jne    104b5c <_ZN3hal3x863vmm5checkEjj+0x3a>
		}

		addr += memory::page_size_byte;
	}

	return true;
  104ba5:	b8 01 00 00 00       	mov    $0x1,%eax
}
  104baa:	5b                   	pop    %ebx
  104bab:	5d                   	pop    %ebp
  104bac:	c3                   	ret    
  104bad:	90                   	nop

00104bae <_ZN3hal3x863vmm11get_contextEv>:

context *vmm::get_context(  )
{
  104bae:	55                   	push   %ebp
  104baf:	89 e5                	mov    %esp,%ebp
	return this->cntxt;
  104bb1:	8b 45 08             	mov    0x8(%ebp),%eax
  104bb4:	8b 00                	mov    (%eax),%eax
}
  104bb6:	5d                   	pop    %ebp
  104bb7:	c3                   	ret    

00104bb8 <_ZN3hal3x863cpu4dumpEPNS1_9cpu_stateE>:
{
	uint32_t cpuid_supported();
}

void cpu::dump( cpu::cpu_state *cpu )
{
  104bb8:	55                   	push   %ebp
  104bb9:	89 e5                	mov    %esp,%ebp
  104bbb:	56                   	push   %esi
  104bbc:	53                   	push   %ebx
  104bbd:	83 ec 20             	sub    $0x20,%esp
	uint32_t cr0, cr2, cr3, cr4;

	asm( "mov %%cr0, %0" : "=r" (cr0) );
  104bc0:	0f 20 c0             	mov    %cr0,%eax
  104bc3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	asm( "mov %%cr2, %0" : "=r" (cr2) );
  104bc6:	0f 20 d0             	mov    %cr2,%eax
  104bc9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	asm( "mov %%cr3, %0" : "=r" (cr3) );
  104bcc:	0f 20 d8             	mov    %cr3,%eax
  104bcf:	89 45 ec             	mov    %eax,-0x14(%ebp)
	asm( "mov %%cr4, %0" : "=r" (cr4) );
  104bd2:	0f 20 e0             	mov    %cr4,%eax
  104bd5:	89 45 e8             	mov    %eax,-0x18(%ebp)

	screen << video::hex << video::endl << "\tInterrupt:   " << cpu->intr   << " \t\tError Code:   " << cpu->error << video::endl;
  104bd8:	8b 45 08             	mov    0x8(%ebp),%eax
  104bdb:	8b 58 20             	mov    0x20(%eax),%ebx
  104bde:	8b 45 08             	mov    0x8(%ebp),%eax
  104be1:	8b 70 1c             	mov    0x1c(%eax),%esi
  104be4:	c7 44 24 04 ab cc 10 	movl   $0x10ccab,0x4(%esp)
  104beb:	00 
  104bec:	c7 04 24 d4 38 13 00 	movl   $0x1338d4,(%esp)
  104bf3:	e8 82 80 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
  104bf8:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  104bff:	00 
  104c00:	89 04 24             	mov    %eax,(%esp)
  104c03:	e8 72 80 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
  104c08:	c7 44 24 04 74 ec 10 	movl   $0x10ec74,0x4(%esp)
  104c0f:	00 
  104c10:	89 04 24             	mov    %eax,(%esp)
  104c13:	e8 7c 4d 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  104c18:	89 74 24 04          	mov    %esi,0x4(%esp)
  104c1c:	89 04 24             	mov    %eax,(%esp)
  104c1f:	e8 88 4c 00 00       	call   1098ac <_ZN3hal3x865videolsEj>
  104c24:	c7 44 24 04 83 ec 10 	movl   $0x10ec83,0x4(%esp)
  104c2b:	00 
  104c2c:	89 04 24             	mov    %eax,(%esp)
  104c2f:	e8 60 4d 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  104c34:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  104c38:	89 04 24             	mov    %eax,(%esp)
  104c3b:	e8 6c 4c 00 00       	call   1098ac <_ZN3hal3x865videolsEj>
  104c40:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  104c47:	00 
  104c48:	89 04 24             	mov    %eax,(%esp)
  104c4b:	e8 2a 80 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
	screen << video::hex << video::endl << "\tEAX:         " << cpu->eax    << " \t\tEBX:          " << cpu->ebx;
  104c50:	8b 45 08             	mov    0x8(%ebp),%eax
  104c53:	8b 58 04             	mov    0x4(%eax),%ebx
  104c56:	8b 45 08             	mov    0x8(%ebp),%eax
  104c59:	8b 30                	mov    (%eax),%esi
  104c5b:	c7 44 24 04 ab cc 10 	movl   $0x10ccab,0x4(%esp)
  104c62:	00 
  104c63:	c7 04 24 d4 38 13 00 	movl   $0x1338d4,(%esp)
  104c6a:	e8 0b 80 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
  104c6f:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  104c76:	00 
  104c77:	89 04 24             	mov    %eax,(%esp)
  104c7a:	e8 fb 7f 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
  104c7f:	c7 44 24 04 95 ec 10 	movl   $0x10ec95,0x4(%esp)
  104c86:	00 
  104c87:	89 04 24             	mov    %eax,(%esp)
  104c8a:	e8 05 4d 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  104c8f:	89 74 24 04          	mov    %esi,0x4(%esp)
  104c93:	89 04 24             	mov    %eax,(%esp)
  104c96:	e8 11 4c 00 00       	call   1098ac <_ZN3hal3x865videolsEj>
  104c9b:	c7 44 24 04 a4 ec 10 	movl   $0x10eca4,0x4(%esp)
  104ca2:	00 
  104ca3:	89 04 24             	mov    %eax,(%esp)
  104ca6:	e8 e9 4c 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  104cab:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  104caf:	89 04 24             	mov    %eax,(%esp)
  104cb2:	e8 f5 4b 00 00       	call   1098ac <_ZN3hal3x865videolsEj>
	screen << video::hex << video::endl << "\tECX:         " << cpu->ecx    << " \t\tEDX:          " << cpu->edx;
  104cb7:	8b 45 08             	mov    0x8(%ebp),%eax
  104cba:	8b 58 0c             	mov    0xc(%eax),%ebx
  104cbd:	8b 45 08             	mov    0x8(%ebp),%eax
  104cc0:	8b 70 08             	mov    0x8(%eax),%esi
  104cc3:	c7 44 24 04 ab cc 10 	movl   $0x10ccab,0x4(%esp)
  104cca:	00 
  104ccb:	c7 04 24 d4 38 13 00 	movl   $0x1338d4,(%esp)
  104cd2:	e8 a3 7f 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
  104cd7:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  104cde:	00 
  104cdf:	89 04 24             	mov    %eax,(%esp)
  104ce2:	e8 93 7f 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
  104ce7:	c7 44 24 04 b6 ec 10 	movl   $0x10ecb6,0x4(%esp)
  104cee:	00 
  104cef:	89 04 24             	mov    %eax,(%esp)
  104cf2:	e8 9d 4c 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  104cf7:	89 74 24 04          	mov    %esi,0x4(%esp)
  104cfb:	89 04 24             	mov    %eax,(%esp)
  104cfe:	e8 a9 4b 00 00       	call   1098ac <_ZN3hal3x865videolsEj>
  104d03:	c7 44 24 04 c5 ec 10 	movl   $0x10ecc5,0x4(%esp)
  104d0a:	00 
  104d0b:	89 04 24             	mov    %eax,(%esp)
  104d0e:	e8 81 4c 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  104d13:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  104d17:	89 04 24             	mov    %eax,(%esp)
  104d1a:	e8 8d 4b 00 00       	call   1098ac <_ZN3hal3x865videolsEj>
	screen << video::hex << video::endl << "\tESI:         " << cpu->esi    << " \t\tEDI:          " << cpu->edi;
  104d1f:	8b 45 08             	mov    0x8(%ebp),%eax
  104d22:	8b 58 14             	mov    0x14(%eax),%ebx
  104d25:	8b 45 08             	mov    0x8(%ebp),%eax
  104d28:	8b 70 10             	mov    0x10(%eax),%esi
  104d2b:	c7 44 24 04 ab cc 10 	movl   $0x10ccab,0x4(%esp)
  104d32:	00 
  104d33:	c7 04 24 d4 38 13 00 	movl   $0x1338d4,(%esp)
  104d3a:	e8 3b 7f 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
  104d3f:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  104d46:	00 
  104d47:	89 04 24             	mov    %eax,(%esp)
  104d4a:	e8 2b 7f 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
  104d4f:	c7 44 24 04 d7 ec 10 	movl   $0x10ecd7,0x4(%esp)
  104d56:	00 
  104d57:	89 04 24             	mov    %eax,(%esp)
  104d5a:	e8 35 4c 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  104d5f:	89 74 24 04          	mov    %esi,0x4(%esp)
  104d63:	89 04 24             	mov    %eax,(%esp)
  104d66:	e8 41 4b 00 00       	call   1098ac <_ZN3hal3x865videolsEj>
  104d6b:	c7 44 24 04 e6 ec 10 	movl   $0x10ece6,0x4(%esp)
  104d72:	00 
  104d73:	89 04 24             	mov    %eax,(%esp)
  104d76:	e8 19 4c 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  104d7b:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  104d7f:	89 04 24             	mov    %eax,(%esp)
  104d82:	e8 25 4b 00 00       	call   1098ac <_ZN3hal3x865videolsEj>
	screen << video::hex << video::endl << "\tEBP:         " << cpu->ebp    << " \t\tEIP:          " << cpu->eip;
  104d87:	8b 45 08             	mov    0x8(%ebp),%eax
  104d8a:	8b 58 24             	mov    0x24(%eax),%ebx
  104d8d:	8b 45 08             	mov    0x8(%ebp),%eax
  104d90:	8b 70 18             	mov    0x18(%eax),%esi
  104d93:	c7 44 24 04 ab cc 10 	movl   $0x10ccab,0x4(%esp)
  104d9a:	00 
  104d9b:	c7 04 24 d4 38 13 00 	movl   $0x1338d4,(%esp)
  104da2:	e8 d3 7e 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
  104da7:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  104dae:	00 
  104daf:	89 04 24             	mov    %eax,(%esp)
  104db2:	e8 c3 7e 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
  104db7:	c7 44 24 04 f8 ec 10 	movl   $0x10ecf8,0x4(%esp)
  104dbe:	00 
  104dbf:	89 04 24             	mov    %eax,(%esp)
  104dc2:	e8 cd 4b 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  104dc7:	89 74 24 04          	mov    %esi,0x4(%esp)
  104dcb:	89 04 24             	mov    %eax,(%esp)
  104dce:	e8 d9 4a 00 00       	call   1098ac <_ZN3hal3x865videolsEj>
  104dd3:	c7 44 24 04 07 ed 10 	movl   $0x10ed07,0x4(%esp)
  104dda:	00 
  104ddb:	89 04 24             	mov    %eax,(%esp)
  104dde:	e8 b1 4b 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  104de3:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  104de7:	89 04 24             	mov    %eax,(%esp)
  104dea:	e8 bd 4a 00 00       	call   1098ac <_ZN3hal3x865videolsEj>
	screen << video::hex << video::endl << "\tCS:          " << cpu->cs     << " \t\tSS:           " << cpu->ss;
  104def:	8b 45 08             	mov    0x8(%ebp),%eax
  104df2:	8b 58 34             	mov    0x34(%eax),%ebx
  104df5:	8b 45 08             	mov    0x8(%ebp),%eax
  104df8:	8b 70 28             	mov    0x28(%eax),%esi
  104dfb:	c7 44 24 04 ab cc 10 	movl   $0x10ccab,0x4(%esp)
  104e02:	00 
  104e03:	c7 04 24 d4 38 13 00 	movl   $0x1338d4,(%esp)
  104e0a:	e8 6b 7e 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
  104e0f:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  104e16:	00 
  104e17:	89 04 24             	mov    %eax,(%esp)
  104e1a:	e8 5b 7e 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
  104e1f:	c7 44 24 04 19 ed 10 	movl   $0x10ed19,0x4(%esp)
  104e26:	00 
  104e27:	89 04 24             	mov    %eax,(%esp)
  104e2a:	e8 65 4b 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  104e2f:	89 74 24 04          	mov    %esi,0x4(%esp)
  104e33:	89 04 24             	mov    %eax,(%esp)
  104e36:	e8 71 4a 00 00       	call   1098ac <_ZN3hal3x865videolsEj>
  104e3b:	c7 44 24 04 28 ed 10 	movl   $0x10ed28,0x4(%esp)
  104e42:	00 
  104e43:	89 04 24             	mov    %eax,(%esp)
  104e46:	e8 49 4b 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  104e4b:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  104e4f:	89 04 24             	mov    %eax,(%esp)
  104e52:	e8 55 4a 00 00       	call   1098ac <_ZN3hal3x865videolsEj>
	screen << video::hex << video::endl << "\tEFLAGS:      " << cpu->eflags << " \t\tESP:          " << cpu->esp;
  104e57:	8b 45 08             	mov    0x8(%ebp),%eax
  104e5a:	8b 58 30             	mov    0x30(%eax),%ebx
  104e5d:	8b 45 08             	mov    0x8(%ebp),%eax
  104e60:	8b 70 2c             	mov    0x2c(%eax),%esi
  104e63:	c7 44 24 04 ab cc 10 	movl   $0x10ccab,0x4(%esp)
  104e6a:	00 
  104e6b:	c7 04 24 d4 38 13 00 	movl   $0x1338d4,(%esp)
  104e72:	e8 03 7e 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
  104e77:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  104e7e:	00 
  104e7f:	89 04 24             	mov    %eax,(%esp)
  104e82:	e8 f3 7d 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
  104e87:	c7 44 24 04 3a ed 10 	movl   $0x10ed3a,0x4(%esp)
  104e8e:	00 
  104e8f:	89 04 24             	mov    %eax,(%esp)
  104e92:	e8 fd 4a 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  104e97:	89 74 24 04          	mov    %esi,0x4(%esp)
  104e9b:	89 04 24             	mov    %eax,(%esp)
  104e9e:	e8 09 4a 00 00       	call   1098ac <_ZN3hal3x865videolsEj>
  104ea3:	c7 44 24 04 49 ed 10 	movl   $0x10ed49,0x4(%esp)
  104eaa:	00 
  104eab:	89 04 24             	mov    %eax,(%esp)
  104eae:	e8 e1 4a 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  104eb3:	89 5c 24 04          	mov    %ebx,0x4(%esp)
  104eb7:	89 04 24             	mov    %eax,(%esp)
  104eba:	e8 ed 49 00 00       	call   1098ac <_ZN3hal3x865videolsEj>
	screen << video::hex << video::endl << "\tCR0:         " << cr0         << " \t\tCR2:          " << cr2;
  104ebf:	c7 44 24 04 ab cc 10 	movl   $0x10ccab,0x4(%esp)
  104ec6:	00 
  104ec7:	c7 04 24 d4 38 13 00 	movl   $0x1338d4,(%esp)
  104ece:	e8 a7 7d 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
  104ed3:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  104eda:	00 
  104edb:	89 04 24             	mov    %eax,(%esp)
  104ede:	e8 97 7d 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
  104ee3:	c7 44 24 04 5b ed 10 	movl   $0x10ed5b,0x4(%esp)
  104eea:	00 
  104eeb:	89 04 24             	mov    %eax,(%esp)
  104eee:	e8 a1 4a 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  104ef3:	8b 55 f4             	mov    -0xc(%ebp),%edx
  104ef6:	89 54 24 04          	mov    %edx,0x4(%esp)
  104efa:	89 04 24             	mov    %eax,(%esp)
  104efd:	e8 aa 49 00 00       	call   1098ac <_ZN3hal3x865videolsEj>
  104f02:	c7 44 24 04 6a ed 10 	movl   $0x10ed6a,0x4(%esp)
  104f09:	00 
  104f0a:	89 04 24             	mov    %eax,(%esp)
  104f0d:	e8 82 4a 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  104f12:	8b 55 f0             	mov    -0x10(%ebp),%edx
  104f15:	89 54 24 04          	mov    %edx,0x4(%esp)
  104f19:	89 04 24             	mov    %eax,(%esp)
  104f1c:	e8 8b 49 00 00       	call   1098ac <_ZN3hal3x865videolsEj>
	screen << video::hex << video::endl << "\tCR3:         " << cr3         << " \t\tCR4:          " << cr4 << video::endl;	
  104f21:	c7 44 24 04 ab cc 10 	movl   $0x10ccab,0x4(%esp)
  104f28:	00 
  104f29:	c7 04 24 d4 38 13 00 	movl   $0x1338d4,(%esp)
  104f30:	e8 45 7d 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
  104f35:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  104f3c:	00 
  104f3d:	89 04 24             	mov    %eax,(%esp)
  104f40:	e8 35 7d 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
  104f45:	c7 44 24 04 7c ed 10 	movl   $0x10ed7c,0x4(%esp)
  104f4c:	00 
  104f4d:	89 04 24             	mov    %eax,(%esp)
  104f50:	e8 3f 4a 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  104f55:	8b 55 ec             	mov    -0x14(%ebp),%edx
  104f58:	89 54 24 04          	mov    %edx,0x4(%esp)
  104f5c:	89 04 24             	mov    %eax,(%esp)
  104f5f:	e8 48 49 00 00       	call   1098ac <_ZN3hal3x865videolsEj>
  104f64:	c7 44 24 04 8b ed 10 	movl   $0x10ed8b,0x4(%esp)
  104f6b:	00 
  104f6c:	89 04 24             	mov    %eax,(%esp)
  104f6f:	e8 20 4a 00 00       	call   109994 <_ZN3hal3x865videolsEPKc>
  104f74:	8b 55 e8             	mov    -0x18(%ebp),%edx
  104f77:	89 54 24 04          	mov    %edx,0x4(%esp)
  104f7b:	89 04 24             	mov    %eax,(%esp)
  104f7e:	e8 29 49 00 00       	call   1098ac <_ZN3hal3x865videolsEj>
  104f83:	c7 44 24 04 8d cc 10 	movl   $0x10cc8d,0x4(%esp)
  104f8a:	00 
  104f8b:	89 04 24             	mov    %eax,(%esp)
  104f8e:	e8 e7 7c 00 00       	call   10cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>
}
  104f93:	83 c4 20             	add    $0x20,%esp
  104f96:	5b                   	pop    %ebx
  104f97:	5e                   	pop    %esi
  104f98:	5d                   	pop    %ebp
  104f99:	c3                   	ret    

00104f9a <_ZN3hal3x863cpu5cpuidEjPjS2_S2_S2_>:

bool cpu::cpuid( uint32_t func, uint32_t *eax, uint32_t *ebx, uint32_t *ecx, uint32_t *edx )
{
  104f9a:	55                   	push   %ebp
  104f9b:	89 e5                	mov    %esp,%ebp
  104f9d:	56                   	push   %esi
  104f9e:	53                   	push   %ebx
	if(cpuid_supported())
  104f9f:	e8 25 6f 00 00       	call   10bec9 <cpuid_supported>
  104fa4:	85 c0                	test   %eax,%eax
  104fa6:	0f 95 c0             	setne  %al
  104fa9:	84 c0                	test   %al,%al
  104fab:	74 24                	je     104fd1 <_ZN3hal3x863cpu5cpuidEjPjS2_S2_S2_+0x37>
	{
		asm("mov %0, %%eax;" : : "a" (func));
  104fad:	8b 45 08             	mov    0x8(%ebp),%eax
  104fb0:	89 c0                	mov    %eax,%eax

		asm("cpuid;" : "=a" (*eax), "=b" (*ebx), "=c" (*ecx), "=d" (*edx));
  104fb2:	0f a2                	cpuid  
  104fb4:	89 c6                	mov    %eax,%esi
  104fb6:	8b 45 0c             	mov    0xc(%ebp),%eax
  104fb9:	89 30                	mov    %esi,(%eax)
  104fbb:	8b 45 10             	mov    0x10(%ebp),%eax
  104fbe:	89 18                	mov    %ebx,(%eax)
  104fc0:	8b 45 14             	mov    0x14(%ebp),%eax
  104fc3:	89 08                	mov    %ecx,(%eax)
  104fc5:	8b 45 18             	mov    0x18(%ebp),%eax
  104fc8:	89 10                	mov    %edx,(%eax)

		return true;
  104fca:	b8 01 00 00 00       	mov    $0x1,%eax
  104fcf:	eb 05                	jmp    104fd6 <_ZN3hal3x863cpu5cpuidEjPjS2_S2_S2_+0x3c>
	}

	return false;
  104fd1:	b8 00 00 00 00       	mov    $0x0,%eax
}
  104fd6:	5b                   	pop    %ebx
  104fd7:	5e                   	pop    %esi
  104fd8:	5d                   	pop    %ebp
  104fd9:	c3                   	ret    

00104fda <_ZN3hal3x864cmos5writeEhh>:
#include <bcd.hpp>

using namespace hal::x86;

void cmos::write( uint8_t addr, uint8_t value )
{
  104fda:	55                   	push   %ebp
  104fdb:	89 e5                	mov    %esp,%ebp
  104fdd:	83 ec 18             	sub    $0x18,%esp
  104fe0:	8b 55 08             	mov    0x8(%ebp),%edx
  104fe3:	8b 45 0c             	mov    0xc(%ebp),%eax
  104fe6:	88 55 f4             	mov    %dl,-0xc(%ebp)
  104fe9:	88 45 f0             	mov    %al,-0x10(%ebp)
	addr = (io::inb(cmos::addr_port) & 0x80) | (addr & 0x7F);
  104fec:	c7 04 24 70 00 00 00 	movl   $0x70,(%esp)
  104ff3:	e8 34 4a 00 00       	call   109a2c <_ZN3hal3x862io3inbEt>
  104ff8:	83 e0 80             	and    $0xffffff80,%eax
  104ffb:	89 c2                	mov    %eax,%edx
  104ffd:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
  105001:	83 e0 7f             	and    $0x7f,%eax
  105004:	09 d0                	or     %edx,%eax
  105006:	88 45 f4             	mov    %al,-0xc(%ebp)

	io::outb(cmos::addr_port, addr);
  105009:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
  10500d:	89 44 24 04          	mov    %eax,0x4(%esp)
  105011:	c7 04 24 70 00 00 00 	movl   $0x70,(%esp)
  105018:	e8 67 4a 00 00       	call   109a84 <_ZN3hal3x862io4outbEth>
	io::outb(cmos::data_port, value);
  10501d:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
  105021:	89 44 24 04          	mov    %eax,0x4(%esp)
  105025:	c7 04 24 71 00 00 00 	movl   $0x71,(%esp)
  10502c:	e8 53 4a 00 00       	call   109a84 <_ZN3hal3x862io4outbEth>
}
  105031:	c9                   	leave  
  105032:	c3                   	ret    

00105033 <_ZN3hal3x864cmos4readEh>:

uint8_t cmos::read(  uint8_t addr )
{
  105033:	55                   	push   %ebp
  105034:	89 e5                	mov    %esp,%ebp
  105036:	83 ec 18             	sub    $0x18,%esp
  105039:	8b 45 08             	mov    0x8(%ebp),%eax
  10503c:	88 45 f4             	mov    %al,-0xc(%ebp)
	addr = (io::inb(cmos::addr_port) & 0x80) | (addr & 0x7F);
  10503f:	c7 04 24 70 00 00 00 	movl   $0x70,(%esp)
  105046:	e8 e1 49 00 00       	call   109a2c <_ZN3hal3x862io3inbEt>
  10504b:	83 e0 80             	and    $0xffffff80,%eax
  10504e:	89 c2                	mov    %eax,%edx
  105050:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
  105054:	83 e0 7f             	and    $0x7f,%eax
  105057:	09 d0                	or     %edx,%eax
  105059:	88 45 f4             	mov    %al,-0xc(%ebp)

	io::outb(cmos::addr_port, addr);
  10505c:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
  105060:	89 44 24 04          	mov    %eax,0x4(%esp)
  105064:	c7 04 24 70 00 00 00 	movl   $0x70,(%esp)
  10506b:	e8 14 4a 00 00       	call   109a84 <_ZN3hal3x862io4outbEth>

	return io::inb(cmos::data_port);	
  105070:	c7 04 24 71 00 00 00 	movl   $0x71,(%esp)
  105077:	e8 b0 49 00 00       	call   109a2c <_ZN3hal3x862io3inbEt>
}
  10507c:	c9                   	leave  
  10507d:	c3                   	ret    

0010507e <_ZN3hal3x864cmos4timeEPlS2_S2_>:

void cmos::time( time_t *hour, time_t *min, time_t *sec )
{
  10507e:	55                   	push   %ebp
  10507f:	89 e5                	mov    %esp,%ebp
  105081:	83 ec 18             	sub    $0x18,%esp
	*hour 	= tools::bcd::decode(cmos::read(cmos::addr_hour));
  105084:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
  10508b:	e8 a3 ff ff ff       	call   105033 <_ZN3hal3x864cmos4readEh>
  105090:	0f b6 c0             	movzbl %al,%eax
  105093:	89 04 24             	mov    %eax,(%esp)
  105096:	e8 0f e3 ff ff       	call   1033aa <_ZN5tools3bcd6decodeEh>
  10509b:	0f b6 d0             	movzbl %al,%edx
  10509e:	8b 45 08             	mov    0x8(%ebp),%eax
  1050a1:	89 10                	mov    %edx,(%eax)
	*min  	= tools::bcd::decode(cmos::read(cmos::addr_min));
  1050a3:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
  1050aa:	e8 84 ff ff ff       	call   105033 <_ZN3hal3x864cmos4readEh>
  1050af:	0f b6 c0             	movzbl %al,%eax
  1050b2:	89 04 24             	mov    %eax,(%esp)
  1050b5:	e8 f0 e2 ff ff       	call   1033aa <_ZN5tools3bcd6decodeEh>
  1050ba:	0f b6 d0             	movzbl %al,%edx
  1050bd:	8b 45 0c             	mov    0xc(%ebp),%eax
  1050c0:	89 10                	mov    %edx,(%eax)
	*sec  	= tools::bcd::decode(cmos::read(cmos::addr_sec));
  1050c2:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
  1050c9:	e8 65 ff ff ff       	call   105033 <_ZN3hal3x864cmos4readEh>
  1050ce:	0f b6 c0             	movzbl %al,%eax
  1050d1:	89 04 24             	mov    %eax,(%esp)
  1050d4:	e8 d1 e2 ff ff       	call   1033aa <_ZN5tools3bcd6decodeEh>
  1050d9:	0f b6 d0             	movzbl %al,%edx
  1050dc:	8b 45 10             	mov    0x10(%ebp),%eax
  1050df:	89 10                	mov    %edx,(%eax)
}
  1050e1:	c9                   	leave  
  1050e2:	c3                   	ret    

001050e3 <_ZN3hal3x864cmos4dateEPlS2_S2_>:

void cmos::date( time_t *year, time_t *month, time_t *day )
{
  1050e3:	55                   	push   %ebp
  1050e4:	89 e5                	mov    %esp,%ebp
  1050e6:	53                   	push   %ebx
  1050e7:	83 ec 14             	sub    $0x14,%esp
	*year 	= tools::bcd::decode(cmos::read(cmos::addr_century)) * 100 + tools::bcd::decode(cmos::read(cmos::addr_year));
  1050ea:	c7 04 24 32 00 00 00 	movl   $0x32,(%esp)
  1050f1:	e8 3d ff ff ff       	call   105033 <_ZN3hal3x864cmos4readEh>
  1050f6:	0f b6 c0             	movzbl %al,%eax
  1050f9:	89 04 24             	mov    %eax,(%esp)
  1050fc:	e8 a9 e2 ff ff       	call   1033aa <_ZN5tools3bcd6decodeEh>
  105101:	0f b6 c0             	movzbl %al,%eax
  105104:	6b d8 64             	imul   $0x64,%eax,%ebx
  105107:	c7 04 24 09 00 00 00 	movl   $0x9,(%esp)
  10510e:	e8 20 ff ff ff       	call   105033 <_ZN3hal3x864cmos4readEh>
  105113:	0f b6 c0             	movzbl %al,%eax
  105116:	89 04 24             	mov    %eax,(%esp)
  105119:	e8 8c e2 ff ff       	call   1033aa <_ZN5tools3bcd6decodeEh>
  10511e:	0f b6 c0             	movzbl %al,%eax
  105121:	8d 14 03             	lea    (%ebx,%eax,1),%edx
  105124:	8b 45 08             	mov    0x8(%ebp),%eax
  105127:	89 10                	mov    %edx,(%eax)
	*month  = tools::bcd::decode(cmos::read(cmos::addr_month));
  105129:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
  105130:	e8 fe fe ff ff       	call   105033 <_ZN3hal3x864cmos4readEh>
  105135:	0f b6 c0             	movzbl %al,%eax
  105138:	89 04 24             	mov    %eax,(%esp)
  10513b:	e8 6a e2 ff ff       	call   1033aa <_ZN5tools3bcd6decodeEh>
  105140:	0f b6 d0             	movzbl %al,%edx
  105143:	8b 45 0c             	mov    0xc(%ebp),%eax
  105146:	89 10                	mov    %edx,(%eax)
	*day  	= tools::bcd::decode(cmos::read(cmos::addr_day));
  105148:	c7 04 24 07 00 00 00 	movl   $0x7,(%esp)
  10514f:	e8 df fe ff ff       	call   105033 <_ZN3hal3x864cmos4readEh>
  105154:	0f b6 c0             	movzbl %al,%eax
  105157:	89 04 24             	mov    %eax,(%esp)
  10515a:	e8 4b e2 ff ff       	call   1033aa <_ZN5tools3bcd6decodeEh>
  10515f:	0f b6 d0             	movzbl %al,%edx
  105162:	8b 45 10             	mov    0x10(%ebp),%eax
  105165:	89 10                	mov    %edx,(%eax)
}
  105167:	83 c4 14             	add    $0x14,%esp
  10516a:	5b                   	pop    %ebx
  10516b:	5d                   	pop    %ebp
  10516c:	c3                   	ret    
  10516d:	90                   	nop

0010516e <_ZN3hal3x867contextC1Ev>:

bool mapper::paging_activated 		= false;

context *mapper::current_context	= nullptr;

context::context(  )
  10516e:	55                   	push   %ebp
  10516f:	89 e5                	mov    %esp,%ebp
  105171:	83 ec 48             	sub    $0x48,%esp
{
	if(mapper::paging_activated)
  105174:	0f b6 05 c4 38 13 00 	movzbl 0x1338c4,%eax
  10517b:	84 c0                	test   %al,%al
  10517d:	0f 84 b7 00 00 00    	je     10523a <_ZN3hal3x867contextC1Ev+0xcc>
	{
		pmm &pmm = pmm::instance();
  105183:	e8 9f 73 00 00       	call   10c527 <_ZN3hal3x863pmm8instanceEv>
  105188:	89 45 ec             	mov    %eax,-0x14(%ebp)
		this->pagedir = (pagedir_t*)pmm.alloc();
  10518b:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10518e:	89 04 24             	mov    %eax,(%esp)
  105191:	e8 04 39 00 00       	call   108a9a <_ZN3hal3x863pmm5allocEv>
  105196:	89 c2                	mov    %eax,%edx
  105198:	8b 45 08             	mov    0x8(%ebp),%eax
  10519b:	89 10                	mov    %edx,(%eax)

		mapper::current_context->map(context::tmp_pagedir_mapping, (uintptr_t)this->pagedir, context::page_present | context::page_write);
  10519d:	8b 45 08             	mov    0x8(%ebp),%eax
  1051a0:	8b 00                	mov    (%eax),%eax
  1051a2:	89 c2                	mov    %eax,%edx
  1051a4:	a1 c8 38 13 00       	mov    0x1338c8,%eax
  1051a9:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  1051b0:	00 
  1051b1:	89 54 24 08          	mov    %edx,0x8(%esp)
  1051b5:	c7 44 24 04 00 e0 bf 	movl   $0xffbfe000,0x4(%esp)
  1051bc:	ff 
  1051bd:	89 04 24             	mov    %eax,(%esp)
  1051c0:	e8 95 02 00 00       	call   10545a <_ZN3hal3x867context3mapEjjj>

		pagedir_t *pd = (pagedir_t*)context::tmp_pagedir_mapping;
  1051c5:	c7 45 e8 00 e0 bf ff 	movl   $0xffbfe000,-0x18(%ebp)

		for(size_t index = 0; index < context::pagedir_size; index++)
  1051cc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  1051d3:	eb 19                	jmp    1051ee <_ZN3hal3x867contextC1Ev+0x80>
		{
			pd[index] = 0;
  1051d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1051d8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  1051df:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1051e2:	01 d0                	add    %edx,%eax
  1051e4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

		mapper::current_context->map(context::tmp_pagedir_mapping, (uintptr_t)this->pagedir, context::page_present | context::page_write);

		pagedir_t *pd = (pagedir_t*)context::tmp_pagedir_mapping;

		for(size_t index = 0; index < context::pagedir_size; index++)
  1051ea:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  1051ee:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
  1051f5:	76 de                	jbe    1051d5 <_ZN3hal3x867contextC1Ev+0x67>
		{
			pd[index] = 0;
		}

		pd[PD_INDEX(context::pagedir_mapping)] = (pagetab_t)this->pagedir | context::page_present | context::page_write;
  1051f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1051fa:	8d 90 fc 0f 00 00    	lea    0xffc(%eax),%edx
  105200:	8b 45 08             	mov    0x8(%ebp),%eax
  105203:	8b 00                	mov    (%eax),%eax
  105205:	83 c8 03             	or     $0x3,%eax
  105208:	89 02                	mov    %eax,(%edx)

		this->map(0x1000, 0x1000, context::page_present | context::page_write, 1023);
  10520a:	c7 44 24 10 ff 03 00 	movl   $0x3ff,0x10(%esp)
  105211:	00 
  105212:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  105219:	00 
  10521a:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
  105221:	00 
  105222:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
  105229:	00 
  10522a:	8b 45 08             	mov    0x8(%ebp),%eax
  10522d:	89 04 24             	mov    %eax,(%esp)
  105230:	e8 67 05 00 00       	call   10579c <_ZN3hal3x867context3mapEjjjj>
  105235:	e9 83 00 00 00       	jmp    1052bd <_ZN3hal3x867contextC1Ev+0x14f>
	}
	else
	{
		pmm &pmm = pmm::instance();
  10523a:	e8 e8 72 00 00       	call   10c527 <_ZN3hal3x863pmm8instanceEv>
  10523f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		this->pagedir = (pagedir_t*)pmm.alloc();
  105242:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105245:	89 04 24             	mov    %eax,(%esp)
  105248:	e8 4d 38 00 00       	call   108a9a <_ZN3hal3x863pmm5allocEv>
  10524d:	89 c2                	mov    %eax,%edx
  10524f:	8b 45 08             	mov    0x8(%ebp),%eax
  105252:	89 10                	mov    %edx,(%eax)

		for(size_t index = 0; index < context::pagedir_size; index++)
  105254:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  10525b:	eb 17                	jmp    105274 <_ZN3hal3x867contextC1Ev+0x106>
		{
			this->pagedir[index] = 0;
  10525d:	8b 45 08             	mov    0x8(%ebp),%eax
  105260:	8b 00                	mov    (%eax),%eax
  105262:	8b 55 f0             	mov    -0x10(%ebp),%edx
  105265:	c1 e2 02             	shl    $0x2,%edx
  105268:	01 d0                	add    %edx,%eax
  10526a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	else
	{
		pmm &pmm = pmm::instance();
		this->pagedir = (pagedir_t*)pmm.alloc();

		for(size_t index = 0; index < context::pagedir_size; index++)
  105270:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  105274:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
  10527b:	76 e0                	jbe    10525d <_ZN3hal3x867contextC1Ev+0xef>
		{
			this->pagedir[index] = 0;
		}

		this->pagedir[PD_INDEX(context::pagedir_mapping)] = (pagetab_t)this->pagedir | context::page_present | context::page_write;
  10527d:	8b 45 08             	mov    0x8(%ebp),%eax
  105280:	8b 00                	mov    (%eax),%eax
  105282:	8d 90 fc 0f 00 00    	lea    0xffc(%eax),%edx
  105288:	8b 45 08             	mov    0x8(%ebp),%eax
  10528b:	8b 00                	mov    (%eax),%eax
  10528d:	83 c8 03             	or     $0x3,%eax
  105290:	89 02                	mov    %eax,(%edx)

		this->map(0x1000, 0x1000, context::page_present | context::page_write, 1023);
  105292:	c7 44 24 10 ff 03 00 	movl   $0x3ff,0x10(%esp)
  105299:	00 
  10529a:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  1052a1:	00 
  1052a2:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
  1052a9:	00 
  1052aa:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
  1052b1:	00 
  1052b2:	8b 45 08             	mov    0x8(%ebp),%eax
  1052b5:	89 04 24             	mov    %eax,(%esp)
  1052b8:	e8 df 04 00 00       	call   10579c <_ZN3hal3x867context3mapEjjjj>
	}
}
  1052bd:	c9                   	leave  
  1052be:	c3                   	ret    
  1052bf:	90                   	nop

001052c0 <_ZN3hal3x867contextD1Ev>:

context::~context(  )
  1052c0:	55                   	push   %ebp
  1052c1:	89 e5                	mov    %esp,%ebp
  1052c3:	83 ec 38             	sub    $0x38,%esp
{
	pagedir_t *pd = this->pagedir;
  1052c6:	8b 45 08             	mov    0x8(%ebp),%eax
  1052c9:	8b 00                	mov    (%eax),%eax
  1052cb:	89 45 ec             	mov    %eax,-0x14(%ebp)
	pagetab_t *pt;

	if(mapper::paging_activated)
  1052ce:	0f b6 05 c4 38 13 00 	movzbl 0x1338c4,%eax
  1052d5:	84 c0                	test   %al,%al
  1052d7:	0f 84 be 00 00 00    	je     10539b <_ZN3hal3x867contextD1Ev+0xdb>
	{
		if(this == mapper::current_context)
  1052dd:	a1 c8 38 13 00       	mov    0x1338c8,%eax
  1052e2:	39 45 08             	cmp    %eax,0x8(%ebp)
  1052e5:	0f 84 8f 00 00 00    	je     10537a <_ZN3hal3x867contextD1Ev+0xba>
			  * WTF?
			  */
		}
		else
		{
			mapper::current_context->map(context::tmp_pagedir_mapping, (uintptr_t)pd, context::page_present | context::page_write);
  1052eb:	8b 55 ec             	mov    -0x14(%ebp),%edx
  1052ee:	a1 c8 38 13 00       	mov    0x1338c8,%eax
  1052f3:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  1052fa:	00 
  1052fb:	89 54 24 08          	mov    %edx,0x8(%esp)
  1052ff:	c7 44 24 04 00 e0 bf 	movl   $0xffbfe000,0x4(%esp)
  105306:	ff 
  105307:	89 04 24             	mov    %eax,(%esp)
  10530a:	e8 4b 01 00 00       	call   10545a <_ZN3hal3x867context3mapEjjj>

			pd = (pagedir_t*)context::tmp_pagedir_mapping;
  10530f:	c7 45 ec 00 e0 bf ff 	movl   $0xffbfe000,-0x14(%ebp)

			for(size_t index = 0; index < context::pagedir_size; index++)
  105316:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  10531d:	eb 52                	jmp    105371 <_ZN3hal3x867contextD1Ev+0xb1>
			{
				pt = (pagetab_t*)(pd[index] & ~0xFFF);
  10531f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105322:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  105329:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10532c:	01 d0                	add    %edx,%eax
  10532e:	8b 00                	mov    (%eax),%eax
  105330:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  105335:	89 45 e8             	mov    %eax,-0x18(%ebp)

				if(pt)
  105338:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
  10533c:	74 2f                	je     10536d <_ZN3hal3x867contextD1Ev+0xad>
				{
					pmm &pmm = pmm::instance();
  10533e:	e8 e4 71 00 00       	call   10c527 <_ZN3hal3x863pmm8instanceEv>
  105343:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					pmm.free((uintptr_t)pt);
  105346:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105349:	89 44 24 04          	mov    %eax,0x4(%esp)
  10534d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105350:	89 04 24             	mov    %eax,(%esp)
  105353:	e8 26 3b 00 00       	call   108e7e <_ZN3hal3x863pmm4freeEj>

					pd[index] = (pagetab_t)0;
  105358:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10535b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  105362:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105365:	01 d0                	add    %edx,%eax
  105367:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		{
			mapper::current_context->map(context::tmp_pagedir_mapping, (uintptr_t)pd, context::page_present | context::page_write);

			pd = (pagedir_t*)context::tmp_pagedir_mapping;

			for(size_t index = 0; index < context::pagedir_size; index++)
  10536d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  105371:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
  105378:	76 a5                	jbe    10531f <_ZN3hal3x867contextD1Ev+0x5f>
					pd[index] = (pagetab_t)0;
				}
			}
		}

		pmm &pmm = pmm::instance();
  10537a:	e8 a8 71 00 00       	call   10c527 <_ZN3hal3x863pmm8instanceEv>
  10537f:	89 45 e0             	mov    %eax,-0x20(%ebp)
		pmm.free((uintptr_t)this->pagedir);
  105382:	8b 45 08             	mov    0x8(%ebp),%eax
  105385:	8b 00                	mov    (%eax),%eax
  105387:	89 44 24 04          	mov    %eax,0x4(%esp)
  10538b:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10538e:	89 04 24             	mov    %eax,(%esp)
  105391:	e8 e8 3a 00 00       	call   108e7e <_ZN3hal3x863pmm4freeEj>
  105396:	e9 80 00 00 00       	jmp    10541b <_ZN3hal3x867contextD1Ev+0x15b>
	}
	else
	{
		for(size_t index = 0; index < context::pagedir_size; index++)
  10539b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  1053a2:	eb 52                	jmp    1053f6 <_ZN3hal3x867contextD1Ev+0x136>
		{
			pt = (pagetab_t*)(pd[index] & ~0xFFF);
  1053a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1053a7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  1053ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1053b1:	01 d0                	add    %edx,%eax
  1053b3:	8b 00                	mov    (%eax),%eax
  1053b5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  1053ba:	89 45 e8             	mov    %eax,-0x18(%ebp)

			if(pt)
  1053bd:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
  1053c1:	74 2f                	je     1053f2 <_ZN3hal3x867contextD1Ev+0x132>
			{
				pmm &pmm = pmm::instance();
  1053c3:	e8 5f 71 00 00       	call   10c527 <_ZN3hal3x863pmm8instanceEv>
  1053c8:	89 45 dc             	mov    %eax,-0x24(%ebp)
				pmm.free((uintptr_t)pt);
  1053cb:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1053ce:	89 44 24 04          	mov    %eax,0x4(%esp)
  1053d2:	8b 45 dc             	mov    -0x24(%ebp),%eax
  1053d5:	89 04 24             	mov    %eax,(%esp)
  1053d8:	e8 a1 3a 00 00       	call   108e7e <_ZN3hal3x863pmm4freeEj>

				pd[index] = (pagetab_t)0;
  1053dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1053e0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  1053e7:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1053ea:	01 d0                	add    %edx,%eax
  1053ec:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		pmm &pmm = pmm::instance();
		pmm.free((uintptr_t)this->pagedir);
	}
	else
	{
		for(size_t index = 0; index < context::pagedir_size; index++)
  1053f2:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  1053f6:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
  1053fd:	76 a5                	jbe    1053a4 <_ZN3hal3x867contextD1Ev+0xe4>

				pd[index] = (pagetab_t)0;
			}
		}

		pmm &pmm = pmm::instance();
  1053ff:	e8 23 71 00 00       	call   10c527 <_ZN3hal3x863pmm8instanceEv>
  105404:	89 45 d8             	mov    %eax,-0x28(%ebp)
		pmm.free((uintptr_t)this->pagedir);
  105407:	8b 45 08             	mov    0x8(%ebp),%eax
  10540a:	8b 00                	mov    (%eax),%eax
  10540c:	89 44 24 04          	mov    %eax,0x4(%esp)
  105410:	8b 45 d8             	mov    -0x28(%ebp),%eax
  105413:	89 04 24             	mov    %eax,(%esp)
  105416:	e8 63 3a 00 00       	call   108e7e <_ZN3hal3x863pmm4freeEj>
	}
}
  10541b:	c9                   	leave  
  10541c:	c3                   	ret    
  10541d:	90                   	nop

0010541e <_ZN3hal3x867context8activateEv>:

void context::activate(  )
{
  10541e:	55                   	push   %ebp
  10541f:	89 e5                	mov    %esp,%ebp
  105421:	83 ec 10             	sub    $0x10,%esp
	asm volatile("mov %0, %%cr3" : : "r" (this->pagedir));
  105424:	8b 45 08             	mov    0x8(%ebp),%eax
  105427:	8b 00                	mov    (%eax),%eax
  105429:	0f 22 d8             	mov    %eax,%cr3

	mapper::current_context = this;
  10542c:	8b 45 08             	mov    0x8(%ebp),%eax
  10542f:	a3 c8 38 13 00       	mov    %eax,0x1338c8

	if(!mapper::paging_activated)
  105434:	0f b6 05 c4 38 13 00 	movzbl 0x1338c4,%eax
  10543b:	84 c0                	test   %al,%al
  10543d:	75 18                	jne    105457 <_ZN3hal3x867context8activateEv+0x39>
	{
		uint32_t cr0;

		asm volatile("mov %%cr0, %0" :  "=r" (cr0));
  10543f:	0f 20 c0             	mov    %cr0,%eax
  105442:	89 45 fc             	mov    %eax,-0x4(%ebp)
    		asm volatile("mov %0, %%cr0" : : "r" (cr0 | (1 << 31) | (1 << 16)));
  105445:	8b 45 fc             	mov    -0x4(%ebp),%eax
  105448:	0d 00 00 01 80       	or     $0x80010000,%eax
  10544d:	0f 22 c0             	mov    %eax,%cr0

		mapper::paging_activated = true;
  105450:	c6 05 c4 38 13 00 01 	movb   $0x1,0x1338c4
	}
}
  105457:	c9                   	leave  
  105458:	c3                   	ret    
  105459:	90                   	nop

0010545a <_ZN3hal3x867context3mapEjjj>:

bool context::map( uintptr_t virt, uintptr_t phys, uint32_t flags )
{
  10545a:	55                   	push   %ebp
  10545b:	89 e5                	mov    %esp,%ebp
  10545d:	83 ec 38             	sub    $0x38,%esp
	if((virt % 0x1000) != 0 || (phys % 0x1000) != 0)
  105460:	8b 45 0c             	mov    0xc(%ebp),%eax
  105463:	25 ff 0f 00 00       	and    $0xfff,%eax
  105468:	85 c0                	test   %eax,%eax
  10546a:	75 0c                	jne    105478 <_ZN3hal3x867context3mapEjjj+0x1e>
  10546c:	8b 45 10             	mov    0x10(%ebp),%eax
  10546f:	25 ff 0f 00 00       	and    $0xfff,%eax
  105474:	85 c0                	test   %eax,%eax
  105476:	74 0a                	je     105482 <_ZN3hal3x867context3mapEjjj+0x28>
	{
		return false;
  105478:	b8 00 00 00 00       	mov    $0x0,%eax
  10547d:	e9 17 03 00 00       	jmp    105799 <_ZN3hal3x867context3mapEjjj+0x33f>
	}

	pagedir_t *pd = this->pagedir;
  105482:	8b 45 08             	mov    0x8(%ebp),%eax
  105485:	8b 00                	mov    (%eax),%eax
  105487:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	pagetab_t *pt;

	if(mapper::paging_activated)
  10548a:	0f b6 05 c4 38 13 00 	movzbl 0x1338c4,%eax
  105491:	84 c0                	test   %al,%al
  105493:	0f 84 33 02 00 00    	je     1056cc <_ZN3hal3x867context3mapEjjj+0x272>
	{
		if(this == mapper::current_context)
  105499:	a1 c8 38 13 00       	mov    0x1338c8,%eax
  10549e:	39 45 08             	cmp    %eax,0x8(%ebp)
  1054a1:	0f 85 d7 00 00 00    	jne    10557e <_ZN3hal3x867context3mapEjjj+0x124>
		{
			pd = (pagedir_t*)context::pagedir_mapping;
  1054a7:	c7 45 e4 00 f0 ff ff 	movl   $0xfffff000,-0x1c(%ebp)

			if(pd[PD_INDEX(virt) ] & context::page_present)
  1054ae:	8b 45 0c             	mov    0xc(%ebp),%eax
  1054b1:	c1 e8 16             	shr    $0x16,%eax
  1054b4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  1054bb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1054be:	01 d0                	add    %edx,%eax
  1054c0:	8b 00                	mov    (%eax),%eax
  1054c2:	83 e0 01             	and    $0x1,%eax
  1054c5:	85 c0                	test   %eax,%eax
  1054c7:	74 13                	je     1054dc <_ZN3hal3x867context3mapEjjj+0x82>
			{
				pt = (pagetab_t*)(context::pagetab_mapping + PD_INDEX(virt) * 0x1000);
  1054c9:	8b 45 0c             	mov    0xc(%ebp),%eax
  1054cc:	c1 e8 16             	shr    $0x16,%eax
  1054cf:	05 00 fc 0f 00       	add    $0xffc00,%eax
  1054d4:	c1 e0 0c             	shl    $0xc,%eax
  1054d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
  1054da:	eb 7c                	jmp    105558 <_ZN3hal3x867context3mapEjjj+0xfe>
			}
			else
			{
				pmm &pmm = pmm::instance();
  1054dc:	e8 46 70 00 00       	call   10c527 <_ZN3hal3x863pmm8instanceEv>
  1054e1:	89 45 e0             	mov    %eax,-0x20(%ebp)
				pt = (pagetab_t*)pmm.alloc();
  1054e4:	8b 45 e0             	mov    -0x20(%ebp),%eax
  1054e7:	89 04 24             	mov    %eax,(%esp)
  1054ea:	e8 ab 35 00 00       	call   108a9a <_ZN3hal3x863pmm5allocEv>
  1054ef:	89 45 f4             	mov    %eax,-0xc(%ebp)

				if(!pt)
  1054f2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  1054f6:	75 0a                	jne    105502 <_ZN3hal3x867context3mapEjjj+0xa8>
				{
					return false;
  1054f8:	b8 00 00 00 00       	mov    $0x0,%eax
  1054fd:	e9 97 02 00 00       	jmp    105799 <_ZN3hal3x867context3mapEjjj+0x33f>
				}

				pd[PD_INDEX(virt)] = (pagetab_t)pt | flags;
  105502:	8b 45 0c             	mov    0xc(%ebp),%eax
  105505:	c1 e8 16             	shr    $0x16,%eax
  105508:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  10550f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105512:	01 c2                	add    %eax,%edx
  105514:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105517:	0b 45 14             	or     0x14(%ebp),%eax
  10551a:	89 02                	mov    %eax,(%edx)

				pt = (pagetab_t*)(context::pagetab_mapping + PD_INDEX(virt) * 0x1000);
  10551c:	8b 45 0c             	mov    0xc(%ebp),%eax
  10551f:	c1 e8 16             	shr    $0x16,%eax
  105522:	05 00 fc 0f 00       	add    $0xffc00,%eax
  105527:	c1 e0 0c             	shl    $0xc,%eax
  10552a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		
				for(size_t index = 0; index < context::pagetab_size; index++)
  10552d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  105534:	eb 19                	jmp    10554f <_ZN3hal3x867context3mapEjjj+0xf5>
				{
					pt[index] = 0;
  105536:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105539:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  105540:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105543:	01 d0                	add    %edx,%eax
  105545:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

				pd[PD_INDEX(virt)] = (pagetab_t)pt | flags;

				pt = (pagetab_t*)(context::pagetab_mapping + PD_INDEX(virt) * 0x1000);
		
				for(size_t index = 0; index < context::pagetab_size; index++)
  10554b:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  10554f:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
  105556:	76 de                	jbe    105536 <_ZN3hal3x867context3mapEjjj+0xdc>
				{
					pt[index] = 0;
				}
			}

			pt[PT_INDEX(virt)] = phys | flags;
  105558:	8b 45 0c             	mov    0xc(%ebp),%eax
  10555b:	c1 e8 0c             	shr    $0xc,%eax
  10555e:	25 ff 03 00 00       	and    $0x3ff,%eax
  105563:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  10556a:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10556d:	01 d0                	add    %edx,%eax
  10556f:	8b 55 14             	mov    0x14(%ebp),%edx
  105572:	8b 4d 10             	mov    0x10(%ebp),%ecx
  105575:	09 ca                	or     %ecx,%edx
  105577:	89 10                	mov    %edx,(%eax)
  105579:	e9 28 01 00 00       	jmp    1056a6 <_ZN3hal3x867context3mapEjjj+0x24c>
		}
		else
		{
			mapper::current_context->map(context::tmp_pagedir_mapping, (uintptr_t)pd, context::page_present | context::page_write);
  10557e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  105581:	a1 c8 38 13 00       	mov    0x1338c8,%eax
  105586:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  10558d:	00 
  10558e:	89 54 24 08          	mov    %edx,0x8(%esp)
  105592:	c7 44 24 04 00 e0 bf 	movl   $0xffbfe000,0x4(%esp)
  105599:	ff 
  10559a:	89 04 24             	mov    %eax,(%esp)
  10559d:	e8 b8 fe ff ff       	call   10545a <_ZN3hal3x867context3mapEjjj>

			pd = (pagedir_t*)context::tmp_pagedir_mapping;
  1055a2:	c7 45 e4 00 e0 bf ff 	movl   $0xffbfe000,-0x1c(%ebp)

			if(pd[PD_INDEX(virt)] & context::page_present)
  1055a9:	8b 45 0c             	mov    0xc(%ebp),%eax
  1055ac:	c1 e8 16             	shr    $0x16,%eax
  1055af:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  1055b6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1055b9:	01 d0                	add    %edx,%eax
  1055bb:	8b 00                	mov    (%eax),%eax
  1055bd:	83 e0 01             	and    $0x1,%eax
  1055c0:	85 c0                	test   %eax,%eax
  1055c2:	74 4c                	je     105610 <_ZN3hal3x867context3mapEjjj+0x1b6>
			{
				pt = (pagetab_t*)(pd[PD_INDEX(virt)] & ~0xFFF);
  1055c4:	8b 45 0c             	mov    0xc(%ebp),%eax
  1055c7:	c1 e8 16             	shr    $0x16,%eax
  1055ca:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  1055d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1055d4:	01 d0                	add    %edx,%eax
  1055d6:	8b 00                	mov    (%eax),%eax
  1055d8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  1055dd:	89 45 f4             	mov    %eax,-0xc(%ebp)

				mapper::current_context->map(context::tmp_pagetab_mapping, (uintptr_t)pt, context::page_present | context::page_write);
  1055e0:	8b 55 f4             	mov    -0xc(%ebp),%edx
  1055e3:	a1 c8 38 13 00       	mov    0x1338c8,%eax
  1055e8:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  1055ef:	00 
  1055f0:	89 54 24 08          	mov    %edx,0x8(%esp)
  1055f4:	c7 44 24 04 00 f0 bf 	movl   $0xffbff000,0x4(%esp)
  1055fb:	ff 
  1055fc:	89 04 24             	mov    %eax,(%esp)
  1055ff:	e8 56 fe ff ff       	call   10545a <_ZN3hal3x867context3mapEjjj>

				pt = (pagetab_t*)context::tmp_pagetab_mapping;
  105604:	c7 45 f4 00 f0 bf ff 	movl   $0xffbff000,-0xc(%ebp)
  10560b:	e9 96 00 00 00       	jmp    1056a6 <_ZN3hal3x867context3mapEjjj+0x24c>
			}
			else
			{
				pmm &pmm = pmm::instance();
  105610:	e8 12 6f 00 00       	call   10c527 <_ZN3hal3x863pmm8instanceEv>
  105615:	89 45 dc             	mov    %eax,-0x24(%ebp)
				pt = (pagetab_t*)pmm.alloc();
  105618:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10561b:	89 04 24             	mov    %eax,(%esp)
  10561e:	e8 77 34 00 00       	call   108a9a <_ZN3hal3x863pmm5allocEv>
  105623:	89 45 f4             	mov    %eax,-0xc(%ebp)

				if(!pt)
  105626:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  10562a:	75 0a                	jne    105636 <_ZN3hal3x867context3mapEjjj+0x1dc>
				{
					return false;
  10562c:	b8 00 00 00 00       	mov    $0x0,%eax
  105631:	e9 63 01 00 00       	jmp    105799 <_ZN3hal3x867context3mapEjjj+0x33f>
				}

				pd[PD_INDEX(virt)] = (pagetab_t)pt | flags;
  105636:	8b 45 0c             	mov    0xc(%ebp),%eax
  105639:	c1 e8 16             	shr    $0x16,%eax
  10563c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  105643:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105646:	01 c2                	add    %eax,%edx
  105648:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10564b:	0b 45 14             	or     0x14(%ebp),%eax
  10564e:	89 02                	mov    %eax,(%edx)

				mapper::current_context->map(context::tmp_pagetab_mapping, (uintptr_t)pt, context::page_present | context::page_write);
  105650:	8b 55 f4             	mov    -0xc(%ebp),%edx
  105653:	a1 c8 38 13 00       	mov    0x1338c8,%eax
  105658:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  10565f:	00 
  105660:	89 54 24 08          	mov    %edx,0x8(%esp)
  105664:	c7 44 24 04 00 f0 bf 	movl   $0xffbff000,0x4(%esp)
  10566b:	ff 
  10566c:	89 04 24             	mov    %eax,(%esp)
  10566f:	e8 e6 fd ff ff       	call   10545a <_ZN3hal3x867context3mapEjjj>

				pt = (pagetab_t*)context::tmp_pagetab_mapping;
  105674:	c7 45 f4 00 f0 bf ff 	movl   $0xffbff000,-0xc(%ebp)
		
				for(size_t index = 0; index < context::pagetab_size; index++)
  10567b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  105682:	eb 19                	jmp    10569d <_ZN3hal3x867context3mapEjjj+0x243>
				{
					pt[index] = 0;
  105684:	8b 45 ec             	mov    -0x14(%ebp),%eax
  105687:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  10568e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105691:	01 d0                	add    %edx,%eax
  105693:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

				mapper::current_context->map(context::tmp_pagetab_mapping, (uintptr_t)pt, context::page_present | context::page_write);

				pt = (pagetab_t*)context::tmp_pagetab_mapping;
		
				for(size_t index = 0; index < context::pagetab_size; index++)
  105699:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
  10569d:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
  1056a4:	76 de                	jbe    105684 <_ZN3hal3x867context3mapEjjj+0x22a>
					pt[index] = 0;
				}
			}
		}

		pt[PT_INDEX(virt)] = phys | flags;
  1056a6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1056a9:	c1 e8 0c             	shr    $0xc,%eax
  1056ac:	25 ff 03 00 00       	and    $0x3ff,%eax
  1056b1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  1056b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1056bb:	01 d0                	add    %edx,%eax
  1056bd:	8b 55 14             	mov    0x14(%ebp),%edx
  1056c0:	8b 4d 10             	mov    0x10(%ebp),%ecx
  1056c3:	09 ca                	or     %ecx,%edx
  1056c5:	89 10                	mov    %edx,(%eax)
  1056c7:	e9 c2 00 00 00       	jmp    10578e <_ZN3hal3x867context3mapEjjj+0x334>
	}
	else
	{
		if(pd[PD_INDEX(virt)] & context::page_present)
  1056cc:	8b 45 0c             	mov    0xc(%ebp),%eax
  1056cf:	c1 e8 16             	shr    $0x16,%eax
  1056d2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  1056d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1056dc:	01 d0                	add    %edx,%eax
  1056de:	8b 00                	mov    (%eax),%eax
  1056e0:	83 e0 01             	and    $0x1,%eax
  1056e3:	85 c0                	test   %eax,%eax
  1056e5:	74 1e                	je     105705 <_ZN3hal3x867context3mapEjjj+0x2ab>
		{
			pt = (pagetab_t*)(pd[PD_INDEX(virt)] & ~0xFFF);
  1056e7:	8b 45 0c             	mov    0xc(%ebp),%eax
  1056ea:	c1 e8 16             	shr    $0x16,%eax
  1056ed:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  1056f4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  1056f7:	01 d0                	add    %edx,%eax
  1056f9:	8b 00                	mov    (%eax),%eax
  1056fb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  105700:	89 45 f4             	mov    %eax,-0xc(%ebp)
  105703:	eb 68                	jmp    10576d <_ZN3hal3x867context3mapEjjj+0x313>
		}
		else
		{
			pmm &pmm = pmm::instance();
  105705:	e8 1d 6e 00 00       	call   10c527 <_ZN3hal3x863pmm8instanceEv>
  10570a:	89 45 d8             	mov    %eax,-0x28(%ebp)
			pt = (pagetab_t*)pmm.alloc();
  10570d:	8b 45 d8             	mov    -0x28(%ebp),%eax
  105710:	89 04 24             	mov    %eax,(%esp)
  105713:	e8 82 33 00 00       	call   108a9a <_ZN3hal3x863pmm5allocEv>
  105718:	89 45 f4             	mov    %eax,-0xc(%ebp)

			if(!pt)
  10571b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  10571f:	75 07                	jne    105728 <_ZN3hal3x867context3mapEjjj+0x2ce>
			{
				return false;
  105721:	b8 00 00 00 00       	mov    $0x0,%eax
  105726:	eb 71                	jmp    105799 <_ZN3hal3x867context3mapEjjj+0x33f>
			}

			for(size_t index = 0; index < context::pagetab_size; index++)
  105728:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  10572f:	eb 19                	jmp    10574a <_ZN3hal3x867context3mapEjjj+0x2f0>
			{
				pt[index] = 0;
  105731:	8b 45 e8             	mov    -0x18(%ebp),%eax
  105734:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  10573b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10573e:	01 d0                	add    %edx,%eax
  105740:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			if(!pt)
			{
				return false;
			}

			for(size_t index = 0; index < context::pagetab_size; index++)
  105746:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
  10574a:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
  105751:	76 de                	jbe    105731 <_ZN3hal3x867context3mapEjjj+0x2d7>
			{
				pt[index] = 0;
			}

			pd[PD_INDEX(virt)] = (pagetab_t)pt | flags;
  105753:	8b 45 0c             	mov    0xc(%ebp),%eax
  105756:	c1 e8 16             	shr    $0x16,%eax
  105759:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  105760:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  105763:	01 c2                	add    %eax,%edx
  105765:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105768:	0b 45 14             	or     0x14(%ebp),%eax
  10576b:	89 02                	mov    %eax,(%edx)
		}

		pt[PT_INDEX(virt)] = phys | flags;
  10576d:	8b 45 0c             	mov    0xc(%ebp),%eax
  105770:	c1 e8 0c             	shr    $0xc,%eax
  105773:	25 ff 03 00 00       	and    $0x3ff,%eax
  105778:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  10577f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105782:	01 d0                	add    %edx,%eax
  105784:	8b 55 14             	mov    0x14(%ebp),%edx
  105787:	8b 4d 10             	mov    0x10(%ebp),%ecx
  10578a:	09 ca                	or     %ecx,%edx
  10578c:	89 10                	mov    %edx,(%eax)
	}

	asm volatile("invlpg (%0)" :: "r" (virt) : "memory");
  10578e:	8b 45 0c             	mov    0xc(%ebp),%eax
  105791:	0f 01 38             	invlpg (%eax)

	return true;
  105794:	b8 01 00 00 00       	mov    $0x1,%eax
}
  105799:	c9                   	leave  
  10579a:	c3                   	ret    
  10579b:	90                   	nop

0010579c <_ZN3hal3x867context3mapEjjjj>:

bool context::map( uintptr_t virt, uintptr_t phys, uint32_t flags, size_t n )
{
  10579c:	55                   	push   %ebp
  10579d:	89 e5                	mov    %esp,%ebp
  10579f:	83 ec 28             	sub    $0x28,%esp
	uintptr_t vaddr = virt;
  1057a2:	8b 45 0c             	mov    0xc(%ebp),%eax
  1057a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uintptr_t paddr = phys;
  1057a8:	8b 45 10             	mov    0x10(%ebp),%eax
  1057ab:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for(size_t i = 0; i < n; i++)
  1057ae:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  1057b5:	eb 42                	jmp    1057f9 <_ZN3hal3x867context3mapEjjjj+0x5d>
	{
		if(!this->map(vaddr, paddr, flags))
  1057b7:	8b 45 14             	mov    0x14(%ebp),%eax
  1057ba:	89 44 24 0c          	mov    %eax,0xc(%esp)
  1057be:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1057c1:	89 44 24 08          	mov    %eax,0x8(%esp)
  1057c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1057c8:	89 44 24 04          	mov    %eax,0x4(%esp)
  1057cc:	8b 45 08             	mov    0x8(%ebp),%eax
  1057cf:	89 04 24             	mov    %eax,(%esp)
  1057d2:	e8 83 fc ff ff       	call   10545a <_ZN3hal3x867context3mapEjjj>
  1057d7:	84 c0                	test   %al,%al
  1057d9:	0f 94 c0             	sete   %al
  1057dc:	84 c0                	test   %al,%al
  1057de:	74 07                	je     1057e7 <_ZN3hal3x867context3mapEjjjj+0x4b>
		{
			return false;
  1057e0:	b8 00 00 00 00       	mov    $0x0,%eax
  1057e5:	eb 1f                	jmp    105806 <_ZN3hal3x867context3mapEjjjj+0x6a>
		}

		vaddr += 0x1000;
  1057e7:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
		paddr += 0x1000;
  1057ee:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
bool context::map( uintptr_t virt, uintptr_t phys, uint32_t flags, size_t n )
{
	uintptr_t vaddr = virt;
	uintptr_t paddr = phys;

	for(size_t i = 0; i < n; i++)
  1057f5:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
  1057f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1057fc:	3b 45 18             	cmp    0x18(%ebp),%eax
  1057ff:	72 b6                	jb     1057b7 <_ZN3hal3x867context3mapEjjjj+0x1b>

		vaddr += 0x1000;
		paddr += 0x1000;
	}

	return true;
  105801:	b8 01 00 00 00       	mov    $0x1,%eax
}
  105806:	c9                   	leave  
  105807:	c3                   	ret    

00105808 <_ZN3hal3x867context4umapEj>:

bool context::umap( uintptr_t virt )
{
  105808:	55                   	push   %ebp
  105809:	89 e5                	mov    %esp,%ebp
  10580b:	83 ec 18             	sub    $0x18,%esp
	return this->map(virt, 0x0, 0x0);
  10580e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  105815:	00 
  105816:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  10581d:	00 
  10581e:	8b 45 0c             	mov    0xc(%ebp),%eax
  105821:	89 44 24 04          	mov    %eax,0x4(%esp)
  105825:	8b 45 08             	mov    0x8(%ebp),%eax
  105828:	89 04 24             	mov    %eax,(%esp)
  10582b:	e8 2a fc ff ff       	call   10545a <_ZN3hal3x867context3mapEjjj>
}
  105830:	c9                   	leave  
  105831:	c3                   	ret    

00105832 <_ZN3hal3x867context4umapEjj>:

bool context::umap( uintptr_t virt, size_t n )
{
  105832:	55                   	push   %ebp
  105833:	89 e5                	mov    %esp,%ebp
  105835:	83 ec 28             	sub    $0x28,%esp
	uintptr_t vaddr = virt;
  105838:	8b 45 0c             	mov    0xc(%ebp),%eax
  10583b:	89 45 f4             	mov    %eax,-0xc(%ebp)

	for(size_t i = 0; i < n; i++)
  10583e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  105845:	eb 2d                	jmp    105874 <_ZN3hal3x867context4umapEjj+0x42>
	{
		if(!this->umap(vaddr))
  105847:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10584a:	89 44 24 04          	mov    %eax,0x4(%esp)
  10584e:	8b 45 08             	mov    0x8(%ebp),%eax
  105851:	89 04 24             	mov    %eax,(%esp)
  105854:	e8 af ff ff ff       	call   105808 <_ZN3hal3x867context4umapEj>
  105859:	84 c0                	test   %al,%al
  10585b:	0f 94 c0             	sete   %al
  10585e:	84 c0                	test   %al,%al
  105860:	74 07                	je     105869 <_ZN3hal3x867context4umapEjj+0x37>
		{
			return false;
  105862:	b8 00 00 00 00       	mov    $0x0,%eax
  105867:	eb 18                	jmp    105881 <_ZN3hal3x867context4umapEjj+0x4f>
		}

		vaddr += 0x1000;
  105869:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)

bool context::umap( uintptr_t virt, size_t n )
{
	uintptr_t vaddr = virt;

	for(size_t i = 0; i < n; i++)
  105870:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  105874:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105877:	3b 45 10             	cmp    0x10(%ebp),%eax
  10587a:	72 cb                	jb     105847 <_ZN3hal3x867context4umapEjj+0x15>
		}

		vaddr += 0x1000;
	}

	return true;
  10587c:	b8 01 00 00 00       	mov    $0x1,%eax
}
  105881:	c9                   	leave  
  105882:	c3                   	ret    
  105883:	90                   	nop

00105884 <_ZN3hal3x867context4physEj>:

uintptr_t context::phys( uintptr_t virt )
{
  105884:	55                   	push   %ebp
  105885:	89 e5                	mov    %esp,%ebp
  105887:	83 ec 28             	sub    $0x28,%esp
	if((virt % 0x1000) != 0)
  10588a:	8b 45 0c             	mov    0xc(%ebp),%eax
  10588d:	25 ff 0f 00 00       	and    $0xfff,%eax
  105892:	85 c0                	test   %eax,%eax
  105894:	74 0a                	je     1058a0 <_ZN3hal3x867context4physEj+0x1c>
	{
		return 0x0;
  105896:	b8 00 00 00 00       	mov    $0x0,%eax
  10589b:	e9 9e 01 00 00       	jmp    105a3e <_ZN3hal3x867context4physEj+0x1ba>
	}

	pagedir_t *pd = this->pagedir;
  1058a0:	8b 45 08             	mov    0x8(%ebp),%eax
  1058a3:	8b 00                	mov    (%eax),%eax
  1058a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	pagetab_t *pt;

	if(mapper::paging_activated)
  1058a8:	0f b6 05 c4 38 13 00 	movzbl 0x1338c4,%eax
  1058af:	84 c0                	test   %al,%al
  1058b1:	0f 84 25 01 00 00    	je     1059dc <_ZN3hal3x867context4physEj+0x158>
	{
		if(this == mapper::current_context)
  1058b7:	a1 c8 38 13 00       	mov    0x1338c8,%eax
  1058bc:	39 45 08             	cmp    %eax,0x8(%ebp)
  1058bf:	75 64                	jne    105925 <_ZN3hal3x867context4physEj+0xa1>
		{
			pd = (pagedir_t*)context::pagedir_mapping;
  1058c1:	c7 45 f4 00 f0 ff ff 	movl   $0xfffff000,-0xc(%ebp)

			if(pd[PD_INDEX(virt) ] & context::page_present)
  1058c8:	8b 45 0c             	mov    0xc(%ebp),%eax
  1058cb:	c1 e8 16             	shr    $0x16,%eax
  1058ce:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  1058d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1058d8:	01 d0                	add    %edx,%eax
  1058da:	8b 00                	mov    (%eax),%eax
  1058dc:	83 e0 01             	and    $0x1,%eax
  1058df:	85 c0                	test   %eax,%eax
  1058e1:	0f 84 52 01 00 00    	je     105a39 <_ZN3hal3x867context4physEj+0x1b5>
			{
				pt = (pagetab_t*)(context::pagetab_mapping + PD_INDEX(virt) * 0x1000);
  1058e7:	8b 45 0c             	mov    0xc(%ebp),%eax
  1058ea:	c1 e8 16             	shr    $0x16,%eax
  1058ed:	05 00 fc 0f 00       	add    $0xffc00,%eax
  1058f2:	c1 e0 0c             	shl    $0xc,%eax
  1058f5:	89 45 f0             	mov    %eax,-0x10(%ebp)

				if(pt)
  1058f8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  1058fc:	0f 84 37 01 00 00    	je     105a39 <_ZN3hal3x867context4physEj+0x1b5>
				{
					return (pt[PT_INDEX(virt)] & ~0xFFF);
  105902:	8b 45 0c             	mov    0xc(%ebp),%eax
  105905:	c1 e8 0c             	shr    $0xc,%eax
  105908:	25 ff 03 00 00       	and    $0x3ff,%eax
  10590d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  105914:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105917:	01 d0                	add    %edx,%eax
  105919:	8b 00                	mov    (%eax),%eax
  10591b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  105920:	e9 19 01 00 00       	jmp    105a3e <_ZN3hal3x867context4physEj+0x1ba>
				}
			}
		}
		else
		{
			mapper::current_context->map(context::tmp_pagedir_mapping, (uintptr_t)pd, context::page_present | context::page_write);
  105925:	8b 55 f4             	mov    -0xc(%ebp),%edx
  105928:	a1 c8 38 13 00       	mov    0x1338c8,%eax
  10592d:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  105934:	00 
  105935:	89 54 24 08          	mov    %edx,0x8(%esp)
  105939:	c7 44 24 04 00 e0 bf 	movl   $0xffbfe000,0x4(%esp)
  105940:	ff 
  105941:	89 04 24             	mov    %eax,(%esp)
  105944:	e8 11 fb ff ff       	call   10545a <_ZN3hal3x867context3mapEjjj>

			pd = (pagedir_t*)context::tmp_pagedir_mapping;
  105949:	c7 45 f4 00 e0 bf ff 	movl   $0xffbfe000,-0xc(%ebp)


			if(pd[PD_INDEX(virt)] & context::page_present)
  105950:	8b 45 0c             	mov    0xc(%ebp),%eax
  105953:	c1 e8 16             	shr    $0x16,%eax
  105956:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  10595d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105960:	01 d0                	add    %edx,%eax
  105962:	8b 00                	mov    (%eax),%eax
  105964:	83 e0 01             	and    $0x1,%eax
  105967:	85 c0                	test   %eax,%eax
  105969:	0f 84 ca 00 00 00    	je     105a39 <_ZN3hal3x867context4physEj+0x1b5>
			{
				pt = (pagetab_t*)(pd[PD_INDEX(virt)] & ~0xFFF);
  10596f:	8b 45 0c             	mov    0xc(%ebp),%eax
  105972:	c1 e8 16             	shr    $0x16,%eax
  105975:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  10597c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10597f:	01 d0                	add    %edx,%eax
  105981:	8b 00                	mov    (%eax),%eax
  105983:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  105988:	89 45 f0             	mov    %eax,-0x10(%ebp)

				mapper::current_context->map(context::tmp_pagetab_mapping, (uintptr_t)pt, context::page_present | context::page_write);
  10598b:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10598e:	a1 c8 38 13 00       	mov    0x1338c8,%eax
  105993:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  10599a:	00 
  10599b:	89 54 24 08          	mov    %edx,0x8(%esp)
  10599f:	c7 44 24 04 00 f0 bf 	movl   $0xffbff000,0x4(%esp)
  1059a6:	ff 
  1059a7:	89 04 24             	mov    %eax,(%esp)
  1059aa:	e8 ab fa ff ff       	call   10545a <_ZN3hal3x867context3mapEjjj>

				pt = (pagetab_t*)context::tmp_pagetab_mapping;
  1059af:	c7 45 f0 00 f0 bf ff 	movl   $0xffbff000,-0x10(%ebp)

				if(pt)
  1059b6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  1059ba:	74 7d                	je     105a39 <_ZN3hal3x867context4physEj+0x1b5>
				{
					return (pt[PT_INDEX(virt)] & ~0xFFF);
  1059bc:	8b 45 0c             	mov    0xc(%ebp),%eax
  1059bf:	c1 e8 0c             	shr    $0xc,%eax
  1059c2:	25 ff 03 00 00       	and    $0x3ff,%eax
  1059c7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  1059ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
  1059d1:	01 d0                	add    %edx,%eax
  1059d3:	8b 00                	mov    (%eax),%eax
  1059d5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  1059da:	eb 62                	jmp    105a3e <_ZN3hal3x867context4physEj+0x1ba>
			}
		}
	}
	else
	{
		if(pd[PD_INDEX(virt)] & context::page_present)
  1059dc:	8b 45 0c             	mov    0xc(%ebp),%eax
  1059df:	c1 e8 16             	shr    $0x16,%eax
  1059e2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  1059e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1059ec:	01 d0                	add    %edx,%eax
  1059ee:	8b 00                	mov    (%eax),%eax
  1059f0:	83 e0 01             	and    $0x1,%eax
  1059f3:	85 c0                	test   %eax,%eax
  1059f5:	74 42                	je     105a39 <_ZN3hal3x867context4physEj+0x1b5>
		{
			pt = (pagetab_t*)(pd[PD_INDEX(virt)] & ~0xFFF);
  1059f7:	8b 45 0c             	mov    0xc(%ebp),%eax
  1059fa:	c1 e8 16             	shr    $0x16,%eax
  1059fd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  105a04:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105a07:	01 d0                	add    %edx,%eax
  105a09:	8b 00                	mov    (%eax),%eax
  105a0b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  105a10:	89 45 f0             	mov    %eax,-0x10(%ebp)

			if(pt)
  105a13:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  105a17:	74 20                	je     105a39 <_ZN3hal3x867context4physEj+0x1b5>
			{
				return (pt[PT_INDEX(virt)] & ~0xFFF);
  105a19:	8b 45 0c             	mov    0xc(%ebp),%eax
  105a1c:	c1 e8 0c             	shr    $0xc,%eax
  105a1f:	25 ff 03 00 00       	and    $0x3ff,%eax
  105a24:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  105a2b:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105a2e:	01 d0                	add    %edx,%eax
  105a30:	8b 00                	mov    (%eax),%eax
  105a32:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  105a37:	eb 05                	jmp    105a3e <_ZN3hal3x867context4physEj+0x1ba>
			}
		}
	}

	return 0x0;
  105a39:	b8 00 00 00 00       	mov    $0x0,%eax
}
  105a3e:	c9                   	leave  
  105a3f:	c3                   	ret    

00105a40 <_ZN3hal3x867context5flagsEj>:

uint32_t context::flags( uintptr_t virt )
{
  105a40:	55                   	push   %ebp
  105a41:	89 e5                	mov    %esp,%ebp
  105a43:	83 ec 28             	sub    $0x28,%esp
	if((virt % 0x1000) != 0)
  105a46:	8b 45 0c             	mov    0xc(%ebp),%eax
  105a49:	25 ff 0f 00 00       	and    $0xfff,%eax
  105a4e:	85 c0                	test   %eax,%eax
  105a50:	74 0a                	je     105a5c <_ZN3hal3x867context5flagsEj+0x1c>
	{
		return 0x0;
  105a52:	b8 00 00 00 00       	mov    $0x0,%eax
  105a57:	e9 9e 01 00 00       	jmp    105bfa <_ZN3hal3x867context5flagsEj+0x1ba>
	}

	pagedir_t *pd = this->pagedir;
  105a5c:	8b 45 08             	mov    0x8(%ebp),%eax
  105a5f:	8b 00                	mov    (%eax),%eax
  105a61:	89 45 f4             	mov    %eax,-0xc(%ebp)
	pagetab_t *pt;

	if(mapper::paging_activated)
  105a64:	0f b6 05 c4 38 13 00 	movzbl 0x1338c4,%eax
  105a6b:	84 c0                	test   %al,%al
  105a6d:	0f 84 25 01 00 00    	je     105b98 <_ZN3hal3x867context5flagsEj+0x158>
	{
		if(this == mapper::current_context)
  105a73:	a1 c8 38 13 00       	mov    0x1338c8,%eax
  105a78:	39 45 08             	cmp    %eax,0x8(%ebp)
  105a7b:	75 64                	jne    105ae1 <_ZN3hal3x867context5flagsEj+0xa1>
		{
			pd = (pagedir_t*)context::pagedir_mapping;
  105a7d:	c7 45 f4 00 f0 ff ff 	movl   $0xfffff000,-0xc(%ebp)

			if(pd[PD_INDEX(virt) ] & context::page_present)
  105a84:	8b 45 0c             	mov    0xc(%ebp),%eax
  105a87:	c1 e8 16             	shr    $0x16,%eax
  105a8a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  105a91:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105a94:	01 d0                	add    %edx,%eax
  105a96:	8b 00                	mov    (%eax),%eax
  105a98:	83 e0 01             	and    $0x1,%eax
  105a9b:	85 c0                	test   %eax,%eax
  105a9d:	0f 84 52 01 00 00    	je     105bf5 <_ZN3hal3x867context5flagsEj+0x1b5>
			{
				pt = (pagetab_t*)(context::pagetab_mapping + PD_INDEX(virt) * 0x1000);
  105aa3:	8b 45 0c             	mov    0xc(%ebp),%eax
  105aa6:	c1 e8 16             	shr    $0x16,%eax
  105aa9:	05 00 fc 0f 00       	add    $0xffc00,%eax
  105aae:	c1 e0 0c             	shl    $0xc,%eax
  105ab1:	89 45 f0             	mov    %eax,-0x10(%ebp)

				if(pt)
  105ab4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  105ab8:	0f 84 37 01 00 00    	je     105bf5 <_ZN3hal3x867context5flagsEj+0x1b5>
				{
					return (pt[PT_INDEX(virt)] & 0xFFF);
  105abe:	8b 45 0c             	mov    0xc(%ebp),%eax
  105ac1:	c1 e8 0c             	shr    $0xc,%eax
  105ac4:	25 ff 03 00 00       	and    $0x3ff,%eax
  105ac9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  105ad0:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105ad3:	01 d0                	add    %edx,%eax
  105ad5:	8b 00                	mov    (%eax),%eax
  105ad7:	25 ff 0f 00 00       	and    $0xfff,%eax
  105adc:	e9 19 01 00 00       	jmp    105bfa <_ZN3hal3x867context5flagsEj+0x1ba>
				}
			}
		}
		else
		{
			mapper::current_context->map(context::tmp_pagedir_mapping, (uintptr_t)pd, context::page_present | context::page_write);
  105ae1:	8b 55 f4             	mov    -0xc(%ebp),%edx
  105ae4:	a1 c8 38 13 00       	mov    0x1338c8,%eax
  105ae9:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  105af0:	00 
  105af1:	89 54 24 08          	mov    %edx,0x8(%esp)
  105af5:	c7 44 24 04 00 e0 bf 	movl   $0xffbfe000,0x4(%esp)
  105afc:	ff 
  105afd:	89 04 24             	mov    %eax,(%esp)
  105b00:	e8 55 f9 ff ff       	call   10545a <_ZN3hal3x867context3mapEjjj>

			pd = (pagedir_t*)context::tmp_pagedir_mapping;
  105b05:	c7 45 f4 00 e0 bf ff 	movl   $0xffbfe000,-0xc(%ebp)

			if(pd[PD_INDEX(virt)] & context::page_present)
  105b0c:	8b 45 0c             	mov    0xc(%ebp),%eax
  105b0f:	c1 e8 16             	shr    $0x16,%eax
  105b12:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  105b19:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105b1c:	01 d0                	add    %edx,%eax
  105b1e:	8b 00                	mov    (%eax),%eax
  105b20:	83 e0 01             	and    $0x1,%eax
  105b23:	85 c0                	test   %eax,%eax
  105b25:	0f 84 ca 00 00 00    	je     105bf5 <_ZN3hal3x867context5flagsEj+0x1b5>
			{
				pt = (pagetab_t*)(pd[PD_INDEX(virt)] & ~0xFFF);
  105b2b:	8b 45 0c             	mov    0xc(%ebp),%eax
  105b2e:	c1 e8 16             	shr    $0x16,%eax
  105b31:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  105b38:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105b3b:	01 d0                	add    %edx,%eax
  105b3d:	8b 00                	mov    (%eax),%eax
  105b3f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  105b44:	89 45 f0             	mov    %eax,-0x10(%ebp)

				mapper::current_context->map(context::tmp_pagetab_mapping, (uintptr_t)pt, context::page_present | context::page_write);
  105b47:	8b 55 f0             	mov    -0x10(%ebp),%edx
  105b4a:	a1 c8 38 13 00       	mov    0x1338c8,%eax
  105b4f:	c7 44 24 0c 03 00 00 	movl   $0x3,0xc(%esp)
  105b56:	00 
  105b57:	89 54 24 08          	mov    %edx,0x8(%esp)
  105b5b:	c7 44 24 04 00 f0 bf 	movl   $0xffbff000,0x4(%esp)
  105b62:	ff 
  105b63:	89 04 24             	mov    %eax,(%esp)
  105b66:	e8 ef f8 ff ff       	call   10545a <_ZN3hal3x867context3mapEjjj>

				pt = (pagetab_t*)context::tmp_pagetab_mapping;
  105b6b:	c7 45 f0 00 f0 bf ff 	movl   $0xffbff000,-0x10(%ebp)

				if(pt)
  105b72:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  105b76:	74 7d                	je     105bf5 <_ZN3hal3x867context5flagsEj+0x1b5>
				{
					return (pt[PT_INDEX(virt)] & 0xFFF);
  105b78:	8b 45 0c             	mov    0xc(%ebp),%eax
  105b7b:	c1 e8 0c             	shr    $0xc,%eax
  105b7e:	25 ff 03 00 00       	and    $0x3ff,%eax
  105b83:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  105b8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105b8d:	01 d0                	add    %edx,%eax
  105b8f:	8b 00                	mov    (%eax),%eax
  105b91:	25 ff 0f 00 00       	and    $0xfff,%eax
  105b96:	eb 62                	jmp    105bfa <_ZN3hal3x867context5flagsEj+0x1ba>
			}
		}
	}
	else
	{
		if(pd[PD_INDEX(virt)] & context::page_present)
  105b98:	8b 45 0c             	mov    0xc(%ebp),%eax
  105b9b:	c1 e8 16             	shr    $0x16,%eax
  105b9e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  105ba5:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105ba8:	01 d0                	add    %edx,%eax
  105baa:	8b 00                	mov    (%eax),%eax
  105bac:	83 e0 01             	and    $0x1,%eax
  105baf:	85 c0                	test   %eax,%eax
  105bb1:	74 42                	je     105bf5 <_ZN3hal3x867context5flagsEj+0x1b5>
		{
			pt = (pagetab_t*)(pd[PD_INDEX(virt)] & ~0xFFF);
  105bb3:	8b 45 0c             	mov    0xc(%ebp),%eax
  105bb6:	c1 e8 16             	shr    $0x16,%eax
  105bb9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  105bc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105bc3:	01 d0                	add    %edx,%eax
  105bc5:	8b 00                	mov    (%eax),%eax
  105bc7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
  105bcc:	89 45 f0             	mov    %eax,-0x10(%ebp)

			if(pt)
  105bcf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  105bd3:	74 20                	je     105bf5 <_ZN3hal3x867context5flagsEj+0x1b5>
			{
				return (pt[PT_INDEX(virt)] & 0xFFF);
  105bd5:	8b 45 0c             	mov    0xc(%ebp),%eax
  105bd8:	c1 e8 0c             	shr    $0xc,%eax
  105bdb:	25 ff 03 00 00       	and    $0x3ff,%eax
  105be0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
  105be7:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105bea:	01 d0                	add    %edx,%eax
  105bec:	8b 00                	mov    (%eax),%eax
  105bee:	25 ff 0f 00 00       	and    $0xfff,%eax
  105bf3:	eb 05                	jmp    105bfa <_ZN3hal3x867context5flagsEj+0x1ba>
			}
		}
	}

	return 0x0;
  105bf5:	b8 00 00 00 00       	mov    $0x0,%eax
}
  105bfa:	c9                   	leave  
  105bfb:	c3                   	ret    

00105bfc <_ZN3hal3x867context4copyERS1_jj>:

bool context::copy( context &src, uintptr_t start, size_t n )
{
  105bfc:	55                   	push   %ebp
  105bfd:	89 e5                	mov    %esp,%ebp
  105bff:	53                   	push   %ebx
  105c00:	83 ec 24             	sub    $0x24,%esp
	uintptr_t vaddr = start;
  105c03:	8b 45 10             	mov    0x10(%ebp),%eax
  105c06:	89 45 f4             	mov    %eax,-0xc(%ebp)

	for(size_t i = 0; i < n; i++)
  105c09:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  105c10:	eb 5b                	jmp    105c6d <_ZN3hal3x867context4copyERS1_jj+0x71>
	{
		if(!this->map(vaddr, src.phys(vaddr), src.flags(vaddr)))
  105c12:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105c15:	89 44 24 04          	mov    %eax,0x4(%esp)
  105c19:	8b 45 0c             	mov    0xc(%ebp),%eax
  105c1c:	89 04 24             	mov    %eax,(%esp)
  105c1f:	e8 1c fe ff ff       	call   105a40 <_ZN3hal3x867context5flagsEj>
  105c24:	89 c3                	mov    %eax,%ebx
  105c26:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105c29:	89 44 24 04          	mov    %eax,0x4(%esp)
  105c2d:	8b 45 0c             	mov    0xc(%ebp),%eax
  105c30:	89 04 24             	mov    %eax,(%esp)
  105c33:	e8 4c fc ff ff       	call   105884 <_ZN3hal3x867context4physEj>
  105c38:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
  105c3c:	89 44 24 08          	mov    %eax,0x8(%esp)
  105c40:	8b 45 f4             	mov    -0xc(%ebp),%eax
  105c43:	89 44 24 04          	mov    %eax,0x4(%esp)
  105c47:	8b 45 08             	mov    0x8(%ebp),%eax
  105c4a:	89 04 24             	mov    %eax,(%esp)
  105c4d:	e8 08 f8 ff ff       	call   10545a <_ZN3hal3x867context3mapEjjj>
  105c52:	84 c0                	test   %al,%al
  105c54:	0f 94 c0             	sete   %al
  105c57:	84 c0                	test   %al,%al
  105c59:	74 07                	je     105c62 <_ZN3hal3x867context4copyERS1_jj+0x66>
		{
			return false;
  105c5b:	b8 00 00 00 00       	mov    $0x0,%eax
  105c60:	eb 18                	jmp    105c7a <_ZN3hal3x867context4copyERS1_jj+0x7e>
		}

		vaddr += 0x1000;
  105c62:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)

bool context::copy( context &src, uintptr_t start, size_t n )
{
	uintptr_t vaddr = start;

	for(size_t i = 0; i < n; i++)
  105c69:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  105c6d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  105c70:	3b 45 14             	cmp    0x14(%ebp),%eax
  105c73:	72 9d                	jb     105c12 <_ZN3hal3x867context4copyERS1_jj+0x16>
		}

		vaddr += 0x1000;
	}

	return true;
  105c75:	b8 01 00 00 00       	mov    $0x1,%eax
}
  105c7a:	83 c4 24             	add    $0x24,%esp
  105c7d:	5b                   	pop    %ebx
  105c7e:	5d                   	pop    %ebp
  105c7f:	c3                   	ret    

00105c80 <_ZN3hal3x863idtC1Ev>:
	void intr_255();
}
/*
Constructor; initialises the IDT with 0
*/
idt::idt(  )
  105c80:	55                   	push   %ebp
  105c81:	89 e5                	mov    %esp,%ebp
  105c83:	83 ec 10             	sub    $0x10,%esp
{
	for(size_t index = 0; index < idt::descriptor_count; index++)
  105c86:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  105c8d:	eb 19                	jmp    105ca8 <_ZN3hal3x863idtC1Ev+0x28>
	{
		idt::descriptor_table[index] = 0;
  105c8f:	8b 45 08             	mov    0x8(%ebp),%eax
  105c92:	8b 55 fc             	mov    -0x4(%ebp),%edx
  105c95:	c7 04 d0 00 00 00 00 	movl   $0x0,(%eax,%edx,8)
  105c9c:	c7 44 d0 04 00 00 00 	movl   $0x0,0x4(%eax,%edx,8)
  105ca3:	00 
/*
Constructor; initialises the IDT with 0
*/
idt::idt(  )
{
	for(size_t index = 0; index < idt::descriptor_count; index++)
  105ca4:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  105ca8:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
  105caf:	76 de                	jbe    105c8f <_ZN3hal3x863idtC1Ev+0xf>
	{
		idt::descriptor_table[index] = 0;
	}
}
  105cb1:	c9                   	leave  
  105cb2:	c3                   	ret    
  105cb3:	90                   	nop

00105cb4 <_ZN3hal3x863idtD1Ev>:

/*
Destructor
*/
idt::~idt(  )
  105cb4:	55                   	push   %ebp
  105cb5:	89 e5                	mov    %esp,%ebp
{

}
  105cb7:	5d                   	pop    %ebp
  105cb8:	c3                   	ret    
  105cb9:	90                   	nop

00105cba <_ZN3hal3x863idt4initEv>:

/*
Initialises the IDT;
*/
void idt::init(  )
{
  105cba:	55                   	push   %ebp
  105cbb:	89 e5                	mov    %esp,%ebp
  105cbd:	83 ec 28             	sub    $0x28,%esp
	this->set_entry(0, intr_0, 0x8, 0x8e);					
  105cc0:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  105cc7:	00 
  105cc8:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  105ccf:	00 
  105cd0:	c7 44 24 08 5c b4 10 	movl   $0x10b45c,0x8(%esp)
  105cd7:	00 
  105cd8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  105cdf:	00 
  105ce0:	8b 45 08             	mov    0x8(%ebp),%eax
  105ce3:	89 04 24             	mov    %eax,(%esp)
  105ce6:	e8 c5 2a 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(1, intr_1, 0x8, 0x8e);
  105ceb:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  105cf2:	00 
  105cf3:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  105cfa:	00 
  105cfb:	c7 44 24 08 65 b4 10 	movl   $0x10b465,0x8(%esp)
  105d02:	00 
  105d03:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  105d0a:	00 
  105d0b:	8b 45 08             	mov    0x8(%ebp),%eax
  105d0e:	89 04 24             	mov    %eax,(%esp)
  105d11:	e8 9a 2a 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(2, intr_2, 0x8, 0x8e);
  105d16:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  105d1d:	00 
  105d1e:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  105d25:	00 
  105d26:	c7 44 24 08 6e b4 10 	movl   $0x10b46e,0x8(%esp)
  105d2d:	00 
  105d2e:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  105d35:	00 
  105d36:	8b 45 08             	mov    0x8(%ebp),%eax
  105d39:	89 04 24             	mov    %eax,(%esp)
  105d3c:	e8 6f 2a 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(3, intr_3, 0x8, 0x8e);
  105d41:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  105d48:	00 
  105d49:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  105d50:	00 
  105d51:	c7 44 24 08 77 b4 10 	movl   $0x10b477,0x8(%esp)
  105d58:	00 
  105d59:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
  105d60:	00 
  105d61:	8b 45 08             	mov    0x8(%ebp),%eax
  105d64:	89 04 24             	mov    %eax,(%esp)
  105d67:	e8 44 2a 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(4, intr_4, 0x8, 0x8e);
  105d6c:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  105d73:	00 
  105d74:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  105d7b:	00 
  105d7c:	c7 44 24 08 80 b4 10 	movl   $0x10b480,0x8(%esp)
  105d83:	00 
  105d84:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  105d8b:	00 
  105d8c:	8b 45 08             	mov    0x8(%ebp),%eax
  105d8f:	89 04 24             	mov    %eax,(%esp)
  105d92:	e8 19 2a 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(5, intr_5, 0x8, 0x8e);
  105d97:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  105d9e:	00 
  105d9f:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  105da6:	00 
  105da7:	c7 44 24 08 89 b4 10 	movl   $0x10b489,0x8(%esp)
  105dae:	00 
  105daf:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
  105db6:	00 
  105db7:	8b 45 08             	mov    0x8(%ebp),%eax
  105dba:	89 04 24             	mov    %eax,(%esp)
  105dbd:	e8 ee 29 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(6, intr_6, 0x8, 0x8e);
  105dc2:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  105dc9:	00 
  105dca:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  105dd1:	00 
  105dd2:	c7 44 24 08 92 b4 10 	movl   $0x10b492,0x8(%esp)
  105dd9:	00 
  105dda:	c7 44 24 04 06 00 00 	movl   $0x6,0x4(%esp)
  105de1:	00 
  105de2:	8b 45 08             	mov    0x8(%ebp),%eax
  105de5:	89 04 24             	mov    %eax,(%esp)
  105de8:	e8 c3 29 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(7, intr_7, 0x8, 0x8e);
  105ded:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  105df4:	00 
  105df5:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  105dfc:	00 
  105dfd:	c7 44 24 08 9b b4 10 	movl   $0x10b49b,0x8(%esp)
  105e04:	00 
  105e05:	c7 44 24 04 07 00 00 	movl   $0x7,0x4(%esp)
  105e0c:	00 
  105e0d:	8b 45 08             	mov    0x8(%ebp),%eax
  105e10:	89 04 24             	mov    %eax,(%esp)
  105e13:	e8 98 29 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(8, intr_8, 0x8, 0x8e);
  105e18:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  105e1f:	00 
  105e20:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  105e27:	00 
  105e28:	c7 44 24 08 a4 b4 10 	movl   $0x10b4a4,0x8(%esp)
  105e2f:	00 
  105e30:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%esp)
  105e37:	00 
  105e38:	8b 45 08             	mov    0x8(%ebp),%eax
  105e3b:	89 04 24             	mov    %eax,(%esp)
  105e3e:	e8 6d 29 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(9, intr_9, 0x8, 0x8e);
  105e43:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  105e4a:	00 
  105e4b:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  105e52:	00 
  105e53:	c7 44 24 08 ab b4 10 	movl   $0x10b4ab,0x8(%esp)
  105e5a:	00 
  105e5b:	c7 44 24 04 09 00 00 	movl   $0x9,0x4(%esp)
  105e62:	00 
  105e63:	8b 45 08             	mov    0x8(%ebp),%eax
  105e66:	89 04 24             	mov    %eax,(%esp)
  105e69:	e8 42 29 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(10, intr_10, 0x8, 0x8e);
  105e6e:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  105e75:	00 
  105e76:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  105e7d:	00 
  105e7e:	c7 44 24 08 b4 b4 10 	movl   $0x10b4b4,0x8(%esp)
  105e85:	00 
  105e86:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
  105e8d:	00 
  105e8e:	8b 45 08             	mov    0x8(%ebp),%eax
  105e91:	89 04 24             	mov    %eax,(%esp)
  105e94:	e8 17 29 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(11, intr_11, 0x8, 0x8e);
  105e99:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  105ea0:	00 
  105ea1:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  105ea8:	00 
  105ea9:	c7 44 24 08 bb b4 10 	movl   $0x10b4bb,0x8(%esp)
  105eb0:	00 
  105eb1:	c7 44 24 04 0b 00 00 	movl   $0xb,0x4(%esp)
  105eb8:	00 
  105eb9:	8b 45 08             	mov    0x8(%ebp),%eax
  105ebc:	89 04 24             	mov    %eax,(%esp)
  105ebf:	e8 ec 28 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(12, intr_12, 0x8, 0x8e);
  105ec4:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  105ecb:	00 
  105ecc:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  105ed3:	00 
  105ed4:	c7 44 24 08 c2 b4 10 	movl   $0x10b4c2,0x8(%esp)
  105edb:	00 
  105edc:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
  105ee3:	00 
  105ee4:	8b 45 08             	mov    0x8(%ebp),%eax
  105ee7:	89 04 24             	mov    %eax,(%esp)
  105eea:	e8 c1 28 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(13, intr_13, 0x8, 0x8e);
  105eef:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  105ef6:	00 
  105ef7:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  105efe:	00 
  105eff:	c7 44 24 08 c9 b4 10 	movl   $0x10b4c9,0x8(%esp)
  105f06:	00 
  105f07:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%esp)
  105f0e:	00 
  105f0f:	8b 45 08             	mov    0x8(%ebp),%eax
  105f12:	89 04 24             	mov    %eax,(%esp)
  105f15:	e8 96 28 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(14, intr_14, 0x8, 0x8e);
  105f1a:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  105f21:	00 
  105f22:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  105f29:	00 
  105f2a:	c7 44 24 08 d0 b4 10 	movl   $0x10b4d0,0x8(%esp)
  105f31:	00 
  105f32:	c7 44 24 04 0e 00 00 	movl   $0xe,0x4(%esp)
  105f39:	00 
  105f3a:	8b 45 08             	mov    0x8(%ebp),%eax
  105f3d:	89 04 24             	mov    %eax,(%esp)
  105f40:	e8 6b 28 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(15, intr_15, 0x8, 0x8e);
  105f45:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  105f4c:	00 
  105f4d:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  105f54:	00 
  105f55:	c7 44 24 08 d7 b4 10 	movl   $0x10b4d7,0x8(%esp)
  105f5c:	00 
  105f5d:	c7 44 24 04 0f 00 00 	movl   $0xf,0x4(%esp)
  105f64:	00 
  105f65:	8b 45 08             	mov    0x8(%ebp),%eax
  105f68:	89 04 24             	mov    %eax,(%esp)
  105f6b:	e8 40 28 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(16, intr_16, 0x8, 0x8e);
  105f70:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  105f77:	00 
  105f78:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  105f7f:	00 
  105f80:	c7 44 24 08 e0 b4 10 	movl   $0x10b4e0,0x8(%esp)
  105f87:	00 
  105f88:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
  105f8f:	00 
  105f90:	8b 45 08             	mov    0x8(%ebp),%eax
  105f93:	89 04 24             	mov    %eax,(%esp)
  105f96:	e8 15 28 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(17, intr_17, 0x8, 0x8e);
  105f9b:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  105fa2:	00 
  105fa3:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  105faa:	00 
  105fab:	c7 44 24 08 e9 b4 10 	movl   $0x10b4e9,0x8(%esp)
  105fb2:	00 
  105fb3:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
  105fba:	00 
  105fbb:	8b 45 08             	mov    0x8(%ebp),%eax
  105fbe:	89 04 24             	mov    %eax,(%esp)
  105fc1:	e8 ea 27 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(18, intr_18, 0x8, 0x8e);
  105fc6:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  105fcd:	00 
  105fce:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  105fd5:	00 
  105fd6:	c7 44 24 08 f0 b4 10 	movl   $0x10b4f0,0x8(%esp)
  105fdd:	00 
  105fde:	c7 44 24 04 12 00 00 	movl   $0x12,0x4(%esp)
  105fe5:	00 
  105fe6:	8b 45 08             	mov    0x8(%ebp),%eax
  105fe9:	89 04 24             	mov    %eax,(%esp)
  105fec:	e8 bf 27 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(19, intr_19, 0x8, 0x8e);
  105ff1:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  105ff8:	00 
  105ff9:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106000:	00 
  106001:	c7 44 24 08 f9 b4 10 	movl   $0x10b4f9,0x8(%esp)
  106008:	00 
  106009:	c7 44 24 04 13 00 00 	movl   $0x13,0x4(%esp)
  106010:	00 
  106011:	8b 45 08             	mov    0x8(%ebp),%eax
  106014:	89 04 24             	mov    %eax,(%esp)
  106017:	e8 94 27 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(20, intr_20, 0x8, 0x8e);
  10601c:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106023:	00 
  106024:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10602b:	00 
  10602c:	c7 44 24 08 02 b5 10 	movl   $0x10b502,0x8(%esp)
  106033:	00 
  106034:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
  10603b:	00 
  10603c:	8b 45 08             	mov    0x8(%ebp),%eax
  10603f:	89 04 24             	mov    %eax,(%esp)
  106042:	e8 69 27 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(21, intr_21, 0x8, 0x8e);
  106047:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  10604e:	00 
  10604f:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106056:	00 
  106057:	c7 44 24 08 0b b5 10 	movl   $0x10b50b,0x8(%esp)
  10605e:	00 
  10605f:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
  106066:	00 
  106067:	8b 45 08             	mov    0x8(%ebp),%eax
  10606a:	89 04 24             	mov    %eax,(%esp)
  10606d:	e8 3e 27 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(22, intr_22, 0x8, 0x8e);
  106072:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106079:	00 
  10607a:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106081:	00 
  106082:	c7 44 24 08 14 b5 10 	movl   $0x10b514,0x8(%esp)
  106089:	00 
  10608a:	c7 44 24 04 16 00 00 	movl   $0x16,0x4(%esp)
  106091:	00 
  106092:	8b 45 08             	mov    0x8(%ebp),%eax
  106095:	89 04 24             	mov    %eax,(%esp)
  106098:	e8 13 27 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(23, intr_23, 0x8, 0x8e);
  10609d:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1060a4:	00 
  1060a5:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1060ac:	00 
  1060ad:	c7 44 24 08 1d b5 10 	movl   $0x10b51d,0x8(%esp)
  1060b4:	00 
  1060b5:	c7 44 24 04 17 00 00 	movl   $0x17,0x4(%esp)
  1060bc:	00 
  1060bd:	8b 45 08             	mov    0x8(%ebp),%eax
  1060c0:	89 04 24             	mov    %eax,(%esp)
  1060c3:	e8 e8 26 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(24, intr_24, 0x8, 0x8e);
  1060c8:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1060cf:	00 
  1060d0:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1060d7:	00 
  1060d8:	c7 44 24 08 26 b5 10 	movl   $0x10b526,0x8(%esp)
  1060df:	00 
  1060e0:	c7 44 24 04 18 00 00 	movl   $0x18,0x4(%esp)
  1060e7:	00 
  1060e8:	8b 45 08             	mov    0x8(%ebp),%eax
  1060eb:	89 04 24             	mov    %eax,(%esp)
  1060ee:	e8 bd 26 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(25, intr_25, 0x8, 0x8e);
  1060f3:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1060fa:	00 
  1060fb:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106102:	00 
  106103:	c7 44 24 08 2f b5 10 	movl   $0x10b52f,0x8(%esp)
  10610a:	00 
  10610b:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
  106112:	00 
  106113:	8b 45 08             	mov    0x8(%ebp),%eax
  106116:	89 04 24             	mov    %eax,(%esp)
  106119:	e8 92 26 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(26, intr_26, 0x8, 0x8e);
  10611e:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106125:	00 
  106126:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10612d:	00 
  10612e:	c7 44 24 08 38 b5 10 	movl   $0x10b538,0x8(%esp)
  106135:	00 
  106136:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
  10613d:	00 
  10613e:	8b 45 08             	mov    0x8(%ebp),%eax
  106141:	89 04 24             	mov    %eax,(%esp)
  106144:	e8 67 26 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(27, intr_27, 0x8, 0x8e);
  106149:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106150:	00 
  106151:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106158:	00 
  106159:	c7 44 24 08 41 b5 10 	movl   $0x10b541,0x8(%esp)
  106160:	00 
  106161:	c7 44 24 04 1b 00 00 	movl   $0x1b,0x4(%esp)
  106168:	00 
  106169:	8b 45 08             	mov    0x8(%ebp),%eax
  10616c:	89 04 24             	mov    %eax,(%esp)
  10616f:	e8 3c 26 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(28, intr_28, 0x8, 0x8e);
  106174:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  10617b:	00 
  10617c:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106183:	00 
  106184:	c7 44 24 08 4a b5 10 	movl   $0x10b54a,0x8(%esp)
  10618b:	00 
  10618c:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%esp)
  106193:	00 
  106194:	8b 45 08             	mov    0x8(%ebp),%eax
  106197:	89 04 24             	mov    %eax,(%esp)
  10619a:	e8 11 26 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(29, intr_29, 0x8, 0x8e);
  10619f:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1061a6:	00 
  1061a7:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1061ae:	00 
  1061af:	c7 44 24 08 53 b5 10 	movl   $0x10b553,0x8(%esp)
  1061b6:	00 
  1061b7:	c7 44 24 04 1d 00 00 	movl   $0x1d,0x4(%esp)
  1061be:	00 
  1061bf:	8b 45 08             	mov    0x8(%ebp),%eax
  1061c2:	89 04 24             	mov    %eax,(%esp)
  1061c5:	e8 e6 25 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(30, intr_30, 0x8, 0x8e);
  1061ca:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1061d1:	00 
  1061d2:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1061d9:	00 
  1061da:	c7 44 24 08 5c b5 10 	movl   $0x10b55c,0x8(%esp)
  1061e1:	00 
  1061e2:	c7 44 24 04 1e 00 00 	movl   $0x1e,0x4(%esp)
  1061e9:	00 
  1061ea:	8b 45 08             	mov    0x8(%ebp),%eax
  1061ed:	89 04 24             	mov    %eax,(%esp)
  1061f0:	e8 bb 25 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(31, intr_31, 0x8, 0x8e);
  1061f5:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1061fc:	00 
  1061fd:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106204:	00 
  106205:	c7 44 24 08 63 b5 10 	movl   $0x10b563,0x8(%esp)
  10620c:	00 
  10620d:	c7 44 24 04 1f 00 00 	movl   $0x1f,0x4(%esp)
  106214:	00 
  106215:	8b 45 08             	mov    0x8(%ebp),%eax
  106218:	89 04 24             	mov    %eax,(%esp)
  10621b:	e8 90 25 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>

	this->set_entry(32, intr_32, 0x8, 0x8e);
  106220:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106227:	00 
  106228:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10622f:	00 
  106230:	c7 44 24 08 6c b5 10 	movl   $0x10b56c,0x8(%esp)
  106237:	00 
  106238:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)
  10623f:	00 
  106240:	8b 45 08             	mov    0x8(%ebp),%eax
  106243:	89 04 24             	mov    %eax,(%esp)
  106246:	e8 65 25 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(33, intr_33, 0x8, 0x8e);
  10624b:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106252:	00 
  106253:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10625a:	00 
  10625b:	c7 44 24 08 75 b5 10 	movl   $0x10b575,0x8(%esp)
  106262:	00 
  106263:	c7 44 24 04 21 00 00 	movl   $0x21,0x4(%esp)
  10626a:	00 
  10626b:	8b 45 08             	mov    0x8(%ebp),%eax
  10626e:	89 04 24             	mov    %eax,(%esp)
  106271:	e8 3a 25 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(34, intr_34, 0x8, 0x8e);
  106276:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  10627d:	00 
  10627e:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106285:	00 
  106286:	c7 44 24 08 7e b5 10 	movl   $0x10b57e,0x8(%esp)
  10628d:	00 
  10628e:	c7 44 24 04 22 00 00 	movl   $0x22,0x4(%esp)
  106295:	00 
  106296:	8b 45 08             	mov    0x8(%ebp),%eax
  106299:	89 04 24             	mov    %eax,(%esp)
  10629c:	e8 0f 25 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(35, intr_35, 0x8, 0x8e);
  1062a1:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1062a8:	00 
  1062a9:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1062b0:	00 
  1062b1:	c7 44 24 08 87 b5 10 	movl   $0x10b587,0x8(%esp)
  1062b8:	00 
  1062b9:	c7 44 24 04 23 00 00 	movl   $0x23,0x4(%esp)
  1062c0:	00 
  1062c1:	8b 45 08             	mov    0x8(%ebp),%eax
  1062c4:	89 04 24             	mov    %eax,(%esp)
  1062c7:	e8 e4 24 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(36, intr_36, 0x8, 0x8e);
  1062cc:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1062d3:	00 
  1062d4:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1062db:	00 
  1062dc:	c7 44 24 08 90 b5 10 	movl   $0x10b590,0x8(%esp)
  1062e3:	00 
  1062e4:	c7 44 24 04 24 00 00 	movl   $0x24,0x4(%esp)
  1062eb:	00 
  1062ec:	8b 45 08             	mov    0x8(%ebp),%eax
  1062ef:	89 04 24             	mov    %eax,(%esp)
  1062f2:	e8 b9 24 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(37, intr_37, 0x8, 0x8e);
  1062f7:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1062fe:	00 
  1062ff:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106306:	00 
  106307:	c7 44 24 08 99 b5 10 	movl   $0x10b599,0x8(%esp)
  10630e:	00 
  10630f:	c7 44 24 04 25 00 00 	movl   $0x25,0x4(%esp)
  106316:	00 
  106317:	8b 45 08             	mov    0x8(%ebp),%eax
  10631a:	89 04 24             	mov    %eax,(%esp)
  10631d:	e8 8e 24 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(38, intr_38, 0x8, 0x8e);
  106322:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106329:	00 
  10632a:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106331:	00 
  106332:	c7 44 24 08 a2 b5 10 	movl   $0x10b5a2,0x8(%esp)
  106339:	00 
  10633a:	c7 44 24 04 26 00 00 	movl   $0x26,0x4(%esp)
  106341:	00 
  106342:	8b 45 08             	mov    0x8(%ebp),%eax
  106345:	89 04 24             	mov    %eax,(%esp)
  106348:	e8 63 24 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(39, intr_39, 0x8, 0x8e);
  10634d:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106354:	00 
  106355:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10635c:	00 
  10635d:	c7 44 24 08 ab b5 10 	movl   $0x10b5ab,0x8(%esp)
  106364:	00 
  106365:	c7 44 24 04 27 00 00 	movl   $0x27,0x4(%esp)
  10636c:	00 
  10636d:	8b 45 08             	mov    0x8(%ebp),%eax
  106370:	89 04 24             	mov    %eax,(%esp)
  106373:	e8 38 24 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(40, intr_40, 0x8, 0x8e);
  106378:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  10637f:	00 
  106380:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106387:	00 
  106388:	c7 44 24 08 b4 b5 10 	movl   $0x10b5b4,0x8(%esp)
  10638f:	00 
  106390:	c7 44 24 04 28 00 00 	movl   $0x28,0x4(%esp)
  106397:	00 
  106398:	8b 45 08             	mov    0x8(%ebp),%eax
  10639b:	89 04 24             	mov    %eax,(%esp)
  10639e:	e8 0d 24 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(41, intr_41, 0x8, 0x8e);
  1063a3:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1063aa:	00 
  1063ab:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1063b2:	00 
  1063b3:	c7 44 24 08 bd b5 10 	movl   $0x10b5bd,0x8(%esp)
  1063ba:	00 
  1063bb:	c7 44 24 04 29 00 00 	movl   $0x29,0x4(%esp)
  1063c2:	00 
  1063c3:	8b 45 08             	mov    0x8(%ebp),%eax
  1063c6:	89 04 24             	mov    %eax,(%esp)
  1063c9:	e8 e2 23 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(42, intr_42, 0x8, 0x8e);
  1063ce:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1063d5:	00 
  1063d6:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1063dd:	00 
  1063de:	c7 44 24 08 c6 b5 10 	movl   $0x10b5c6,0x8(%esp)
  1063e5:	00 
  1063e6:	c7 44 24 04 2a 00 00 	movl   $0x2a,0x4(%esp)
  1063ed:	00 
  1063ee:	8b 45 08             	mov    0x8(%ebp),%eax
  1063f1:	89 04 24             	mov    %eax,(%esp)
  1063f4:	e8 b7 23 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(43, intr_43, 0x8, 0x8e);
  1063f9:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106400:	00 
  106401:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106408:	00 
  106409:	c7 44 24 08 cf b5 10 	movl   $0x10b5cf,0x8(%esp)
  106410:	00 
  106411:	c7 44 24 04 2b 00 00 	movl   $0x2b,0x4(%esp)
  106418:	00 
  106419:	8b 45 08             	mov    0x8(%ebp),%eax
  10641c:	89 04 24             	mov    %eax,(%esp)
  10641f:	e8 8c 23 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(44, intr_44, 0x8, 0x8e);
  106424:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  10642b:	00 
  10642c:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106433:	00 
  106434:	c7 44 24 08 d8 b5 10 	movl   $0x10b5d8,0x8(%esp)
  10643b:	00 
  10643c:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
  106443:	00 
  106444:	8b 45 08             	mov    0x8(%ebp),%eax
  106447:	89 04 24             	mov    %eax,(%esp)
  10644a:	e8 61 23 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(45, intr_45, 0x8, 0x8e);
  10644f:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106456:	00 
  106457:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10645e:	00 
  10645f:	c7 44 24 08 e1 b5 10 	movl   $0x10b5e1,0x8(%esp)
  106466:	00 
  106467:	c7 44 24 04 2d 00 00 	movl   $0x2d,0x4(%esp)
  10646e:	00 
  10646f:	8b 45 08             	mov    0x8(%ebp),%eax
  106472:	89 04 24             	mov    %eax,(%esp)
  106475:	e8 36 23 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(46, intr_46, 0x8, 0x8e);
  10647a:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106481:	00 
  106482:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106489:	00 
  10648a:	c7 44 24 08 ea b5 10 	movl   $0x10b5ea,0x8(%esp)
  106491:	00 
  106492:	c7 44 24 04 2e 00 00 	movl   $0x2e,0x4(%esp)
  106499:	00 
  10649a:	8b 45 08             	mov    0x8(%ebp),%eax
  10649d:	89 04 24             	mov    %eax,(%esp)
  1064a0:	e8 0b 23 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(47, intr_47, 0x8, 0x8e);
  1064a5:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1064ac:	00 
  1064ad:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1064b4:	00 
  1064b5:	c7 44 24 08 f3 b5 10 	movl   $0x10b5f3,0x8(%esp)
  1064bc:	00 
  1064bd:	c7 44 24 04 2f 00 00 	movl   $0x2f,0x4(%esp)
  1064c4:	00 
  1064c5:	8b 45 08             	mov    0x8(%ebp),%eax
  1064c8:	89 04 24             	mov    %eax,(%esp)
  1064cb:	e8 e0 22 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>

	this->set_entry(48, intr_48, 0x8, 0x8e);
  1064d0:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1064d7:	00 
  1064d8:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1064df:	00 
  1064e0:	c7 44 24 08 fc b5 10 	movl   $0x10b5fc,0x8(%esp)
  1064e7:	00 
  1064e8:	c7 44 24 04 30 00 00 	movl   $0x30,0x4(%esp)
  1064ef:	00 
  1064f0:	8b 45 08             	mov    0x8(%ebp),%eax
  1064f3:	89 04 24             	mov    %eax,(%esp)
  1064f6:	e8 b5 22 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(49, intr_49, 0x8, 0x8e);
  1064fb:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106502:	00 
  106503:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10650a:	00 
  10650b:	c7 44 24 08 05 b6 10 	movl   $0x10b605,0x8(%esp)
  106512:	00 
  106513:	c7 44 24 04 31 00 00 	movl   $0x31,0x4(%esp)
  10651a:	00 
  10651b:	8b 45 08             	mov    0x8(%ebp),%eax
  10651e:	89 04 24             	mov    %eax,(%esp)
  106521:	e8 8a 22 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(50, intr_50, 0x8, 0x8e);
  106526:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  10652d:	00 
  10652e:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106535:	00 
  106536:	c7 44 24 08 0e b6 10 	movl   $0x10b60e,0x8(%esp)
  10653d:	00 
  10653e:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%esp)
  106545:	00 
  106546:	8b 45 08             	mov    0x8(%ebp),%eax
  106549:	89 04 24             	mov    %eax,(%esp)
  10654c:	e8 5f 22 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(51, intr_51, 0x8, 0x8e);
  106551:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106558:	00 
  106559:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106560:	00 
  106561:	c7 44 24 08 17 b6 10 	movl   $0x10b617,0x8(%esp)
  106568:	00 
  106569:	c7 44 24 04 33 00 00 	movl   $0x33,0x4(%esp)
  106570:	00 
  106571:	8b 45 08             	mov    0x8(%ebp),%eax
  106574:	89 04 24             	mov    %eax,(%esp)
  106577:	e8 34 22 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(52, intr_52, 0x8, 0x8e);
  10657c:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106583:	00 
  106584:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10658b:	00 
  10658c:	c7 44 24 08 20 b6 10 	movl   $0x10b620,0x8(%esp)
  106593:	00 
  106594:	c7 44 24 04 34 00 00 	movl   $0x34,0x4(%esp)
  10659b:	00 
  10659c:	8b 45 08             	mov    0x8(%ebp),%eax
  10659f:	89 04 24             	mov    %eax,(%esp)
  1065a2:	e8 09 22 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(53, intr_53, 0x8, 0x8e);
  1065a7:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1065ae:	00 
  1065af:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1065b6:	00 
  1065b7:	c7 44 24 08 29 b6 10 	movl   $0x10b629,0x8(%esp)
  1065be:	00 
  1065bf:	c7 44 24 04 35 00 00 	movl   $0x35,0x4(%esp)
  1065c6:	00 
  1065c7:	8b 45 08             	mov    0x8(%ebp),%eax
  1065ca:	89 04 24             	mov    %eax,(%esp)
  1065cd:	e8 de 21 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(54, intr_54, 0x8, 0x8e);
  1065d2:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1065d9:	00 
  1065da:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1065e1:	00 
  1065e2:	c7 44 24 08 32 b6 10 	movl   $0x10b632,0x8(%esp)
  1065e9:	00 
  1065ea:	c7 44 24 04 36 00 00 	movl   $0x36,0x4(%esp)
  1065f1:	00 
  1065f2:	8b 45 08             	mov    0x8(%ebp),%eax
  1065f5:	89 04 24             	mov    %eax,(%esp)
  1065f8:	e8 b3 21 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(55, intr_55, 0x8, 0x8e);
  1065fd:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106604:	00 
  106605:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10660c:	00 
  10660d:	c7 44 24 08 3b b6 10 	movl   $0x10b63b,0x8(%esp)
  106614:	00 
  106615:	c7 44 24 04 37 00 00 	movl   $0x37,0x4(%esp)
  10661c:	00 
  10661d:	8b 45 08             	mov    0x8(%ebp),%eax
  106620:	89 04 24             	mov    %eax,(%esp)
  106623:	e8 88 21 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(56, intr_56, 0x8, 0x8e);
  106628:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  10662f:	00 
  106630:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106637:	00 
  106638:	c7 44 24 08 44 b6 10 	movl   $0x10b644,0x8(%esp)
  10663f:	00 
  106640:	c7 44 24 04 38 00 00 	movl   $0x38,0x4(%esp)
  106647:	00 
  106648:	8b 45 08             	mov    0x8(%ebp),%eax
  10664b:	89 04 24             	mov    %eax,(%esp)
  10664e:	e8 5d 21 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(57, intr_57, 0x8, 0x8e);
  106653:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  10665a:	00 
  10665b:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106662:	00 
  106663:	c7 44 24 08 4d b6 10 	movl   $0x10b64d,0x8(%esp)
  10666a:	00 
  10666b:	c7 44 24 04 39 00 00 	movl   $0x39,0x4(%esp)
  106672:	00 
  106673:	8b 45 08             	mov    0x8(%ebp),%eax
  106676:	89 04 24             	mov    %eax,(%esp)
  106679:	e8 32 21 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(58, intr_58, 0x8, 0x8e);
  10667e:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106685:	00 
  106686:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10668d:	00 
  10668e:	c7 44 24 08 56 b6 10 	movl   $0x10b656,0x8(%esp)
  106695:	00 
  106696:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
  10669d:	00 
  10669e:	8b 45 08             	mov    0x8(%ebp),%eax
  1066a1:	89 04 24             	mov    %eax,(%esp)
  1066a4:	e8 07 21 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(59, intr_59, 0x8, 0x8e);
  1066a9:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1066b0:	00 
  1066b1:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1066b8:	00 
  1066b9:	c7 44 24 08 5f b6 10 	movl   $0x10b65f,0x8(%esp)
  1066c0:	00 
  1066c1:	c7 44 24 04 3b 00 00 	movl   $0x3b,0x4(%esp)
  1066c8:	00 
  1066c9:	8b 45 08             	mov    0x8(%ebp),%eax
  1066cc:	89 04 24             	mov    %eax,(%esp)
  1066cf:	e8 dc 20 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(60, intr_60, 0x8, 0x8e);
  1066d4:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1066db:	00 
  1066dc:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1066e3:	00 
  1066e4:	c7 44 24 08 68 b6 10 	movl   $0x10b668,0x8(%esp)
  1066eb:	00 
  1066ec:	c7 44 24 04 3c 00 00 	movl   $0x3c,0x4(%esp)
  1066f3:	00 
  1066f4:	8b 45 08             	mov    0x8(%ebp),%eax
  1066f7:	89 04 24             	mov    %eax,(%esp)
  1066fa:	e8 b1 20 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(61, intr_61, 0x8, 0x8e);
  1066ff:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106706:	00 
  106707:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10670e:	00 
  10670f:	c7 44 24 08 71 b6 10 	movl   $0x10b671,0x8(%esp)
  106716:	00 
  106717:	c7 44 24 04 3d 00 00 	movl   $0x3d,0x4(%esp)
  10671e:	00 
  10671f:	8b 45 08             	mov    0x8(%ebp),%eax
  106722:	89 04 24             	mov    %eax,(%esp)
  106725:	e8 86 20 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(62, intr_62, 0x8, 0x8e);
  10672a:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106731:	00 
  106732:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106739:	00 
  10673a:	c7 44 24 08 7a b6 10 	movl   $0x10b67a,0x8(%esp)
  106741:	00 
  106742:	c7 44 24 04 3e 00 00 	movl   $0x3e,0x4(%esp)
  106749:	00 
  10674a:	8b 45 08             	mov    0x8(%ebp),%eax
  10674d:	89 04 24             	mov    %eax,(%esp)
  106750:	e8 5b 20 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(63, intr_63, 0x8, 0x8e);
  106755:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  10675c:	00 
  10675d:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106764:	00 
  106765:	c7 44 24 08 83 b6 10 	movl   $0x10b683,0x8(%esp)
  10676c:	00 
  10676d:	c7 44 24 04 3f 00 00 	movl   $0x3f,0x4(%esp)
  106774:	00 
  106775:	8b 45 08             	mov    0x8(%ebp),%eax
  106778:	89 04 24             	mov    %eax,(%esp)
  10677b:	e8 30 20 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(64, intr_64, 0x8, 0x8e);
  106780:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106787:	00 
  106788:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10678f:	00 
  106790:	c7 44 24 08 8c b6 10 	movl   $0x10b68c,0x8(%esp)
  106797:	00 
  106798:	c7 44 24 04 40 00 00 	movl   $0x40,0x4(%esp)
  10679f:	00 
  1067a0:	8b 45 08             	mov    0x8(%ebp),%eax
  1067a3:	89 04 24             	mov    %eax,(%esp)
  1067a6:	e8 05 20 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(65, intr_65, 0x8, 0x8e);
  1067ab:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1067b2:	00 
  1067b3:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1067ba:	00 
  1067bb:	c7 44 24 08 95 b6 10 	movl   $0x10b695,0x8(%esp)
  1067c2:	00 
  1067c3:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
  1067ca:	00 
  1067cb:	8b 45 08             	mov    0x8(%ebp),%eax
  1067ce:	89 04 24             	mov    %eax,(%esp)
  1067d1:	e8 da 1f 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(66, intr_66, 0x8, 0x8e);
  1067d6:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1067dd:	00 
  1067de:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1067e5:	00 
  1067e6:	c7 44 24 08 9e b6 10 	movl   $0x10b69e,0x8(%esp)
  1067ed:	00 
  1067ee:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
  1067f5:	00 
  1067f6:	8b 45 08             	mov    0x8(%ebp),%eax
  1067f9:	89 04 24             	mov    %eax,(%esp)
  1067fc:	e8 af 1f 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(67, intr_67, 0x8, 0x8e);
  106801:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106808:	00 
  106809:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106810:	00 
  106811:	c7 44 24 08 a7 b6 10 	movl   $0x10b6a7,0x8(%esp)
  106818:	00 
  106819:	c7 44 24 04 43 00 00 	movl   $0x43,0x4(%esp)
  106820:	00 
  106821:	8b 45 08             	mov    0x8(%ebp),%eax
  106824:	89 04 24             	mov    %eax,(%esp)
  106827:	e8 84 1f 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(68, intr_68, 0x8, 0x8e);
  10682c:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106833:	00 
  106834:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10683b:	00 
  10683c:	c7 44 24 08 b0 b6 10 	movl   $0x10b6b0,0x8(%esp)
  106843:	00 
  106844:	c7 44 24 04 44 00 00 	movl   $0x44,0x4(%esp)
  10684b:	00 
  10684c:	8b 45 08             	mov    0x8(%ebp),%eax
  10684f:	89 04 24             	mov    %eax,(%esp)
  106852:	e8 59 1f 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(69, intr_69, 0x8, 0x8e);
  106857:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  10685e:	00 
  10685f:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106866:	00 
  106867:	c7 44 24 08 b9 b6 10 	movl   $0x10b6b9,0x8(%esp)
  10686e:	00 
  10686f:	c7 44 24 04 45 00 00 	movl   $0x45,0x4(%esp)
  106876:	00 
  106877:	8b 45 08             	mov    0x8(%ebp),%eax
  10687a:	89 04 24             	mov    %eax,(%esp)
  10687d:	e8 2e 1f 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(70, intr_70, 0x8, 0x8e);
  106882:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106889:	00 
  10688a:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106891:	00 
  106892:	c7 44 24 08 c2 b6 10 	movl   $0x10b6c2,0x8(%esp)
  106899:	00 
  10689a:	c7 44 24 04 46 00 00 	movl   $0x46,0x4(%esp)
  1068a1:	00 
  1068a2:	8b 45 08             	mov    0x8(%ebp),%eax
  1068a5:	89 04 24             	mov    %eax,(%esp)
  1068a8:	e8 03 1f 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(71, intr_71, 0x8, 0x8e);
  1068ad:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1068b4:	00 
  1068b5:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1068bc:	00 
  1068bd:	c7 44 24 08 cb b6 10 	movl   $0x10b6cb,0x8(%esp)
  1068c4:	00 
  1068c5:	c7 44 24 04 47 00 00 	movl   $0x47,0x4(%esp)
  1068cc:	00 
  1068cd:	8b 45 08             	mov    0x8(%ebp),%eax
  1068d0:	89 04 24             	mov    %eax,(%esp)
  1068d3:	e8 d8 1e 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(72, intr_72, 0x8, 0x8e);
  1068d8:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1068df:	00 
  1068e0:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1068e7:	00 
  1068e8:	c7 44 24 08 d4 b6 10 	movl   $0x10b6d4,0x8(%esp)
  1068ef:	00 
  1068f0:	c7 44 24 04 48 00 00 	movl   $0x48,0x4(%esp)
  1068f7:	00 
  1068f8:	8b 45 08             	mov    0x8(%ebp),%eax
  1068fb:	89 04 24             	mov    %eax,(%esp)
  1068fe:	e8 ad 1e 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(73, intr_73, 0x8, 0x8e);
  106903:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  10690a:	00 
  10690b:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106912:	00 
  106913:	c7 44 24 08 dd b6 10 	movl   $0x10b6dd,0x8(%esp)
  10691a:	00 
  10691b:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
  106922:	00 
  106923:	8b 45 08             	mov    0x8(%ebp),%eax
  106926:	89 04 24             	mov    %eax,(%esp)
  106929:	e8 82 1e 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(74, intr_74, 0x8, 0x8e);
  10692e:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106935:	00 
  106936:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10693d:	00 
  10693e:	c7 44 24 08 e6 b6 10 	movl   $0x10b6e6,0x8(%esp)
  106945:	00 
  106946:	c7 44 24 04 4a 00 00 	movl   $0x4a,0x4(%esp)
  10694d:	00 
  10694e:	8b 45 08             	mov    0x8(%ebp),%eax
  106951:	89 04 24             	mov    %eax,(%esp)
  106954:	e8 57 1e 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(75, intr_75, 0x8, 0x8e);
  106959:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106960:	00 
  106961:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106968:	00 
  106969:	c7 44 24 08 ef b6 10 	movl   $0x10b6ef,0x8(%esp)
  106970:	00 
  106971:	c7 44 24 04 4b 00 00 	movl   $0x4b,0x4(%esp)
  106978:	00 
  106979:	8b 45 08             	mov    0x8(%ebp),%eax
  10697c:	89 04 24             	mov    %eax,(%esp)
  10697f:	e8 2c 1e 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(76, intr_76, 0x8, 0x8e);
  106984:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  10698b:	00 
  10698c:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106993:	00 
  106994:	c7 44 24 08 f8 b6 10 	movl   $0x10b6f8,0x8(%esp)
  10699b:	00 
  10699c:	c7 44 24 04 4c 00 00 	movl   $0x4c,0x4(%esp)
  1069a3:	00 
  1069a4:	8b 45 08             	mov    0x8(%ebp),%eax
  1069a7:	89 04 24             	mov    %eax,(%esp)
  1069aa:	e8 01 1e 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(77, intr_77, 0x8, 0x8e);
  1069af:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1069b6:	00 
  1069b7:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1069be:	00 
  1069bf:	c7 44 24 08 01 b7 10 	movl   $0x10b701,0x8(%esp)
  1069c6:	00 
  1069c7:	c7 44 24 04 4d 00 00 	movl   $0x4d,0x4(%esp)
  1069ce:	00 
  1069cf:	8b 45 08             	mov    0x8(%ebp),%eax
  1069d2:	89 04 24             	mov    %eax,(%esp)
  1069d5:	e8 d6 1d 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(78, intr_78, 0x8, 0x8e);
  1069da:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1069e1:	00 
  1069e2:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1069e9:	00 
  1069ea:	c7 44 24 08 0a b7 10 	movl   $0x10b70a,0x8(%esp)
  1069f1:	00 
  1069f2:	c7 44 24 04 4e 00 00 	movl   $0x4e,0x4(%esp)
  1069f9:	00 
  1069fa:	8b 45 08             	mov    0x8(%ebp),%eax
  1069fd:	89 04 24             	mov    %eax,(%esp)
  106a00:	e8 ab 1d 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(79, intr_79, 0x8, 0x8e);
  106a05:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106a0c:	00 
  106a0d:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106a14:	00 
  106a15:	c7 44 24 08 13 b7 10 	movl   $0x10b713,0x8(%esp)
  106a1c:	00 
  106a1d:	c7 44 24 04 4f 00 00 	movl   $0x4f,0x4(%esp)
  106a24:	00 
  106a25:	8b 45 08             	mov    0x8(%ebp),%eax
  106a28:	89 04 24             	mov    %eax,(%esp)
  106a2b:	e8 80 1d 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(80, intr_80, 0x8, 0x8e);
  106a30:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106a37:	00 
  106a38:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106a3f:	00 
  106a40:	c7 44 24 08 1c b7 10 	movl   $0x10b71c,0x8(%esp)
  106a47:	00 
  106a48:	c7 44 24 04 50 00 00 	movl   $0x50,0x4(%esp)
  106a4f:	00 
  106a50:	8b 45 08             	mov    0x8(%ebp),%eax
  106a53:	89 04 24             	mov    %eax,(%esp)
  106a56:	e8 55 1d 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(81, intr_81, 0x8, 0x8e);
  106a5b:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106a62:	00 
  106a63:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106a6a:	00 
  106a6b:	c7 44 24 08 25 b7 10 	movl   $0x10b725,0x8(%esp)
  106a72:	00 
  106a73:	c7 44 24 04 51 00 00 	movl   $0x51,0x4(%esp)
  106a7a:	00 
  106a7b:	8b 45 08             	mov    0x8(%ebp),%eax
  106a7e:	89 04 24             	mov    %eax,(%esp)
  106a81:	e8 2a 1d 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(82, intr_82, 0x8, 0x8e);
  106a86:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106a8d:	00 
  106a8e:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106a95:	00 
  106a96:	c7 44 24 08 2e b7 10 	movl   $0x10b72e,0x8(%esp)
  106a9d:	00 
  106a9e:	c7 44 24 04 52 00 00 	movl   $0x52,0x4(%esp)
  106aa5:	00 
  106aa6:	8b 45 08             	mov    0x8(%ebp),%eax
  106aa9:	89 04 24             	mov    %eax,(%esp)
  106aac:	e8 ff 1c 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(83, intr_83, 0x8, 0x8e);
  106ab1:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106ab8:	00 
  106ab9:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106ac0:	00 
  106ac1:	c7 44 24 08 37 b7 10 	movl   $0x10b737,0x8(%esp)
  106ac8:	00 
  106ac9:	c7 44 24 04 53 00 00 	movl   $0x53,0x4(%esp)
  106ad0:	00 
  106ad1:	8b 45 08             	mov    0x8(%ebp),%eax
  106ad4:	89 04 24             	mov    %eax,(%esp)
  106ad7:	e8 d4 1c 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(84, intr_84, 0x8, 0x8e);
  106adc:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106ae3:	00 
  106ae4:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106aeb:	00 
  106aec:	c7 44 24 08 40 b7 10 	movl   $0x10b740,0x8(%esp)
  106af3:	00 
  106af4:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
  106afb:	00 
  106afc:	8b 45 08             	mov    0x8(%ebp),%eax
  106aff:	89 04 24             	mov    %eax,(%esp)
  106b02:	e8 a9 1c 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(85, intr_85, 0x8, 0x8e);
  106b07:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106b0e:	00 
  106b0f:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106b16:	00 
  106b17:	c7 44 24 08 49 b7 10 	movl   $0x10b749,0x8(%esp)
  106b1e:	00 
  106b1f:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
  106b26:	00 
  106b27:	8b 45 08             	mov    0x8(%ebp),%eax
  106b2a:	89 04 24             	mov    %eax,(%esp)
  106b2d:	e8 7e 1c 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(86, intr_86, 0x8, 0x8e);
  106b32:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106b39:	00 
  106b3a:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106b41:	00 
  106b42:	c7 44 24 08 52 b7 10 	movl   $0x10b752,0x8(%esp)
  106b49:	00 
  106b4a:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
  106b51:	00 
  106b52:	8b 45 08             	mov    0x8(%ebp),%eax
  106b55:	89 04 24             	mov    %eax,(%esp)
  106b58:	e8 53 1c 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(87, intr_87, 0x8, 0x8e);
  106b5d:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106b64:	00 
  106b65:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106b6c:	00 
  106b6d:	c7 44 24 08 5b b7 10 	movl   $0x10b75b,0x8(%esp)
  106b74:	00 
  106b75:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
  106b7c:	00 
  106b7d:	8b 45 08             	mov    0x8(%ebp),%eax
  106b80:	89 04 24             	mov    %eax,(%esp)
  106b83:	e8 28 1c 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(89, intr_89, 0x8, 0x8e);
  106b88:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106b8f:	00 
  106b90:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106b97:	00 
  106b98:	c7 44 24 08 6d b7 10 	movl   $0x10b76d,0x8(%esp)
  106b9f:	00 
  106ba0:	c7 44 24 04 59 00 00 	movl   $0x59,0x4(%esp)
  106ba7:	00 
  106ba8:	8b 45 08             	mov    0x8(%ebp),%eax
  106bab:	89 04 24             	mov    %eax,(%esp)
  106bae:	e8 fd 1b 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(90, intr_90, 0x8, 0x8e);
  106bb3:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106bba:	00 
  106bbb:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106bc2:	00 
  106bc3:	c7 44 24 08 76 b7 10 	movl   $0x10b776,0x8(%esp)
  106bca:	00 
  106bcb:	c7 44 24 04 5a 00 00 	movl   $0x5a,0x4(%esp)
  106bd2:	00 
  106bd3:	8b 45 08             	mov    0x8(%ebp),%eax
  106bd6:	89 04 24             	mov    %eax,(%esp)
  106bd9:	e8 d2 1b 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(91, intr_91, 0x8, 0x8e);
  106bde:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106be5:	00 
  106be6:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106bed:	00 
  106bee:	c7 44 24 08 7f b7 10 	movl   $0x10b77f,0x8(%esp)
  106bf5:	00 
  106bf6:	c7 44 24 04 5b 00 00 	movl   $0x5b,0x4(%esp)
  106bfd:	00 
  106bfe:	8b 45 08             	mov    0x8(%ebp),%eax
  106c01:	89 04 24             	mov    %eax,(%esp)
  106c04:	e8 a7 1b 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(92, intr_92, 0x8, 0x8e);
  106c09:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106c10:	00 
  106c11:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106c18:	00 
  106c19:	c7 44 24 08 88 b7 10 	movl   $0x10b788,0x8(%esp)
  106c20:	00 
  106c21:	c7 44 24 04 5c 00 00 	movl   $0x5c,0x4(%esp)
  106c28:	00 
  106c29:	8b 45 08             	mov    0x8(%ebp),%eax
  106c2c:	89 04 24             	mov    %eax,(%esp)
  106c2f:	e8 7c 1b 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(93, intr_93, 0x8, 0x8e);
  106c34:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106c3b:	00 
  106c3c:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106c43:	00 
  106c44:	c7 44 24 08 91 b7 10 	movl   $0x10b791,0x8(%esp)
  106c4b:	00 
  106c4c:	c7 44 24 04 5d 00 00 	movl   $0x5d,0x4(%esp)
  106c53:	00 
  106c54:	8b 45 08             	mov    0x8(%ebp),%eax
  106c57:	89 04 24             	mov    %eax,(%esp)
  106c5a:	e8 51 1b 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(94, intr_94, 0x8, 0x8e);
  106c5f:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106c66:	00 
  106c67:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106c6e:	00 
  106c6f:	c7 44 24 08 9a b7 10 	movl   $0x10b79a,0x8(%esp)
  106c76:	00 
  106c77:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
  106c7e:	00 
  106c7f:	8b 45 08             	mov    0x8(%ebp),%eax
  106c82:	89 04 24             	mov    %eax,(%esp)
  106c85:	e8 26 1b 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(95, intr_95, 0x8, 0x8e);
  106c8a:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106c91:	00 
  106c92:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106c99:	00 
  106c9a:	c7 44 24 08 a3 b7 10 	movl   $0x10b7a3,0x8(%esp)
  106ca1:	00 
  106ca2:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
  106ca9:	00 
  106caa:	8b 45 08             	mov    0x8(%ebp),%eax
  106cad:	89 04 24             	mov    %eax,(%esp)
  106cb0:	e8 fb 1a 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(96, intr_96, 0x8, 0x8e);
  106cb5:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106cbc:	00 
  106cbd:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106cc4:	00 
  106cc5:	c7 44 24 08 ac b7 10 	movl   $0x10b7ac,0x8(%esp)
  106ccc:	00 
  106ccd:	c7 44 24 04 60 00 00 	movl   $0x60,0x4(%esp)
  106cd4:	00 
  106cd5:	8b 45 08             	mov    0x8(%ebp),%eax
  106cd8:	89 04 24             	mov    %eax,(%esp)
  106cdb:	e8 d0 1a 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(97, intr_97, 0x8, 0x8e);
  106ce0:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106ce7:	00 
  106ce8:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106cef:	00 
  106cf0:	c7 44 24 08 b5 b7 10 	movl   $0x10b7b5,0x8(%esp)
  106cf7:	00 
  106cf8:	c7 44 24 04 61 00 00 	movl   $0x61,0x4(%esp)
  106cff:	00 
  106d00:	8b 45 08             	mov    0x8(%ebp),%eax
  106d03:	89 04 24             	mov    %eax,(%esp)
  106d06:	e8 a5 1a 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(98, intr_98, 0x8, 0x8e);
  106d0b:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106d12:	00 
  106d13:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106d1a:	00 
  106d1b:	c7 44 24 08 be b7 10 	movl   $0x10b7be,0x8(%esp)
  106d22:	00 
  106d23:	c7 44 24 04 62 00 00 	movl   $0x62,0x4(%esp)
  106d2a:	00 
  106d2b:	8b 45 08             	mov    0x8(%ebp),%eax
  106d2e:	89 04 24             	mov    %eax,(%esp)
  106d31:	e8 7a 1a 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(99, intr_99, 0x8, 0x8e);
  106d36:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106d3d:	00 
  106d3e:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106d45:	00 
  106d46:	c7 44 24 08 c7 b7 10 	movl   $0x10b7c7,0x8(%esp)
  106d4d:	00 
  106d4e:	c7 44 24 04 63 00 00 	movl   $0x63,0x4(%esp)
  106d55:	00 
  106d56:	8b 45 08             	mov    0x8(%ebp),%eax
  106d59:	89 04 24             	mov    %eax,(%esp)
  106d5c:	e8 4f 1a 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(100, intr_100, 0x8, 0x8e);
  106d61:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106d68:	00 
  106d69:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106d70:	00 
  106d71:	c7 44 24 08 d0 b7 10 	movl   $0x10b7d0,0x8(%esp)
  106d78:	00 
  106d79:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
  106d80:	00 
  106d81:	8b 45 08             	mov    0x8(%ebp),%eax
  106d84:	89 04 24             	mov    %eax,(%esp)
  106d87:	e8 24 1a 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(101, intr_101, 0x8, 0x8e);
  106d8c:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106d93:	00 
  106d94:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106d9b:	00 
  106d9c:	c7 44 24 08 d9 b7 10 	movl   $0x10b7d9,0x8(%esp)
  106da3:	00 
  106da4:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
  106dab:	00 
  106dac:	8b 45 08             	mov    0x8(%ebp),%eax
  106daf:	89 04 24             	mov    %eax,(%esp)
  106db2:	e8 f9 19 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(102, intr_102, 0x8, 0x8e);
  106db7:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106dbe:	00 
  106dbf:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106dc6:	00 
  106dc7:	c7 44 24 08 e2 b7 10 	movl   $0x10b7e2,0x8(%esp)
  106dce:	00 
  106dcf:	c7 44 24 04 66 00 00 	movl   $0x66,0x4(%esp)
  106dd6:	00 
  106dd7:	8b 45 08             	mov    0x8(%ebp),%eax
  106dda:	89 04 24             	mov    %eax,(%esp)
  106ddd:	e8 ce 19 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(103, intr_103, 0x8, 0x8e);
  106de2:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106de9:	00 
  106dea:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106df1:	00 
  106df2:	c7 44 24 08 eb b7 10 	movl   $0x10b7eb,0x8(%esp)
  106df9:	00 
  106dfa:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
  106e01:	00 
  106e02:	8b 45 08             	mov    0x8(%ebp),%eax
  106e05:	89 04 24             	mov    %eax,(%esp)
  106e08:	e8 a3 19 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(104, intr_104, 0x8, 0x8e);
  106e0d:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106e14:	00 
  106e15:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106e1c:	00 
  106e1d:	c7 44 24 08 f4 b7 10 	movl   $0x10b7f4,0x8(%esp)
  106e24:	00 
  106e25:	c7 44 24 04 68 00 00 	movl   $0x68,0x4(%esp)
  106e2c:	00 
  106e2d:	8b 45 08             	mov    0x8(%ebp),%eax
  106e30:	89 04 24             	mov    %eax,(%esp)
  106e33:	e8 78 19 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(105, intr_105, 0x8, 0x8e);
  106e38:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106e3f:	00 
  106e40:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106e47:	00 
  106e48:	c7 44 24 08 fd b7 10 	movl   $0x10b7fd,0x8(%esp)
  106e4f:	00 
  106e50:	c7 44 24 04 69 00 00 	movl   $0x69,0x4(%esp)
  106e57:	00 
  106e58:	8b 45 08             	mov    0x8(%ebp),%eax
  106e5b:	89 04 24             	mov    %eax,(%esp)
  106e5e:	e8 4d 19 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(106, intr_106, 0x8, 0x8e);
  106e63:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106e6a:	00 
  106e6b:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106e72:	00 
  106e73:	c7 44 24 08 06 b8 10 	movl   $0x10b806,0x8(%esp)
  106e7a:	00 
  106e7b:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
  106e82:	00 
  106e83:	8b 45 08             	mov    0x8(%ebp),%eax
  106e86:	89 04 24             	mov    %eax,(%esp)
  106e89:	e8 22 19 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(107, intr_107, 0x8, 0x8e);
  106e8e:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106e95:	00 
  106e96:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106e9d:	00 
  106e9e:	c7 44 24 08 0f b8 10 	movl   $0x10b80f,0x8(%esp)
  106ea5:	00 
  106ea6:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
  106ead:	00 
  106eae:	8b 45 08             	mov    0x8(%ebp),%eax
  106eb1:	89 04 24             	mov    %eax,(%esp)
  106eb4:	e8 f7 18 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(108, intr_108, 0x8, 0x8e);
  106eb9:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106ec0:	00 
  106ec1:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106ec8:	00 
  106ec9:	c7 44 24 08 18 b8 10 	movl   $0x10b818,0x8(%esp)
  106ed0:	00 
  106ed1:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
  106ed8:	00 
  106ed9:	8b 45 08             	mov    0x8(%ebp),%eax
  106edc:	89 04 24             	mov    %eax,(%esp)
  106edf:	e8 cc 18 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(109, intr_109, 0x8, 0x8e);
  106ee4:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106eeb:	00 
  106eec:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106ef3:	00 
  106ef4:	c7 44 24 08 21 b8 10 	movl   $0x10b821,0x8(%esp)
  106efb:	00 
  106efc:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
  106f03:	00 
  106f04:	8b 45 08             	mov    0x8(%ebp),%eax
  106f07:	89 04 24             	mov    %eax,(%esp)
  106f0a:	e8 a1 18 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(110, intr_110, 0x8, 0x8e);
  106f0f:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106f16:	00 
  106f17:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106f1e:	00 
  106f1f:	c7 44 24 08 2a b8 10 	movl   $0x10b82a,0x8(%esp)
  106f26:	00 
  106f27:	c7 44 24 04 6e 00 00 	movl   $0x6e,0x4(%esp)
  106f2e:	00 
  106f2f:	8b 45 08             	mov    0x8(%ebp),%eax
  106f32:	89 04 24             	mov    %eax,(%esp)
  106f35:	e8 76 18 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(111, intr_111, 0x8, 0x8e);
  106f3a:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106f41:	00 
  106f42:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106f49:	00 
  106f4a:	c7 44 24 08 33 b8 10 	movl   $0x10b833,0x8(%esp)
  106f51:	00 
  106f52:	c7 44 24 04 6f 00 00 	movl   $0x6f,0x4(%esp)
  106f59:	00 
  106f5a:	8b 45 08             	mov    0x8(%ebp),%eax
  106f5d:	89 04 24             	mov    %eax,(%esp)
  106f60:	e8 4b 18 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(112, intr_112, 0x8, 0x8e);
  106f65:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106f6c:	00 
  106f6d:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106f74:	00 
  106f75:	c7 44 24 08 3c b8 10 	movl   $0x10b83c,0x8(%esp)
  106f7c:	00 
  106f7d:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
  106f84:	00 
  106f85:	8b 45 08             	mov    0x8(%ebp),%eax
  106f88:	89 04 24             	mov    %eax,(%esp)
  106f8b:	e8 20 18 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(113, intr_113, 0x8, 0x8e);
  106f90:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106f97:	00 
  106f98:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106f9f:	00 
  106fa0:	c7 44 24 08 45 b8 10 	movl   $0x10b845,0x8(%esp)
  106fa7:	00 
  106fa8:	c7 44 24 04 71 00 00 	movl   $0x71,0x4(%esp)
  106faf:	00 
  106fb0:	8b 45 08             	mov    0x8(%ebp),%eax
  106fb3:	89 04 24             	mov    %eax,(%esp)
  106fb6:	e8 f5 17 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(114, intr_114, 0x8, 0x8e);
  106fbb:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106fc2:	00 
  106fc3:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106fca:	00 
  106fcb:	c7 44 24 08 4e b8 10 	movl   $0x10b84e,0x8(%esp)
  106fd2:	00 
  106fd3:	c7 44 24 04 72 00 00 	movl   $0x72,0x4(%esp)
  106fda:	00 
  106fdb:	8b 45 08             	mov    0x8(%ebp),%eax
  106fde:	89 04 24             	mov    %eax,(%esp)
  106fe1:	e8 ca 17 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(115, intr_115, 0x8, 0x8e);
  106fe6:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  106fed:	00 
  106fee:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  106ff5:	00 
  106ff6:	c7 44 24 08 57 b8 10 	movl   $0x10b857,0x8(%esp)
  106ffd:	00 
  106ffe:	c7 44 24 04 73 00 00 	movl   $0x73,0x4(%esp)
  107005:	00 
  107006:	8b 45 08             	mov    0x8(%ebp),%eax
  107009:	89 04 24             	mov    %eax,(%esp)
  10700c:	e8 9f 17 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(116, intr_116, 0x8, 0x8e);
  107011:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107018:	00 
  107019:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107020:	00 
  107021:	c7 44 24 08 60 b8 10 	movl   $0x10b860,0x8(%esp)
  107028:	00 
  107029:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
  107030:	00 
  107031:	8b 45 08             	mov    0x8(%ebp),%eax
  107034:	89 04 24             	mov    %eax,(%esp)
  107037:	e8 74 17 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(117, intr_117, 0x8, 0x8e);
  10703c:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107043:	00 
  107044:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10704b:	00 
  10704c:	c7 44 24 08 69 b8 10 	movl   $0x10b869,0x8(%esp)
  107053:	00 
  107054:	c7 44 24 04 75 00 00 	movl   $0x75,0x4(%esp)
  10705b:	00 
  10705c:	8b 45 08             	mov    0x8(%ebp),%eax
  10705f:	89 04 24             	mov    %eax,(%esp)
  107062:	e8 49 17 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(118, intr_118, 0x8, 0x8e);
  107067:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  10706e:	00 
  10706f:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107076:	00 
  107077:	c7 44 24 08 72 b8 10 	movl   $0x10b872,0x8(%esp)
  10707e:	00 
  10707f:	c7 44 24 04 76 00 00 	movl   $0x76,0x4(%esp)
  107086:	00 
  107087:	8b 45 08             	mov    0x8(%ebp),%eax
  10708a:	89 04 24             	mov    %eax,(%esp)
  10708d:	e8 1e 17 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(119, intr_119, 0x8, 0x8e);
  107092:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107099:	00 
  10709a:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1070a1:	00 
  1070a2:	c7 44 24 08 7b b8 10 	movl   $0x10b87b,0x8(%esp)
  1070a9:	00 
  1070aa:	c7 44 24 04 77 00 00 	movl   $0x77,0x4(%esp)
  1070b1:	00 
  1070b2:	8b 45 08             	mov    0x8(%ebp),%eax
  1070b5:	89 04 24             	mov    %eax,(%esp)
  1070b8:	e8 f3 16 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(120, intr_120, 0x8, 0x8e);
  1070bd:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1070c4:	00 
  1070c5:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1070cc:	00 
  1070cd:	c7 44 24 08 84 b8 10 	movl   $0x10b884,0x8(%esp)
  1070d4:	00 
  1070d5:	c7 44 24 04 78 00 00 	movl   $0x78,0x4(%esp)
  1070dc:	00 
  1070dd:	8b 45 08             	mov    0x8(%ebp),%eax
  1070e0:	89 04 24             	mov    %eax,(%esp)
  1070e3:	e8 c8 16 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(121, intr_121, 0x8, 0x8e);
  1070e8:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1070ef:	00 
  1070f0:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1070f7:	00 
  1070f8:	c7 44 24 08 8d b8 10 	movl   $0x10b88d,0x8(%esp)
  1070ff:	00 
  107100:	c7 44 24 04 79 00 00 	movl   $0x79,0x4(%esp)
  107107:	00 
  107108:	8b 45 08             	mov    0x8(%ebp),%eax
  10710b:	89 04 24             	mov    %eax,(%esp)
  10710e:	e8 9d 16 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(122, intr_122, 0x8, 0x8e);
  107113:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  10711a:	00 
  10711b:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107122:	00 
  107123:	c7 44 24 08 96 b8 10 	movl   $0x10b896,0x8(%esp)
  10712a:	00 
  10712b:	c7 44 24 04 7a 00 00 	movl   $0x7a,0x4(%esp)
  107132:	00 
  107133:	8b 45 08             	mov    0x8(%ebp),%eax
  107136:	89 04 24             	mov    %eax,(%esp)
  107139:	e8 72 16 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(123, intr_123, 0x8, 0x8e);
  10713e:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107145:	00 
  107146:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10714d:	00 
  10714e:	c7 44 24 08 9f b8 10 	movl   $0x10b89f,0x8(%esp)
  107155:	00 
  107156:	c7 44 24 04 7b 00 00 	movl   $0x7b,0x4(%esp)
  10715d:	00 
  10715e:	8b 45 08             	mov    0x8(%ebp),%eax
  107161:	89 04 24             	mov    %eax,(%esp)
  107164:	e8 47 16 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(124, intr_124, 0x8, 0x8e);
  107169:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107170:	00 
  107171:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107178:	00 
  107179:	c7 44 24 08 a8 b8 10 	movl   $0x10b8a8,0x8(%esp)
  107180:	00 
  107181:	c7 44 24 04 7c 00 00 	movl   $0x7c,0x4(%esp)
  107188:	00 
  107189:	8b 45 08             	mov    0x8(%ebp),%eax
  10718c:	89 04 24             	mov    %eax,(%esp)
  10718f:	e8 1c 16 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(125, intr_125, 0x8, 0x8e);
  107194:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  10719b:	00 
  10719c:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1071a3:	00 
  1071a4:	c7 44 24 08 b1 b8 10 	movl   $0x10b8b1,0x8(%esp)
  1071ab:	00 
  1071ac:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
  1071b3:	00 
  1071b4:	8b 45 08             	mov    0x8(%ebp),%eax
  1071b7:	89 04 24             	mov    %eax,(%esp)
  1071ba:	e8 f1 15 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(126, intr_126, 0x8, 0x8e);
  1071bf:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1071c6:	00 
  1071c7:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1071ce:	00 
  1071cf:	c7 44 24 08 ba b8 10 	movl   $0x10b8ba,0x8(%esp)
  1071d6:	00 
  1071d7:	c7 44 24 04 7e 00 00 	movl   $0x7e,0x4(%esp)
  1071de:	00 
  1071df:	8b 45 08             	mov    0x8(%ebp),%eax
  1071e2:	89 04 24             	mov    %eax,(%esp)
  1071e5:	e8 c6 15 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(127, intr_127, 0x8, 0x8e);
  1071ea:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1071f1:	00 
  1071f2:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1071f9:	00 
  1071fa:	c7 44 24 08 c3 b8 10 	movl   $0x10b8c3,0x8(%esp)
  107201:	00 
  107202:	c7 44 24 04 7f 00 00 	movl   $0x7f,0x4(%esp)
  107209:	00 
  10720a:	8b 45 08             	mov    0x8(%ebp),%eax
  10720d:	89 04 24             	mov    %eax,(%esp)
  107210:	e8 9b 15 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(128, intr_128, 0x8, 0x8e);
  107215:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  10721c:	00 
  10721d:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107224:	00 
  107225:	c7 44 24 08 cc b8 10 	movl   $0x10b8cc,0x8(%esp)
  10722c:	00 
  10722d:	c7 44 24 04 80 00 00 	movl   $0x80,0x4(%esp)
  107234:	00 
  107235:	8b 45 08             	mov    0x8(%ebp),%eax
  107238:	89 04 24             	mov    %eax,(%esp)
  10723b:	e8 70 15 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(129, intr_129, 0x8, 0x8e);
  107240:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107247:	00 
  107248:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10724f:	00 
  107250:	c7 44 24 08 d8 b8 10 	movl   $0x10b8d8,0x8(%esp)
  107257:	00 
  107258:	c7 44 24 04 81 00 00 	movl   $0x81,0x4(%esp)
  10725f:	00 
  107260:	8b 45 08             	mov    0x8(%ebp),%eax
  107263:	89 04 24             	mov    %eax,(%esp)
  107266:	e8 45 15 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(130, intr_130, 0x8, 0x8e);
  10726b:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107272:	00 
  107273:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10727a:	00 
  10727b:	c7 44 24 08 e4 b8 10 	movl   $0x10b8e4,0x8(%esp)
  107282:	00 
  107283:	c7 44 24 04 82 00 00 	movl   $0x82,0x4(%esp)
  10728a:	00 
  10728b:	8b 45 08             	mov    0x8(%ebp),%eax
  10728e:	89 04 24             	mov    %eax,(%esp)
  107291:	e8 1a 15 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(131, intr_131, 0x8, 0x8e);
  107296:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  10729d:	00 
  10729e:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1072a5:	00 
  1072a6:	c7 44 24 08 f0 b8 10 	movl   $0x10b8f0,0x8(%esp)
  1072ad:	00 
  1072ae:	c7 44 24 04 83 00 00 	movl   $0x83,0x4(%esp)
  1072b5:	00 
  1072b6:	8b 45 08             	mov    0x8(%ebp),%eax
  1072b9:	89 04 24             	mov    %eax,(%esp)
  1072bc:	e8 ef 14 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(132, intr_132, 0x8, 0x8e);
  1072c1:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1072c8:	00 
  1072c9:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1072d0:	00 
  1072d1:	c7 44 24 08 fc b8 10 	movl   $0x10b8fc,0x8(%esp)
  1072d8:	00 
  1072d9:	c7 44 24 04 84 00 00 	movl   $0x84,0x4(%esp)
  1072e0:	00 
  1072e1:	8b 45 08             	mov    0x8(%ebp),%eax
  1072e4:	89 04 24             	mov    %eax,(%esp)
  1072e7:	e8 c4 14 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(133, intr_133, 0x8, 0x8e);
  1072ec:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1072f3:	00 
  1072f4:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1072fb:	00 
  1072fc:	c7 44 24 08 08 b9 10 	movl   $0x10b908,0x8(%esp)
  107303:	00 
  107304:	c7 44 24 04 85 00 00 	movl   $0x85,0x4(%esp)
  10730b:	00 
  10730c:	8b 45 08             	mov    0x8(%ebp),%eax
  10730f:	89 04 24             	mov    %eax,(%esp)
  107312:	e8 99 14 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(134, intr_134, 0x8, 0x8e);
  107317:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  10731e:	00 
  10731f:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107326:	00 
  107327:	c7 44 24 08 14 b9 10 	movl   $0x10b914,0x8(%esp)
  10732e:	00 
  10732f:	c7 44 24 04 86 00 00 	movl   $0x86,0x4(%esp)
  107336:	00 
  107337:	8b 45 08             	mov    0x8(%ebp),%eax
  10733a:	89 04 24             	mov    %eax,(%esp)
  10733d:	e8 6e 14 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(135, intr_135, 0x8, 0x8e);
  107342:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107349:	00 
  10734a:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107351:	00 
  107352:	c7 44 24 08 20 b9 10 	movl   $0x10b920,0x8(%esp)
  107359:	00 
  10735a:	c7 44 24 04 87 00 00 	movl   $0x87,0x4(%esp)
  107361:	00 
  107362:	8b 45 08             	mov    0x8(%ebp),%eax
  107365:	89 04 24             	mov    %eax,(%esp)
  107368:	e8 43 14 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(136, intr_136, 0x8, 0x8e);
  10736d:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107374:	00 
  107375:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10737c:	00 
  10737d:	c7 44 24 08 2c b9 10 	movl   $0x10b92c,0x8(%esp)
  107384:	00 
  107385:	c7 44 24 04 88 00 00 	movl   $0x88,0x4(%esp)
  10738c:	00 
  10738d:	8b 45 08             	mov    0x8(%ebp),%eax
  107390:	89 04 24             	mov    %eax,(%esp)
  107393:	e8 18 14 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(137, intr_137, 0x8, 0x8e);
  107398:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  10739f:	00 
  1073a0:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1073a7:	00 
  1073a8:	c7 44 24 08 38 b9 10 	movl   $0x10b938,0x8(%esp)
  1073af:	00 
  1073b0:	c7 44 24 04 89 00 00 	movl   $0x89,0x4(%esp)
  1073b7:	00 
  1073b8:	8b 45 08             	mov    0x8(%ebp),%eax
  1073bb:	89 04 24             	mov    %eax,(%esp)
  1073be:	e8 ed 13 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(138, intr_138, 0x8, 0x8e);
  1073c3:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1073ca:	00 
  1073cb:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1073d2:	00 
  1073d3:	c7 44 24 08 44 b9 10 	movl   $0x10b944,0x8(%esp)
  1073da:	00 
  1073db:	c7 44 24 04 8a 00 00 	movl   $0x8a,0x4(%esp)
  1073e2:	00 
  1073e3:	8b 45 08             	mov    0x8(%ebp),%eax
  1073e6:	89 04 24             	mov    %eax,(%esp)
  1073e9:	e8 c2 13 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(139, intr_139, 0x8, 0x8e);
  1073ee:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1073f5:	00 
  1073f6:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1073fd:	00 
  1073fe:	c7 44 24 08 50 b9 10 	movl   $0x10b950,0x8(%esp)
  107405:	00 
  107406:	c7 44 24 04 8b 00 00 	movl   $0x8b,0x4(%esp)
  10740d:	00 
  10740e:	8b 45 08             	mov    0x8(%ebp),%eax
  107411:	89 04 24             	mov    %eax,(%esp)
  107414:	e8 97 13 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(140, intr_140, 0x8, 0x8e);
  107419:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107420:	00 
  107421:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107428:	00 
  107429:	c7 44 24 08 5c b9 10 	movl   $0x10b95c,0x8(%esp)
  107430:	00 
  107431:	c7 44 24 04 8c 00 00 	movl   $0x8c,0x4(%esp)
  107438:	00 
  107439:	8b 45 08             	mov    0x8(%ebp),%eax
  10743c:	89 04 24             	mov    %eax,(%esp)
  10743f:	e8 6c 13 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(141, intr_141, 0x8, 0x8e);
  107444:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  10744b:	00 
  10744c:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107453:	00 
  107454:	c7 44 24 08 68 b9 10 	movl   $0x10b968,0x8(%esp)
  10745b:	00 
  10745c:	c7 44 24 04 8d 00 00 	movl   $0x8d,0x4(%esp)
  107463:	00 
  107464:	8b 45 08             	mov    0x8(%ebp),%eax
  107467:	89 04 24             	mov    %eax,(%esp)
  10746a:	e8 41 13 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(142, intr_142, 0x8, 0x8e);
  10746f:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107476:	00 
  107477:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10747e:	00 
  10747f:	c7 44 24 08 74 b9 10 	movl   $0x10b974,0x8(%esp)
  107486:	00 
  107487:	c7 44 24 04 8e 00 00 	movl   $0x8e,0x4(%esp)
  10748e:	00 
  10748f:	8b 45 08             	mov    0x8(%ebp),%eax
  107492:	89 04 24             	mov    %eax,(%esp)
  107495:	e8 16 13 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(143, intr_143, 0x8, 0x8e);
  10749a:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1074a1:	00 
  1074a2:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1074a9:	00 
  1074aa:	c7 44 24 08 80 b9 10 	movl   $0x10b980,0x8(%esp)
  1074b1:	00 
  1074b2:	c7 44 24 04 8f 00 00 	movl   $0x8f,0x4(%esp)
  1074b9:	00 
  1074ba:	8b 45 08             	mov    0x8(%ebp),%eax
  1074bd:	89 04 24             	mov    %eax,(%esp)
  1074c0:	e8 eb 12 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(144, intr_144, 0x8, 0x8e);
  1074c5:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1074cc:	00 
  1074cd:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1074d4:	00 
  1074d5:	c7 44 24 08 8c b9 10 	movl   $0x10b98c,0x8(%esp)
  1074dc:	00 
  1074dd:	c7 44 24 04 90 00 00 	movl   $0x90,0x4(%esp)
  1074e4:	00 
  1074e5:	8b 45 08             	mov    0x8(%ebp),%eax
  1074e8:	89 04 24             	mov    %eax,(%esp)
  1074eb:	e8 c0 12 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(145, intr_145, 0x8, 0x8e);
  1074f0:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1074f7:	00 
  1074f8:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1074ff:	00 
  107500:	c7 44 24 08 98 b9 10 	movl   $0x10b998,0x8(%esp)
  107507:	00 
  107508:	c7 44 24 04 91 00 00 	movl   $0x91,0x4(%esp)
  10750f:	00 
  107510:	8b 45 08             	mov    0x8(%ebp),%eax
  107513:	89 04 24             	mov    %eax,(%esp)
  107516:	e8 95 12 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(146, intr_146, 0x8, 0x8e);
  10751b:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107522:	00 
  107523:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10752a:	00 
  10752b:	c7 44 24 08 a4 b9 10 	movl   $0x10b9a4,0x8(%esp)
  107532:	00 
  107533:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
  10753a:	00 
  10753b:	8b 45 08             	mov    0x8(%ebp),%eax
  10753e:	89 04 24             	mov    %eax,(%esp)
  107541:	e8 6a 12 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(147, intr_147, 0x8, 0x8e);
  107546:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  10754d:	00 
  10754e:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107555:	00 
  107556:	c7 44 24 08 b0 b9 10 	movl   $0x10b9b0,0x8(%esp)
  10755d:	00 
  10755e:	c7 44 24 04 93 00 00 	movl   $0x93,0x4(%esp)
  107565:	00 
  107566:	8b 45 08             	mov    0x8(%ebp),%eax
  107569:	89 04 24             	mov    %eax,(%esp)
  10756c:	e8 3f 12 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(148, intr_148, 0x8, 0x8e);
  107571:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107578:	00 
  107579:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107580:	00 
  107581:	c7 44 24 08 bc b9 10 	movl   $0x10b9bc,0x8(%esp)
  107588:	00 
  107589:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
  107590:	00 
  107591:	8b 45 08             	mov    0x8(%ebp),%eax
  107594:	89 04 24             	mov    %eax,(%esp)
  107597:	e8 14 12 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(149, intr_149, 0x8, 0x8e);
  10759c:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1075a3:	00 
  1075a4:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1075ab:	00 
  1075ac:	c7 44 24 08 c8 b9 10 	movl   $0x10b9c8,0x8(%esp)
  1075b3:	00 
  1075b4:	c7 44 24 04 95 00 00 	movl   $0x95,0x4(%esp)
  1075bb:	00 
  1075bc:	8b 45 08             	mov    0x8(%ebp),%eax
  1075bf:	89 04 24             	mov    %eax,(%esp)
  1075c2:	e8 e9 11 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(150, intr_150, 0x8, 0x8e);
  1075c7:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1075ce:	00 
  1075cf:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1075d6:	00 
  1075d7:	c7 44 24 08 d4 b9 10 	movl   $0x10b9d4,0x8(%esp)
  1075de:	00 
  1075df:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
  1075e6:	00 
  1075e7:	8b 45 08             	mov    0x8(%ebp),%eax
  1075ea:	89 04 24             	mov    %eax,(%esp)
  1075ed:	e8 be 11 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(151, intr_151, 0x8, 0x8e);
  1075f2:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1075f9:	00 
  1075fa:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107601:	00 
  107602:	c7 44 24 08 e0 b9 10 	movl   $0x10b9e0,0x8(%esp)
  107609:	00 
  10760a:	c7 44 24 04 97 00 00 	movl   $0x97,0x4(%esp)
  107611:	00 
  107612:	8b 45 08             	mov    0x8(%ebp),%eax
  107615:	89 04 24             	mov    %eax,(%esp)
  107618:	e8 93 11 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(152, intr_152, 0x8, 0x8e);
  10761d:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107624:	00 
  107625:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10762c:	00 
  10762d:	c7 44 24 08 ec b9 10 	movl   $0x10b9ec,0x8(%esp)
  107634:	00 
  107635:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
  10763c:	00 
  10763d:	8b 45 08             	mov    0x8(%ebp),%eax
  107640:	89 04 24             	mov    %eax,(%esp)
  107643:	e8 68 11 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(153, intr_153, 0x8, 0x8e);
  107648:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  10764f:	00 
  107650:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107657:	00 
  107658:	c7 44 24 08 f8 b9 10 	movl   $0x10b9f8,0x8(%esp)
  10765f:	00 
  107660:	c7 44 24 04 99 00 00 	movl   $0x99,0x4(%esp)
  107667:	00 
  107668:	8b 45 08             	mov    0x8(%ebp),%eax
  10766b:	89 04 24             	mov    %eax,(%esp)
  10766e:	e8 3d 11 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(154, intr_154, 0x8, 0x8e);
  107673:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  10767a:	00 
  10767b:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107682:	00 
  107683:	c7 44 24 08 04 ba 10 	movl   $0x10ba04,0x8(%esp)
  10768a:	00 
  10768b:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
  107692:	00 
  107693:	8b 45 08             	mov    0x8(%ebp),%eax
  107696:	89 04 24             	mov    %eax,(%esp)
  107699:	e8 12 11 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(155, intr_155, 0x8, 0x8e);
  10769e:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1076a5:	00 
  1076a6:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1076ad:	00 
  1076ae:	c7 44 24 08 10 ba 10 	movl   $0x10ba10,0x8(%esp)
  1076b5:	00 
  1076b6:	c7 44 24 04 9b 00 00 	movl   $0x9b,0x4(%esp)
  1076bd:	00 
  1076be:	8b 45 08             	mov    0x8(%ebp),%eax
  1076c1:	89 04 24             	mov    %eax,(%esp)
  1076c4:	e8 e7 10 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(156, intr_156, 0x8, 0x8e);
  1076c9:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1076d0:	00 
  1076d1:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1076d8:	00 
  1076d9:	c7 44 24 08 1c ba 10 	movl   $0x10ba1c,0x8(%esp)
  1076e0:	00 
  1076e1:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
  1076e8:	00 
  1076e9:	8b 45 08             	mov    0x8(%ebp),%eax
  1076ec:	89 04 24             	mov    %eax,(%esp)
  1076ef:	e8 bc 10 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(157, intr_157, 0x8, 0x8e);
  1076f4:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1076fb:	00 
  1076fc:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107703:	00 
  107704:	c7 44 24 08 28 ba 10 	movl   $0x10ba28,0x8(%esp)
  10770b:	00 
  10770c:	c7 44 24 04 9d 00 00 	movl   $0x9d,0x4(%esp)
  107713:	00 
  107714:	8b 45 08             	mov    0x8(%ebp),%eax
  107717:	89 04 24             	mov    %eax,(%esp)
  10771a:	e8 91 10 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(158, intr_158, 0x8, 0x8e);
  10771f:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107726:	00 
  107727:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10772e:	00 
  10772f:	c7 44 24 08 34 ba 10 	movl   $0x10ba34,0x8(%esp)
  107736:	00 
  107737:	c7 44 24 04 9e 00 00 	movl   $0x9e,0x4(%esp)
  10773e:	00 
  10773f:	8b 45 08             	mov    0x8(%ebp),%eax
  107742:	89 04 24             	mov    %eax,(%esp)
  107745:	e8 66 10 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(159, intr_159, 0x8, 0x8e);
  10774a:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107751:	00 
  107752:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107759:	00 
  10775a:	c7 44 24 08 40 ba 10 	movl   $0x10ba40,0x8(%esp)
  107761:	00 
  107762:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
  107769:	00 
  10776a:	8b 45 08             	mov    0x8(%ebp),%eax
  10776d:	89 04 24             	mov    %eax,(%esp)
  107770:	e8 3b 10 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(160, intr_160, 0x8, 0x8e);
  107775:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  10777c:	00 
  10777d:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107784:	00 
  107785:	c7 44 24 08 4c ba 10 	movl   $0x10ba4c,0x8(%esp)
  10778c:	00 
  10778d:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
  107794:	00 
  107795:	8b 45 08             	mov    0x8(%ebp),%eax
  107798:	89 04 24             	mov    %eax,(%esp)
  10779b:	e8 10 10 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(161, intr_161, 0x8, 0x8e);
  1077a0:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1077a7:	00 
  1077a8:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1077af:	00 
  1077b0:	c7 44 24 08 58 ba 10 	movl   $0x10ba58,0x8(%esp)
  1077b7:	00 
  1077b8:	c7 44 24 04 a1 00 00 	movl   $0xa1,0x4(%esp)
  1077bf:	00 
  1077c0:	8b 45 08             	mov    0x8(%ebp),%eax
  1077c3:	89 04 24             	mov    %eax,(%esp)
  1077c6:	e8 e5 0f 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(162, intr_162, 0x8, 0x8e);
  1077cb:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1077d2:	00 
  1077d3:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1077da:	00 
  1077db:	c7 44 24 08 64 ba 10 	movl   $0x10ba64,0x8(%esp)
  1077e2:	00 
  1077e3:	c7 44 24 04 a2 00 00 	movl   $0xa2,0x4(%esp)
  1077ea:	00 
  1077eb:	8b 45 08             	mov    0x8(%ebp),%eax
  1077ee:	89 04 24             	mov    %eax,(%esp)
  1077f1:	e8 ba 0f 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(163, intr_163, 0x8, 0x8e);
  1077f6:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1077fd:	00 
  1077fe:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107805:	00 
  107806:	c7 44 24 08 70 ba 10 	movl   $0x10ba70,0x8(%esp)
  10780d:	00 
  10780e:	c7 44 24 04 a3 00 00 	movl   $0xa3,0x4(%esp)
  107815:	00 
  107816:	8b 45 08             	mov    0x8(%ebp),%eax
  107819:	89 04 24             	mov    %eax,(%esp)
  10781c:	e8 8f 0f 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(164, intr_164, 0x8, 0x8e);
  107821:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107828:	00 
  107829:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107830:	00 
  107831:	c7 44 24 08 7c ba 10 	movl   $0x10ba7c,0x8(%esp)
  107838:	00 
  107839:	c7 44 24 04 a4 00 00 	movl   $0xa4,0x4(%esp)
  107840:	00 
  107841:	8b 45 08             	mov    0x8(%ebp),%eax
  107844:	89 04 24             	mov    %eax,(%esp)
  107847:	e8 64 0f 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(165, intr_165, 0x8, 0x8e);
  10784c:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107853:	00 
  107854:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10785b:	00 
  10785c:	c7 44 24 08 88 ba 10 	movl   $0x10ba88,0x8(%esp)
  107863:	00 
  107864:	c7 44 24 04 a5 00 00 	movl   $0xa5,0x4(%esp)
  10786b:	00 
  10786c:	8b 45 08             	mov    0x8(%ebp),%eax
  10786f:	89 04 24             	mov    %eax,(%esp)
  107872:	e8 39 0f 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(166, intr_166, 0x8, 0x8e);
  107877:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  10787e:	00 
  10787f:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107886:	00 
  107887:	c7 44 24 08 94 ba 10 	movl   $0x10ba94,0x8(%esp)
  10788e:	00 
  10788f:	c7 44 24 04 a6 00 00 	movl   $0xa6,0x4(%esp)
  107896:	00 
  107897:	8b 45 08             	mov    0x8(%ebp),%eax
  10789a:	89 04 24             	mov    %eax,(%esp)
  10789d:	e8 0e 0f 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(167, intr_167, 0x8, 0x8e);
  1078a2:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1078a9:	00 
  1078aa:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1078b1:	00 
  1078b2:	c7 44 24 08 a0 ba 10 	movl   $0x10baa0,0x8(%esp)
  1078b9:	00 
  1078ba:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
  1078c1:	00 
  1078c2:	8b 45 08             	mov    0x8(%ebp),%eax
  1078c5:	89 04 24             	mov    %eax,(%esp)
  1078c8:	e8 e3 0e 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(168, intr_168, 0x8, 0x8e);
  1078cd:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1078d4:	00 
  1078d5:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1078dc:	00 
  1078dd:	c7 44 24 08 ac ba 10 	movl   $0x10baac,0x8(%esp)
  1078e4:	00 
  1078e5:	c7 44 24 04 a8 00 00 	movl   $0xa8,0x4(%esp)
  1078ec:	00 
  1078ed:	8b 45 08             	mov    0x8(%ebp),%eax
  1078f0:	89 04 24             	mov    %eax,(%esp)
  1078f3:	e8 b8 0e 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(169, intr_169, 0x8, 0x8e);
  1078f8:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1078ff:	00 
  107900:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107907:	00 
  107908:	c7 44 24 08 b8 ba 10 	movl   $0x10bab8,0x8(%esp)
  10790f:	00 
  107910:	c7 44 24 04 a9 00 00 	movl   $0xa9,0x4(%esp)
  107917:	00 
  107918:	8b 45 08             	mov    0x8(%ebp),%eax
  10791b:	89 04 24             	mov    %eax,(%esp)
  10791e:	e8 8d 0e 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(170, intr_170, 0x8, 0xee);
  107923:	c7 44 24 10 ee 00 00 	movl   $0xee,0x10(%esp)
  10792a:	00 
  10792b:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107932:	00 
  107933:	c7 44 24 08 c4 ba 10 	movl   $0x10bac4,0x8(%esp)
  10793a:	00 
  10793b:	c7 44 24 04 aa 00 00 	movl   $0xaa,0x4(%esp)
  107942:	00 
  107943:	8b 45 08             	mov    0x8(%ebp),%eax
  107946:	89 04 24             	mov    %eax,(%esp)
  107949:	e8 62 0e 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(171, intr_171, 0x8, 0x8e);
  10794e:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107955:	00 
  107956:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10795d:	00 
  10795e:	c7 44 24 08 d0 ba 10 	movl   $0x10bad0,0x8(%esp)
  107965:	00 
  107966:	c7 44 24 04 ab 00 00 	movl   $0xab,0x4(%esp)
  10796d:	00 
  10796e:	8b 45 08             	mov    0x8(%ebp),%eax
  107971:	89 04 24             	mov    %eax,(%esp)
  107974:	e8 37 0e 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(172, intr_172, 0x8, 0x8e);
  107979:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107980:	00 
  107981:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107988:	00 
  107989:	c7 44 24 08 dc ba 10 	movl   $0x10badc,0x8(%esp)
  107990:	00 
  107991:	c7 44 24 04 ac 00 00 	movl   $0xac,0x4(%esp)
  107998:	00 
  107999:	8b 45 08             	mov    0x8(%ebp),%eax
  10799c:	89 04 24             	mov    %eax,(%esp)
  10799f:	e8 0c 0e 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(173, intr_173, 0x8, 0x8e);
  1079a4:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1079ab:	00 
  1079ac:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1079b3:	00 
  1079b4:	c7 44 24 08 e8 ba 10 	movl   $0x10bae8,0x8(%esp)
  1079bb:	00 
  1079bc:	c7 44 24 04 ad 00 00 	movl   $0xad,0x4(%esp)
  1079c3:	00 
  1079c4:	8b 45 08             	mov    0x8(%ebp),%eax
  1079c7:	89 04 24             	mov    %eax,(%esp)
  1079ca:	e8 e1 0d 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(174, intr_174, 0x8, 0x8e);
  1079cf:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1079d6:	00 
  1079d7:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1079de:	00 
  1079df:	c7 44 24 08 f4 ba 10 	movl   $0x10baf4,0x8(%esp)
  1079e6:	00 
  1079e7:	c7 44 24 04 ae 00 00 	movl   $0xae,0x4(%esp)
  1079ee:	00 
  1079ef:	8b 45 08             	mov    0x8(%ebp),%eax
  1079f2:	89 04 24             	mov    %eax,(%esp)
  1079f5:	e8 b6 0d 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(175, intr_175, 0x8, 0x8e);
  1079fa:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107a01:	00 
  107a02:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107a09:	00 
  107a0a:	c7 44 24 08 00 bb 10 	movl   $0x10bb00,0x8(%esp)
  107a11:	00 
  107a12:	c7 44 24 04 af 00 00 	movl   $0xaf,0x4(%esp)
  107a19:	00 
  107a1a:	8b 45 08             	mov    0x8(%ebp),%eax
  107a1d:	89 04 24             	mov    %eax,(%esp)
  107a20:	e8 8b 0d 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(176, intr_176, 0x8, 0x8e);
  107a25:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107a2c:	00 
  107a2d:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107a34:	00 
  107a35:	c7 44 24 08 0c bb 10 	movl   $0x10bb0c,0x8(%esp)
  107a3c:	00 
  107a3d:	c7 44 24 04 b0 00 00 	movl   $0xb0,0x4(%esp)
  107a44:	00 
  107a45:	8b 45 08             	mov    0x8(%ebp),%eax
  107a48:	89 04 24             	mov    %eax,(%esp)
  107a4b:	e8 60 0d 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(177, intr_177, 0x8, 0x8e);
  107a50:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107a57:	00 
  107a58:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107a5f:	00 
  107a60:	c7 44 24 08 18 bb 10 	movl   $0x10bb18,0x8(%esp)
  107a67:	00 
  107a68:	c7 44 24 04 b1 00 00 	movl   $0xb1,0x4(%esp)
  107a6f:	00 
  107a70:	8b 45 08             	mov    0x8(%ebp),%eax
  107a73:	89 04 24             	mov    %eax,(%esp)
  107a76:	e8 35 0d 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(178, intr_178, 0x8, 0x8e);
  107a7b:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107a82:	00 
  107a83:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107a8a:	00 
  107a8b:	c7 44 24 08 24 bb 10 	movl   $0x10bb24,0x8(%esp)
  107a92:	00 
  107a93:	c7 44 24 04 b2 00 00 	movl   $0xb2,0x4(%esp)
  107a9a:	00 
  107a9b:	8b 45 08             	mov    0x8(%ebp),%eax
  107a9e:	89 04 24             	mov    %eax,(%esp)
  107aa1:	e8 0a 0d 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(179, intr_179, 0x8, 0x8e);
  107aa6:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107aad:	00 
  107aae:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107ab5:	00 
  107ab6:	c7 44 24 08 30 bb 10 	movl   $0x10bb30,0x8(%esp)
  107abd:	00 
  107abe:	c7 44 24 04 b3 00 00 	movl   $0xb3,0x4(%esp)
  107ac5:	00 
  107ac6:	8b 45 08             	mov    0x8(%ebp),%eax
  107ac9:	89 04 24             	mov    %eax,(%esp)
  107acc:	e8 df 0c 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(180, intr_180, 0x8, 0x8e);
  107ad1:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107ad8:	00 
  107ad9:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107ae0:	00 
  107ae1:	c7 44 24 08 3c bb 10 	movl   $0x10bb3c,0x8(%esp)
  107ae8:	00 
  107ae9:	c7 44 24 04 b4 00 00 	movl   $0xb4,0x4(%esp)
  107af0:	00 
  107af1:	8b 45 08             	mov    0x8(%ebp),%eax
  107af4:	89 04 24             	mov    %eax,(%esp)
  107af7:	e8 b4 0c 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(181, intr_181, 0x8, 0x8e);
  107afc:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107b03:	00 
  107b04:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107b0b:	00 
  107b0c:	c7 44 24 08 48 bb 10 	movl   $0x10bb48,0x8(%esp)
  107b13:	00 
  107b14:	c7 44 24 04 b5 00 00 	movl   $0xb5,0x4(%esp)
  107b1b:	00 
  107b1c:	8b 45 08             	mov    0x8(%ebp),%eax
  107b1f:	89 04 24             	mov    %eax,(%esp)
  107b22:	e8 89 0c 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(182, intr_182, 0x8, 0x8e);
  107b27:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107b2e:	00 
  107b2f:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107b36:	00 
  107b37:	c7 44 24 08 54 bb 10 	movl   $0x10bb54,0x8(%esp)
  107b3e:	00 
  107b3f:	c7 44 24 04 b6 00 00 	movl   $0xb6,0x4(%esp)
  107b46:	00 
  107b47:	8b 45 08             	mov    0x8(%ebp),%eax
  107b4a:	89 04 24             	mov    %eax,(%esp)
  107b4d:	e8 5e 0c 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(183, intr_183, 0x8, 0x8e);
  107b52:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107b59:	00 
  107b5a:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107b61:	00 
  107b62:	c7 44 24 08 60 bb 10 	movl   $0x10bb60,0x8(%esp)
  107b69:	00 
  107b6a:	c7 44 24 04 b7 00 00 	movl   $0xb7,0x4(%esp)
  107b71:	00 
  107b72:	8b 45 08             	mov    0x8(%ebp),%eax
  107b75:	89 04 24             	mov    %eax,(%esp)
  107b78:	e8 33 0c 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(184, intr_184, 0x8, 0x8e);
  107b7d:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107b84:	00 
  107b85:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107b8c:	00 
  107b8d:	c7 44 24 08 6c bb 10 	movl   $0x10bb6c,0x8(%esp)
  107b94:	00 
  107b95:	c7 44 24 04 b8 00 00 	movl   $0xb8,0x4(%esp)
  107b9c:	00 
  107b9d:	8b 45 08             	mov    0x8(%ebp),%eax
  107ba0:	89 04 24             	mov    %eax,(%esp)
  107ba3:	e8 08 0c 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(185, intr_185, 0x8, 0x8e);
  107ba8:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107baf:	00 
  107bb0:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107bb7:	00 
  107bb8:	c7 44 24 08 78 bb 10 	movl   $0x10bb78,0x8(%esp)
  107bbf:	00 
  107bc0:	c7 44 24 04 b9 00 00 	movl   $0xb9,0x4(%esp)
  107bc7:	00 
  107bc8:	8b 45 08             	mov    0x8(%ebp),%eax
  107bcb:	89 04 24             	mov    %eax,(%esp)
  107bce:	e8 dd 0b 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(186, intr_186, 0x8, 0x8e);
  107bd3:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107bda:	00 
  107bdb:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107be2:	00 
  107be3:	c7 44 24 08 84 bb 10 	movl   $0x10bb84,0x8(%esp)
  107bea:	00 
  107beb:	c7 44 24 04 ba 00 00 	movl   $0xba,0x4(%esp)
  107bf2:	00 
  107bf3:	8b 45 08             	mov    0x8(%ebp),%eax
  107bf6:	89 04 24             	mov    %eax,(%esp)
  107bf9:	e8 b2 0b 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(187, intr_187, 0x8, 0x8e);
  107bfe:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107c05:	00 
  107c06:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107c0d:	00 
  107c0e:	c7 44 24 08 90 bb 10 	movl   $0x10bb90,0x8(%esp)
  107c15:	00 
  107c16:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
  107c1d:	00 
  107c1e:	8b 45 08             	mov    0x8(%ebp),%eax
  107c21:	89 04 24             	mov    %eax,(%esp)
  107c24:	e8 87 0b 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(188, intr_188, 0x8, 0x8e);
  107c29:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107c30:	00 
  107c31:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107c38:	00 
  107c39:	c7 44 24 08 9c bb 10 	movl   $0x10bb9c,0x8(%esp)
  107c40:	00 
  107c41:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
  107c48:	00 
  107c49:	8b 45 08             	mov    0x8(%ebp),%eax
  107c4c:	89 04 24             	mov    %eax,(%esp)
  107c4f:	e8 5c 0b 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(189, intr_189, 0x8, 0x8e);
  107c54:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107c5b:	00 
  107c5c:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107c63:	00 
  107c64:	c7 44 24 08 a8 bb 10 	movl   $0x10bba8,0x8(%esp)
  107c6b:	00 
  107c6c:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
  107c73:	00 
  107c74:	8b 45 08             	mov    0x8(%ebp),%eax
  107c77:	89 04 24             	mov    %eax,(%esp)
  107c7a:	e8 31 0b 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(190, intr_190, 0x8, 0x8e);
  107c7f:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107c86:	00 
  107c87:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107c8e:	00 
  107c8f:	c7 44 24 08 b4 bb 10 	movl   $0x10bbb4,0x8(%esp)
  107c96:	00 
  107c97:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
  107c9e:	00 
  107c9f:	8b 45 08             	mov    0x8(%ebp),%eax
  107ca2:	89 04 24             	mov    %eax,(%esp)
  107ca5:	e8 06 0b 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(191, intr_191, 0x8, 0x8e);
  107caa:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107cb1:	00 
  107cb2:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107cb9:	00 
  107cba:	c7 44 24 08 c0 bb 10 	movl   $0x10bbc0,0x8(%esp)
  107cc1:	00 
  107cc2:	c7 44 24 04 bf 00 00 	movl   $0xbf,0x4(%esp)
  107cc9:	00 
  107cca:	8b 45 08             	mov    0x8(%ebp),%eax
  107ccd:	89 04 24             	mov    %eax,(%esp)
  107cd0:	e8 db 0a 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(192, intr_192, 0x8, 0x8e);
  107cd5:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107cdc:	00 
  107cdd:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107ce4:	00 
  107ce5:	c7 44 24 08 cc bb 10 	movl   $0x10bbcc,0x8(%esp)
  107cec:	00 
  107ced:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
  107cf4:	00 
  107cf5:	8b 45 08             	mov    0x8(%ebp),%eax
  107cf8:	89 04 24             	mov    %eax,(%esp)
  107cfb:	e8 b0 0a 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(193, intr_193, 0x8, 0x8e);
  107d00:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107d07:	00 
  107d08:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107d0f:	00 
  107d10:	c7 44 24 08 d8 bb 10 	movl   $0x10bbd8,0x8(%esp)
  107d17:	00 
  107d18:	c7 44 24 04 c1 00 00 	movl   $0xc1,0x4(%esp)
  107d1f:	00 
  107d20:	8b 45 08             	mov    0x8(%ebp),%eax
  107d23:	89 04 24             	mov    %eax,(%esp)
  107d26:	e8 85 0a 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(194, intr_194, 0x8, 0x8e);
  107d2b:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107d32:	00 
  107d33:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107d3a:	00 
  107d3b:	c7 44 24 08 e4 bb 10 	movl   $0x10bbe4,0x8(%esp)
  107d42:	00 
  107d43:	c7 44 24 04 c2 00 00 	movl   $0xc2,0x4(%esp)
  107d4a:	00 
  107d4b:	8b 45 08             	mov    0x8(%ebp),%eax
  107d4e:	89 04 24             	mov    %eax,(%esp)
  107d51:	e8 5a 0a 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(195, intr_195, 0x8, 0x8e);
  107d56:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107d5d:	00 
  107d5e:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107d65:	00 
  107d66:	c7 44 24 08 f0 bb 10 	movl   $0x10bbf0,0x8(%esp)
  107d6d:	00 
  107d6e:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
  107d75:	00 
  107d76:	8b 45 08             	mov    0x8(%ebp),%eax
  107d79:	89 04 24             	mov    %eax,(%esp)
  107d7c:	e8 2f 0a 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(196, intr_196, 0x8, 0x8e);
  107d81:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107d88:	00 
  107d89:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107d90:	00 
  107d91:	c7 44 24 08 fc bb 10 	movl   $0x10bbfc,0x8(%esp)
  107d98:	00 
  107d99:	c7 44 24 04 c4 00 00 	movl   $0xc4,0x4(%esp)
  107da0:	00 
  107da1:	8b 45 08             	mov    0x8(%ebp),%eax
  107da4:	89 04 24             	mov    %eax,(%esp)
  107da7:	e8 04 0a 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(197, intr_197, 0x8, 0x8e);
  107dac:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107db3:	00 
  107db4:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107dbb:	00 
  107dbc:	c7 44 24 08 08 bc 10 	movl   $0x10bc08,0x8(%esp)
  107dc3:	00 
  107dc4:	c7 44 24 04 c5 00 00 	movl   $0xc5,0x4(%esp)
  107dcb:	00 
  107dcc:	8b 45 08             	mov    0x8(%ebp),%eax
  107dcf:	89 04 24             	mov    %eax,(%esp)
  107dd2:	e8 d9 09 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(198, intr_198, 0x8, 0x8e);
  107dd7:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107dde:	00 
  107ddf:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107de6:	00 
  107de7:	c7 44 24 08 14 bc 10 	movl   $0x10bc14,0x8(%esp)
  107dee:	00 
  107def:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
  107df6:	00 
  107df7:	8b 45 08             	mov    0x8(%ebp),%eax
  107dfa:	89 04 24             	mov    %eax,(%esp)
  107dfd:	e8 ae 09 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(199, intr_199, 0x8, 0x8e);
  107e02:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107e09:	00 
  107e0a:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107e11:	00 
  107e12:	c7 44 24 08 20 bc 10 	movl   $0x10bc20,0x8(%esp)
  107e19:	00 
  107e1a:	c7 44 24 04 c7 00 00 	movl   $0xc7,0x4(%esp)
  107e21:	00 
  107e22:	8b 45 08             	mov    0x8(%ebp),%eax
  107e25:	89 04 24             	mov    %eax,(%esp)
  107e28:	e8 83 09 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(200, intr_200, 0x8, 0x8e);
  107e2d:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107e34:	00 
  107e35:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107e3c:	00 
  107e3d:	c7 44 24 08 2c bc 10 	movl   $0x10bc2c,0x8(%esp)
  107e44:	00 
  107e45:	c7 44 24 04 c8 00 00 	movl   $0xc8,0x4(%esp)
  107e4c:	00 
  107e4d:	8b 45 08             	mov    0x8(%ebp),%eax
  107e50:	89 04 24             	mov    %eax,(%esp)
  107e53:	e8 58 09 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(201, intr_201, 0x8, 0x8e);
  107e58:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107e5f:	00 
  107e60:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107e67:	00 
  107e68:	c7 44 24 08 38 bc 10 	movl   $0x10bc38,0x8(%esp)
  107e6f:	00 
  107e70:	c7 44 24 04 c9 00 00 	movl   $0xc9,0x4(%esp)
  107e77:	00 
  107e78:	8b 45 08             	mov    0x8(%ebp),%eax
  107e7b:	89 04 24             	mov    %eax,(%esp)
  107e7e:	e8 2d 09 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(202, intr_202, 0x8, 0x8e);
  107e83:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107e8a:	00 
  107e8b:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107e92:	00 
  107e93:	c7 44 24 08 44 bc 10 	movl   $0x10bc44,0x8(%esp)
  107e9a:	00 
  107e9b:	c7 44 24 04 ca 00 00 	movl   $0xca,0x4(%esp)
  107ea2:	00 
  107ea3:	8b 45 08             	mov    0x8(%ebp),%eax
  107ea6:	89 04 24             	mov    %eax,(%esp)
  107ea9:	e8 02 09 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(203, intr_203, 0x8, 0x8e);
  107eae:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107eb5:	00 
  107eb6:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107ebd:	00 
  107ebe:	c7 44 24 08 50 bc 10 	movl   $0x10bc50,0x8(%esp)
  107ec5:	00 
  107ec6:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
  107ecd:	00 
  107ece:	8b 45 08             	mov    0x8(%ebp),%eax
  107ed1:	89 04 24             	mov    %eax,(%esp)
  107ed4:	e8 d7 08 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(204, intr_204, 0x8, 0x8e);
  107ed9:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107ee0:	00 
  107ee1:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107ee8:	00 
  107ee9:	c7 44 24 08 5c bc 10 	movl   $0x10bc5c,0x8(%esp)
  107ef0:	00 
  107ef1:	c7 44 24 04 cc 00 00 	movl   $0xcc,0x4(%esp)
  107ef8:	00 
  107ef9:	8b 45 08             	mov    0x8(%ebp),%eax
  107efc:	89 04 24             	mov    %eax,(%esp)
  107eff:	e8 ac 08 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(205, intr_205, 0x8, 0x8e);
  107f04:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107f0b:	00 
  107f0c:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107f13:	00 
  107f14:	c7 44 24 08 68 bc 10 	movl   $0x10bc68,0x8(%esp)
  107f1b:	00 
  107f1c:	c7 44 24 04 cd 00 00 	movl   $0xcd,0x4(%esp)
  107f23:	00 
  107f24:	8b 45 08             	mov    0x8(%ebp),%eax
  107f27:	89 04 24             	mov    %eax,(%esp)
  107f2a:	e8 81 08 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(206, intr_206, 0x8, 0x8e);
  107f2f:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107f36:	00 
  107f37:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107f3e:	00 
  107f3f:	c7 44 24 08 74 bc 10 	movl   $0x10bc74,0x8(%esp)
  107f46:	00 
  107f47:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
  107f4e:	00 
  107f4f:	8b 45 08             	mov    0x8(%ebp),%eax
  107f52:	89 04 24             	mov    %eax,(%esp)
  107f55:	e8 56 08 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(207, intr_207, 0x8, 0x8e);
  107f5a:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107f61:	00 
  107f62:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107f69:	00 
  107f6a:	c7 44 24 08 80 bc 10 	movl   $0x10bc80,0x8(%esp)
  107f71:	00 
  107f72:	c7 44 24 04 cf 00 00 	movl   $0xcf,0x4(%esp)
  107f79:	00 
  107f7a:	8b 45 08             	mov    0x8(%ebp),%eax
  107f7d:	89 04 24             	mov    %eax,(%esp)
  107f80:	e8 2b 08 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(208, intr_208, 0x8, 0x8e);
  107f85:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107f8c:	00 
  107f8d:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107f94:	00 
  107f95:	c7 44 24 08 8c bc 10 	movl   $0x10bc8c,0x8(%esp)
  107f9c:	00 
  107f9d:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
  107fa4:	00 
  107fa5:	8b 45 08             	mov    0x8(%ebp),%eax
  107fa8:	89 04 24             	mov    %eax,(%esp)
  107fab:	e8 00 08 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(209, intr_209, 0x8, 0x8e);
  107fb0:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107fb7:	00 
  107fb8:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107fbf:	00 
  107fc0:	c7 44 24 08 98 bc 10 	movl   $0x10bc98,0x8(%esp)
  107fc7:	00 
  107fc8:	c7 44 24 04 d1 00 00 	movl   $0xd1,0x4(%esp)
  107fcf:	00 
  107fd0:	8b 45 08             	mov    0x8(%ebp),%eax
  107fd3:	89 04 24             	mov    %eax,(%esp)
  107fd6:	e8 d5 07 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(210, intr_210, 0x8, 0x8e);
  107fdb:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  107fe2:	00 
  107fe3:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  107fea:	00 
  107feb:	c7 44 24 08 a4 bc 10 	movl   $0x10bca4,0x8(%esp)
  107ff2:	00 
  107ff3:	c7 44 24 04 d2 00 00 	movl   $0xd2,0x4(%esp)
  107ffa:	00 
  107ffb:	8b 45 08             	mov    0x8(%ebp),%eax
  107ffe:	89 04 24             	mov    %eax,(%esp)
  108001:	e8 aa 07 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(211, intr_211, 0x8, 0x8e);
  108006:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  10800d:	00 
  10800e:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  108015:	00 
  108016:	c7 44 24 08 b0 bc 10 	movl   $0x10bcb0,0x8(%esp)
  10801d:	00 
  10801e:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
  108025:	00 
  108026:	8b 45 08             	mov    0x8(%ebp),%eax
  108029:	89 04 24             	mov    %eax,(%esp)
  10802c:	e8 7f 07 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(212, intr_212, 0x8, 0x8e);
  108031:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  108038:	00 
  108039:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  108040:	00 
  108041:	c7 44 24 08 bc bc 10 	movl   $0x10bcbc,0x8(%esp)
  108048:	00 
  108049:	c7 44 24 04 d4 00 00 	movl   $0xd4,0x4(%esp)
  108050:	00 
  108051:	8b 45 08             	mov    0x8(%ebp),%eax
  108054:	89 04 24             	mov    %eax,(%esp)
  108057:	e8 54 07 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(213, intr_213, 0x8, 0x8e);
  10805c:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  108063:	00 
  108064:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10806b:	00 
  10806c:	c7 44 24 08 c8 bc 10 	movl   $0x10bcc8,0x8(%esp)
  108073:	00 
  108074:	c7 44 24 04 d5 00 00 	movl   $0xd5,0x4(%esp)
  10807b:	00 
  10807c:	8b 45 08             	mov    0x8(%ebp),%eax
  10807f:	89 04 24             	mov    %eax,(%esp)
  108082:	e8 29 07 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(214, intr_214, 0x8, 0x8e);
  108087:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  10808e:	00 
  10808f:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  108096:	00 
  108097:	c7 44 24 08 d4 bc 10 	movl   $0x10bcd4,0x8(%esp)
  10809e:	00 
  10809f:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
  1080a6:	00 
  1080a7:	8b 45 08             	mov    0x8(%ebp),%eax
  1080aa:	89 04 24             	mov    %eax,(%esp)
  1080ad:	e8 fe 06 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(215, intr_215, 0x8, 0x8e);
  1080b2:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1080b9:	00 
  1080ba:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1080c1:	00 
  1080c2:	c7 44 24 08 e0 bc 10 	movl   $0x10bce0,0x8(%esp)
  1080c9:	00 
  1080ca:	c7 44 24 04 d7 00 00 	movl   $0xd7,0x4(%esp)
  1080d1:	00 
  1080d2:	8b 45 08             	mov    0x8(%ebp),%eax
  1080d5:	89 04 24             	mov    %eax,(%esp)
  1080d8:	e8 d3 06 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(216, intr_216, 0x8, 0x8e);
  1080dd:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1080e4:	00 
  1080e5:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1080ec:	00 
  1080ed:	c7 44 24 08 ec bc 10 	movl   $0x10bcec,0x8(%esp)
  1080f4:	00 
  1080f5:	c7 44 24 04 d8 00 00 	movl   $0xd8,0x4(%esp)
  1080fc:	00 
  1080fd:	8b 45 08             	mov    0x8(%ebp),%eax
  108100:	89 04 24             	mov    %eax,(%esp)
  108103:	e8 a8 06 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(217, intr_217, 0x8, 0x8e);
  108108:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  10810f:	00 
  108110:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  108117:	00 
  108118:	c7 44 24 08 f8 bc 10 	movl   $0x10bcf8,0x8(%esp)
  10811f:	00 
  108120:	c7 44 24 04 d9 00 00 	movl   $0xd9,0x4(%esp)
  108127:	00 
  108128:	8b 45 08             	mov    0x8(%ebp),%eax
  10812b:	89 04 24             	mov    %eax,(%esp)
  10812e:	e8 7d 06 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(218, intr_218, 0x8, 0x8e);
  108133:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  10813a:	00 
  10813b:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  108142:	00 
  108143:	c7 44 24 08 04 bd 10 	movl   $0x10bd04,0x8(%esp)
  10814a:	00 
  10814b:	c7 44 24 04 da 00 00 	movl   $0xda,0x4(%esp)
  108152:	00 
  108153:	8b 45 08             	mov    0x8(%ebp),%eax
  108156:	89 04 24             	mov    %eax,(%esp)
  108159:	e8 52 06 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(219, intr_219, 0x8, 0x8e);
  10815e:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  108165:	00 
  108166:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10816d:	00 
  10816e:	c7 44 24 08 10 bd 10 	movl   $0x10bd10,0x8(%esp)
  108175:	00 
  108176:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
  10817d:	00 
  10817e:	8b 45 08             	mov    0x8(%ebp),%eax
  108181:	89 04 24             	mov    %eax,(%esp)
  108184:	e8 27 06 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(220, intr_220, 0x8, 0x8e);
  108189:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  108190:	00 
  108191:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  108198:	00 
  108199:	c7 44 24 08 1c bd 10 	movl   $0x10bd1c,0x8(%esp)
  1081a0:	00 
  1081a1:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
  1081a8:	00 
  1081a9:	8b 45 08             	mov    0x8(%ebp),%eax
  1081ac:	89 04 24             	mov    %eax,(%esp)
  1081af:	e8 fc 05 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(221, intr_221, 0x8, 0x8e);
  1081b4:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1081bb:	00 
  1081bc:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1081c3:	00 
  1081c4:	c7 44 24 08 28 bd 10 	movl   $0x10bd28,0x8(%esp)
  1081cb:	00 
  1081cc:	c7 44 24 04 dd 00 00 	movl   $0xdd,0x4(%esp)
  1081d3:	00 
  1081d4:	8b 45 08             	mov    0x8(%ebp),%eax
  1081d7:	89 04 24             	mov    %eax,(%esp)
  1081da:	e8 d1 05 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(222, intr_222, 0x8, 0x8e);
  1081df:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1081e6:	00 
  1081e7:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1081ee:	00 
  1081ef:	c7 44 24 08 34 bd 10 	movl   $0x10bd34,0x8(%esp)
  1081f6:	00 
  1081f7:	c7 44 24 04 de 00 00 	movl   $0xde,0x4(%esp)
  1081fe:	00 
  1081ff:	8b 45 08             	mov    0x8(%ebp),%eax
  108202:	89 04 24             	mov    %eax,(%esp)
  108205:	e8 a6 05 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(223, intr_223, 0x8, 0x8e);
  10820a:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  108211:	00 
  108212:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  108219:	00 
  10821a:	c7 44 24 08 40 bd 10 	movl   $0x10bd40,0x8(%esp)
  108221:	00 
  108222:	c7 44 24 04 df 00 00 	movl   $0xdf,0x4(%esp)
  108229:	00 
  10822a:	8b 45 08             	mov    0x8(%ebp),%eax
  10822d:	89 04 24             	mov    %eax,(%esp)
  108230:	e8 7b 05 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(224, intr_224, 0x8, 0x8e);
  108235:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  10823c:	00 
  10823d:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  108244:	00 
  108245:	c7 44 24 08 4c bd 10 	movl   $0x10bd4c,0x8(%esp)
  10824c:	00 
  10824d:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
  108254:	00 
  108255:	8b 45 08             	mov    0x8(%ebp),%eax
  108258:	89 04 24             	mov    %eax,(%esp)
  10825b:	e8 50 05 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(225, intr_225, 0x8, 0x8e);
  108260:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  108267:	00 
  108268:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10826f:	00 
  108270:	c7 44 24 08 58 bd 10 	movl   $0x10bd58,0x8(%esp)
  108277:	00 
  108278:	c7 44 24 04 e1 00 00 	movl   $0xe1,0x4(%esp)
  10827f:	00 
  108280:	8b 45 08             	mov    0x8(%ebp),%eax
  108283:	89 04 24             	mov    %eax,(%esp)
  108286:	e8 25 05 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(226, intr_226, 0x8, 0x8e);
  10828b:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  108292:	00 
  108293:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10829a:	00 
  10829b:	c7 44 24 08 64 bd 10 	movl   $0x10bd64,0x8(%esp)
  1082a2:	00 
  1082a3:	c7 44 24 04 e2 00 00 	movl   $0xe2,0x4(%esp)
  1082aa:	00 
  1082ab:	8b 45 08             	mov    0x8(%ebp),%eax
  1082ae:	89 04 24             	mov    %eax,(%esp)
  1082b1:	e8 fa 04 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(227, intr_227, 0x8, 0x8e);
  1082b6:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1082bd:	00 
  1082be:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1082c5:	00 
  1082c6:	c7 44 24 08 70 bd 10 	movl   $0x10bd70,0x8(%esp)
  1082cd:	00 
  1082ce:	c7 44 24 04 e3 00 00 	movl   $0xe3,0x4(%esp)
  1082d5:	00 
  1082d6:	8b 45 08             	mov    0x8(%ebp),%eax
  1082d9:	89 04 24             	mov    %eax,(%esp)
  1082dc:	e8 cf 04 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(228, intr_228, 0x8, 0x8e);
  1082e1:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1082e8:	00 
  1082e9:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1082f0:	00 
  1082f1:	c7 44 24 08 7c bd 10 	movl   $0x10bd7c,0x8(%esp)
  1082f8:	00 
  1082f9:	c7 44 24 04 e4 00 00 	movl   $0xe4,0x4(%esp)
  108300:	00 
  108301:	8b 45 08             	mov    0x8(%ebp),%eax
  108304:	89 04 24             	mov    %eax,(%esp)
  108307:	e8 a4 04 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(229, intr_229, 0x8, 0x8e);
  10830c:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  108313:	00 
  108314:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10831b:	00 
  10831c:	c7 44 24 08 88 bd 10 	movl   $0x10bd88,0x8(%esp)
  108323:	00 
  108324:	c7 44 24 04 e5 00 00 	movl   $0xe5,0x4(%esp)
  10832b:	00 
  10832c:	8b 45 08             	mov    0x8(%ebp),%eax
  10832f:	89 04 24             	mov    %eax,(%esp)
  108332:	e8 79 04 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(230, intr_230, 0x8, 0x8e);
  108337:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  10833e:	00 
  10833f:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  108346:	00 
  108347:	c7 44 24 08 94 bd 10 	movl   $0x10bd94,0x8(%esp)
  10834e:	00 
  10834f:	c7 44 24 04 e6 00 00 	movl   $0xe6,0x4(%esp)
  108356:	00 
  108357:	8b 45 08             	mov    0x8(%ebp),%eax
  10835a:	89 04 24             	mov    %eax,(%esp)
  10835d:	e8 4e 04 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(231, intr_231, 0x8, 0x8e);
  108362:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  108369:	00 
  10836a:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  108371:	00 
  108372:	c7 44 24 08 a0 bd 10 	movl   $0x10bda0,0x8(%esp)
  108379:	00 
  10837a:	c7 44 24 04 e7 00 00 	movl   $0xe7,0x4(%esp)
  108381:	00 
  108382:	8b 45 08             	mov    0x8(%ebp),%eax
  108385:	89 04 24             	mov    %eax,(%esp)
  108388:	e8 23 04 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(232, intr_232, 0x8, 0x8e);
  10838d:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  108394:	00 
  108395:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10839c:	00 
  10839d:	c7 44 24 08 ac bd 10 	movl   $0x10bdac,0x8(%esp)
  1083a4:	00 
  1083a5:	c7 44 24 04 e8 00 00 	movl   $0xe8,0x4(%esp)
  1083ac:	00 
  1083ad:	8b 45 08             	mov    0x8(%ebp),%eax
  1083b0:	89 04 24             	mov    %eax,(%esp)
  1083b3:	e8 f8 03 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(233, intr_233, 0x8, 0x8e);
  1083b8:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1083bf:	00 
  1083c0:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1083c7:	00 
  1083c8:	c7 44 24 08 b8 bd 10 	movl   $0x10bdb8,0x8(%esp)
  1083cf:	00 
  1083d0:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
  1083d7:	00 
  1083d8:	8b 45 08             	mov    0x8(%ebp),%eax
  1083db:	89 04 24             	mov    %eax,(%esp)
  1083de:	e8 cd 03 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(234, intr_234, 0x8, 0x8e);
  1083e3:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1083ea:	00 
  1083eb:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1083f2:	00 
  1083f3:	c7 44 24 08 c4 bd 10 	movl   $0x10bdc4,0x8(%esp)
  1083fa:	00 
  1083fb:	c7 44 24 04 ea 00 00 	movl   $0xea,0x4(%esp)
  108402:	00 
  108403:	8b 45 08             	mov    0x8(%ebp),%eax
  108406:	89 04 24             	mov    %eax,(%esp)
  108409:	e8 a2 03 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(235, intr_235, 0x8, 0x8e);
  10840e:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  108415:	00 
  108416:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10841d:	00 
  10841e:	c7 44 24 08 d0 bd 10 	movl   $0x10bdd0,0x8(%esp)
  108425:	00 
  108426:	c7 44 24 04 eb 00 00 	movl   $0xeb,0x4(%esp)
  10842d:	00 
  10842e:	8b 45 08             	mov    0x8(%ebp),%eax
  108431:	89 04 24             	mov    %eax,(%esp)
  108434:	e8 77 03 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(236, intr_236, 0x8, 0x8e);
  108439:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  108440:	00 
  108441:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  108448:	00 
  108449:	c7 44 24 08 dc bd 10 	movl   $0x10bddc,0x8(%esp)
  108450:	00 
  108451:	c7 44 24 04 ec 00 00 	movl   $0xec,0x4(%esp)
  108458:	00 
  108459:	8b 45 08             	mov    0x8(%ebp),%eax
  10845c:	89 04 24             	mov    %eax,(%esp)
  10845f:	e8 4c 03 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(237, intr_237, 0x8, 0x8e);
  108464:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  10846b:	00 
  10846c:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  108473:	00 
  108474:	c7 44 24 08 e8 bd 10 	movl   $0x10bde8,0x8(%esp)
  10847b:	00 
  10847c:	c7 44 24 04 ed 00 00 	movl   $0xed,0x4(%esp)
  108483:	00 
  108484:	8b 45 08             	mov    0x8(%ebp),%eax
  108487:	89 04 24             	mov    %eax,(%esp)
  10848a:	e8 21 03 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>

	this->set_entry(238, intr_238, 0x8, 0xee);
  10848f:	c7 44 24 10 ee 00 00 	movl   $0xee,0x10(%esp)
  108496:	00 
  108497:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10849e:	00 
  10849f:	c7 44 24 08 f4 bd 10 	movl   $0x10bdf4,0x8(%esp)
  1084a6:	00 
  1084a7:	c7 44 24 04 ee 00 00 	movl   $0xee,0x4(%esp)
  1084ae:	00 
  1084af:	8b 45 08             	mov    0x8(%ebp),%eax
  1084b2:	89 04 24             	mov    %eax,(%esp)
  1084b5:	e8 f6 02 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>

	this->set_entry(239, intr_239, 0x8, 0x8e);
  1084ba:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1084c1:	00 
  1084c2:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1084c9:	00 
  1084ca:	c7 44 24 08 00 be 10 	movl   $0x10be00,0x8(%esp)
  1084d1:	00 
  1084d2:	c7 44 24 04 ef 00 00 	movl   $0xef,0x4(%esp)
  1084d9:	00 
  1084da:	8b 45 08             	mov    0x8(%ebp),%eax
  1084dd:	89 04 24             	mov    %eax,(%esp)
  1084e0:	e8 cb 02 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(240, intr_240, 0x8, 0x8e);
  1084e5:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1084ec:	00 
  1084ed:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1084f4:	00 
  1084f5:	c7 44 24 08 0c be 10 	movl   $0x10be0c,0x8(%esp)
  1084fc:	00 
  1084fd:	c7 44 24 04 f0 00 00 	movl   $0xf0,0x4(%esp)
  108504:	00 
  108505:	8b 45 08             	mov    0x8(%ebp),%eax
  108508:	89 04 24             	mov    %eax,(%esp)
  10850b:	e8 a0 02 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(241, intr_241, 0x8, 0x8e);
  108510:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  108517:	00 
  108518:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10851f:	00 
  108520:	c7 44 24 08 18 be 10 	movl   $0x10be18,0x8(%esp)
  108527:	00 
  108528:	c7 44 24 04 f1 00 00 	movl   $0xf1,0x4(%esp)
  10852f:	00 
  108530:	8b 45 08             	mov    0x8(%ebp),%eax
  108533:	89 04 24             	mov    %eax,(%esp)
  108536:	e8 75 02 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(242, intr_242, 0x8, 0x8e);
  10853b:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  108542:	00 
  108543:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10854a:	00 
  10854b:	c7 44 24 08 21 be 10 	movl   $0x10be21,0x8(%esp)
  108552:	00 
  108553:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
  10855a:	00 
  10855b:	8b 45 08             	mov    0x8(%ebp),%eax
  10855e:	89 04 24             	mov    %eax,(%esp)
  108561:	e8 4a 02 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(243, intr_243, 0x8, 0x8e);
  108566:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  10856d:	00 
  10856e:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  108575:	00 
  108576:	c7 44 24 08 2a be 10 	movl   $0x10be2a,0x8(%esp)
  10857d:	00 
  10857e:	c7 44 24 04 f3 00 00 	movl   $0xf3,0x4(%esp)
  108585:	00 
  108586:	8b 45 08             	mov    0x8(%ebp),%eax
  108589:	89 04 24             	mov    %eax,(%esp)
  10858c:	e8 1f 02 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(244, intr_244, 0x8, 0x8e);
  108591:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  108598:	00 
  108599:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1085a0:	00 
  1085a1:	c7 44 24 08 33 be 10 	movl   $0x10be33,0x8(%esp)
  1085a8:	00 
  1085a9:	c7 44 24 04 f4 00 00 	movl   $0xf4,0x4(%esp)
  1085b0:	00 
  1085b1:	8b 45 08             	mov    0x8(%ebp),%eax
  1085b4:	89 04 24             	mov    %eax,(%esp)
  1085b7:	e8 f4 01 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(245, intr_245, 0x8, 0x8e);
  1085bc:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1085c3:	00 
  1085c4:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1085cb:	00 
  1085cc:	c7 44 24 08 3c be 10 	movl   $0x10be3c,0x8(%esp)
  1085d3:	00 
  1085d4:	c7 44 24 04 f5 00 00 	movl   $0xf5,0x4(%esp)
  1085db:	00 
  1085dc:	8b 45 08             	mov    0x8(%ebp),%eax
  1085df:	89 04 24             	mov    %eax,(%esp)
  1085e2:	e8 c9 01 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(246, intr_246, 0x8, 0x8e);
  1085e7:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1085ee:	00 
  1085ef:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1085f6:	00 
  1085f7:	c7 44 24 08 45 be 10 	movl   $0x10be45,0x8(%esp)
  1085fe:	00 
  1085ff:	c7 44 24 04 f6 00 00 	movl   $0xf6,0x4(%esp)
  108606:	00 
  108607:	8b 45 08             	mov    0x8(%ebp),%eax
  10860a:	89 04 24             	mov    %eax,(%esp)
  10860d:	e8 9e 01 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(247, intr_247, 0x8, 0x8e);
  108612:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  108619:	00 
  10861a:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  108621:	00 
  108622:	c7 44 24 08 4e be 10 	movl   $0x10be4e,0x8(%esp)
  108629:	00 
  10862a:	c7 44 24 04 f7 00 00 	movl   $0xf7,0x4(%esp)
  108631:	00 
  108632:	8b 45 08             	mov    0x8(%ebp),%eax
  108635:	89 04 24             	mov    %eax,(%esp)
  108638:	e8 73 01 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(248, intr_248, 0x8, 0x8e);
  10863d:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  108644:	00 
  108645:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10864c:	00 
  10864d:	c7 44 24 08 57 be 10 	movl   $0x10be57,0x8(%esp)
  108654:	00 
  108655:	c7 44 24 04 f8 00 00 	movl   $0xf8,0x4(%esp)
  10865c:	00 
  10865d:	8b 45 08             	mov    0x8(%ebp),%eax
  108660:	89 04 24             	mov    %eax,(%esp)
  108663:	e8 48 01 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(249, intr_249, 0x8, 0x8e);
  108668:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  10866f:	00 
  108670:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  108677:	00 
  108678:	c7 44 24 08 60 be 10 	movl   $0x10be60,0x8(%esp)
  10867f:	00 
  108680:	c7 44 24 04 f9 00 00 	movl   $0xf9,0x4(%esp)
  108687:	00 
  108688:	8b 45 08             	mov    0x8(%ebp),%eax
  10868b:	89 04 24             	mov    %eax,(%esp)
  10868e:	e8 1d 01 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(250, intr_250, 0x8, 0x8e);
  108693:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  10869a:	00 
  10869b:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1086a2:	00 
  1086a3:	c7 44 24 08 69 be 10 	movl   $0x10be69,0x8(%esp)
  1086aa:	00 
  1086ab:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
  1086b2:	00 
  1086b3:	8b 45 08             	mov    0x8(%ebp),%eax
  1086b6:	89 04 24             	mov    %eax,(%esp)
  1086b9:	e8 f2 00 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(251, intr_251, 0x8, 0x8e);
  1086be:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1086c5:	00 
  1086c6:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1086cd:	00 
  1086ce:	c7 44 24 08 72 be 10 	movl   $0x10be72,0x8(%esp)
  1086d5:	00 
  1086d6:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
  1086dd:	00 
  1086de:	8b 45 08             	mov    0x8(%ebp),%eax
  1086e1:	89 04 24             	mov    %eax,(%esp)
  1086e4:	e8 c7 00 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(252, intr_252, 0x8, 0x8e);
  1086e9:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  1086f0:	00 
  1086f1:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  1086f8:	00 
  1086f9:	c7 44 24 08 7b be 10 	movl   $0x10be7b,0x8(%esp)
  108700:	00 
  108701:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
  108708:	00 
  108709:	8b 45 08             	mov    0x8(%ebp),%eax
  10870c:	89 04 24             	mov    %eax,(%esp)
  10870f:	e8 9c 00 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(253, intr_253, 0x8, 0x8e);
  108714:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  10871b:	00 
  10871c:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  108723:	00 
  108724:	c7 44 24 08 84 be 10 	movl   $0x10be84,0x8(%esp)
  10872b:	00 
  10872c:	c7 44 24 04 fd 00 00 	movl   $0xfd,0x4(%esp)
  108733:	00 
  108734:	8b 45 08             	mov    0x8(%ebp),%eax
  108737:	89 04 24             	mov    %eax,(%esp)
  10873a:	e8 71 00 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
	this->set_entry(254, intr_254, 0x8, 0x8e);
  10873f:	c7 44 24 10 8e 00 00 	movl   $0x8e,0x10(%esp)
  108746:	00 
  108747:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  10874e:	00 
  10874f:	c7 44 24 08 8d be 10 	movl   $0x10be8d,0x8(%esp)
  108756:	00 
  108757:	c7 44 24 04 fe 00 00 	movl   $0xfe,0x4(%esp)
  10875e:	00 
  10875f:	8b 45 08             	mov    0x8(%ebp),%eax
  108762:	89 04 24             	mov    %eax,(%esp)
  108765:	e8 46 00 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>

	this->set_entry(255, intr_255, 0x8, 0xee);
  10876a:	c7 44 24 10 ee 00 00 	movl   $0xee,0x10(%esp)
  108771:	00 
  108772:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
  108779:	00 
  10877a:	c7 44 24 08 96 be 10 	movl   $0x10be96,0x8(%esp)
  108781:	00 
  108782:	c7 44 24 04 ff 00 00 	movl   $0xff,0x4(%esp)
  108789:	00 
  10878a:	8b 45 08             	mov    0x8(%ebp),%eax
  10878d:	89 04 24             	mov    %eax,(%esp)
  108790:	e8 1b 00 00 00       	call   1087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>
}
  108795:	c9                   	leave  
  108796:	c3                   	ret    
  108797:	90                   	nop

00108798 <_ZN3hal3x863idt4loadEv>:

/*
Loads th IDT
*/
void idt::load(  )
{
  108798:	55                   	push   %ebp
  108799:	89 e5                	mov    %esp,%ebp
  10879b:	83 ec 10             	sub    $0x10,%esp
	{
    		uint16_t limit;
    		void 	 *pointer;
	} PACKED idtp;

	idtp.limit 	= idt::descriptor_count * 8 - 1;
  10879e:	66 c7 45 fa ff 07    	movw   $0x7ff,-0x6(%ebp)
    	idtp.pointer 	= idt::descriptor_table;
  1087a4:	8b 45 08             	mov    0x8(%ebp),%eax
  1087a7:	89 45 fc             	mov    %eax,-0x4(%ebp)

	asm volatile("lidt %0" : : "m" (idtp));	
  1087aa:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
  1087ae:	c9                   	leave  
  1087af:	c3                   	ret    

001087b0 <_ZN3hal3x863idt9set_entryEjPFvvEjj>:
/*
Sets an IDT-entry
*/

void idt::set_entry( size_t index, void (*fn)(), uint32_t selector, uint32_t flags )
{
  1087b0:	55                   	push   %ebp
  1087b1:	89 e5                	mov    %esp,%ebp
  1087b3:	57                   	push   %edi
  1087b4:	56                   	push   %esi
  1087b5:	53                   	push   %ebx
  1087b6:	83 ec 34             	sub    $0x34,%esp
	uintptr_t handler = (uintptr_t)fn;
  1087b9:	8b 45 10             	mov    0x10(%ebp),%eax
  1087bc:	89 45 ec             	mov    %eax,-0x14(%ebp)

	idt::descriptor_table[index] = handler & 0xffffLL;
  1087bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
  1087c2:	ba 00 00 00 00       	mov    $0x0,%edx
  1087c7:	0f b7 c8             	movzwl %ax,%ecx
  1087ca:	89 d0                	mov    %edx,%eax
  1087cc:	83 e0 00             	and    $0x0,%eax
  1087cf:	89 c3                	mov    %eax,%ebx
  1087d1:	8b 55 08             	mov    0x8(%ebp),%edx
  1087d4:	8b 45 0c             	mov    0xc(%ebp),%eax
  1087d7:	89 0c c2             	mov    %ecx,(%edx,%eax,8)
  1087da:	89 5c c2 04          	mov    %ebx,0x4(%edx,%eax,8)
	idt::descriptor_table[index] |= (selector & 0xffffL) << 16;
  1087de:	8b 55 08             	mov    0x8(%ebp),%edx
  1087e1:	8b 45 0c             	mov    0xc(%ebp),%eax
  1087e4:	8b 0c c2             	mov    (%edx,%eax,8),%ecx
  1087e7:	8b 5c c2 04          	mov    0x4(%edx,%eax,8),%ebx
  1087eb:	8b 45 14             	mov    0x14(%ebp),%eax
  1087ee:	c1 e0 10             	shl    $0x10,%eax
  1087f1:	89 45 d8             	mov    %eax,-0x28(%ebp)
  1087f4:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
  1087fb:	89 c8                	mov    %ecx,%eax
  1087fd:	0b 45 d8             	or     -0x28(%ebp),%eax
  108800:	89 c6                	mov    %eax,%esi
  108802:	89 d8                	mov    %ebx,%eax
  108804:	0b 45 dc             	or     -0x24(%ebp),%eax
  108807:	89 c7                	mov    %eax,%edi
  108809:	8b 55 08             	mov    0x8(%ebp),%edx
  10880c:	8b 45 0c             	mov    0xc(%ebp),%eax
  10880f:	89 34 c2             	mov    %esi,(%edx,%eax,8)
  108812:	89 7c c2 04          	mov    %edi,0x4(%edx,%eax,8)
	idt::descriptor_table[index] |= (flags & 0xffLL) << 40;
  108816:	8b 55 08             	mov    0x8(%ebp),%edx
  108819:	8b 45 0c             	mov    0xc(%ebp),%eax
  10881c:	8b 0c c2             	mov    (%edx,%eax,8),%ecx
  10881f:	8b 5c c2 04          	mov    0x4(%edx,%eax,8),%ebx
  108823:	8b 45 18             	mov    0x18(%ebp),%eax
  108826:	ba 00 00 00 00       	mov    $0x0,%edx
  10882b:	0f b6 f0             	movzbl %al,%esi
  10882e:	89 75 d0             	mov    %esi,-0x30(%ebp)
  108831:	89 d0                	mov    %edx,%eax
  108833:	83 e0 00             	and    $0x0,%eax
  108836:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  108839:	8b 45 d0             	mov    -0x30(%ebp),%eax
  10883c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  10883f:	89 c2                	mov    %eax,%edx
  108841:	b8 00 00 00 00       	mov    $0x0,%eax
  108846:	c1 e2 08             	shl    $0x8,%edx
  108849:	89 cf                	mov    %ecx,%edi
  10884b:	09 c7                	or     %eax,%edi
  10884d:	89 7d c8             	mov    %edi,-0x38(%ebp)
  108850:	89 df                	mov    %ebx,%edi
  108852:	09 d7                	or     %edx,%edi
  108854:	89 7d cc             	mov    %edi,-0x34(%ebp)
  108857:	8b 45 08             	mov    0x8(%ebp),%eax
  10885a:	8b 55 0c             	mov    0xc(%ebp),%edx
  10885d:	8b 5d c8             	mov    -0x38(%ebp),%ebx
  108860:	8b 75 cc             	mov    -0x34(%ebp),%esi
  108863:	89 1c d0             	mov    %ebx,(%eax,%edx,8)
  108866:	89 74 d0 04          	mov    %esi,0x4(%eax,%edx,8)
	idt::descriptor_table[index] |= ( (handler >> 16) & 0xffffLL ) << 48;
  10886a:	8b 45 08             	mov    0x8(%ebp),%eax
  10886d:	8b 55 0c             	mov    0xc(%ebp),%edx
  108870:	8b 0c d0             	mov    (%eax,%edx,8),%ecx
  108873:	8b 5c d0 04          	mov    0x4(%eax,%edx,8),%ebx
  108877:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10887a:	c1 e8 10             	shr    $0x10,%eax
  10887d:	ba 00 00 00 00       	mov    $0x0,%edx
  108882:	89 c2                	mov    %eax,%edx
  108884:	b8 00 00 00 00       	mov    $0x0,%eax
  108889:	c1 e2 10             	shl    $0x10,%edx
  10888c:	89 cf                	mov    %ecx,%edi
  10888e:	09 c7                	or     %eax,%edi
  108890:	89 7d c0             	mov    %edi,-0x40(%ebp)
  108893:	09 d3                	or     %edx,%ebx
  108895:	89 5d c4             	mov    %ebx,-0x3c(%ebp)
  108898:	8b 45 08             	mov    0x8(%ebp),%eax
  10889b:	8b 55 0c             	mov    0xc(%ebp),%edx
  10889e:	8b 5d c0             	mov    -0x40(%ebp),%ebx
  1088a1:	8b 75 c4             	mov    -0x3c(%ebp),%esi
  1088a4:	89 1c d0             	mov    %ebx,(%eax,%edx,8)
  1088a7:	89 74 d0 04          	mov    %esi,0x4(%eax,%edx,8)
}
  1088ab:	83 c4 34             	add    $0x34,%esp
  1088ae:	5b                   	pop    %ebx
  1088af:	5e                   	pop    %esi
  1088b0:	5f                   	pop    %edi
  1088b1:	5d                   	pop    %ebp
  1088b2:	c3                   	ret    
  1088b3:	90                   	nop

001088b4 <_ZN3hal3x863pmmC1Ev>:
#include "include/pmm.hpp"

using namespace hal::x86;

pmm::pmm(  )
  1088b4:	55                   	push   %ebp
  1088b5:	89 e5                	mov    %esp,%ebp
  1088b7:	8b 45 08             	mov    0x8(%ebp),%eax
  1088ba:	c7 80 04 00 02 00 00 	movl   $0x0,0x20004(%eax)
  1088c1:	00 00 00 
  1088c4:	8b 45 08             	mov    0x8(%ebp),%eax
  1088c7:	c7 80 08 00 02 00 00 	movl   $0x0,0x20008(%eax)
  1088ce:	00 00 00 
{

}
  1088d1:	5d                   	pop    %ebp
  1088d2:	c3                   	ret    
  1088d3:	90                   	nop

001088d4 <_ZN3hal3x863pmm4initEPN9multiboot4infoE>:

pmm::error pmm::init( multiboot::info *mbs )
{
  1088d4:	55                   	push   %ebp
  1088d5:	89 e5                	mov    %esp,%ebp
  1088d7:	56                   	push   %esi
  1088d8:	53                   	push   %ebx
  1088d9:	83 ec 30             	sub    $0x30,%esp
	if(!mbs)
  1088dc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  1088e0:	75 0a                	jne    1088ec <_ZN3hal3x863pmm4initEPN9multiboot4infoE+0x18>
	{
		return pmm::error::no_memory_map;
  1088e2:	b8 02 00 00 00       	mov    $0x2,%eax
  1088e7:	e9 a6 01 00 00       	jmp    108a92 <_ZN3hal3x863pmm4initEPN9multiboot4infoE+0x1be>
	}

	multiboot::mmap *mmap 		= (multiboot::mmap*)mbs->mmap_addr;
  1088ec:	8b 45 0c             	mov    0xc(%ebp),%eax
  1088ef:	8b 40 30             	mov    0x30(%eax),%eax
  1088f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	multiboot::mmap *mmap_end 	= (multiboot::mmap*)mbs->mmap_addr + mbs->mmap_length;
  1088f5:	8b 45 0c             	mov    0xc(%ebp),%eax
  1088f8:	8b 50 2c             	mov    0x2c(%eax),%edx
  1088fb:	89 d0                	mov    %edx,%eax
  1088fd:	01 c0                	add    %eax,%eax
  1088ff:	01 d0                	add    %edx,%eax
  108901:	c1 e0 03             	shl    $0x3,%eax
  108904:	89 c2                	mov    %eax,%edx
  108906:	8b 45 0c             	mov    0xc(%ebp),%eax
  108909:	8b 40 30             	mov    0x30(%eax),%eax
  10890c:	01 d0                	add    %edx,%eax
  10890e:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	if(!mmap)
  108911:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
  108915:	75 0a                	jne    108921 <_ZN3hal3x863pmm4initEPN9multiboot4infoE+0x4d>
	{
		return pmm::error::no_memory_map;
  108917:	b8 02 00 00 00       	mov    $0x2,%eax
  10891c:	e9 71 01 00 00       	jmp    108a92 <_ZN3hal3x863pmm4initEPN9multiboot4infoE+0x1be>
	}

	for(size_t x = 0; x < pmm::bitmap_size; x++)
  108921:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  108928:	eb 12                	jmp    10893c <_ZN3hal3x863pmm4initEPN9multiboot4infoE+0x68>
	{
		this->bitmap[x] = 0x00000000;
  10892a:	8b 45 08             	mov    0x8(%ebp),%eax
  10892d:	8b 55 f0             	mov    -0x10(%ebp),%edx
  108930:	c7 44 90 04 00 00 00 	movl   $0x0,0x4(%eax,%edx,4)
  108937:	00 
	if(!mmap)
	{
		return pmm::error::no_memory_map;
	}

	for(size_t x = 0; x < pmm::bitmap_size; x++)
  108938:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  10893c:	81 7d f0 ff 7f 00 00 	cmpl   $0x7fff,-0x10(%ebp)
  108943:	76 e5                	jbe    10892a <_ZN3hal3x863pmm4initEPN9multiboot4infoE+0x56>
	{
		this->bitmap[x] = 0x00000000;
	} 


	for(; mmap < mmap_end; mmap++)
  108945:	eb 57                	jmp    10899e <_ZN3hal3x863pmm4initEPN9multiboot4infoE+0xca>
	{
		if(mmap->type == 1)
  108947:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10894a:	8b 40 14             	mov    0x14(%eax),%eax
  10894d:	83 f8 01             	cmp    $0x1,%eax
  108950:	75 48                	jne    10899a <_ZN3hal3x863pmm4initEPN9multiboot4infoE+0xc6>
		{
			uintptr_t addr 		= mmap->base;
  108952:	8b 45 f4             	mov    -0xc(%ebp),%eax
  108955:	8b 50 08             	mov    0x8(%eax),%edx
  108958:	8b 40 04             	mov    0x4(%eax),%eax
  10895b:	89 45 ec             	mov    %eax,-0x14(%ebp)
			uintptr_t addr_end 	= mmap->base + mmap->length;
  10895e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  108961:	8b 50 08             	mov    0x8(%eax),%edx
  108964:	8b 40 04             	mov    0x4(%eax),%eax
  108967:	89 c1                	mov    %eax,%ecx
  108969:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10896c:	8b 50 10             	mov    0x10(%eax),%edx
  10896f:	8b 40 0c             	mov    0xc(%eax),%eax
  108972:	01 c8                	add    %ecx,%eax
  108974:	89 45 e0             	mov    %eax,-0x20(%ebp)

			for(; addr < addr_end; addr += memory::page_size_byte)
  108977:	eb 19                	jmp    108992 <_ZN3hal3x863pmm4initEPN9multiboot4infoE+0xbe>
			{
				this->free(addr);		
  108979:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10897c:	89 44 24 04          	mov    %eax,0x4(%esp)
  108980:	8b 45 08             	mov    0x8(%ebp),%eax
  108983:	89 04 24             	mov    %eax,(%esp)
  108986:	e8 f3 04 00 00       	call   108e7e <_ZN3hal3x863pmm4freeEj>
		if(mmap->type == 1)
		{
			uintptr_t addr 		= mmap->base;
			uintptr_t addr_end 	= mmap->base + mmap->length;

			for(; addr < addr_end; addr += memory::page_size_byte)
  10898b:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
  108992:	8b 45 ec             	mov    -0x14(%ebp),%eax
  108995:	3b 45 e0             	cmp    -0x20(%ebp),%eax
  108998:	72 df                	jb     108979 <_ZN3hal3x863pmm4initEPN9multiboot4infoE+0xa5>
	{
		this->bitmap[x] = 0x00000000;
	} 


	for(; mmap < mmap_end; mmap++)
  10899a:	83 45 f4 18          	addl   $0x18,-0xc(%ebp)
  10899e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  1089a1:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
  1089a4:	72 a1                	jb     108947 <_ZN3hal3x863pmm4initEPN9multiboot4infoE+0x73>
				this->free(addr);		
			}
		}
	}

	this->total_mem = (mbs->mem_lower + mbs->mem_upper) * 1024;
  1089a6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1089a9:	8b 50 04             	mov    0x4(%eax),%edx
  1089ac:	8b 45 0c             	mov    0xc(%ebp),%eax
  1089af:	8b 40 08             	mov    0x8(%eax),%eax
  1089b2:	01 d0                	add    %edx,%eax
  1089b4:	c1 e0 0a             	shl    $0xa,%eax
  1089b7:	89 c2                	mov    %eax,%edx
  1089b9:	8b 45 08             	mov    0x8(%ebp),%eax
  1089bc:	89 10                	mov    %edx,(%eax)

	if(!memory::kernel_base || !memory::kernel_limit)
  1089be:	a1 ac ee 10 00       	mov    0x10eeac,%eax
  1089c3:	85 c0                	test   %eax,%eax
  1089c5:	74 09                	je     1089d0 <_ZN3hal3x863pmm4initEPN9multiboot4infoE+0xfc>
  1089c7:	a1 b0 ee 10 00       	mov    0x10eeb0,%eax
  1089cc:	85 c0                	test   %eax,%eax
  1089ce:	75 0a                	jne    1089da <_ZN3hal3x863pmm4initEPN9multiboot4infoE+0x106>
	{
		return pmm::error::no_kernel_addr;
  1089d0:	b8 01 00 00 00       	mov    $0x1,%eax
  1089d5:	e9 b8 00 00 00       	jmp    108a92 <_ZN3hal3x863pmm4initEPN9multiboot4infoE+0x1be>
	}

	for(uintptr_t addr = memory::kernel_base; addr < memory::kernel_limit; addr += memory::page_size_byte)
  1089da:	a1 ac ee 10 00       	mov    0x10eeac,%eax
  1089df:	89 45 e8             	mov    %eax,-0x18(%ebp)
  1089e2:	eb 33                	jmp    108a17 <_ZN3hal3x863pmm4initEPN9multiboot4infoE+0x143>
	{
		clear_bit(this->bitmap[bitmap_px(addr)], bitmap_py(addr));
  1089e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1089e7:	c1 e8 11             	shr    $0x11,%eax
  1089ea:	8b 55 08             	mov    0x8(%ebp),%edx
  1089ed:	8b 5c 82 04          	mov    0x4(%edx,%eax,4),%ebx
  1089f1:	8b 55 e8             	mov    -0x18(%ebp),%edx
  1089f4:	c1 ea 0c             	shr    $0xc,%edx
  1089f7:	83 e2 1f             	and    $0x1f,%edx
  1089fa:	be 01 00 00 00       	mov    $0x1,%esi
  1089ff:	89 d1                	mov    %edx,%ecx
  108a01:	d3 e6                	shl    %cl,%esi
  108a03:	89 f2                	mov    %esi,%edx
  108a05:	31 d3                	xor    %edx,%ebx
  108a07:	89 d9                	mov    %ebx,%ecx
  108a09:	8b 55 08             	mov    0x8(%ebp),%edx
  108a0c:	89 4c 82 04          	mov    %ecx,0x4(%edx,%eax,4)
	if(!memory::kernel_base || !memory::kernel_limit)
	{
		return pmm::error::no_kernel_addr;
	}

	for(uintptr_t addr = memory::kernel_base; addr < memory::kernel_limit; addr += memory::page_size_byte)
  108a10:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
  108a17:	a1 b0 ee 10 00       	mov    0x10eeb0,%eax
  108a1c:	39 45 e8             	cmp    %eax,-0x18(%ebp)
  108a1f:	72 c3                	jb     1089e4 <_ZN3hal3x863pmm4initEPN9multiboot4infoE+0x110>
	{
		clear_bit(this->bitmap[bitmap_px(addr)], bitmap_py(addr));
	}

	clear_bit(this->bitmap[bitmap_px(0x0)], bitmap_py(0x0));
  108a21:	8b 45 08             	mov    0x8(%ebp),%eax
  108a24:	8b 40 04             	mov    0x4(%eax),%eax
  108a27:	83 f0 01             	xor    $0x1,%eax
  108a2a:	89 c2                	mov    %eax,%edx
  108a2c:	8b 45 08             	mov    0x8(%ebp),%eax
  108a2f:	89 50 04             	mov    %edx,0x4(%eax)
	clear_bit(this->bitmap[bitmap_px((uintptr_t)this->bitmap)], bitmap_py((uintptr_t)this->bitmap));
  108a32:	8b 45 08             	mov    0x8(%ebp),%eax
  108a35:	83 c0 04             	add    $0x4,%eax
  108a38:	c1 e8 11             	shr    $0x11,%eax
  108a3b:	8b 55 08             	mov    0x8(%ebp),%edx
  108a3e:	8b 5c 82 04          	mov    0x4(%edx,%eax,4),%ebx
  108a42:	8b 55 08             	mov    0x8(%ebp),%edx
  108a45:	83 c2 04             	add    $0x4,%edx
  108a48:	c1 ea 0c             	shr    $0xc,%edx
  108a4b:	83 e2 1f             	and    $0x1f,%edx
  108a4e:	be 01 00 00 00       	mov    $0x1,%esi
  108a53:	89 d1                	mov    %edx,%ecx
  108a55:	d3 e6                	shl    %cl,%esi
  108a57:	89 f2                	mov    %esi,%edx
  108a59:	31 d3                	xor    %edx,%ebx
  108a5b:	89 d9                	mov    %ebx,%ecx
  108a5d:	8b 55 08             	mov    0x8(%ebp),%edx
  108a60:	89 4c 82 04          	mov    %ecx,0x4(%edx,%eax,4)

	if(this->check(memory::isa_dma_limit))
  108a64:	c7 44 24 04 00 00 00 	movl   $0x1000000,0x4(%esp)
  108a6b:	01 
  108a6c:	8b 45 08             	mov    0x8(%ebp),%eax
  108a6f:	89 04 24             	mov    %eax,(%esp)
  108a72:	e8 7f 04 00 00       	call   108ef6 <_ZN3hal3x863pmm5checkEj>
  108a77:	84 c0                	test   %al,%al
  108a79:	0f 95 c0             	setne  %al
  108a7c:	84 c0                	test   %al,%al
  108a7e:	74 0d                	je     108a8d <_ZN3hal3x863pmm4initEPN9multiboot4infoE+0x1b9>
	{
		this->speedup_x = bitmap_px(memory::isa_dma_limit);
  108a80:	8b 45 08             	mov    0x8(%ebp),%eax
  108a83:	c7 80 08 00 02 00 80 	movl   $0x80,0x20008(%eax)
  108a8a:	00 00 00 
	}

	return pmm::error::init_ok;
  108a8d:	b8 00 00 00 00       	mov    $0x0,%eax
}
  108a92:	83 c4 30             	add    $0x30,%esp
  108a95:	5b                   	pop    %ebx
  108a96:	5e                   	pop    %esi
  108a97:	5d                   	pop    %ebp
  108a98:	c3                   	ret    
  108a99:	90                   	nop

00108a9a <_ZN3hal3x863pmm5allocEv>:

uintptr_t pmm::alloc(  )
{
  108a9a:	55                   	push   %ebp
  108a9b:	89 e5                	mov    %esp,%ebp
  108a9d:	56                   	push   %esi
  108a9e:	53                   	push   %ebx
  108a9f:	83 ec 10             	sub    $0x10,%esp
	if(this->fast_access)
  108aa2:	8b 45 08             	mov    0x8(%ebp),%eax
  108aa5:	8b 80 04 00 02 00    	mov    0x20004(%eax),%eax
  108aab:	85 c0                	test   %eax,%eax
  108aad:	74 4d                	je     108afc <_ZN3hal3x863pmm5allocEv+0x62>
	{
		uintptr_t addr = fast_access;
  108aaf:	8b 45 08             	mov    0x8(%ebp),%eax
  108ab2:	8b 80 04 00 02 00    	mov    0x20004(%eax),%eax
  108ab8:	89 45 ec             	mov    %eax,-0x14(%ebp)

		clear_bit(this->bitmap[bitmap_px(addr)], bitmap_py(addr));
  108abb:	8b 45 ec             	mov    -0x14(%ebp),%eax
  108abe:	c1 e8 11             	shr    $0x11,%eax
  108ac1:	8b 55 08             	mov    0x8(%ebp),%edx
  108ac4:	8b 5c 82 04          	mov    0x4(%edx,%eax,4),%ebx
  108ac8:	8b 55 ec             	mov    -0x14(%ebp),%edx
  108acb:	c1 ea 0c             	shr    $0xc,%edx
  108ace:	83 e2 1f             	and    $0x1f,%edx
  108ad1:	be 01 00 00 00       	mov    $0x1,%esi
  108ad6:	89 d1                	mov    %edx,%ecx
  108ad8:	d3 e6                	shl    %cl,%esi
  108ada:	89 f2                	mov    %esi,%edx
  108adc:	31 d3                	xor    %edx,%ebx
  108ade:	89 d9                	mov    %ebx,%ecx
  108ae0:	8b 55 08             	mov    0x8(%ebp),%edx
  108ae3:	89 4c 82 04          	mov    %ecx,0x4(%edx,%eax,4)

		fast_access = 0x0;
  108ae7:	8b 45 08             	mov    0x8(%ebp),%eax
  108aea:	c7 80 04 00 02 00 00 	movl   $0x0,0x20004(%eax)
  108af1:	00 00 00 

		return addr;
  108af4:	8b 45 ec             	mov    -0x14(%ebp),%eax
  108af7:	e9 c7 00 00 00       	jmp    108bc3 <_ZN3hal3x863pmm5allocEv+0x129>
	}

	if(this->speedup_x >= pmm::bitmap_size)
  108afc:	8b 45 08             	mov    0x8(%ebp),%eax
  108aff:	8b 80 08 00 02 00    	mov    0x20008(%eax),%eax
  108b05:	3d ff 7f 00 00       	cmp    $0x7fff,%eax
  108b0a:	76 0d                	jbe    108b19 <_ZN3hal3x863pmm5allocEv+0x7f>
	{
		this->speedup_x = 0;
  108b0c:	8b 45 08             	mov    0x8(%ebp),%eax
  108b0f:	c7 80 08 00 02 00 00 	movl   $0x0,0x20008(%eax)
  108b16:	00 00 00 
	}

	for(size_t x = this->speedup_x; x < pmm::bitmap_size; x++)
  108b19:	8b 45 08             	mov    0x8(%ebp),%eax
  108b1c:	8b 80 08 00 02 00    	mov    0x20008(%eax),%eax
  108b22:	89 45 f4             	mov    %eax,-0xc(%ebp)
  108b25:	e9 87 00 00 00       	jmp    108bb1 <_ZN3hal3x863pmm5allocEv+0x117>
	{
		if(this->bitmap[x])
  108b2a:	8b 45 08             	mov    0x8(%ebp),%eax
  108b2d:	8b 55 f4             	mov    -0xc(%ebp),%edx
  108b30:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
  108b34:	85 c0                	test   %eax,%eax
  108b36:	74 75                	je     108bad <_ZN3hal3x863pmm5allocEv+0x113>
		{
			this->speedup_x = x;
  108b38:	8b 45 08             	mov    0x8(%ebp),%eax
  108b3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
  108b3e:	89 90 08 00 02 00    	mov    %edx,0x20008(%eax)

			for(size_t y = 0; y < 32; y++)
  108b44:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  108b4b:	eb 5a                	jmp    108ba7 <_ZN3hal3x863pmm5allocEv+0x10d>
			{
				if(this->bitmap[x] & (1 << y))
  108b4d:	8b 45 08             	mov    0x8(%ebp),%eax
  108b50:	8b 55 f4             	mov    -0xc(%ebp),%edx
  108b53:	8b 54 90 04          	mov    0x4(%eax,%edx,4),%edx
  108b57:	8b 45 f0             	mov    -0x10(%ebp),%eax
  108b5a:	bb 01 00 00 00       	mov    $0x1,%ebx
  108b5f:	89 c1                	mov    %eax,%ecx
  108b61:	d3 e3                	shl    %cl,%ebx
  108b63:	89 d8                	mov    %ebx,%eax
  108b65:	21 d0                	and    %edx,%eax
  108b67:	85 c0                	test   %eax,%eax
  108b69:	74 38                	je     108ba3 <_ZN3hal3x863pmm5allocEv+0x109>
				{
					clear_bit(this->bitmap[x], y);
  108b6b:	8b 45 08             	mov    0x8(%ebp),%eax
  108b6e:	8b 55 f4             	mov    -0xc(%ebp),%edx
  108b71:	8b 54 90 04          	mov    0x4(%eax,%edx,4),%edx
  108b75:	8b 45 f0             	mov    -0x10(%ebp),%eax
  108b78:	bb 01 00 00 00       	mov    $0x1,%ebx
  108b7d:	89 c1                	mov    %eax,%ecx
  108b7f:	d3 e3                	shl    %cl,%ebx
  108b81:	89 d8                	mov    %ebx,%eax
  108b83:	89 d1                	mov    %edx,%ecx
  108b85:	31 c1                	xor    %eax,%ecx
  108b87:	8b 45 08             	mov    0x8(%ebp),%eax
  108b8a:	8b 55 f4             	mov    -0xc(%ebp),%edx
  108b8d:	89 4c 90 04          	mov    %ecx,0x4(%eax,%edx,4)

					return addr(x, y);
  108b91:	8b 45 f4             	mov    -0xc(%ebp),%eax
  108b94:	c1 e0 05             	shl    $0x5,%eax
  108b97:	89 c2                	mov    %eax,%edx
  108b99:	8b 45 f0             	mov    -0x10(%ebp),%eax
  108b9c:	01 d0                	add    %edx,%eax
  108b9e:	c1 e0 0c             	shl    $0xc,%eax
  108ba1:	eb 20                	jmp    108bc3 <_ZN3hal3x863pmm5allocEv+0x129>
	{
		if(this->bitmap[x])
		{
			this->speedup_x = x;

			for(size_t y = 0; y < 32; y++)
  108ba3:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  108ba7:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
  108bab:	76 a0                	jbe    108b4d <_ZN3hal3x863pmm5allocEv+0xb3>
	if(this->speedup_x >= pmm::bitmap_size)
	{
		this->speedup_x = 0;
	}

	for(size_t x = this->speedup_x; x < pmm::bitmap_size; x++)
  108bad:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  108bb1:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
  108bb8:	0f 86 6c ff ff ff    	jbe    108b2a <_ZN3hal3x863pmm5allocEv+0x90>
				}
			}
		}
	}

	return 0x0;
  108bbe:	b8 00 00 00 00       	mov    $0x0,%eax
}
  108bc3:	83 c4 10             	add    $0x10,%esp
  108bc6:	5b                   	pop    %ebx
  108bc7:	5e                   	pop    %esi
  108bc8:	5d                   	pop    %ebp
  108bc9:	c3                   	ret    

00108bca <_ZN3hal3x863pmm5allocEj>:

uintptr_t pmm::alloc( size_t n )
{
  108bca:	55                   	push   %ebp
  108bcb:	89 e5                	mov    %esp,%ebp
  108bcd:	56                   	push   %esi
  108bce:	53                   	push   %ebx
  108bcf:	83 ec 20             	sub    $0x20,%esp
	size_t counter = 0;
  108bd2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if(this->speedup_x >= pmm::bitmap_size)
  108bd9:	8b 45 08             	mov    0x8(%ebp),%eax
  108bdc:	8b 80 08 00 02 00    	mov    0x20008(%eax),%eax
  108be2:	3d ff 7f 00 00       	cmp    $0x7fff,%eax
  108be7:	76 0d                	jbe    108bf6 <_ZN3hal3x863pmm5allocEj+0x2c>
	{
		this->speedup_x = 0;
  108be9:	8b 45 08             	mov    0x8(%ebp),%eax
  108bec:	c7 80 08 00 02 00 00 	movl   $0x0,0x20008(%eax)
  108bf3:	00 00 00 
	}

	for(size_t x = this->speedup_x; x < pmm::bitmap_size && counter < n; x++)
  108bf6:	8b 45 08             	mov    0x8(%ebp),%eax
  108bf9:	8b 80 08 00 02 00    	mov    0x20008(%eax),%eax
  108bff:	89 45 f0             	mov    %eax,-0x10(%ebp)
  108c02:	e9 ee 00 00 00       	jmp    108cf5 <_ZN3hal3x863pmm5allocEj+0x12b>
	{
		if(this->bitmap[x])
  108c07:	8b 45 08             	mov    0x8(%ebp),%eax
  108c0a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  108c0d:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
  108c11:	85 c0                	test   %eax,%eax
  108c13:	0f 84 d8 00 00 00    	je     108cf1 <_ZN3hal3x863pmm5allocEj+0x127>
		{
			this->speedup_x = x;
  108c19:	8b 45 08             	mov    0x8(%ebp),%eax
  108c1c:	8b 55 f0             	mov    -0x10(%ebp),%edx
  108c1f:	89 90 08 00 02 00    	mov    %edx,0x20008(%eax)

			for(size_t y = 0; y < 32 && counter < n; y++)
  108c25:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  108c2c:	e9 ae 00 00 00       	jmp    108cdf <_ZN3hal3x863pmm5allocEj+0x115>
			{
				if(this->bitmap[x] & (1 << y))
  108c31:	8b 45 08             	mov    0x8(%ebp),%eax
  108c34:	8b 55 f0             	mov    -0x10(%ebp),%edx
  108c37:	8b 54 90 04          	mov    0x4(%eax,%edx,4),%edx
  108c3b:	8b 45 ec             	mov    -0x14(%ebp),%eax
  108c3e:	bb 01 00 00 00       	mov    $0x1,%ebx
  108c43:	89 c1                	mov    %eax,%ecx
  108c45:	d3 e3                	shl    %cl,%ebx
  108c47:	89 d8                	mov    %ebx,%eax
  108c49:	21 d0                	and    %edx,%eax
  108c4b:	85 c0                	test   %eax,%eax
  108c4d:	0f 84 81 00 00 00    	je     108cd4 <_ZN3hal3x863pmm5allocEj+0x10a>
				{
					counter++;
  108c53:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)

					if(counter >= n)
  108c57:	8b 45 f4             	mov    -0xc(%ebp),%eax
  108c5a:	3b 45 0c             	cmp    0xc(%ebp),%eax
  108c5d:	72 73                	jb     108cd2 <_ZN3hal3x863pmm5allocEj+0x108>
					{
						uintptr_t addr = addr(x, y) - (n - 1) * memory::page_size_byte;
  108c5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
  108c62:	c1 e0 05             	shl    $0x5,%eax
  108c65:	89 c2                	mov    %eax,%edx
  108c67:	8b 45 ec             	mov    -0x14(%ebp),%eax
  108c6a:	01 d0                	add    %edx,%eax
  108c6c:	2b 45 0c             	sub    0xc(%ebp),%eax
  108c6f:	83 c0 01             	add    $0x1,%eax
  108c72:	c1 e0 0c             	shl    $0xc,%eax
  108c75:	89 45 e4             	mov    %eax,-0x1c(%ebp)

						for(size_t i = 0; i < n; i++)
  108c78:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  108c7f:	eb 44                	jmp    108cc5 <_ZN3hal3x863pmm5allocEj+0xfb>
						{
							clear_bit(this->bitmap[bitmap_px((addr + i * memory::page_size_byte))], bitmap_py((addr + i * memory::page_size_byte)));
  108c81:	8b 45 e8             	mov    -0x18(%ebp),%eax
  108c84:	c1 e0 0c             	shl    $0xc,%eax
  108c87:	89 c2                	mov    %eax,%edx
  108c89:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  108c8c:	01 d0                	add    %edx,%eax
  108c8e:	c1 e8 11             	shr    $0x11,%eax
  108c91:	8b 55 08             	mov    0x8(%ebp),%edx
  108c94:	8b 5c 82 04          	mov    0x4(%edx,%eax,4),%ebx
  108c98:	8b 55 e8             	mov    -0x18(%ebp),%edx
  108c9b:	89 d1                	mov    %edx,%ecx
  108c9d:	c1 e1 0c             	shl    $0xc,%ecx
  108ca0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  108ca3:	01 ca                	add    %ecx,%edx
  108ca5:	c1 ea 0c             	shr    $0xc,%edx
  108ca8:	83 e2 1f             	and    $0x1f,%edx
  108cab:	be 01 00 00 00       	mov    $0x1,%esi
  108cb0:	89 d1                	mov    %edx,%ecx
  108cb2:	d3 e6                	shl    %cl,%esi
  108cb4:	89 f2                	mov    %esi,%edx
  108cb6:	31 d3                	xor    %edx,%ebx
  108cb8:	89 d9                	mov    %ebx,%ecx
  108cba:	8b 55 08             	mov    0x8(%ebp),%edx
  108cbd:	89 4c 82 04          	mov    %ecx,0x4(%edx,%eax,4)

					if(counter >= n)
					{
						uintptr_t addr = addr(x, y) - (n - 1) * memory::page_size_byte;

						for(size_t i = 0; i < n; i++)
  108cc1:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
  108cc5:	8b 45 e8             	mov    -0x18(%ebp),%eax
  108cc8:	3b 45 0c             	cmp    0xc(%ebp),%eax
  108ccb:	72 b4                	jb     108c81 <_ZN3hal3x863pmm5allocEj+0xb7>
						{
							clear_bit(this->bitmap[bitmap_px((addr + i * memory::page_size_byte))], bitmap_py((addr + i * memory::page_size_byte)));
						}

						return addr;
  108ccd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  108cd0:	eb 3d                	jmp    108d0f <_ZN3hal3x863pmm5allocEj+0x145>
  108cd2:	eb 07                	jmp    108cdb <_ZN3hal3x863pmm5allocEj+0x111>
					}
				}
				else
				{
					counter = 0;
  108cd4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	{
		if(this->bitmap[x])
		{
			this->speedup_x = x;

			for(size_t y = 0; y < 32 && counter < n; y++)
  108cdb:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
  108cdf:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
  108ce3:	77 0c                	ja     108cf1 <_ZN3hal3x863pmm5allocEj+0x127>
  108ce5:	8b 45 f4             	mov    -0xc(%ebp),%eax
  108ce8:	3b 45 0c             	cmp    0xc(%ebp),%eax
  108ceb:	0f 82 40 ff ff ff    	jb     108c31 <_ZN3hal3x863pmm5allocEj+0x67>
	if(this->speedup_x >= pmm::bitmap_size)
	{
		this->speedup_x = 0;
	}

	for(size_t x = this->speedup_x; x < pmm::bitmap_size && counter < n; x++)
  108cf1:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  108cf5:	81 7d f0 ff 7f 00 00 	cmpl   $0x7fff,-0x10(%ebp)
  108cfc:	77 0c                	ja     108d0a <_ZN3hal3x863pmm5allocEj+0x140>
  108cfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
  108d01:	3b 45 0c             	cmp    0xc(%ebp),%eax
  108d04:	0f 82 fd fe ff ff    	jb     108c07 <_ZN3hal3x863pmm5allocEj+0x3d>

			}
		}
	}

	return 0x0;
  108d0a:	b8 00 00 00 00       	mov    $0x0,%eax
}
  108d0f:	83 c4 20             	add    $0x20,%esp
  108d12:	5b                   	pop    %ebx
  108d13:	5e                   	pop    %esi
  108d14:	5d                   	pop    %ebp
  108d15:	c3                   	ret    

00108d16 <_ZN3hal3x863pmm5allocEjj>:

uintptr_t pmm::alloc( size_t n, uint32_t flags )
{
  108d16:	55                   	push   %ebp
  108d17:	89 e5                	mov    %esp,%ebp
  108d19:	56                   	push   %esi
  108d1a:	53                   	push   %ebx
  108d1b:	83 ec 20             	sub    $0x20,%esp
	size_t counter = 0;
  108d1e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if(flags & pmm::isa_dma)
  108d25:	8b 45 10             	mov    0x10(%ebp),%eax
  108d28:	83 e0 01             	and    $0x1,%eax
  108d2b:	85 c0                	test   %eax,%eax
  108d2d:	0f 84 3f 01 00 00    	je     108e72 <_ZN3hal3x863pmm5allocEjj+0x15c>
	{
		for(size_t x = bitmap_px(memory::isa_dma_base); x <= bitmap_px(memory::isa_dma_limit) && counter < n; x++)
  108d33:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  108d3a:	e9 1e 01 00 00       	jmp    108e5d <_ZN3hal3x863pmm5allocEjj+0x147>
		{
			if(this->bitmap[x])
  108d3f:	8b 45 08             	mov    0x8(%ebp),%eax
  108d42:	8b 55 f0             	mov    -0x10(%ebp),%edx
  108d45:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
  108d49:	85 c0                	test   %eax,%eax
  108d4b:	0f 84 08 01 00 00    	je     108e59 <_ZN3hal3x863pmm5allocEjj+0x143>
			{
				for(size_t y = 0; y < 32 && counter < n; y++)
  108d51:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  108d58:	e9 ea 00 00 00       	jmp    108e47 <_ZN3hal3x863pmm5allocEjj+0x131>
				{
					if((x >= bitmap_px(memory::isa_dma_limit) /*&& y >= bitmap_py(memory::isa_dma_limit)*/))
  108d5d:	83 7d f0 7f          	cmpl   $0x7f,-0x10(%ebp)
  108d61:	76 0a                	jbe    108d6d <_ZN3hal3x863pmm5allocEjj+0x57>
					{
						return 0x0;
  108d63:	b8 00 00 00 00       	mov    $0x0,%eax
  108d68:	e9 0a 01 00 00       	jmp    108e77 <_ZN3hal3x863pmm5allocEjj+0x161>
					}
					else if((/*x >= bitmap_px(memory::isa_dma_base) &&*/ x <= bitmap_px(memory::isa_dma_limit)) && ((x == bitmap_px(memory::isa_dma_base) && y >= bitmap_py(memory::isa_dma_base)) || x > bitmap_px(memory::isa_dma_base)))
  108d6d:	81 7d f0 80 00 00 00 	cmpl   $0x80,-0x10(%ebp)
  108d74:	0f 87 c2 00 00 00    	ja     108e3c <_ZN3hal3x863pmm5allocEjj+0x126>
  108d7a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  108d7e:	75 06                	jne    108d86 <_ZN3hal3x863pmm5allocEjj+0x70>
  108d80:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
  108d84:	75 0a                	jne    108d90 <_ZN3hal3x863pmm5allocEjj+0x7a>
  108d86:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  108d8a:	0f 84 ac 00 00 00    	je     108e3c <_ZN3hal3x863pmm5allocEjj+0x126>
					{
						if(this->bitmap[x] & (1 << y))
  108d90:	8b 45 08             	mov    0x8(%ebp),%eax
  108d93:	8b 55 f0             	mov    -0x10(%ebp),%edx
  108d96:	8b 54 90 04          	mov    0x4(%eax,%edx,4),%edx
  108d9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
  108d9d:	bb 01 00 00 00       	mov    $0x1,%ebx
  108da2:	89 c1                	mov    %eax,%ecx
  108da4:	d3 e3                	shl    %cl,%ebx
  108da6:	89 d8                	mov    %ebx,%eax
  108da8:	21 d0                	and    %edx,%eax
  108daa:	85 c0                	test   %eax,%eax
  108dac:	0f 84 81 00 00 00    	je     108e33 <_ZN3hal3x863pmm5allocEjj+0x11d>
						{
							counter++;
  108db2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)

							if(counter >= n)
  108db6:	8b 45 f4             	mov    -0xc(%ebp),%eax
  108db9:	3b 45 0c             	cmp    0xc(%ebp),%eax
  108dbc:	72 73                	jb     108e31 <_ZN3hal3x863pmm5allocEjj+0x11b>
							{
								uintptr_t addr = addr(x, y) - (n - 1) * memory::page_size_byte;
  108dbe:	8b 45 f0             	mov    -0x10(%ebp),%eax
  108dc1:	c1 e0 05             	shl    $0x5,%eax
  108dc4:	89 c2                	mov    %eax,%edx
  108dc6:	8b 45 ec             	mov    -0x14(%ebp),%eax
  108dc9:	01 d0                	add    %edx,%eax
  108dcb:	2b 45 0c             	sub    0xc(%ebp),%eax
  108dce:	83 c0 01             	add    $0x1,%eax
  108dd1:	c1 e0 0c             	shl    $0xc,%eax
  108dd4:	89 45 e4             	mov    %eax,-0x1c(%ebp)

								for(size_t i = 0; i < n; i++)
  108dd7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  108dde:	eb 44                	jmp    108e24 <_ZN3hal3x863pmm5allocEjj+0x10e>
								{
									clear_bit(this->bitmap[bitmap_px((addr + i * memory::page_size_byte))], bitmap_py((addr + i * memory::page_size_byte)));
  108de0:	8b 45 e8             	mov    -0x18(%ebp),%eax
  108de3:	c1 e0 0c             	shl    $0xc,%eax
  108de6:	89 c2                	mov    %eax,%edx
  108de8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  108deb:	01 d0                	add    %edx,%eax
  108ded:	c1 e8 11             	shr    $0x11,%eax
  108df0:	8b 55 08             	mov    0x8(%ebp),%edx
  108df3:	8b 5c 82 04          	mov    0x4(%edx,%eax,4),%ebx
  108df7:	8b 55 e8             	mov    -0x18(%ebp),%edx
  108dfa:	89 d1                	mov    %edx,%ecx
  108dfc:	c1 e1 0c             	shl    $0xc,%ecx
  108dff:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  108e02:	01 ca                	add    %ecx,%edx
  108e04:	c1 ea 0c             	shr    $0xc,%edx
  108e07:	83 e2 1f             	and    $0x1f,%edx
  108e0a:	be 01 00 00 00       	mov    $0x1,%esi
  108e0f:	89 d1                	mov    %edx,%ecx
  108e11:	d3 e6                	shl    %cl,%esi
  108e13:	89 f2                	mov    %esi,%edx
  108e15:	31 d3                	xor    %edx,%ebx
  108e17:	89 d9                	mov    %ebx,%ecx
  108e19:	8b 55 08             	mov    0x8(%ebp),%edx
  108e1c:	89 4c 82 04          	mov    %ecx,0x4(%edx,%eax,4)

							if(counter >= n)
							{
								uintptr_t addr = addr(x, y) - (n - 1) * memory::page_size_byte;

								for(size_t i = 0; i < n; i++)
  108e20:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
  108e24:	8b 45 e8             	mov    -0x18(%ebp),%eax
  108e27:	3b 45 0c             	cmp    0xc(%ebp),%eax
  108e2a:	72 b4                	jb     108de0 <_ZN3hal3x863pmm5allocEjj+0xca>
								{
									clear_bit(this->bitmap[bitmap_px((addr + i * memory::page_size_byte))], bitmap_py((addr + i * memory::page_size_byte)));
								}

								return addr;
  108e2c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  108e2f:	eb 46                	jmp    108e77 <_ZN3hal3x863pmm5allocEjj+0x161>
							}
						}
						else
						{
							counter = 0;
						}
  108e31:	eb 10                	jmp    108e43 <_ZN3hal3x863pmm5allocEjj+0x12d>
								return addr;
							}
						}
						else
						{
							counter = 0;
  108e33:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
						}
  108e3a:	eb 07                	jmp    108e43 <_ZN3hal3x863pmm5allocEjj+0x12d>
					}
					else
					{
						counter = 0;
  108e3c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	{
		for(size_t x = bitmap_px(memory::isa_dma_base); x <= bitmap_px(memory::isa_dma_limit) && counter < n; x++)
		{
			if(this->bitmap[x])
			{
				for(size_t y = 0; y < 32 && counter < n; y++)
  108e43:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
  108e47:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
  108e4b:	77 0c                	ja     108e59 <_ZN3hal3x863pmm5allocEjj+0x143>
  108e4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  108e50:	3b 45 0c             	cmp    0xc(%ebp),%eax
  108e53:	0f 82 04 ff ff ff    	jb     108d5d <_ZN3hal3x863pmm5allocEjj+0x47>
{
	size_t counter = 0;

	if(flags & pmm::isa_dma)
	{
		for(size_t x = bitmap_px(memory::isa_dma_base); x <= bitmap_px(memory::isa_dma_limit) && counter < n; x++)
  108e59:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  108e5d:	81 7d f0 80 00 00 00 	cmpl   $0x80,-0x10(%ebp)
  108e64:	77 0c                	ja     108e72 <_ZN3hal3x863pmm5allocEjj+0x15c>
  108e66:	8b 45 f4             	mov    -0xc(%ebp),%eax
  108e69:	3b 45 0c             	cmp    0xc(%ebp),%eax
  108e6c:	0f 82 cd fe ff ff    	jb     108d3f <_ZN3hal3x863pmm5allocEjj+0x29>
				}
			}
		}
	}

	return 0x0;
  108e72:	b8 00 00 00 00       	mov    $0x0,%eax
}
  108e77:	83 c4 20             	add    $0x20,%esp
  108e7a:	5b                   	pop    %ebx
  108e7b:	5e                   	pop    %esi
  108e7c:	5d                   	pop    %ebp
  108e7d:	c3                   	ret    

00108e7e <_ZN3hal3x863pmm4freeEj>:

void pmm::free( uintptr_t addr )
{
  108e7e:	55                   	push   %ebp
  108e7f:	89 e5                	mov    %esp,%ebp
  108e81:	56                   	push   %esi
  108e82:	53                   	push   %ebx
	set_bit(this->bitmap[bitmap_px(addr)], bitmap_py(addr));
  108e83:	8b 45 0c             	mov    0xc(%ebp),%eax
  108e86:	c1 e8 11             	shr    $0x11,%eax
  108e89:	8b 55 08             	mov    0x8(%ebp),%edx
  108e8c:	8b 5c 82 04          	mov    0x4(%edx,%eax,4),%ebx
  108e90:	8b 55 0c             	mov    0xc(%ebp),%edx
  108e93:	c1 ea 0c             	shr    $0xc,%edx
  108e96:	83 e2 1f             	and    $0x1f,%edx
  108e99:	be 01 00 00 00       	mov    $0x1,%esi
  108e9e:	89 d1                	mov    %edx,%ecx
  108ea0:	d3 e6                	shl    %cl,%esi
  108ea2:	89 f2                	mov    %esi,%edx
  108ea4:	09 d3                	or     %edx,%ebx
  108ea6:	89 d9                	mov    %ebx,%ecx
  108ea8:	8b 55 08             	mov    0x8(%ebp),%edx
  108eab:	89 4c 82 04          	mov    %ecx,0x4(%edx,%eax,4)

	this->fast_access = addr;
  108eaf:	8b 45 08             	mov    0x8(%ebp),%eax
  108eb2:	8b 55 0c             	mov    0xc(%ebp),%edx
  108eb5:	89 90 04 00 02 00    	mov    %edx,0x20004(%eax)
}
  108ebb:	5b                   	pop    %ebx
  108ebc:	5e                   	pop    %esi
  108ebd:	5d                   	pop    %ebp
  108ebe:	c3                   	ret    
  108ebf:	90                   	nop

00108ec0 <_ZN3hal3x863pmm4freeEjj>:

void pmm::free( uintptr_t addr, size_t n )
{
  108ec0:	55                   	push   %ebp
  108ec1:	89 e5                	mov    %esp,%ebp
  108ec3:	83 ec 08             	sub    $0x8,%esp
	while(n--)
  108ec6:	eb 19                	jmp    108ee1 <_ZN3hal3x863pmm4freeEjj+0x21>
	{
		this->free(addr);
  108ec8:	8b 45 0c             	mov    0xc(%ebp),%eax
  108ecb:	89 44 24 04          	mov    %eax,0x4(%esp)
  108ecf:	8b 45 08             	mov    0x8(%ebp),%eax
  108ed2:	89 04 24             	mov    %eax,(%esp)
  108ed5:	e8 a4 ff ff ff       	call   108e7e <_ZN3hal3x863pmm4freeEj>
		
		addr += memory::page_size_byte;
  108eda:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
	this->fast_access = addr;
}

void pmm::free( uintptr_t addr, size_t n )
{
	while(n--)
  108ee1:	8b 45 10             	mov    0x10(%ebp),%eax
  108ee4:	8d 50 ff             	lea    -0x1(%eax),%edx
  108ee7:	89 55 10             	mov    %edx,0x10(%ebp)
  108eea:	85 c0                	test   %eax,%eax
  108eec:	0f 95 c0             	setne  %al
  108eef:	84 c0                	test   %al,%al
  108ef1:	75 d5                	jne    108ec8 <_ZN3hal3x863pmm4freeEjj+0x8>
	{
		this->free(addr);
		
		addr += memory::page_size_byte;
	}
}
  108ef3:	c9                   	leave  
  108ef4:	c3                   	ret    
  108ef5:	90                   	nop

00108ef6 <_ZN3hal3x863pmm5checkEj>:

bool pmm::check( uintptr_t addr )
{
  108ef6:	55                   	push   %ebp
  108ef7:	89 e5                	mov    %esp,%ebp
  108ef9:	53                   	push   %ebx
	return this->bitmap[bitmap_px(addr)] & (1 << bitmap_py(addr));
  108efa:	8b 45 0c             	mov    0xc(%ebp),%eax
  108efd:	c1 e8 11             	shr    $0x11,%eax
  108f00:	89 c2                	mov    %eax,%edx
  108f02:	8b 45 08             	mov    0x8(%ebp),%eax
  108f05:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
  108f09:	89 c2                	mov    %eax,%edx
  108f0b:	8b 45 0c             	mov    0xc(%ebp),%eax
  108f0e:	c1 e8 0c             	shr    $0xc,%eax
  108f11:	83 e0 1f             	and    $0x1f,%eax
  108f14:	bb 01 00 00 00       	mov    $0x1,%ebx
  108f19:	89 c1                	mov    %eax,%ecx
  108f1b:	d3 e3                	shl    %cl,%ebx
  108f1d:	89 d8                	mov    %ebx,%eax
  108f1f:	21 d0                	and    %edx,%eax
}
  108f21:	5b                   	pop    %ebx
  108f22:	5d                   	pop    %ebp
  108f23:	c3                   	ret    

00108f24 <_ZN3hal3x863pmm5checkEjj>:

bool pmm::check( uintptr_t addr, size_t n )
{
  108f24:	55                   	push   %ebp
  108f25:	89 e5                	mov    %esp,%ebp
  108f27:	53                   	push   %ebx
	while(n--)
  108f28:	eb 37                	jmp    108f61 <_ZN3hal3x863pmm5checkEjj+0x3d>
	{
		if(!(this->bitmap[bitmap_px(addr)] & (1 << bitmap_py(addr))))
  108f2a:	8b 45 0c             	mov    0xc(%ebp),%eax
  108f2d:	c1 e8 11             	shr    $0x11,%eax
  108f30:	89 c2                	mov    %eax,%edx
  108f32:	8b 45 08             	mov    0x8(%ebp),%eax
  108f35:	8b 54 90 04          	mov    0x4(%eax,%edx,4),%edx
  108f39:	8b 45 0c             	mov    0xc(%ebp),%eax
  108f3c:	c1 e8 0c             	shr    $0xc,%eax
  108f3f:	83 e0 1f             	and    $0x1f,%eax
  108f42:	bb 01 00 00 00       	mov    $0x1,%ebx
  108f47:	89 c1                	mov    %eax,%ecx
  108f49:	d3 e3                	shl    %cl,%ebx
  108f4b:	89 d8                	mov    %ebx,%eax
  108f4d:	21 d0                	and    %edx,%eax
  108f4f:	85 c0                	test   %eax,%eax
  108f51:	75 07                	jne    108f5a <_ZN3hal3x863pmm5checkEjj+0x36>
		{
			return false;
  108f53:	b8 00 00 00 00       	mov    $0x0,%eax
  108f58:	eb 1e                	jmp    108f78 <_ZN3hal3x863pmm5checkEjj+0x54>
		}

		addr += memory::page_size_byte;
  108f5a:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
	return this->bitmap[bitmap_px(addr)] & (1 << bitmap_py(addr));
}

bool pmm::check( uintptr_t addr, size_t n )
{
	while(n--)
  108f61:	8b 45 10             	mov    0x10(%ebp),%eax
  108f64:	8d 50 ff             	lea    -0x1(%eax),%edx
  108f67:	89 55 10             	mov    %edx,0x10(%ebp)
  108f6a:	85 c0                	test   %eax,%eax
  108f6c:	0f 95 c0             	setne  %al
  108f6f:	84 c0                	test   %al,%al
  108f71:	75 b7                	jne    108f2a <_ZN3hal3x863pmm5checkEjj+0x6>
		}

		addr += memory::page_size_byte;
	}

	return true;
  108f73:	b8 01 00 00 00       	mov    $0x1,%eax
}
  108f78:	5b                   	pop    %ebx
  108f79:	5d                   	pop    %ebp
  108f7a:	c3                   	ret    
  108f7b:	90                   	nop

00108f7c <_ZN3hal3x863pmm4infoEv>:

pmm::meminfo_t pmm::info(  )
{
  108f7c:	55                   	push   %ebp
  108f7d:	89 e5                	mov    %esp,%ebp
  108f7f:	53                   	push   %ebx
  108f80:	83 ec 10             	sub    $0x10,%esp
	static pmm::meminfo_t meminfo;

	size_t free_mem = 0;
  108f83:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	for(size_t x = 0; x < pmm::bitmap_size; x++)
  108f8a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  108f91:	eb 4a                	jmp    108fdd <_ZN3hal3x863pmm4infoEv+0x61>
	{
		if(this->bitmap[x])
  108f93:	8b 45 0c             	mov    0xc(%ebp),%eax
  108f96:	8b 55 f4             	mov    -0xc(%ebp),%edx
  108f99:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
  108f9d:	85 c0                	test   %eax,%eax
  108f9f:	74 38                	je     108fd9 <_ZN3hal3x863pmm4infoEv+0x5d>
		{
			for(size_t y = 0; y < 32; y++)
  108fa1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  108fa8:	eb 29                	jmp    108fd3 <_ZN3hal3x863pmm4infoEv+0x57>
			{
				if(this->bitmap[x] & (1 << y))
  108faa:	8b 45 0c             	mov    0xc(%ebp),%eax
  108fad:	8b 55 f4             	mov    -0xc(%ebp),%edx
  108fb0:	8b 54 90 04          	mov    0x4(%eax,%edx,4),%edx
  108fb4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  108fb7:	bb 01 00 00 00       	mov    $0x1,%ebx
  108fbc:	89 c1                	mov    %eax,%ecx
  108fbe:	d3 e3                	shl    %cl,%ebx
  108fc0:	89 d8                	mov    %ebx,%eax
  108fc2:	21 d0                	and    %edx,%eax
  108fc4:	85 c0                	test   %eax,%eax
  108fc6:	74 07                	je     108fcf <_ZN3hal3x863pmm4infoEv+0x53>
				{
					free_mem += memory::page_size_byte;
  108fc8:	81 45 f8 00 10 00 00 	addl   $0x1000,-0x8(%ebp)

	for(size_t x = 0; x < pmm::bitmap_size; x++)
	{
		if(this->bitmap[x])
		{
			for(size_t y = 0; y < 32; y++)
  108fcf:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  108fd3:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
  108fd7:	76 d1                	jbe    108faa <_ZN3hal3x863pmm4infoEv+0x2e>
{
	static pmm::meminfo_t meminfo;

	size_t free_mem = 0;

	for(size_t x = 0; x < pmm::bitmap_size; x++)
  108fd9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  108fdd:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
  108fe4:	76 ad                	jbe    108f93 <_ZN3hal3x863pmm4infoEv+0x17>
				}
			}
		}
	}

	meminfo.free = free_mem;
  108fe6:	8b 45 f8             	mov    -0x8(%ebp),%eax
  108fe9:	a3 cc 38 13 00       	mov    %eax,0x1338cc
	meminfo.used = this->total_mem - free_mem;
  108fee:	8b 45 0c             	mov    0xc(%ebp),%eax
  108ff1:	8b 00                	mov    (%eax),%eax
  108ff3:	2b 45 f8             	sub    -0x8(%ebp),%eax
  108ff6:	a3 d0 38 13 00       	mov    %eax,0x1338d0

	return meminfo;
  108ffb:	8b 4d 08             	mov    0x8(%ebp),%ecx
  108ffe:	a1 cc 38 13 00       	mov    0x1338cc,%eax
  109003:	8b 15 d0 38 13 00    	mov    0x1338d0,%edx
  109009:	89 01                	mov    %eax,(%ecx)
  10900b:	89 51 04             	mov    %edx,0x4(%ecx)
}
  10900e:	8b 45 08             	mov    0x8(%ebp),%eax
  109011:	83 c4 10             	add    $0x10,%esp
  109014:	5b                   	pop    %ebx
  109015:	5d                   	pop    %ebp
  109016:	c2 04 00             	ret    $0x4
  109019:	90                   	nop

0010901a <_ZN3hal3x863gdtC1Ev>:
using namespace hal::x86;

/*
Constructor; initialises the gdt with 0
*/
gdt::gdt(  )
  10901a:	55                   	push   %ebp
  10901b:	89 e5                	mov    %esp,%ebp
  10901d:	83 ec 10             	sub    $0x10,%esp
{
	for(size_t index = 0; index < gdt::descriptor_count; index++)
  109020:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  109027:	eb 19                	jmp    109042 <_ZN3hal3x863gdtC1Ev+0x28>
	{
		gdt::descriptor_table[index] = 0;
  109029:	8b 45 08             	mov    0x8(%ebp),%eax
  10902c:	8b 55 fc             	mov    -0x4(%ebp),%edx
  10902f:	c7 04 d0 00 00 00 00 	movl   $0x0,(%eax,%edx,8)
  109036:	c7 44 d0 04 00 00 00 	movl   $0x0,0x4(%eax,%edx,8)
  10903d:	00 
/*
Constructor; initialises the gdt with 0
*/
gdt::gdt(  )
{
	for(size_t index = 0; index < gdt::descriptor_count; index++)
  10903e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  109042:	83 7d fc 05          	cmpl   $0x5,-0x4(%ebp)
  109046:	76 e1                	jbe    109029 <_ZN3hal3x863gdtC1Ev+0xf>
	{
		gdt::descriptor_table[index] = 0;
	}
}
  109048:	c9                   	leave  
  109049:	c3                   	ret    

0010904a <_ZN3hal3x863gdtD1Ev>:

/*
Destructor
*/
gdt::~gdt(  )
  10904a:	55                   	push   %ebp
  10904b:	89 e5                	mov    %esp,%ebp
{

}
  10904d:	5d                   	pop    %ebp
  10904e:	c3                   	ret    
  10904f:	90                   	nop

00109050 <_ZN3hal3x863gdt4initEv>:

/*
Initialises the GDT; Nulldescriptor, Kernel-code/Kernel-data, User-code/user-data, tss (for multitasking)
*/
void gdt::init(  )
{
  109050:	55                   	push   %ebp
  109051:	89 e5                	mov    %esp,%ebp
  109053:	83 ec 28             	sub    $0x28,%esp
	//Nulldescriptor	
	this->set_entry(0, 0, 0, 0); 
  109056:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
  10905d:	00 
  10905e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
  109065:	00 
  109066:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  10906d:	00 
  10906e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  109075:	00 
  109076:	8b 45 08             	mov    0x8(%ebp),%eax
  109079:	89 04 24             	mov    %eax,(%esp)
  10907c:	e8 17 01 00 00       	call   109198 <_ZN3hal3x863gdt9set_entryEjjjj>

	//Codsegment Ring0				
	this->set_entry(1, 0, 0xfffff, (gdt::segment | gdt::bit32 | gdt::codeseg | gdt::gran4k | gdt::present | gdt::ring0));
  109081:	c7 44 24 10 9a 0c 00 	movl   $0xc9a,0x10(%esp)
  109088:	00 
  109089:	c7 44 24 0c ff ff 0f 	movl   $0xfffff,0xc(%esp)
  109090:	00 
  109091:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  109098:	00 
  109099:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  1090a0:	00 
  1090a1:	8b 45 08             	mov    0x8(%ebp),%eax
  1090a4:	89 04 24             	mov    %eax,(%esp)
  1090a7:	e8 ec 00 00 00       	call   109198 <_ZN3hal3x863gdt9set_entryEjjjj>

	//Datasegment Ring0			
	this->set_entry(2, 0, 0xfffff, (gdt::segment | gdt::bit32 | gdt::dataseg | gdt::gran4k | gdt::present | gdt::ring0));
  1090ac:	c7 44 24 10 92 0c 00 	movl   $0xc92,0x10(%esp)
  1090b3:	00 
  1090b4:	c7 44 24 0c ff ff 0f 	movl   $0xfffff,0xc(%esp)
  1090bb:	00 
  1090bc:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  1090c3:	00 
  1090c4:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  1090cb:	00 
  1090cc:	8b 45 08             	mov    0x8(%ebp),%eax
  1090cf:	89 04 24             	mov    %eax,(%esp)
  1090d2:	e8 c1 00 00 00       	call   109198 <_ZN3hal3x863gdt9set_entryEjjjj>

	//Codsegment Ring3				
	this->set_entry(3, 0, 0xfffff, (gdt::segment | gdt::bit32 | gdt::codeseg | gdt::gran4k | gdt::present | gdt::ring3));
  1090d7:	c7 44 24 10 fa 0c 00 	movl   $0xcfa,0x10(%esp)
  1090de:	00 
  1090df:	c7 44 24 0c ff ff 0f 	movl   $0xfffff,0xc(%esp)
  1090e6:	00 
  1090e7:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  1090ee:	00 
  1090ef:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
  1090f6:	00 
  1090f7:	8b 45 08             	mov    0x8(%ebp),%eax
  1090fa:	89 04 24             	mov    %eax,(%esp)
  1090fd:	e8 96 00 00 00       	call   109198 <_ZN3hal3x863gdt9set_entryEjjjj>
	
	//Datasegment Ring3				
	this->set_entry(4, 0, 0xfffff, (gdt::segment | gdt::bit32 | gdt::dataseg | gdt::gran4k | gdt::present | gdt::ring3));				
  109102:	c7 44 24 10 f2 0c 00 	movl   $0xcf2,0x10(%esp)
  109109:	00 
  10910a:	c7 44 24 0c ff ff 0f 	movl   $0xfffff,0xc(%esp)
  109111:	00 
  109112:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
  109119:	00 
  10911a:	c7 44 24 04 04 00 00 	movl   $0x4,0x4(%esp)
  109121:	00 
  109122:	8b 45 08             	mov    0x8(%ebp),%eax
  109125:	89 04 24             	mov    %eax,(%esp)
  109128:	e8 6b 00 00 00       	call   109198 <_ZN3hal3x863gdt9set_entryEjjjj>
	
	//TSS
	this->set_entry(5, (uintptr_t)(this->tss().tss), sizeof(tss_t), (gdt::tss386 | gdt::present | gdt::ring3));
  10912d:	8b 45 08             	mov    0x8(%ebp),%eax
  109130:	89 04 24             	mov    %eax,(%esp)
  109133:	e8 e2 36 00 00       	call   10c81a <_ZN3hal3x863gdt3tssEv>
  109138:	c7 44 24 10 e9 00 00 	movl   $0xe9,0x10(%esp)
  10913f:	00 
  109140:	c7 44 24 0c 80 00 00 	movl   $0x80,0xc(%esp)
  109147:	00 
  109148:	89 44 24 08          	mov    %eax,0x8(%esp)
  10914c:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
  109153:	00 
  109154:	8b 45 08             	mov    0x8(%ebp),%eax
  109157:	89 04 24             	mov    %eax,(%esp)
  10915a:	e8 39 00 00 00       	call   109198 <_ZN3hal3x863gdt9set_entryEjjjj>
}
  10915f:	c9                   	leave  
  109160:	c3                   	ret    
  109161:	90                   	nop

00109162 <_ZN3hal3x863gdt4loadEv>:

/*
Loads the GDT
*/
void gdt::load(  )
{
  109162:	55                   	push   %ebp
  109163:	89 e5                	mov    %esp,%ebp
  109165:	83 ec 10             	sub    $0x10,%esp
	{
   		uint16_t limit;
    		void	 *pointer;
	} PACKED gdtp;
	
	gdtp.limit 	= gdt::descriptor_count * 8 - 1;
  109168:	66 c7 45 fa 2f 00    	movw   $0x2f,-0x6(%ebp)
    	gdtp.pointer 	= gdt::descriptor_table;
  10916e:	8b 45 08             	mov    0x8(%ebp),%eax
  109171:	89 45 fc             	mov    %eax,-0x4(%ebp)

	asm volatile("lgdt %0" : : "m" (gdtp));
  109174:	0f 01 55 fa          	lgdtl  -0x6(%ebp)

	asm volatile("mov $0x10, %ax");
  109178:	66 b8 10 00          	mov    $0x10,%ax
	asm volatile("mov %ax, %ds  ");
  10917c:	8e d8                	mov    %eax,%ds
	asm volatile("mov %ax, %es  ");
  10917e:	8e c0                	mov    %eax,%es
	asm volatile("mov %ax, %fs  ");
  109180:	8e e0                	mov    %eax,%fs
	asm volatile("mov %ax, %gs  ");
  109182:	8e e8                	mov    %eax,%gs
	asm volatile("mov %ax, %ss  ");
  109184:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp $0x8, $.1");
  109186:	ea 8d 91 10 00 08 00 	ljmp   $0x8,$0x10918d

0010918d <.1>:
	asm volatile(".1:           ");

	asm volatile("ltr %%ax" : : "a" (5 << 3));
  10918d:	b8 28 00 00 00       	mov    $0x28,%eax
  109192:	0f 00 d8             	ltr    %ax
}
  109195:	c9                   	leave  
  109196:	c3                   	ret    
  109197:	90                   	nop

00109198 <_ZN3hal3x863gdt9set_entryEjjjj>:

/*
Sets a GDT-entry
*/
void gdt::set_entry( size_t index, uintptr_t base, size_t limit, uint32_t flags )
{
  109198:	55                   	push   %ebp
  109199:	89 e5                	mov    %esp,%ebp
  10919b:	57                   	push   %edi
  10919c:	56                   	push   %esi
  10919d:	53                   	push   %ebx
  10919e:	83 ec 4c             	sub    $0x4c,%esp
	gdt::descriptor_table[index] = limit & 0xffffLL;
  1091a1:	8b 45 14             	mov    0x14(%ebp),%eax
  1091a4:	ba 00 00 00 00       	mov    $0x0,%edx
  1091a9:	0f b7 c8             	movzwl %ax,%ecx
  1091ac:	89 d0                	mov    %edx,%eax
  1091ae:	83 e0 00             	and    $0x0,%eax
  1091b1:	89 c3                	mov    %eax,%ebx
  1091b3:	8b 55 08             	mov    0x8(%ebp),%edx
  1091b6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1091b9:	89 0c c2             	mov    %ecx,(%edx,%eax,8)
  1091bc:	89 5c c2 04          	mov    %ebx,0x4(%edx,%eax,8)
	gdt::descriptor_table[index] |= (base & 0xffffffLL) << 16;
  1091c0:	8b 55 08             	mov    0x8(%ebp),%edx
  1091c3:	8b 45 0c             	mov    0xc(%ebp),%eax
  1091c6:	8d 14 c2             	lea    (%edx,%eax,8),%edx
  1091c9:	8b 02                	mov    (%edx),%eax
  1091cb:	8b 52 04             	mov    0x4(%edx),%edx
  1091ce:	89 45 a8             	mov    %eax,-0x58(%ebp)
  1091d1:	89 55 ac             	mov    %edx,-0x54(%ebp)
  1091d4:	8b 45 10             	mov    0x10(%ebp),%eax
  1091d7:	ba 00 00 00 00       	mov    $0x0,%edx
  1091dc:	89 c3                	mov    %eax,%ebx
  1091de:	81 e3 ff ff ff 00    	and    $0xffffff,%ebx
  1091e4:	89 de                	mov    %ebx,%esi
  1091e6:	89 d0                	mov    %edx,%eax
  1091e8:	83 e0 00             	and    $0x0,%eax
  1091eb:	89 c7                	mov    %eax,%edi
  1091ed:	89 f0                	mov    %esi,%eax
  1091ef:	89 fa                	mov    %edi,%edx
  1091f1:	0f a4 c2 10          	shld   $0x10,%eax,%edx
  1091f5:	c1 e0 10             	shl    $0x10,%eax
  1091f8:	8b 4d a8             	mov    -0x58(%ebp),%ecx
  1091fb:	8b 5d ac             	mov    -0x54(%ebp),%ebx
  1091fe:	89 cf                	mov    %ecx,%edi
  109200:	09 c7                	or     %eax,%edi
  109202:	89 7d e8             	mov    %edi,-0x18(%ebp)
  109205:	89 df                	mov    %ebx,%edi
  109207:	09 d7                	or     %edx,%edi
  109209:	89 7d ec             	mov    %edi,-0x14(%ebp)
  10920c:	8b 55 08             	mov    0x8(%ebp),%edx
  10920f:	8b 45 0c             	mov    0xc(%ebp),%eax
  109212:	8b 5d e8             	mov    -0x18(%ebp),%ebx
  109215:	8b 75 ec             	mov    -0x14(%ebp),%esi
  109218:	89 1c c2             	mov    %ebx,(%edx,%eax,8)
  10921b:	89 74 c2 04          	mov    %esi,0x4(%edx,%eax,8)
	gdt::descriptor_table[index] |= (flags & 0xffLL) << 40;
  10921f:	8b 55 08             	mov    0x8(%ebp),%edx
  109222:	8b 45 0c             	mov    0xc(%ebp),%eax
  109225:	8b 0c c2             	mov    (%edx,%eax,8),%ecx
  109228:	8b 5c c2 04          	mov    0x4(%edx,%eax,8),%ebx
  10922c:	8b 45 18             	mov    0x18(%ebp),%eax
  10922f:	ba 00 00 00 00       	mov    $0x0,%edx
  109234:	0f b6 f8             	movzbl %al,%edi
  109237:	89 7d e0             	mov    %edi,-0x20(%ebp)
  10923a:	89 d0                	mov    %edx,%eax
  10923c:	83 e0 00             	and    $0x0,%eax
  10923f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  109242:	8b 45 e0             	mov    -0x20(%ebp),%eax
  109245:	8b 55 e4             	mov    -0x1c(%ebp),%edx
  109248:	89 c2                	mov    %eax,%edx
  10924a:	b8 00 00 00 00       	mov    $0x0,%eax
  10924f:	c1 e2 08             	shl    $0x8,%edx
  109252:	89 cf                	mov    %ecx,%edi
  109254:	09 c7                	or     %eax,%edi
  109256:	89 7d d8             	mov    %edi,-0x28(%ebp)
  109259:	89 df                	mov    %ebx,%edi
  10925b:	09 d7                	or     %edx,%edi
  10925d:	89 7d dc             	mov    %edi,-0x24(%ebp)
  109260:	8b 55 08             	mov    0x8(%ebp),%edx
  109263:	8b 45 0c             	mov    0xc(%ebp),%eax
  109266:	8b 5d d8             	mov    -0x28(%ebp),%ebx
  109269:	8b 75 dc             	mov    -0x24(%ebp),%esi
  10926c:	89 1c c2             	mov    %ebx,(%edx,%eax,8)
  10926f:	89 74 c2 04          	mov    %esi,0x4(%edx,%eax,8)
	gdt::descriptor_table[index] |= ((limit >> 16) & 0xfLL) << 48;
  109273:	8b 55 08             	mov    0x8(%ebp),%edx
  109276:	8b 45 0c             	mov    0xc(%ebp),%eax
  109279:	8b 0c c2             	mov    (%edx,%eax,8),%ecx
  10927c:	8b 5c c2 04          	mov    0x4(%edx,%eax,8),%ebx
  109280:	8b 45 14             	mov    0x14(%ebp),%eax
  109283:	c1 e8 10             	shr    $0x10,%eax
  109286:	ba 00 00 00 00       	mov    $0x0,%edx
  10928b:	89 c7                	mov    %eax,%edi
  10928d:	83 e7 0f             	and    $0xf,%edi
  109290:	89 7d d0             	mov    %edi,-0x30(%ebp)
  109293:	89 d0                	mov    %edx,%eax
  109295:	83 e0 00             	and    $0x0,%eax
  109298:	89 45 d4             	mov    %eax,-0x2c(%ebp)
  10929b:	8b 45 d0             	mov    -0x30(%ebp),%eax
  10929e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
  1092a1:	89 c2                	mov    %eax,%edx
  1092a3:	b8 00 00 00 00       	mov    $0x0,%eax
  1092a8:	c1 e2 10             	shl    $0x10,%edx
  1092ab:	89 ce                	mov    %ecx,%esi
  1092ad:	09 c6                	or     %eax,%esi
  1092af:	89 75 c8             	mov    %esi,-0x38(%ebp)
  1092b2:	09 d3                	or     %edx,%ebx
  1092b4:	89 5d cc             	mov    %ebx,-0x34(%ebp)
  1092b7:	8b 55 08             	mov    0x8(%ebp),%edx
  1092ba:	8b 45 0c             	mov    0xc(%ebp),%eax
  1092bd:	8b 5d c8             	mov    -0x38(%ebp),%ebx
  1092c0:	8b 75 cc             	mov    -0x34(%ebp),%esi
  1092c3:	89 1c c2             	mov    %ebx,(%edx,%eax,8)
  1092c6:	89 74 c2 04          	mov    %esi,0x4(%edx,%eax,8)
	gdt::descriptor_table[index] |= ((flags >> 8 )& 0xffLL) << 52;
  1092ca:	8b 55 08             	mov    0x8(%ebp),%edx
  1092cd:	8b 45 0c             	mov    0xc(%ebp),%eax
  1092d0:	8b 0c c2             	mov    (%edx,%eax,8),%ecx
  1092d3:	8b 5c c2 04          	mov    0x4(%edx,%eax,8),%ebx
  1092d7:	8b 45 18             	mov    0x18(%ebp),%eax
  1092da:	c1 e8 08             	shr    $0x8,%eax
  1092dd:	ba 00 00 00 00       	mov    $0x0,%edx
  1092e2:	0f b6 f0             	movzbl %al,%esi
  1092e5:	89 75 c0             	mov    %esi,-0x40(%ebp)
  1092e8:	89 d0                	mov    %edx,%eax
  1092ea:	83 e0 00             	and    $0x0,%eax
  1092ed:	89 45 c4             	mov    %eax,-0x3c(%ebp)
  1092f0:	8b 45 c0             	mov    -0x40(%ebp),%eax
  1092f3:	8b 55 c4             	mov    -0x3c(%ebp),%edx
  1092f6:	89 c2                	mov    %eax,%edx
  1092f8:	b8 00 00 00 00       	mov    $0x0,%eax
  1092fd:	c1 e2 14             	shl    $0x14,%edx
  109300:	89 cf                	mov    %ecx,%edi
  109302:	09 c7                	or     %eax,%edi
  109304:	89 7d b8             	mov    %edi,-0x48(%ebp)
  109307:	09 d3                	or     %edx,%ebx
  109309:	89 5d bc             	mov    %ebx,-0x44(%ebp)
  10930c:	8b 45 08             	mov    0x8(%ebp),%eax
  10930f:	8b 55 0c             	mov    0xc(%ebp),%edx
  109312:	8b 5d b8             	mov    -0x48(%ebp),%ebx
  109315:	8b 75 bc             	mov    -0x44(%ebp),%esi
  109318:	89 1c d0             	mov    %ebx,(%eax,%edx,8)
  10931b:	89 74 d0 04          	mov    %esi,0x4(%eax,%edx,8)
	gdt::descriptor_table[index] |= ((base >> 24) & 0xffLL) << 56;
  10931f:	8b 45 08             	mov    0x8(%ebp),%eax
  109322:	8b 55 0c             	mov    0xc(%ebp),%edx
  109325:	8b 0c d0             	mov    (%eax,%edx,8),%ecx
  109328:	8b 5c d0 04          	mov    0x4(%eax,%edx,8),%ebx
  10932c:	8b 45 10             	mov    0x10(%ebp),%eax
  10932f:	c1 e8 18             	shr    $0x18,%eax
  109332:	ba 00 00 00 00       	mov    $0x0,%edx
  109337:	89 c2                	mov    %eax,%edx
  109339:	b8 00 00 00 00       	mov    $0x0,%eax
  10933e:	c1 e2 18             	shl    $0x18,%edx
  109341:	89 ce                	mov    %ecx,%esi
  109343:	09 c6                	or     %eax,%esi
  109345:	89 75 b0             	mov    %esi,-0x50(%ebp)
  109348:	89 d9                	mov    %ebx,%ecx
  10934a:	09 d1                	or     %edx,%ecx
  10934c:	89 4d b4             	mov    %ecx,-0x4c(%ebp)
  10934f:	8b 45 08             	mov    0x8(%ebp),%eax
  109352:	8b 55 0c             	mov    0xc(%ebp),%edx
  109355:	8b 5d b0             	mov    -0x50(%ebp),%ebx
  109358:	8b 75 b4             	mov    -0x4c(%ebp),%esi
  10935b:	89 1c d0             	mov    %ebx,(%eax,%edx,8)
  10935e:	89 74 d0 04          	mov    %esi,0x4(%eax,%edx,8)
}
  109362:	83 c4 4c             	add    $0x4c,%esp
  109365:	5b                   	pop    %ebx
  109366:	5e                   	pop    %esi
  109367:	5f                   	pop    %edi
  109368:	5d                   	pop    %ebp
  109369:	c3                   	ret    

0010936a <_ZN3hal3x865videoC1Ev>:

using namespace hal::x86;

video hal::x86::screen;

video::video(  ) : color(color::light_gray), pos_x(0), pos_y(0), field_width(0)
  10936a:	55                   	push   %ebp
  10936b:	89 e5                	mov    %esp,%ebp
  10936d:	83 ec 18             	sub    $0x18,%esp
  109370:	8b 45 08             	mov    0x8(%ebp),%eax
  109373:	c7 00 00 80 0b 00    	movl   $0xb8000,(%eax)
  109379:	8b 45 08             	mov    0x8(%ebp),%eax
  10937c:	c6 40 04 07          	movb   $0x7,0x4(%eax)
  109380:	8b 45 08             	mov    0x8(%ebp),%eax
  109383:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
  10938a:	8b 45 08             	mov    0x8(%ebp),%eax
  10938d:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
  109394:	8b 45 08             	mov    0x8(%ebp),%eax
  109397:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
{
	this->setf(video::dec_, video::basefield_);
  10939e:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
  1093a5:	00 
  1093a6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  1093ad:	00 
  1093ae:	8b 45 08             	mov    0x8(%ebp),%eax
  1093b1:	89 04 24             	mov    %eax,(%esp)
  1093b4:	e8 5d 00 00 00       	call   109416 <_ZN3hal3x865video4setfEjj>

	this->clear();
  1093b9:	8b 45 08             	mov    0x8(%ebp),%eax
  1093bc:	89 04 24             	mov    %eax,(%esp)
  1093bf:	e8 f0 00 00 00       	call   1094b4 <_ZN3hal3x865video5clearEv>
}
  1093c4:	c9                   	leave  
  1093c5:	c3                   	ret    

001093c6 <_ZN3hal3x865video5flagsEv>:

/*
Set/Get fmtflags
*/
video::fmtflags_t video::flags(  )
{
  1093c6:	55                   	push   %ebp
  1093c7:	89 e5                	mov    %esp,%ebp
	return this->fmtflags_;
  1093c9:	8b 45 08             	mov    0x8(%ebp),%eax
  1093cc:	8b 40 10             	mov    0x10(%eax),%eax
}
  1093cf:	5d                   	pop    %ebp
  1093d0:	c3                   	ret    
  1093d1:	90                   	nop

001093d2 <_ZN3hal3x865video5flagsEj>:

video::fmtflags_t video::flags( video::fmtflags_t fmtfl )
{
  1093d2:	55                   	push   %ebp
  1093d3:	89 e5                	mov    %esp,%ebp
  1093d5:	83 ec 10             	sub    $0x10,%esp
	video::fmtflags_t tmp = this->fmtflags_;
  1093d8:	8b 45 08             	mov    0x8(%ebp),%eax
  1093db:	8b 40 10             	mov    0x10(%eax),%eax
  1093de:	89 45 fc             	mov    %eax,-0x4(%ebp)

	this->fmtflags_ = fmtfl;
  1093e1:	8b 45 08             	mov    0x8(%ebp),%eax
  1093e4:	8b 55 0c             	mov    0xc(%ebp),%edx
  1093e7:	89 50 10             	mov    %edx,0x10(%eax)

	return tmp;
  1093ea:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  1093ed:	c9                   	leave  
  1093ee:	c3                   	ret    
  1093ef:	90                   	nop

001093f0 <_ZN3hal3x865video4setfEj>:

video::fmtflags_t video::setf( video::fmtflags_t fmtfl )
{
  1093f0:	55                   	push   %ebp
  1093f1:	89 e5                	mov    %esp,%ebp
  1093f3:	83 ec 10             	sub    $0x10,%esp
	video::fmtflags_t tmp = this->fmtflags_;
  1093f6:	8b 45 08             	mov    0x8(%ebp),%eax
  1093f9:	8b 40 10             	mov    0x10(%eax),%eax
  1093fc:	89 45 fc             	mov    %eax,-0x4(%ebp)

	this->fmtflags_ = fmtfl | this->fmtflags_;
  1093ff:	8b 45 08             	mov    0x8(%ebp),%eax
  109402:	8b 40 10             	mov    0x10(%eax),%eax
  109405:	0b 45 0c             	or     0xc(%ebp),%eax
  109408:	89 c2                	mov    %eax,%edx
  10940a:	8b 45 08             	mov    0x8(%ebp),%eax
  10940d:	89 50 10             	mov    %edx,0x10(%eax)

	return tmp;
  109410:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  109413:	c9                   	leave  
  109414:	c3                   	ret    
  109415:	90                   	nop

00109416 <_ZN3hal3x865video4setfEjj>:

video::fmtflags_t video::setf( video::fmtflags_t fmtfl, video::fmtflags_t mask )
{
  109416:	55                   	push   %ebp
  109417:	89 e5                	mov    %esp,%ebp
  109419:	83 ec 10             	sub    $0x10,%esp
	video::fmtflags_t tmp = this->fmtflags_;
  10941c:	8b 45 08             	mov    0x8(%ebp),%eax
  10941f:	8b 40 10             	mov    0x10(%eax),%eax
  109422:	89 45 fc             	mov    %eax,-0x4(%ebp)

	this->fmtflags_ = fmtfl | (this->fmtflags_ & (~mask));
  109425:	8b 45 08             	mov    0x8(%ebp),%eax
  109428:	8b 40 10             	mov    0x10(%eax),%eax
  10942b:	8b 55 10             	mov    0x10(%ebp),%edx
  10942e:	f7 d2                	not    %edx
  109430:	21 d0                	and    %edx,%eax
  109432:	0b 45 0c             	or     0xc(%ebp),%eax
  109435:	89 c2                	mov    %eax,%edx
  109437:	8b 45 08             	mov    0x8(%ebp),%eax
  10943a:	89 50 10             	mov    %edx,0x10(%eax)

	return tmp;
  10943d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  109440:	c9                   	leave  
  109441:	c3                   	ret    

00109442 <_ZN3hal3x865video6unsetfEj>:

void video::unsetf( video::fmtflags_t mask )
{
  109442:	55                   	push   %ebp
  109443:	89 e5                	mov    %esp,%ebp
	this->fmtflags_ = this->fmtflags_ ^ mask;
  109445:	8b 45 08             	mov    0x8(%ebp),%eax
  109448:	8b 40 10             	mov    0x10(%eax),%eax
  10944b:	33 45 0c             	xor    0xc(%ebp),%eax
  10944e:	89 c2                	mov    %eax,%edx
  109450:	8b 45 08             	mov    0x8(%ebp),%eax
  109453:	89 50 10             	mov    %edx,0x10(%eax)
}
  109456:	5d                   	pop    %ebp
  109457:	c3                   	ret    

00109458 <_ZN3hal3x865video4setwEj>:
/*
Set field width
*/

size_t video::setw( size_t wide )
{
  109458:	55                   	push   %ebp
  109459:	89 e5                	mov    %esp,%ebp
  10945b:	83 ec 10             	sub    $0x10,%esp
	size_t tmp = this->field_width;
  10945e:	8b 45 08             	mov    0x8(%ebp),%eax
  109461:	8b 40 14             	mov    0x14(%eax),%eax
  109464:	89 45 fc             	mov    %eax,-0x4(%ebp)

	this->field_width = wide;
  109467:	8b 45 08             	mov    0x8(%ebp),%eax
  10946a:	8b 55 0c             	mov    0xc(%ebp),%edx
  10946d:	89 50 14             	mov    %edx,0x14(%eax)

	return tmp;
  109470:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  109473:	c9                   	leave  
  109474:	c3                   	ret    
  109475:	90                   	nop

00109476 <_ZN3hal3x865video9set_colorENS0_5color7color_tE>:

/*
Set color
*/
void video::set_color( color::color_t color )
{
  109476:	55                   	push   %ebp
  109477:	89 e5                	mov    %esp,%ebp
	this->color = (static_cast<uint8_t>(color)) | (this->color & 0xF0);
  109479:	8b 45 0c             	mov    0xc(%ebp),%eax
  10947c:	89 c2                	mov    %eax,%edx
  10947e:	8b 45 08             	mov    0x8(%ebp),%eax
  109481:	0f b6 40 04          	movzbl 0x4(%eax),%eax
  109485:	83 e0 f0             	and    $0xfffffff0,%eax
  109488:	09 d0                	or     %edx,%eax
  10948a:	89 c2                	mov    %eax,%edx
  10948c:	8b 45 08             	mov    0x8(%ebp),%eax
  10948f:	88 50 04             	mov    %dl,0x4(%eax)
}
  109492:	5d                   	pop    %ebp
  109493:	c3                   	ret    

00109494 <_ZN3hal3x865video9set_colorERKNS0_5color10backgroundE>:

void video::set_color( const color::background &color )
{
  109494:	55                   	push   %ebp
  109495:	89 e5                	mov    %esp,%ebp
	this->color = (static_cast<uint8_t>(color.color)) | (this->color & 0x0F);
  109497:	8b 45 0c             	mov    0xc(%ebp),%eax
  10949a:	8b 00                	mov    (%eax),%eax
  10949c:	89 c2                	mov    %eax,%edx
  10949e:	8b 45 08             	mov    0x8(%ebp),%eax
  1094a1:	0f b6 40 04          	movzbl 0x4(%eax),%eax
  1094a5:	83 e0 0f             	and    $0xf,%eax
  1094a8:	09 d0                	or     %edx,%eax
  1094aa:	89 c2                	mov    %eax,%edx
  1094ac:	8b 45 08             	mov    0x8(%ebp),%eax
  1094af:	88 50 04             	mov    %dl,0x4(%eax)
}
  1094b2:	5d                   	pop    %ebp
  1094b3:	c3                   	ret    

001094b4 <_ZN3hal3x865video5clearEv>:

/*
video-output Methods
*/
void video::clear(  )
{
  1094b4:	55                   	push   %ebp
  1094b5:	89 e5                	mov    %esp,%ebp
  1094b7:	83 ec 10             	sub    $0x10,%esp
	for(size_t index = 0; index < 2 * video::height * video::width; index++)
  1094ba:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1094c1:	eb 11                	jmp    1094d4 <_ZN3hal3x865video5clearEv+0x20>
	{
		this->videomem[index] = 0;
  1094c3:	8b 45 08             	mov    0x8(%ebp),%eax
  1094c6:	8b 10                	mov    (%eax),%edx
  1094c8:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1094cb:	01 d0                	add    %edx,%eax
  1094cd:	c6 00 00             	movb   $0x0,(%eax)
/*
video-output Methods
*/
void video::clear(  )
{
	for(size_t index = 0; index < 2 * video::height * video::width; index++)
  1094d0:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  1094d4:	81 7d fc 9f 0f 00 00 	cmpl   $0xf9f,-0x4(%ebp)
  1094db:	76 e6                	jbe    1094c3 <_ZN3hal3x865video5clearEv+0xf>
	{
		this->videomem[index] = 0;
	}

	this->pos_x = 0;
  1094dd:	8b 45 08             	mov    0x8(%ebp),%eax
  1094e0:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	this->pos_y = 0;
  1094e7:	8b 45 08             	mov    0x8(%ebp),%eax
  1094ea:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
}
  1094f1:	c9                   	leave  
  1094f2:	c3                   	ret    
  1094f3:	90                   	nop

001094f4 <_ZN3hal3x865video4putcEc>:

void video::putc( char c )
{
  1094f4:	55                   	push   %ebp
  1094f5:	89 e5                	mov    %esp,%ebp
  1094f7:	83 ec 18             	sub    $0x18,%esp
  1094fa:	8b 45 0c             	mov    0xc(%ebp),%eax
  1094fd:	88 45 ec             	mov    %al,-0x14(%ebp)
	switch(c)
  109500:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
  109504:	83 f8 0d             	cmp    $0xd,%eax
  109507:	0f 87 9c 00 00 00    	ja     1095a9 <_ZN3hal3x865video4putcEc+0xb5>
  10950d:	8b 04 85 c0 ee 10 00 	mov    0x10eec0(,%eax,4),%eax
  109514:	ff e0                	jmp    *%eax

		case '\b':
		break;

		case '\t':			
			this->pos_x += video::tab_width;
  109516:	8b 45 08             	mov    0x8(%ebp),%eax
  109519:	8b 40 08             	mov    0x8(%eax),%eax
  10951c:	8d 50 08             	lea    0x8(%eax),%edx
  10951f:	8b 45 08             	mov    0x8(%ebp),%eax
  109522:	89 50 08             	mov    %edx,0x8(%eax)

			if(this->pos_x >= video::width - video::tab_width)
  109525:	8b 45 08             	mov    0x8(%ebp),%eax
  109528:	8b 40 08             	mov    0x8(%eax),%eax
  10952b:	83 f8 47             	cmp    $0x47,%eax
  10952e:	76 19                	jbe    109549 <_ZN3hal3x865video4putcEc+0x55>
			{
				this->pos_x = 0;
  109530:	8b 45 08             	mov    0x8(%ebp),%eax
  109533:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
				this->pos_y++;
  10953a:	8b 45 08             	mov    0x8(%ebp),%eax
  10953d:	8b 40 0c             	mov    0xc(%eax),%eax
  109540:	8d 50 01             	lea    0x1(%eax),%edx
  109543:	8b 45 08             	mov    0x8(%ebp),%eax
  109546:	89 50 0c             	mov    %edx,0xc(%eax)
			}
		break;	
  109549:	e9 64 01 00 00       	jmp    1096b2 <_ZN3hal3x865video4putcEc+0x1be>
			
		case '\n':
			this->pos_x = 0;
  10954e:	8b 45 08             	mov    0x8(%ebp),%eax
  109551:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			this->pos_y++;
  109558:	8b 45 08             	mov    0x8(%ebp),%eax
  10955b:	8b 40 0c             	mov    0xc(%eax),%eax
  10955e:	8d 50 01             	lea    0x1(%eax),%edx
  109561:	8b 45 08             	mov    0x8(%ebp),%eax
  109564:	89 50 0c             	mov    %edx,0xc(%eax)
		break;
  109567:	e9 46 01 00 00       	jmp    1096b2 <_ZN3hal3x865video4putcEc+0x1be>

		case '\v':
			this->pos_x = 0;
  10956c:	8b 45 08             	mov    0x8(%ebp),%eax
  10956f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			this->pos_y++;
  109576:	8b 45 08             	mov    0x8(%ebp),%eax
  109579:	8b 40 0c             	mov    0xc(%eax),%eax
  10957c:	8d 50 01             	lea    0x1(%eax),%edx
  10957f:	8b 45 08             	mov    0x8(%ebp),%eax
  109582:	89 50 0c             	mov    %edx,0xc(%eax)
		break;
  109585:	e9 28 01 00 00       	jmp    1096b2 <_ZN3hal3x865video4putcEc+0x1be>

		case '\f':
			this->clear();
  10958a:	8b 45 08             	mov    0x8(%ebp),%eax
  10958d:	89 04 24             	mov    %eax,(%esp)
  109590:	e8 1f ff ff ff       	call   1094b4 <_ZN3hal3x865video5clearEv>
		break;
  109595:	e9 18 01 00 00       	jmp    1096b2 <_ZN3hal3x865video4putcEc+0x1be>

		case '\r':
			this->pos_x = 0;
  10959a:	8b 45 08             	mov    0x8(%ebp),%eax
  10959d:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
		break;
  1095a4:	e9 09 01 00 00       	jmp    1096b2 <_ZN3hal3x865video4putcEc+0x1be>

		default:
			if(this->pos_x > (video::width - 1))
  1095a9:	8b 45 08             	mov    0x8(%ebp),%eax
  1095ac:	8b 40 08             	mov    0x8(%eax),%eax
  1095af:	83 f8 4f             	cmp    $0x4f,%eax
  1095b2:	76 19                	jbe    1095cd <_ZN3hal3x865video4putcEc+0xd9>
			{	
				this->pos_x = 0;
  1095b4:	8b 45 08             	mov    0x8(%ebp),%eax
  1095b7:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
				this->pos_y++;
  1095be:	8b 45 08             	mov    0x8(%ebp),%eax
  1095c1:	8b 40 0c             	mov    0xc(%eax),%eax
  1095c4:	8d 50 01             	lea    0x1(%eax),%edx
  1095c7:	8b 45 08             	mov    0x8(%ebp),%eax
  1095ca:	89 50 0c             	mov    %edx,0xc(%eax)
			}

			if(this->pos_y > (video::height - 1))
  1095cd:	8b 45 08             	mov    0x8(%ebp),%eax
  1095d0:	8b 40 0c             	mov    0xc(%eax),%eax
  1095d3:	83 f8 18             	cmp    $0x18,%eax
  1095d6:	76 6d                	jbe    109645 <_ZN3hal3x865video4putcEc+0x151>
			{     
				size_t index;

				for(index = 0; index < 2 * video::height * video::width; index++) 
  1095d8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
  1095df:	eb 23                	jmp    109604 <_ZN3hal3x865video4putcEc+0x110>
				{
			  		videomem[index] = videomem[index + 160];
  1095e1:	8b 45 08             	mov    0x8(%ebp),%eax
  1095e4:	8b 10                	mov    (%eax),%edx
  1095e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
  1095e9:	01 c2                	add    %eax,%edx
  1095eb:	8b 45 08             	mov    0x8(%ebp),%eax
  1095ee:	8b 00                	mov    (%eax),%eax
  1095f0:	8b 4d fc             	mov    -0x4(%ebp),%ecx
  1095f3:	81 c1 a0 00 00 00    	add    $0xa0,%ecx
  1095f9:	01 c8                	add    %ecx,%eax
  1095fb:	0f b6 00             	movzbl (%eax),%eax
  1095fe:	88 02                	mov    %al,(%edx)

			if(this->pos_y > (video::height - 1))
			{     
				size_t index;

				for(index = 0; index < 2 * video::height * video::width; index++) 
  109600:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  109604:	81 7d fc 9f 0f 00 00 	cmpl   $0xf9f,-0x4(%ebp)
  10960b:	76 d4                	jbe    1095e1 <_ZN3hal3x865video4putcEc+0xed>
				{
			  		videomem[index] = videomem[index + 160];
		  	     	}

			   	for(; index < 2 * video::height * video::width; index++) 
  10960d:	eb 11                	jmp    109620 <_ZN3hal3x865video4putcEc+0x12c>
				{
			       		videomem[index] = 0;
  10960f:	8b 45 08             	mov    0x8(%ebp),%eax
  109612:	8b 10                	mov    (%eax),%edx
  109614:	8b 45 fc             	mov    -0x4(%ebp),%eax
  109617:	01 d0                	add    %edx,%eax
  109619:	c6 00 00             	movb   $0x0,(%eax)
				for(index = 0; index < 2 * video::height * video::width; index++) 
				{
			  		videomem[index] = videomem[index + 160];
		  	     	}

			   	for(; index < 2 * video::height * video::width; index++) 
  10961c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  109620:	81 7d fc 9f 0f 00 00 	cmpl   $0xf9f,-0x4(%ebp)
  109627:	76 e6                	jbe    10960f <_ZN3hal3x865video4putcEc+0x11b>
				{
			       		videomem[index] = 0;
			   	}

				videomem[index] = 0;
  109629:	8b 45 08             	mov    0x8(%ebp),%eax
  10962c:	8b 10                	mov    (%eax),%edx
  10962e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  109631:	01 d0                	add    %edx,%eax
  109633:	c6 00 00             	movb   $0x0,(%eax)

			   	this->pos_y--;
  109636:	8b 45 08             	mov    0x8(%ebp),%eax
  109639:	8b 40 0c             	mov    0xc(%eax),%eax
  10963c:	8d 50 ff             	lea    -0x1(%eax),%edx
  10963f:	8b 45 08             	mov    0x8(%ebp),%eax
  109642:	89 50 0c             	mov    %edx,0xc(%eax)
		       	}

			videomem[2 * (this->pos_y * 80 + this->pos_x)] 	 = c;
  109645:	8b 45 08             	mov    0x8(%ebp),%eax
  109648:	8b 08                	mov    (%eax),%ecx
  10964a:	8b 45 08             	mov    0x8(%ebp),%eax
  10964d:	8b 50 0c             	mov    0xc(%eax),%edx
  109650:	89 d0                	mov    %edx,%eax
  109652:	c1 e0 02             	shl    $0x2,%eax
  109655:	01 d0                	add    %edx,%eax
  109657:	c1 e0 04             	shl    $0x4,%eax
  10965a:	89 c2                	mov    %eax,%edx
  10965c:	8b 45 08             	mov    0x8(%ebp),%eax
  10965f:	8b 40 08             	mov    0x8(%eax),%eax
  109662:	01 d0                	add    %edx,%eax
  109664:	01 c0                	add    %eax,%eax
  109666:	8d 14 01             	lea    (%ecx,%eax,1),%edx
  109669:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
  10966d:	88 02                	mov    %al,(%edx)
			videomem[2 * (this->pos_y * 80 + this->pos_x) + 1] = this->color;
  10966f:	8b 45 08             	mov    0x8(%ebp),%eax
  109672:	8b 08                	mov    (%eax),%ecx
  109674:	8b 45 08             	mov    0x8(%ebp),%eax
  109677:	8b 50 0c             	mov    0xc(%eax),%edx
  10967a:	89 d0                	mov    %edx,%eax
  10967c:	c1 e0 02             	shl    $0x2,%eax
  10967f:	01 d0                	add    %edx,%eax
  109681:	c1 e0 04             	shl    $0x4,%eax
  109684:	89 c2                	mov    %eax,%edx
  109686:	8b 45 08             	mov    0x8(%ebp),%eax
  109689:	8b 40 08             	mov    0x8(%eax),%eax
  10968c:	01 d0                	add    %edx,%eax
  10968e:	01 c0                	add    %eax,%eax
  109690:	83 c0 01             	add    $0x1,%eax
  109693:	8d 14 01             	lea    (%ecx,%eax,1),%edx
  109696:	8b 45 08             	mov    0x8(%ebp),%eax
  109699:	0f b6 40 04          	movzbl 0x4(%eax),%eax
  10969d:	88 02                	mov    %al,(%edx)

			this->pos_x++;
  10969f:	8b 45 08             	mov    0x8(%ebp),%eax
  1096a2:	8b 40 08             	mov    0x8(%eax),%eax
  1096a5:	8d 50 01             	lea    0x1(%eax),%edx
  1096a8:	8b 45 08             	mov    0x8(%ebp),%eax
  1096ab:	89 50 08             	mov    %edx,0x8(%eax)
		break;
  1096ae:	90                   	nop
  1096af:	eb 01                	jmp    1096b2 <_ZN3hal3x865video4putcEc+0x1be>
void video::putc( char c )
{
	switch(c)
	{
		case 0:
		break;
  1096b1:	90                   	nop
			videomem[2 * (this->pos_y * 80 + this->pos_x) + 1] = this->color;

			this->pos_x++;
		break;
	}
}
  1096b2:	c9                   	leave  
  1096b3:	c3                   	ret    

001096b4 <_ZN3hal3x865video4putnEl>:

void video::putn( long n )
{
  1096b4:	55                   	push   %ebp
  1096b5:	89 e5                	mov    %esp,%ebp
  1096b7:	83 ec 78             	sub    $0x78,%esp
	static const char digits[4096] = "0123456789abcdefghijklmnopqrstuvwxyz";

	unsigned long base = 10;
  1096ba:	c7 45 f4 0a 00 00 00 	movl   $0xa,-0xc(%ebp)

	int fwidth = this->field_width;
  1096c1:	8b 45 08             	mov    0x8(%ebp),%eax
  1096c4:	8b 40 14             	mov    0x14(%eax),%eax
  1096c7:	89 45 f0             	mov    %eax,-0x10(%ebp)

	size_t len = 0;
  1096ca:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	char buf[65];
	char *p;

	p = buf + 64;
  1096d1:	8d 45 a3             	lea    -0x5d(%ebp),%eax
  1096d4:	83 c0 40             	add    $0x40,%eax
  1096d7:	89 45 e8             	mov    %eax,-0x18(%ebp)

	*p = '\0';
  1096da:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1096dd:	c6 00 00             	movb   $0x0,(%eax)

	if(this->fmtflags_ & video::hex_)
  1096e0:	8b 45 08             	mov    0x8(%ebp),%eax
  1096e3:	8b 40 10             	mov    0x10(%eax),%eax
  1096e6:	83 e0 02             	and    $0x2,%eax
  1096e9:	85 c0                	test   %eax,%eax
  1096eb:	74 09                	je     1096f6 <_ZN3hal3x865video4putnEl+0x42>
	{
		base = 16;
  1096ed:	c7 45 f4 10 00 00 00 	movl   $0x10,-0xc(%ebp)
  1096f4:	eb 14                	jmp    10970a <_ZN3hal3x865video4putnEl+0x56>
	}
	else if(this->fmtflags_ & video::oct_)
  1096f6:	8b 45 08             	mov    0x8(%ebp),%eax
  1096f9:	8b 40 10             	mov    0x10(%eax),%eax
  1096fc:	83 e0 04             	and    $0x4,%eax
  1096ff:	85 c0                	test   %eax,%eax
  109701:	74 07                	je     10970a <_ZN3hal3x865video4putnEl+0x56>
	{
		base = 8;
  109703:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
	}

	do 
	{
		unsigned long d = n % base;
  10970a:	8b 45 0c             	mov    0xc(%ebp),%eax
  10970d:	ba 00 00 00 00       	mov    $0x0,%edx
  109712:	f7 75 f4             	divl   -0xc(%ebp)
  109715:	89 55 e4             	mov    %edx,-0x1c(%ebp)

		n /= base;
  109718:	8b 45 0c             	mov    0xc(%ebp),%eax
  10971b:	ba 00 00 00 00       	mov    $0x0,%edx
  109720:	f7 75 f4             	divl   -0xc(%ebp)
  109723:	89 45 0c             	mov    %eax,0xc(%ebp)

		--p;
  109726:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
		--fwidth;
  10972a:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
		++len;
  10972e:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
		*p = (char)digits[d];
  109732:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  109735:	05 00 ef 10 00       	add    $0x10ef00,%eax
  10973a:	0f b6 10             	movzbl (%eax),%edx
  10973d:	8b 45 e8             	mov    -0x18(%ebp),%eax
  109740:	88 10                	mov    %dl,(%eax)
	else if(this->fmtflags_ & video::oct_)
	{
		base = 8;
	}

	do 
  109742:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  109746:	75 13                	jne    10975b <_ZN3hal3x865video4putnEl+0xa7>

		--p;
		--fwidth;
		++len;
		*p = (char)digits[d];
	} while((n || ((this->fmtflags_ & video::hex_) && len < 8)) && p >= buf);
  109748:	8b 45 08             	mov    0x8(%ebp),%eax
  10974b:	8b 40 10             	mov    0x10(%eax),%eax
  10974e:	83 e0 02             	and    $0x2,%eax
  109751:	85 c0                	test   %eax,%eax
  109753:	74 0e                	je     109763 <_ZN3hal3x865video4putnEl+0xaf>
  109755:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
  109759:	77 08                	ja     109763 <_ZN3hal3x865video4putnEl+0xaf>
  10975b:	8d 45 a3             	lea    -0x5d(%ebp),%eax
  10975e:	39 45 e8             	cmp    %eax,-0x18(%ebp)
  109761:	73 a7                	jae    10970a <_ZN3hal3x865video4putnEl+0x56>

	if(this->fmtflags_ & video::hex_)
  109763:	8b 45 08             	mov    0x8(%ebp),%eax
  109766:	8b 40 10             	mov    0x10(%eax),%eax
  109769:	83 e0 02             	and    $0x2,%eax
  10976c:	85 c0                	test   %eax,%eax
  10976e:	74 1e                	je     10978e <_ZN3hal3x865video4putnEl+0xda>
	{
		*--p = 'x';
  109770:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
  109774:	8b 45 e8             	mov    -0x18(%ebp),%eax
  109777:	c6 00 78             	movb   $0x78,(%eax)
		--fwidth;
  10977a:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
		*--p = '0';
  10977e:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
  109782:	8b 45 e8             	mov    -0x18(%ebp),%eax
  109785:	c6 00 30             	movb   $0x30,(%eax)
		--fwidth;
  109788:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
  10978c:	eb 1b                	jmp    1097a9 <_ZN3hal3x865video4putnEl+0xf5>
	}
	else if(this->fmtflags_ & video::oct_)
  10978e:	8b 45 08             	mov    0x8(%ebp),%eax
  109791:	8b 40 10             	mov    0x10(%eax),%eax
  109794:	83 e0 04             	and    $0x4,%eax
  109797:	85 c0                	test   %eax,%eax
  109799:	74 0e                	je     1097a9 <_ZN3hal3x865video4putnEl+0xf5>
	{
		*--p = '0';
  10979b:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
  10979f:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1097a2:	c6 00 30             	movb   $0x30,(%eax)
		--fwidth;
  1097a5:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
	}

	while(fwidth > 0)
  1097a9:	eb 0e                	jmp    1097b9 <_ZN3hal3x865video4putnEl+0x105>
	{
		*--p = ' ';
  1097ab:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
  1097af:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1097b2:	c6 00 20             	movb   $0x20,(%eax)
		--fwidth;
  1097b5:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
	{
		*--p = '0';
		--fwidth;
	}

	while(fwidth > 0)
  1097b9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
  1097bd:	7f ec                	jg     1097ab <_ZN3hal3x865video4putnEl+0xf7>
	{
		*--p = ' ';
		--fwidth;
	}

	this->puts(p);
  1097bf:	8b 45 e8             	mov    -0x18(%ebp),%eax
  1097c2:	89 44 24 04          	mov    %eax,0x4(%esp)
  1097c6:	8b 45 08             	mov    0x8(%ebp),%eax
  1097c9:	89 04 24             	mov    %eax,(%esp)
  1097cc:	e8 03 00 00 00       	call   1097d4 <_ZN3hal3x865video4putsEPKc>
}
  1097d1:	c9                   	leave  
  1097d2:	c3                   	ret    
  1097d3:	90                   	nop

001097d4 <_ZN3hal3x865video4putsEPKc>:

void video::puts( const char *s )
{
  1097d4:	55                   	push   %ebp
  1097d5:	89 e5                	mov    %esp,%ebp
  1097d7:	83 ec 08             	sub    $0x8,%esp
	while(*s)
  1097da:	eb 1e                	jmp    1097fa <_ZN3hal3x865video4putsEPKc+0x26>
	{
		this->putc(*s++);
  1097dc:	8b 45 0c             	mov    0xc(%ebp),%eax
  1097df:	8d 50 01             	lea    0x1(%eax),%edx
  1097e2:	89 55 0c             	mov    %edx,0xc(%ebp)
  1097e5:	0f b6 00             	movzbl (%eax),%eax
  1097e8:	0f be c0             	movsbl %al,%eax
  1097eb:	89 44 24 04          	mov    %eax,0x4(%esp)
  1097ef:	8b 45 08             	mov    0x8(%ebp),%eax
  1097f2:	89 04 24             	mov    %eax,(%esp)
  1097f5:	e8 fa fc ff ff       	call   1094f4 <_ZN3hal3x865video4putcEc>
	this->puts(p);
}

void video::puts( const char *s )
{
	while(*s)
  1097fa:	8b 45 0c             	mov    0xc(%ebp),%eax
  1097fd:	0f b6 00             	movzbl (%eax),%eax
  109800:	84 c0                	test   %al,%al
  109802:	75 d8                	jne    1097dc <_ZN3hal3x865video4putsEPKc+0x8>
	{
		this->putc(*s++);
	}
}
  109804:	c9                   	leave  
  109805:	c3                   	ret    

00109806 <_ZN3hal3x865videolsEc>:

/*
video-output Operators
*/
video &video::operator << ( char c )
{
  109806:	55                   	push   %ebp
  109807:	89 e5                	mov    %esp,%ebp
  109809:	83 ec 0c             	sub    $0xc,%esp
  10980c:	8b 45 0c             	mov    0xc(%ebp),%eax
  10980f:	88 45 fc             	mov    %al,-0x4(%ebp)
	this->putc(c);
  109812:	0f be 45 fc          	movsbl -0x4(%ebp),%eax
  109816:	89 44 24 04          	mov    %eax,0x4(%esp)
  10981a:	8b 45 08             	mov    0x8(%ebp),%eax
  10981d:	89 04 24             	mov    %eax,(%esp)
  109820:	e8 cf fc ff ff       	call   1094f4 <_ZN3hal3x865video4putcEc>

	return *this;
  109825:	8b 45 08             	mov    0x8(%ebp),%eax
}
  109828:	c9                   	leave  
  109829:	c3                   	ret    

0010982a <_ZN3hal3x865videolsEh>:

video &video::operator << ( unsigned char c )
{
  10982a:	55                   	push   %ebp
  10982b:	89 e5                	mov    %esp,%ebp
  10982d:	83 ec 0c             	sub    $0xc,%esp
  109830:	8b 45 0c             	mov    0xc(%ebp),%eax
  109833:	88 45 fc             	mov    %al,-0x4(%ebp)
	return (*this << static_cast<char>(c));
  109836:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
  10983a:	0f be c0             	movsbl %al,%eax
  10983d:	89 44 24 04          	mov    %eax,0x4(%esp)
  109841:	8b 45 08             	mov    0x8(%ebp),%eax
  109844:	89 04 24             	mov    %eax,(%esp)
  109847:	e8 ba ff ff ff       	call   109806 <_ZN3hal3x865videolsEc>
}
  10984c:	c9                   	leave  
  10984d:	c3                   	ret    

0010984e <_ZN3hal3x865videolsEs>:
			
video &video::operator << ( short n )
{
  10984e:	55                   	push   %ebp
  10984f:	89 e5                	mov    %esp,%ebp
  109851:	83 ec 18             	sub    $0x18,%esp
  109854:	8b 45 0c             	mov    0xc(%ebp),%eax
  109857:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return (*this << static_cast<long>(n));
  10985b:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
  10985f:	89 44 24 04          	mov    %eax,0x4(%esp)
  109863:	8b 45 08             	mov    0x8(%ebp),%eax
  109866:	89 04 24             	mov    %eax,(%esp)
  109869:	e8 58 00 00 00       	call   1098c6 <_ZN3hal3x865videolsEl>
}
  10986e:	c9                   	leave  
  10986f:	c3                   	ret    

00109870 <_ZN3hal3x865videolsEt>:

video &video::operator << ( unsigned short n )
{
  109870:	55                   	push   %ebp
  109871:	89 e5                	mov    %esp,%ebp
  109873:	83 ec 18             	sub    $0x18,%esp
  109876:	8b 45 0c             	mov    0xc(%ebp),%eax
  109879:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return (*this << static_cast<unsigned long>(n));
  10987d:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
  109881:	89 44 24 04          	mov    %eax,0x4(%esp)
  109885:	8b 45 08             	mov    0x8(%ebp),%eax
  109888:	89 04 24             	mov    %eax,(%esp)
  10988b:	e8 54 00 00 00       	call   1098e4 <_ZN3hal3x865videolsEm>
}
  109890:	c9                   	leave  
  109891:	c3                   	ret    

00109892 <_ZN3hal3x865videolsEi>:

video &video::operator << ( int n )
{
  109892:	55                   	push   %ebp
  109893:	89 e5                	mov    %esp,%ebp
  109895:	83 ec 18             	sub    $0x18,%esp
	return (*this << static_cast<long>(n));
  109898:	8b 45 0c             	mov    0xc(%ebp),%eax
  10989b:	89 44 24 04          	mov    %eax,0x4(%esp)
  10989f:	8b 45 08             	mov    0x8(%ebp),%eax
  1098a2:	89 04 24             	mov    %eax,(%esp)
  1098a5:	e8 1c 00 00 00       	call   1098c6 <_ZN3hal3x865videolsEl>
}
  1098aa:	c9                   	leave  
  1098ab:	c3                   	ret    

001098ac <_ZN3hal3x865videolsEj>:

video &video::operator << ( unsigned int n )
{
  1098ac:	55                   	push   %ebp
  1098ad:	89 e5                	mov    %esp,%ebp
  1098af:	83 ec 18             	sub    $0x18,%esp
	return (*this << static_cast<unsigned long>(n));
  1098b2:	8b 45 0c             	mov    0xc(%ebp),%eax
  1098b5:	89 44 24 04          	mov    %eax,0x4(%esp)
  1098b9:	8b 45 08             	mov    0x8(%ebp),%eax
  1098bc:	89 04 24             	mov    %eax,(%esp)
  1098bf:	e8 20 00 00 00       	call   1098e4 <_ZN3hal3x865videolsEm>
}
  1098c4:	c9                   	leave  
  1098c5:	c3                   	ret    

001098c6 <_ZN3hal3x865videolsEl>:

video &video::operator << ( long n )
{
  1098c6:	55                   	push   %ebp
  1098c7:	89 e5                	mov    %esp,%ebp
  1098c9:	83 ec 18             	sub    $0x18,%esp
	this->putn(n);
  1098cc:	8b 45 0c             	mov    0xc(%ebp),%eax
  1098cf:	89 44 24 04          	mov    %eax,0x4(%esp)
  1098d3:	8b 45 08             	mov    0x8(%ebp),%eax
  1098d6:	89 04 24             	mov    %eax,(%esp)
  1098d9:	e8 d6 fd ff ff       	call   1096b4 <_ZN3hal3x865video4putnEl>
	
	return *this;
  1098de:	8b 45 08             	mov    0x8(%ebp),%eax
}
  1098e1:	c9                   	leave  
  1098e2:	c3                   	ret    
  1098e3:	90                   	nop

001098e4 <_ZN3hal3x865videolsEm>:

video &video::operator << ( unsigned long n )
{
  1098e4:	55                   	push   %ebp
  1098e5:	89 e5                	mov    %esp,%ebp
  1098e7:	83 ec 18             	sub    $0x18,%esp
	this->putn(n);
  1098ea:	8b 45 0c             	mov    0xc(%ebp),%eax
  1098ed:	89 44 24 04          	mov    %eax,0x4(%esp)
  1098f1:	8b 45 08             	mov    0x8(%ebp),%eax
  1098f4:	89 04 24             	mov    %eax,(%esp)
  1098f7:	e8 b8 fd ff ff       	call   1096b4 <_ZN3hal3x865video4putnEl>
	
	return *this;
  1098fc:	8b 45 08             	mov    0x8(%ebp),%eax
}
  1098ff:	c9                   	leave  
  109900:	c3                   	ret    
  109901:	90                   	nop

00109902 <_ZN3hal3x865videolsEDn>:

video &video::operator << ( nullptr_t p )
{
  109902:	55                   	push   %ebp
  109903:	89 e5                	mov    %esp,%ebp
  109905:	83 ec 28             	sub    $0x28,%esp
	video::fmtflags_t tmpf = this->setf(video::hex_);
  109908:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  10990f:	00 
  109910:	8b 45 08             	mov    0x8(%ebp),%eax
  109913:	89 04 24             	mov    %eax,(%esp)
  109916:	e8 d5 fa ff ff       	call   1093f0 <_ZN3hal3x865video4setfEj>
  10991b:	89 45 f4             	mov    %eax,-0xc(%ebp)

	video &tmpo = (*this << static_cast<unsigned long>((uintptr_t)p));
  10991e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  109925:	00 
  109926:	8b 45 08             	mov    0x8(%ebp),%eax
  109929:	89 04 24             	mov    %eax,(%esp)
  10992c:	e8 b3 ff ff ff       	call   1098e4 <_ZN3hal3x865videolsEm>
  109931:	89 45 f0             	mov    %eax,-0x10(%ebp)

	this->setf(tmpf);
  109934:	8b 45 f4             	mov    -0xc(%ebp),%eax
  109937:	89 44 24 04          	mov    %eax,0x4(%esp)
  10993b:	8b 45 08             	mov    0x8(%ebp),%eax
  10993e:	89 04 24             	mov    %eax,(%esp)
  109941:	e8 aa fa ff ff       	call   1093f0 <_ZN3hal3x865video4setfEj>

	return tmpo;
  109946:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
  109949:	c9                   	leave  
  10994a:	c3                   	ret    
  10994b:	90                   	nop

0010994c <_ZN3hal3x865videolsEPv>:

video &video::operator << ( void *p )
{
  10994c:	55                   	push   %ebp
  10994d:	89 e5                	mov    %esp,%ebp
  10994f:	83 ec 28             	sub    $0x28,%esp
	video::fmtflags_t tmpf = this->setf(video::hex_);
  109952:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  109959:	00 
  10995a:	8b 45 08             	mov    0x8(%ebp),%eax
  10995d:	89 04 24             	mov    %eax,(%esp)
  109960:	e8 8b fa ff ff       	call   1093f0 <_ZN3hal3x865video4setfEj>
  109965:	89 45 f4             	mov    %eax,-0xc(%ebp)

	video &tmpo = (*this << static_cast<unsigned long>((uintptr_t)p));
  109968:	8b 45 0c             	mov    0xc(%ebp),%eax
  10996b:	89 44 24 04          	mov    %eax,0x4(%esp)
  10996f:	8b 45 08             	mov    0x8(%ebp),%eax
  109972:	89 04 24             	mov    %eax,(%esp)
  109975:	e8 6a ff ff ff       	call   1098e4 <_ZN3hal3x865videolsEm>
  10997a:	89 45 f0             	mov    %eax,-0x10(%ebp)

	this->setf(tmpf);
  10997d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  109980:	89 44 24 04          	mov    %eax,0x4(%esp)
  109984:	8b 45 08             	mov    0x8(%ebp),%eax
  109987:	89 04 24             	mov    %eax,(%esp)
  10998a:	e8 61 fa ff ff       	call   1093f0 <_ZN3hal3x865video4setfEj>

	return tmpo;
  10998f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
  109992:	c9                   	leave  
  109993:	c3                   	ret    

00109994 <_ZN3hal3x865videolsEPKc>:

video &video::operator << ( const char *s )
{
  109994:	55                   	push   %ebp
  109995:	89 e5                	mov    %esp,%ebp
  109997:	83 ec 08             	sub    $0x8,%esp
	this->puts(s);
  10999a:	8b 45 0c             	mov    0xc(%ebp),%eax
  10999d:	89 44 24 04          	mov    %eax,0x4(%esp)
  1099a1:	8b 45 08             	mov    0x8(%ebp),%eax
  1099a4:	89 04 24             	mov    %eax,(%esp)
  1099a7:	e8 28 fe ff ff       	call   1097d4 <_ZN3hal3x865video4putsEPKc>

	return *this;
  1099ac:	8b 45 08             	mov    0x8(%ebp),%eax
}
  1099af:	c9                   	leave  
  1099b0:	c3                   	ret    
  1099b1:	90                   	nop

001099b2 <_ZN3hal3x865videolsENS0_5color7color_tE>:

video &video::operator << ( color::color_t color )
{
  1099b2:	55                   	push   %ebp
  1099b3:	89 e5                	mov    %esp,%ebp
  1099b5:	83 ec 08             	sub    $0x8,%esp
	this->set_color(color);
  1099b8:	8b 45 0c             	mov    0xc(%ebp),%eax
  1099bb:	89 44 24 04          	mov    %eax,0x4(%esp)
  1099bf:	8b 45 08             	mov    0x8(%ebp),%eax
  1099c2:	89 04 24             	mov    %eax,(%esp)
  1099c5:	e8 ac fa ff ff       	call   109476 <_ZN3hal3x865video9set_colorENS0_5color7color_tE>

	return *this;
  1099ca:	8b 45 08             	mov    0x8(%ebp),%eax
}
  1099cd:	c9                   	leave  
  1099ce:	c3                   	ret    
  1099cf:	90                   	nop

001099d0 <_ZN3hal3x865videolsERKNS0_5color10backgroundE>:

video &video::operator << ( const color::background &color )
{
  1099d0:	55                   	push   %ebp
  1099d1:	89 e5                	mov    %esp,%ebp
  1099d3:	83 ec 08             	sub    $0x8,%esp
	this->set_color(color);
  1099d6:	8b 45 0c             	mov    0xc(%ebp),%eax
  1099d9:	89 44 24 04          	mov    %eax,0x4(%esp)
  1099dd:	8b 45 08             	mov    0x8(%ebp),%eax
  1099e0:	89 04 24             	mov    %eax,(%esp)
  1099e3:	e8 ac fa ff ff       	call   109494 <_ZN3hal3x865video9set_colorERKNS0_5color10backgroundE>

	return *this;
  1099e8:	8b 45 08             	mov    0x8(%ebp),%eax
}
  1099eb:	c9                   	leave  
  1099ec:	c3                   	ret    

001099ed <_Z41__static_initialization_and_destruction_0ii>:
  1099ed:	55                   	push   %ebp
  1099ee:	89 e5                	mov    %esp,%ebp
  1099f0:	83 ec 18             	sub    $0x18,%esp
  1099f3:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
  1099f7:	75 15                	jne    109a0e <_Z41__static_initialization_and_destruction_0ii+0x21>
  1099f9:	81 7d 0c ff ff 00 00 	cmpl   $0xffff,0xc(%ebp)
  109a00:	75 0c                	jne    109a0e <_Z41__static_initialization_and_destruction_0ii+0x21>

#include "include/ioports.hpp"

using namespace hal::x86;

video hal::x86::screen;
  109a02:	c7 04 24 d4 38 13 00 	movl   $0x1338d4,(%esp)
  109a09:	e8 5c f9 ff ff       	call   10936a <_ZN3hal3x865videoC1Ev>
video &video::operator << ( const color::background &color )
{
	this->set_color(color);

	return *this;
}
  109a0e:	c9                   	leave  
  109a0f:	c3                   	ret    

00109a10 <_GLOBAL__sub_I__ZN3hal3x866screenE>:
  109a10:	55                   	push   %ebp
  109a11:	89 e5                	mov    %esp,%ebp
  109a13:	83 ec 18             	sub    $0x18,%esp
  109a16:	c7 44 24 04 ff ff 00 	movl   $0xffff,0x4(%esp)
  109a1d:	00 
  109a1e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
  109a25:	e8 c3 ff ff ff       	call   1099ed <_Z41__static_initialization_and_destruction_0ii>
  109a2a:	c9                   	leave  
  109a2b:	c3                   	ret    

00109a2c <_ZN3hal3x862io3inbEt>:

/*
Port lesen Byte
*/
uint8_t io::inb( uint16_t port )						
{
  109a2c:	55                   	push   %ebp
  109a2d:	89 e5                	mov    %esp,%ebp
  109a2f:	83 ec 14             	sub    $0x14,%esp
  109a32:	8b 45 08             	mov    0x8(%ebp),%eax
  109a35:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	uint8_t result;

      	asm volatile ("inb %1, %0" : "=a" (result) : "d" (port));
  109a39:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
  109a3d:	89 c2                	mov    %eax,%edx
  109a3f:	ec                   	in     (%dx),%al
  109a40:	88 45 ff             	mov    %al,-0x1(%ebp)

	return result;
  109a43:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
  109a47:	c9                   	leave  
  109a48:	c3                   	ret    

00109a49 <_ZN3hal3x862io3inwEt>:

/*
Port lesen Word (2 Byte)
*/
uint16_t io::inw( uint16_t port )						
{
  109a49:	55                   	push   %ebp
  109a4a:	89 e5                	mov    %esp,%ebp
  109a4c:	83 ec 14             	sub    $0x14,%esp
  109a4f:	8b 45 08             	mov    0x8(%ebp),%eax
  109a52:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	uint16_t result;

      	asm volatile ("inw %1, %0" : "=a" (result) : "d" (port));
  109a56:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
  109a5a:	89 c2                	mov    %eax,%edx
  109a5c:	66 ed                	in     (%dx),%ax
  109a5e:	66 89 45 fe          	mov    %ax,-0x2(%ebp)

	return result;
  109a62:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
}
  109a66:	c9                   	leave  
  109a67:	c3                   	ret    

00109a68 <_ZN3hal3x862io3inlEt>:

/*
Port lesen DWord (4 Byte)
*/
uint32_t io::inl( uint16_t port )						
{
  109a68:	55                   	push   %ebp
  109a69:	89 e5                	mov    %esp,%ebp
  109a6b:	83 ec 14             	sub    $0x14,%esp
  109a6e:	8b 45 08             	mov    0x8(%ebp),%eax
  109a71:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	uint32_t result;

      	asm volatile ("inl %1, %0" : "=a" (result) : "d" (port));
  109a75:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
  109a79:	89 c2                	mov    %eax,%edx
  109a7b:	ed                   	in     (%dx),%eax
  109a7c:	89 45 fc             	mov    %eax,-0x4(%ebp)

	return result;
  109a7f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  109a82:	c9                   	leave  
  109a83:	c3                   	ret    

00109a84 <_ZN3hal3x862io4outbEth>:

/*
Port schreiben Byte
*/
void io::outb( uint16_t port, uint8_t data )					
{
  109a84:	55                   	push   %ebp
  109a85:	89 e5                	mov    %esp,%ebp
  109a87:	83 ec 08             	sub    $0x8,%esp
  109a8a:	8b 55 08             	mov    0x8(%ebp),%edx
  109a8d:	8b 45 0c             	mov    0xc(%ebp),%eax
  109a90:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
  109a94:	88 45 f8             	mov    %al,-0x8(%ebp)
      	asm volatile ("outb %0, %1" : : "a" (data), "Nd" (port));
  109a97:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
  109a9b:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
  109a9f:	ee                   	out    %al,(%dx)
}
  109aa0:	c9                   	leave  
  109aa1:	c3                   	ret    

00109aa2 <_ZN3hal3x862io4outwEtt>:

/*
Port schreiben Word (2 Byte)
*/
void io::outw( uint16_t port, uint16_t data )					
{
  109aa2:	55                   	push   %ebp
  109aa3:	89 e5                	mov    %esp,%ebp
  109aa5:	83 ec 08             	sub    $0x8,%esp
  109aa8:	8b 55 08             	mov    0x8(%ebp),%edx
  109aab:	8b 45 0c             	mov    0xc(%ebp),%eax
  109aae:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
  109ab2:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
      	asm volatile ("outw %0, %1" : : "a" (data), "Nd" (port));
  109ab6:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
  109aba:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
  109abe:	66 ef                	out    %ax,(%dx)
}
  109ac0:	c9                   	leave  
  109ac1:	c3                   	ret    

00109ac2 <_ZN3hal3x862io4outlEtj>:

/*
Port schreiben DWord (4 Byte)
*/
void io::outl( uint16_t port, uint32_t data )					
{
  109ac2:	55                   	push   %ebp
  109ac3:	89 e5                	mov    %esp,%ebp
  109ac5:	83 ec 04             	sub    $0x4,%esp
  109ac8:	8b 45 08             	mov    0x8(%ebp),%eax
  109acb:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
      	asm volatile ("outl %0, %1" : : "a" (data), "Nd" (port));
  109acf:	8b 45 0c             	mov    0xc(%ebp),%eax
  109ad2:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
  109ad6:	ef                   	out    %eax,(%dx)
}
  109ad7:	c9                   	leave  
  109ad8:	c3                   	ret    

00109ad9 <memcpy>:
#include "include/string.h"

void *memcpy( void *dest, const void *src, size_t n )
{
  109ad9:	55                   	push   %ebp
  109ada:	89 e5                	mov    %esp,%ebp
  109adc:	83 ec 10             	sub    $0x10,%esp
	unsigned char *tdest = (unsigned char*)dest;
  109adf:	8b 45 08             	mov    0x8(%ebp),%eax
  109ae2:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const unsigned char *tsrc = (const unsigned char*)src;
  109ae5:	8b 45 0c             	mov    0xc(%ebp),%eax
  109ae8:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while(n--)
  109aeb:	eb 13                	jmp    109b00 <memcpy+0x27>
	{
			*tdest = *tsrc;
  109aed:	8b 45 f8             	mov    -0x8(%ebp),%eax
  109af0:	0f b6 10             	movzbl (%eax),%edx
  109af3:	8b 45 fc             	mov    -0x4(%ebp),%eax
  109af6:	88 10                	mov    %dl,(%eax)
			tdest++; tsrc++;
  109af8:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  109afc:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
void *memcpy( void *dest, const void *src, size_t n )
{
	unsigned char *tdest = (unsigned char*)dest;
	const unsigned char *tsrc = (const unsigned char*)src;

	while(n--)
  109b00:	8b 45 10             	mov    0x10(%ebp),%eax
  109b03:	8d 50 ff             	lea    -0x1(%eax),%edx
  109b06:	89 55 10             	mov    %edx,0x10(%ebp)
  109b09:	85 c0                	test   %eax,%eax
  109b0b:	75 e0                	jne    109aed <memcpy+0x14>
	{
			*tdest = *tsrc;
			tdest++; tsrc++;
	}

	return dest;
  109b0d:	8b 45 08             	mov    0x8(%ebp),%eax
}
  109b10:	c9                   	leave  
  109b11:	c3                   	ret    

00109b12 <strcpy>:
	return dest;
}
*/

char *strcpy( char *dest, const char *src )
{
  109b12:	55                   	push   %ebp
  109b13:	89 e5                	mov    %esp,%ebp
  109b15:	83 ec 18             	sub    $0x18,%esp
	return memcpy( (void*)dest, (void*)src, strlen(src) + 1 );
  109b18:	8b 45 0c             	mov    0xc(%ebp),%eax
  109b1b:	89 04 24             	mov    %eax,(%esp)
  109b1e:	e8 c7 04 00 00       	call   109fea <strlen>
  109b23:	83 c0 01             	add    $0x1,%eax
  109b26:	89 44 24 08          	mov    %eax,0x8(%esp)
  109b2a:	8b 45 0c             	mov    0xc(%ebp),%eax
  109b2d:	89 44 24 04          	mov    %eax,0x4(%esp)
  109b31:	8b 45 08             	mov    0x8(%ebp),%eax
  109b34:	89 04 24             	mov    %eax,(%esp)
  109b37:	e8 9d ff ff ff       	call   109ad9 <memcpy>
}
  109b3c:	c9                   	leave  
  109b3d:	c3                   	ret    

00109b3e <strncpy>:

char *strncpy( char *dest, const char *src, size_t n )
{
  109b3e:	55                   	push   %ebp
  109b3f:	89 e5                	mov    %esp,%ebp
  109b41:	83 ec 28             	sub    $0x28,%esp
	size_t len = strlen(src) + 1;
  109b44:	8b 45 0c             	mov    0xc(%ebp),%eax
  109b47:	89 04 24             	mov    %eax,(%esp)
  109b4a:	e8 9b 04 00 00       	call   109fea <strlen>
  109b4f:	83 c0 01             	add    $0x1,%eax
  109b52:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(len > n)
  109b55:	8b 45 f4             	mov    -0xc(%ebp),%eax
  109b58:	3b 45 10             	cmp    0x10(%ebp),%eax
  109b5b:	76 06                	jbe    109b63 <strncpy+0x25>
	{
		len = n;
  109b5d:	8b 45 10             	mov    0x10(%ebp),%eax
  109b60:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	memcpy( dest, src, len);
  109b63:	8b 45 f4             	mov    -0xc(%ebp),%eax
  109b66:	89 44 24 08          	mov    %eax,0x8(%esp)
  109b6a:	8b 45 0c             	mov    0xc(%ebp),%eax
  109b6d:	89 44 24 04          	mov    %eax,0x4(%esp)
  109b71:	8b 45 08             	mov    0x8(%ebp),%eax
  109b74:	89 04 24             	mov    %eax,(%esp)
  109b77:	e8 5d ff ff ff       	call   109ad9 <memcpy>

	if(len < n)
  109b7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  109b7f:	3b 45 10             	cmp    0x10(%ebp),%eax
  109b82:	73 24                	jae    109ba8 <strncpy+0x6a>
	{
		memset( dest + n, '\0', n - len);
  109b84:	8b 45 f4             	mov    -0xc(%ebp),%eax
  109b87:	8b 55 10             	mov    0x10(%ebp),%edx
  109b8a:	29 c2                	sub    %eax,%edx
  109b8c:	8b 45 10             	mov    0x10(%ebp),%eax
  109b8f:	8b 4d 08             	mov    0x8(%ebp),%ecx
  109b92:	01 c8                	add    %ecx,%eax
  109b94:	89 54 24 08          	mov    %edx,0x8(%esp)
  109b98:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  109b9f:	00 
  109ba0:	89 04 24             	mov    %eax,(%esp)
  109ba3:	e8 17 04 00 00       	call   109fbf <memset>
	}
	
	return dest;
  109ba8:	8b 45 08             	mov    0x8(%ebp),%eax
}
  109bab:	c9                   	leave  
  109bac:	c3                   	ret    

00109bad <strcat>:


char *strcat( char *dest, const char *src )
{
  109bad:	55                   	push   %ebp
  109bae:	89 e5                	mov    %esp,%ebp
  109bb0:	83 ec 10             	sub    $0x10,%esp
	char *tdest = (char*)dest;
  109bb3:	8b 45 08             	mov    0x8(%ebp),%eax
  109bb6:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const char *tsrc = (const char*)src;
  109bb9:	8b 45 0c             	mov    0xc(%ebp),%eax
  109bbc:	89 45 f8             	mov    %eax,-0x8(%ebp)
 
	while( *tdest != '\0' )
  109bbf:	eb 04                	jmp    109bc5 <strcat+0x18>
	{
		tdest++;
  109bc1:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
char *strcat( char *dest, const char *src )
{
	char *tdest = (char*)dest;
	const char *tsrc = (const char*)src;
 
	while( *tdest != '\0' )
  109bc5:	8b 45 fc             	mov    -0x4(%ebp),%eax
  109bc8:	0f b6 00             	movzbl (%eax),%eax
  109bcb:	84 c0                	test   %al,%al
  109bcd:	75 f2                	jne    109bc1 <strcat+0x14>
	{
		tdest++;
	}

	while( *tsrc != '\0' )
  109bcf:	eb 13                	jmp    109be4 <strcat+0x37>
	{
		*tdest = *tsrc;
  109bd1:	8b 45 f8             	mov    -0x8(%ebp),%eax
  109bd4:	0f b6 10             	movzbl (%eax),%edx
  109bd7:	8b 45 fc             	mov    -0x4(%ebp),%eax
  109bda:	88 10                	mov    %dl,(%eax)
		tdest++; tsrc++;
  109bdc:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  109be0:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
	while( *tdest != '\0' )
	{
		tdest++;
	}

	while( *tsrc != '\0' )
  109be4:	8b 45 f8             	mov    -0x8(%ebp),%eax
  109be7:	0f b6 00             	movzbl (%eax),%eax
  109bea:	84 c0                	test   %al,%al
  109bec:	75 e3                	jne    109bd1 <strcat+0x24>
	{
		*tdest = *tsrc;
		tdest++; tsrc++;
	}

	*tdest = '\0';
  109bee:	8b 45 fc             	mov    -0x4(%ebp),%eax
  109bf1:	c6 00 00             	movb   $0x0,(%eax)

	return dest;
  109bf4:	8b 45 08             	mov    0x8(%ebp),%eax
}
  109bf7:	c9                   	leave  
  109bf8:	c3                   	ret    

00109bf9 <strncat>:

char *strncat( char *dest, const char *src, size_t n )
{
  109bf9:	55                   	push   %ebp
  109bfa:	89 e5                	mov    %esp,%ebp
  109bfc:	83 ec 10             	sub    $0x10,%esp
	char *tdest = (char*)dest;
  109bff:	8b 45 08             	mov    0x8(%ebp),%eax
  109c02:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const char *tsrc = (const char*)src;
  109c05:	8b 45 0c             	mov    0xc(%ebp),%eax
  109c08:	89 45 f8             	mov    %eax,-0x8(%ebp)
 
	while( *tdest != '\0' )
  109c0b:	eb 04                	jmp    109c11 <strncat+0x18>
	{
		tdest++;
  109c0d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
char *strncat( char *dest, const char *src, size_t n )
{
	char *tdest = (char*)dest;
	const char *tsrc = (const char*)src;
 
	while( *tdest != '\0' )
  109c11:	8b 45 fc             	mov    -0x4(%ebp),%eax
  109c14:	0f b6 00             	movzbl (%eax),%eax
  109c17:	84 c0                	test   %al,%al
  109c19:	75 f2                	jne    109c0d <strncat+0x14>
	{
		tdest++;
	}

	while( *tsrc != '\0' && n > 0)
  109c1b:	eb 17                	jmp    109c34 <strncat+0x3b>
	{
		*tdest = *tsrc;
  109c1d:	8b 45 f8             	mov    -0x8(%ebp),%eax
  109c20:	0f b6 10             	movzbl (%eax),%edx
  109c23:	8b 45 fc             	mov    -0x4(%ebp),%eax
  109c26:	88 10                	mov    %dl,(%eax)
		tdest++; tsrc++; n--;
  109c28:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  109c2c:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  109c30:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
	while( *tdest != '\0' )
	{
		tdest++;
	}

	while( *tsrc != '\0' && n > 0)
  109c34:	8b 45 f8             	mov    -0x8(%ebp),%eax
  109c37:	0f b6 00             	movzbl (%eax),%eax
  109c3a:	84 c0                	test   %al,%al
  109c3c:	74 06                	je     109c44 <strncat+0x4b>
  109c3e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  109c42:	75 d9                	jne    109c1d <strncat+0x24>
	{
		*tdest = *tsrc;
		tdest++; tsrc++; n--;
	}

	*tdest = '\0';
  109c44:	8b 45 fc             	mov    -0x4(%ebp),%eax
  109c47:	c6 00 00             	movb   $0x0,(%eax)

	return dest;
  109c4a:	8b 45 08             	mov    0x8(%ebp),%eax
}
  109c4d:	c9                   	leave  
  109c4e:	c3                   	ret    

00109c4f <memcmp>:

int memcmp( const void *ptr1, const void *ptr2, size_t n )
{
  109c4f:	55                   	push   %ebp
  109c50:	89 e5                	mov    %esp,%ebp
  109c52:	83 ec 10             	sub    $0x10,%esp
	const unsigned char *tptr1 = (const unsigned char*) ptr1;
  109c55:	8b 45 08             	mov    0x8(%ebp),%eax
  109c58:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const unsigned char *tptr2 = (const unsigned char*) ptr2;
  109c5b:	8b 45 0c             	mov    0xc(%ebp),%eax
  109c5e:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while(n > 0)
  109c61:	eb 3a                	jmp    109c9d <memcmp+0x4e>
	{
		if( *tptr1 > *tptr2 )
  109c63:	8b 45 fc             	mov    -0x4(%ebp),%eax
  109c66:	0f b6 10             	movzbl (%eax),%edx
  109c69:	8b 45 f8             	mov    -0x8(%ebp),%eax
  109c6c:	0f b6 00             	movzbl (%eax),%eax
  109c6f:	38 c2                	cmp    %al,%dl
  109c71:	76 07                	jbe    109c7a <memcmp+0x2b>
		{
			return 1;
  109c73:	b8 01 00 00 00       	mov    $0x1,%eax
  109c78:	eb 2e                	jmp    109ca8 <memcmp+0x59>
		}
		else if( *tptr1 < *tptr2 )
  109c7a:	8b 45 fc             	mov    -0x4(%ebp),%eax
  109c7d:	0f b6 10             	movzbl (%eax),%edx
  109c80:	8b 45 f8             	mov    -0x8(%ebp),%eax
  109c83:	0f b6 00             	movzbl (%eax),%eax
  109c86:	38 c2                	cmp    %al,%dl
  109c88:	73 07                	jae    109c91 <memcmp+0x42>
		{
			return -1;
  109c8a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  109c8f:	eb 17                	jmp    109ca8 <memcmp+0x59>
		}

		tptr1++; tptr2++; n--;
  109c91:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  109c95:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
  109c99:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
int memcmp( const void *ptr1, const void *ptr2, size_t n )
{
	const unsigned char *tptr1 = (const unsigned char*) ptr1;
	const unsigned char *tptr2 = (const unsigned char*) ptr2;

	while(n > 0)
  109c9d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  109ca1:	75 c0                	jne    109c63 <memcmp+0x14>
		}

		tptr1++; tptr2++; n--;
	}

	return 0;
  109ca3:	b8 00 00 00 00       	mov    $0x0,%eax
}
  109ca8:	c9                   	leave  
  109ca9:	c3                   	ret    

00109caa <strcmp>:

int strcmp( const char *str1, const char *str2 )
{
  109caa:	55                   	push   %ebp
  109cab:	89 e5                	mov    %esp,%ebp
  109cad:	83 ec 28             	sub    $0x28,%esp
	size_t len1 = strlen(str1);
  109cb0:	8b 45 08             	mov    0x8(%ebp),%eax
  109cb3:	89 04 24             	mov    %eax,(%esp)
  109cb6:	e8 2f 03 00 00       	call   109fea <strlen>
  109cbb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	size_t len2 = strlen(str2);
  109cbe:	8b 45 0c             	mov    0xc(%ebp),%eax
  109cc1:	89 04 24             	mov    %eax,(%esp)
  109cc4:	e8 21 03 00 00       	call   109fea <strlen>
  109cc9:	89 45 ec             	mov    %eax,-0x14(%ebp)

	size_t len_ = len2;
  109ccc:	8b 45 ec             	mov    -0x14(%ebp),%eax
  109ccf:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(len1 < len2)
  109cd2:	8b 45 f0             	mov    -0x10(%ebp),%eax
  109cd5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  109cd8:	73 06                	jae    109ce0 <strcmp+0x36>
	{
		len_ = len1;
  109cda:	8b 45 f0             	mov    -0x10(%ebp),%eax
  109cdd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	int cmpr = memcmp( str1, str2, len_ );
  109ce0:	8b 45 f4             	mov    -0xc(%ebp),%eax
  109ce3:	89 44 24 08          	mov    %eax,0x8(%esp)
  109ce7:	8b 45 0c             	mov    0xc(%ebp),%eax
  109cea:	89 44 24 04          	mov    %eax,0x4(%esp)
  109cee:	8b 45 08             	mov    0x8(%ebp),%eax
  109cf1:	89 04 24             	mov    %eax,(%esp)
  109cf4:	e8 56 ff ff ff       	call   109c4f <memcmp>
  109cf9:	89 45 e8             	mov    %eax,-0x18(%ebp)
	
	if(cmpr != 0)
  109cfc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
  109d00:	74 05                	je     109d07 <strcmp+0x5d>
	{
		return cmpr;
  109d02:	8b 45 e8             	mov    -0x18(%ebp),%eax
  109d05:	eb 23                	jmp    109d2a <strcmp+0x80>
	}

	if(len1 > len2)
  109d07:	8b 45 f0             	mov    -0x10(%ebp),%eax
  109d0a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  109d0d:	76 07                	jbe    109d16 <strcmp+0x6c>
	{
		return 1;
  109d0f:	b8 01 00 00 00       	mov    $0x1,%eax
  109d14:	eb 14                	jmp    109d2a <strcmp+0x80>
	}
	else if(len1 < len2)
  109d16:	8b 45 f0             	mov    -0x10(%ebp),%eax
  109d19:	3b 45 ec             	cmp    -0x14(%ebp),%eax
  109d1c:	73 07                	jae    109d25 <strcmp+0x7b>
	{
		return -1;
  109d1e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  109d23:	eb 05                	jmp    109d2a <strcmp+0x80>
	}

	return 0;
  109d25:	b8 00 00 00 00       	mov    $0x0,%eax
}
  109d2a:	c9                   	leave  
  109d2b:	c3                   	ret    

00109d2c <strncmp>:

int strncmp( const char *str1, const char *str2, size_t n )
{
  109d2c:	55                   	push   %ebp
  109d2d:	89 e5                	mov    %esp,%ebp
  109d2f:	83 ec 0c             	sub    $0xc,%esp
	return memcmp( str1, str2, n);
  109d32:	8b 45 10             	mov    0x10(%ebp),%eax
  109d35:	89 44 24 08          	mov    %eax,0x8(%esp)
  109d39:	8b 45 0c             	mov    0xc(%ebp),%eax
  109d3c:	89 44 24 04          	mov    %eax,0x4(%esp)
  109d40:	8b 45 08             	mov    0x8(%ebp),%eax
  109d43:	89 04 24             	mov    %eax,(%esp)
  109d46:	e8 04 ff ff ff       	call   109c4f <memcmp>
}
  109d4b:	c9                   	leave  
  109d4c:	c3                   	ret    

00109d4d <memchr>:


void *memchr( const void *ptr, int value, size_t n )
{
  109d4d:	55                   	push   %ebp
  109d4e:	89 e5                	mov    %esp,%ebp
  109d50:	83 ec 10             	sub    $0x10,%esp
	const unsigned char *tptr = (const unsigned char*)ptr;
  109d53:	8b 45 08             	mov    0x8(%ebp),%eax
  109d56:	89 45 fc             	mov    %eax,-0x4(%ebp)
	
	while(n > 0)
  109d59:	eb 1a                	jmp    109d75 <memchr+0x28>
	{
		if(*tptr == (unsigned char)value)
  109d5b:	8b 45 fc             	mov    -0x4(%ebp),%eax
  109d5e:	0f b6 10             	movzbl (%eax),%edx
  109d61:	8b 45 0c             	mov    0xc(%ebp),%eax
  109d64:	38 c2                	cmp    %al,%dl
  109d66:	75 05                	jne    109d6d <memchr+0x20>
		{
			return (void*)tptr;
  109d68:	8b 45 fc             	mov    -0x4(%ebp),%eax
  109d6b:	eb 13                	jmp    109d80 <memchr+0x33>
		}

		tptr++; n--;
  109d6d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  109d71:	83 6d 10 01          	subl   $0x1,0x10(%ebp)

void *memchr( const void *ptr, int value, size_t n )
{
	const unsigned char *tptr = (const unsigned char*)ptr;
	
	while(n > 0)
  109d75:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  109d79:	75 e0                	jne    109d5b <memchr+0xe>
		}

		tptr++; n--;
	}

	return NULL;
  109d7b:	b8 00 00 00 00       	mov    $0x0,%eax
}
  109d80:	c9                   	leave  
  109d81:	c3                   	ret    

00109d82 <strchr>:

char *strchr( const char *str, int chr )
{
  109d82:	55                   	push   %ebp
  109d83:	89 e5                	mov    %esp,%ebp
	while(*str != '\0')
  109d85:	eb 17                	jmp    109d9e <strchr+0x1c>
	{
		if(*str == chr)
  109d87:	8b 45 08             	mov    0x8(%ebp),%eax
  109d8a:	0f b6 00             	movzbl (%eax),%eax
  109d8d:	0f be c0             	movsbl %al,%eax
  109d90:	3b 45 0c             	cmp    0xc(%ebp),%eax
  109d93:	75 05                	jne    109d9a <strchr+0x18>
		{
			return (char*)str;
  109d95:	8b 45 08             	mov    0x8(%ebp),%eax
  109d98:	eb 13                	jmp    109dad <strchr+0x2b>
		}

		str++;
  109d9a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
	return NULL;
}

char *strchr( const char *str, int chr )
{
	while(*str != '\0')
  109d9e:	8b 45 08             	mov    0x8(%ebp),%eax
  109da1:	0f b6 00             	movzbl (%eax),%eax
  109da4:	84 c0                	test   %al,%al
  109da6:	75 df                	jne    109d87 <strchr+0x5>
		}

		str++;
	}
	
	return NULL;
  109da8:	b8 00 00 00 00       	mov    $0x0,%eax
}
  109dad:	5d                   	pop    %ebp
  109dae:	c3                   	ret    

00109daf <strcspn>:

size_t strcspn( const char *str1, const char *str2 )
{
  109daf:	55                   	push   %ebp
  109db0:	89 e5                	mov    %esp,%ebp
  109db2:	83 ec 28             	sub    $0x28,%esp
	size_t pos = 0;
  109db5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	size_t len1 = strlen(str1);
  109dbc:	8b 45 08             	mov    0x8(%ebp),%eax
  109dbf:	89 04 24             	mov    %eax,(%esp)
  109dc2:	e8 23 02 00 00       	call   109fea <strlen>
  109dc7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	size_t len2 = strlen(str2);
  109dca:	8b 45 0c             	mov    0xc(%ebp),%eax
  109dcd:	89 04 24             	mov    %eax,(%esp)
  109dd0:	e8 15 02 00 00       	call   109fea <strlen>
  109dd5:	89 45 e8             	mov    %eax,-0x18(%ebp)

	size_t i;

	for(; *str1 != '\0'; str1++)
  109dd8:	eb 37                	jmp    109e11 <strcspn+0x62>
	{
		for(i = 0; i < len2; i++)
  109dda:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  109de1:	eb 1e                	jmp    109e01 <strcspn+0x52>
		{
			if(*str1 == str2[i])
  109de3:	8b 45 08             	mov    0x8(%ebp),%eax
  109de6:	0f b6 10             	movzbl (%eax),%edx
  109de9:	8b 45 f0             	mov    -0x10(%ebp),%eax
  109dec:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  109def:	01 c8                	add    %ecx,%eax
  109df1:	0f b6 00             	movzbl (%eax),%eax
  109df4:	38 c2                	cmp    %al,%dl
  109df6:	75 05                	jne    109dfd <strcspn+0x4e>
			{
				return pos;
  109df8:	8b 45 f4             	mov    -0xc(%ebp),%eax
  109dfb:	eb 21                	jmp    109e1e <strcspn+0x6f>

	size_t i;

	for(; *str1 != '\0'; str1++)
	{
		for(i = 0; i < len2; i++)
  109dfd:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  109e01:	8b 45 f0             	mov    -0x10(%ebp),%eax
  109e04:	3b 45 e8             	cmp    -0x18(%ebp),%eax
  109e07:	72 da                	jb     109de3 <strcspn+0x34>
			{
				return pos;
			}
		}

		pos++;
  109e09:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
	size_t len1 = strlen(str1);
	size_t len2 = strlen(str2);

	size_t i;

	for(; *str1 != '\0'; str1++)
  109e0d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
  109e11:	8b 45 08             	mov    0x8(%ebp),%eax
  109e14:	0f b6 00             	movzbl (%eax),%eax
  109e17:	84 c0                	test   %al,%al
  109e19:	75 bf                	jne    109dda <strcspn+0x2b>
		}

		pos++;
	}

	return len1;
  109e1b:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
  109e1e:	c9                   	leave  
  109e1f:	c3                   	ret    

00109e20 <strpbrk>:

char *strpbrk( const char *str1, const char *str2 )
{
  109e20:	55                   	push   %ebp
  109e21:	89 e5                	mov    %esp,%ebp
  109e23:	83 ec 28             	sub    $0x28,%esp
	size_t len2 = strlen(str2);
  109e26:	8b 45 0c             	mov    0xc(%ebp),%eax
  109e29:	89 04 24             	mov    %eax,(%esp)
  109e2c:	e8 b9 01 00 00       	call   109fea <strlen>
  109e31:	89 45 f0             	mov    %eax,-0x10(%ebp)

	size_t i;

	for(; *str1 != '\0'; str1++)
  109e34:	eb 33                	jmp    109e69 <strpbrk+0x49>
	{
		for(i = 0; i < len2; i++)
  109e36:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
  109e3d:	eb 1e                	jmp    109e5d <strpbrk+0x3d>
		{
			if(*str1 == str2[i])
  109e3f:	8b 45 08             	mov    0x8(%ebp),%eax
  109e42:	0f b6 10             	movzbl (%eax),%edx
  109e45:	8b 45 f4             	mov    -0xc(%ebp),%eax
  109e48:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  109e4b:	01 c8                	add    %ecx,%eax
  109e4d:	0f b6 00             	movzbl (%eax),%eax
  109e50:	38 c2                	cmp    %al,%dl
  109e52:	75 05                	jne    109e59 <strpbrk+0x39>
			{
				return (char*)str1;
  109e54:	8b 45 08             	mov    0x8(%ebp),%eax
  109e57:	eb 1f                	jmp    109e78 <strpbrk+0x58>

	size_t i;

	for(; *str1 != '\0'; str1++)
	{
		for(i = 0; i < len2; i++)
  109e59:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
  109e5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  109e60:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  109e63:	72 da                	jb     109e3f <strpbrk+0x1f>
{
	size_t len2 = strlen(str2);

	size_t i;

	for(; *str1 != '\0'; str1++)
  109e65:	83 45 08 01          	addl   $0x1,0x8(%ebp)
  109e69:	8b 45 08             	mov    0x8(%ebp),%eax
  109e6c:	0f b6 00             	movzbl (%eax),%eax
  109e6f:	84 c0                	test   %al,%al
  109e71:	75 c3                	jne    109e36 <strpbrk+0x16>
				return (char*)str1;
			}
		}
	}

	return NULL;
  109e73:	b8 00 00 00 00       	mov    $0x0,%eax
}
  109e78:	c9                   	leave  
  109e79:	c3                   	ret    

00109e7a <strrchr>:

char *strrchr( const char *str, int chr )
{
  109e7a:	55                   	push   %ebp
  109e7b:	89 e5                	mov    %esp,%ebp
  109e7d:	83 ec 10             	sub    $0x10,%esp
	char *occ = NULL;
  109e80:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	
	while(*str != '\0')
  109e87:	eb 18                	jmp    109ea1 <strrchr+0x27>
	{
		if(*str == chr)
  109e89:	8b 45 08             	mov    0x8(%ebp),%eax
  109e8c:	0f b6 00             	movzbl (%eax),%eax
  109e8f:	0f be c0             	movsbl %al,%eax
  109e92:	3b 45 0c             	cmp    0xc(%ebp),%eax
  109e95:	75 06                	jne    109e9d <strrchr+0x23>
		{
			occ = (char*)str;
  109e97:	8b 45 08             	mov    0x8(%ebp),%eax
  109e9a:	89 45 fc             	mov    %eax,-0x4(%ebp)
		}

		str++;
  109e9d:	83 45 08 01          	addl   $0x1,0x8(%ebp)

char *strrchr( const char *str, int chr )
{
	char *occ = NULL;
	
	while(*str != '\0')
  109ea1:	8b 45 08             	mov    0x8(%ebp),%eax
  109ea4:	0f b6 00             	movzbl (%eax),%eax
  109ea7:	84 c0                	test   %al,%al
  109ea9:	75 de                	jne    109e89 <strrchr+0xf>
		}

		str++;
	}

	return occ;
  109eab:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  109eae:	c9                   	leave  
  109eaf:	c3                   	ret    

00109eb0 <strspn>:

size_t strspn( const char *str1, const char *str2 )
{
  109eb0:	55                   	push   %ebp
  109eb1:	89 e5                	mov    %esp,%ebp
  109eb3:	83 ec 28             	sub    $0x28,%esp
	size_t len = 0;
  109eb6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	size_t i;

	int found = 1;
  109ebd:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

	while(*str1 && found)
  109ec4:	eb 4a                	jmp    109f10 <strspn+0x60>
	{
		found = 0;
  109ec6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

		for(i = 0; i < strlen(str2); i++)
  109ecd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  109ed4:	eb 26                	jmp    109efc <strspn+0x4c>
		{
			if(*str1 == str2[i])
  109ed6:	8b 45 08             	mov    0x8(%ebp),%eax
  109ed9:	0f b6 10             	movzbl (%eax),%edx
  109edc:	8b 45 f0             	mov    -0x10(%ebp),%eax
  109edf:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  109ee2:	01 c8                	add    %ecx,%eax
  109ee4:	0f b6 00             	movzbl (%eax),%eax
  109ee7:	38 c2                	cmp    %al,%dl
  109ee9:	75 0d                	jne    109ef8 <strspn+0x48>
			{
				len++;
  109eeb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
				found = 1;
  109eef:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
				break;
  109ef6:	eb 14                	jmp    109f0c <strspn+0x5c>

	while(*str1 && found)
	{
		found = 0;

		for(i = 0; i < strlen(str2); i++)
  109ef8:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
  109efc:	8b 45 0c             	mov    0xc(%ebp),%eax
  109eff:	89 04 24             	mov    %eax,(%esp)
  109f02:	e8 e3 00 00 00       	call   109fea <strlen>
  109f07:	3b 45 f0             	cmp    -0x10(%ebp),%eax
  109f0a:	77 ca                	ja     109ed6 <strspn+0x26>
				found = 1;
				break;
			}
		}
		
		str1++;
  109f0c:	83 45 08 01          	addl   $0x1,0x8(%ebp)

	size_t i;

	int found = 1;

	while(*str1 && found)
  109f10:	8b 45 08             	mov    0x8(%ebp),%eax
  109f13:	0f b6 00             	movzbl (%eax),%eax
  109f16:	84 c0                	test   %al,%al
  109f18:	74 06                	je     109f20 <strspn+0x70>
  109f1a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
  109f1e:	75 a6                	jne    109ec6 <strspn+0x16>
		}
		
		str1++;
	}

        return len;
  109f20:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
  109f23:	c9                   	leave  
  109f24:	c3                   	ret    

00109f25 <strtok>:
	return (char*)str1;
}
*/

char *strtok( char *str, const char *delimiters )
{
  109f25:	55                   	push   %ebp
  109f26:	89 e5                	mov    %esp,%ebp
  109f28:	83 ec 28             	sub    $0x28,%esp
	static char *prevstr;

	if(str == NULL)
  109f2b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  109f2f:	75 18                	jne    109f49 <strtok+0x24>
	{
		if(prevstr == NULL)
  109f31:	a1 ec 38 13 00       	mov    0x1338ec,%eax
  109f36:	85 c0                	test   %eax,%eax
  109f38:	75 07                	jne    109f41 <strtok+0x1c>
		{
			return NULL;
  109f3a:	b8 00 00 00 00       	mov    $0x0,%eax
  109f3f:	eb 7c                	jmp    109fbd <strtok+0x98>
		}

		str = prevstr;
  109f41:	a1 ec 38 13 00       	mov    0x1338ec,%eax
  109f46:	89 45 08             	mov    %eax,0x8(%ebp)
	}

	str += strspn(str, delimiters);
  109f49:	8b 45 0c             	mov    0xc(%ebp),%eax
  109f4c:	89 44 24 04          	mov    %eax,0x4(%esp)
  109f50:	8b 45 08             	mov    0x8(%ebp),%eax
  109f53:	89 04 24             	mov    %eax,(%esp)
  109f56:	e8 55 ff ff ff       	call   109eb0 <strspn>
  109f5b:	01 45 08             	add    %eax,0x8(%ebp)

	if(*str == '\0')
  109f5e:	8b 45 08             	mov    0x8(%ebp),%eax
  109f61:	0f b6 00             	movzbl (%eax),%eax
  109f64:	84 c0                	test   %al,%al
  109f66:	75 07                	jne    109f6f <strtok+0x4a>
	{
		return NULL;
  109f68:	b8 00 00 00 00       	mov    $0x0,%eax
  109f6d:	eb 4e                	jmp    109fbd <strtok+0x98>
	}

	size_t str_new_len = strcspn(str, delimiters);
  109f6f:	8b 45 0c             	mov    0xc(%ebp),%eax
  109f72:	89 44 24 04          	mov    %eax,0x4(%esp)
  109f76:	8b 45 08             	mov    0x8(%ebp),%eax
  109f79:	89 04 24             	mov    %eax,(%esp)
  109f7c:	e8 2e fe ff ff       	call   109daf <strcspn>
  109f81:	89 45 f4             	mov    %eax,-0xc(%ebp)
       
        if(str[str_new_len] == '\0') 
  109f84:	8b 45 f4             	mov    -0xc(%ebp),%eax
  109f87:	8b 55 08             	mov    0x8(%ebp),%edx
  109f8a:	01 d0                	add    %edx,%eax
  109f8c:	0f b6 00             	movzbl (%eax),%eax
  109f8f:	84 c0                	test   %al,%al
  109f91:	75 0c                	jne    109f9f <strtok+0x7a>
	{
                prevstr = NULL;
  109f93:	c7 05 ec 38 13 00 00 	movl   $0x0,0x1338ec
  109f9a:	00 00 00 
  109f9d:	eb 1b                	jmp    109fba <strtok+0x95>
	}
        else 
	{
                str[str_new_len] = '\0';
  109f9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  109fa2:	8b 55 08             	mov    0x8(%ebp),%edx
  109fa5:	01 d0                	add    %edx,%eax
  109fa7:	c6 00 00             	movb   $0x0,(%eax)
                prevstr = str + str_new_len + 1;
  109faa:	8b 45 f4             	mov    -0xc(%ebp),%eax
  109fad:	8d 50 01             	lea    0x1(%eax),%edx
  109fb0:	8b 45 08             	mov    0x8(%ebp),%eax
  109fb3:	01 d0                	add    %edx,%eax
  109fb5:	a3 ec 38 13 00       	mov    %eax,0x1338ec
        }

	return str;
  109fba:	8b 45 08             	mov    0x8(%ebp),%eax
}
  109fbd:	c9                   	leave  
  109fbe:	c3                   	ret    

00109fbf <memset>:



void *memset( void *ptr, int value, size_t n )
{
  109fbf:	55                   	push   %ebp
  109fc0:	89 e5                	mov    %esp,%ebp
  109fc2:	83 ec 10             	sub    $0x10,%esp
	unsigned char *tptr = (unsigned char*)ptr;
  109fc5:	8b 45 08             	mov    0x8(%ebp),%eax
  109fc8:	89 45 fc             	mov    %eax,-0x4(%ebp)

	while(n > 0)
  109fcb:	eb 12                	jmp    109fdf <memset+0x20>
	{
		*tptr = value; 
  109fcd:	8b 45 0c             	mov    0xc(%ebp),%eax
  109fd0:	89 c2                	mov    %eax,%edx
  109fd2:	8b 45 fc             	mov    -0x4(%ebp),%eax
  109fd5:	88 10                	mov    %dl,(%eax)
		tptr++; n--;
  109fd7:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
  109fdb:	83 6d 10 01          	subl   $0x1,0x10(%ebp)

void *memset( void *ptr, int value, size_t n )
{
	unsigned char *tptr = (unsigned char*)ptr;

	while(n > 0)
  109fdf:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  109fe3:	75 e8                	jne    109fcd <memset+0xe>
	{
		*tptr = value; 
		tptr++; n--;
	}

	return ptr;
  109fe5:	8b 45 08             	mov    0x8(%ebp),%eax
}
  109fe8:	c9                   	leave  
  109fe9:	c3                   	ret    

00109fea <strlen>:

size_t strlen( const char *str )
{
  109fea:	55                   	push   %ebp
  109feb:	89 e5                	mov    %esp,%ebp
  109fed:	83 ec 10             	sub    $0x10,%esp
	size_t len = 0;
  109ff0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

	while( *str != '\0' )
  109ff7:	eb 08                	jmp    10a001 <strlen+0x17>
	{
		str++; len++;
  109ff9:	83 45 08 01          	addl   $0x1,0x8(%ebp)
  109ffd:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)

size_t strlen( const char *str )
{
	size_t len = 0;

	while( *str != '\0' )
  10a001:	8b 45 08             	mov    0x8(%ebp),%eax
  10a004:	0f b6 00             	movzbl (%eax),%eax
  10a007:	84 c0                	test   %al,%al
  10a009:	75 ee                	jne    109ff9 <strlen+0xf>
	{
		str++; len++;
	}

	return len;
  10a00b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  10a00e:	c9                   	leave  
  10a00f:	c3                   	ret    

0010a010 <sputn>:
#include "include/ctype.h"
#include "include/stdlib.h"
#include "include/string.h"

char *sputn( char *s, int n, int base, int precision )
{
  10a010:	55                   	push   %ebp
  10a011:	89 e5                	mov    %esp,%ebp
  10a013:	83 ec 28             	sub    $0x28,%esp
	static const char *digits = "0123456789abcdefghijklmnopqrstuvwxyz"; 
	
	static char buf[65];
	char *p;

	memset(buf, 0, 65);
  10a016:	c7 44 24 08 41 00 00 	movl   $0x41,0x8(%esp)
  10a01d:	00 
  10a01e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
  10a025:	00 
  10a026:	c7 04 24 00 39 13 00 	movl   $0x133900,(%esp)
  10a02d:	e8 8d ff ff ff       	call   109fbf <memset>

	int len = 0;
  10a032:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	p = buf + 64;
  10a039:	c7 45 f4 40 39 13 00 	movl   $0x133940,-0xc(%ebp)

	do 
	{
		int d = n % base;
  10a040:	8b 45 0c             	mov    0xc(%ebp),%eax
  10a043:	99                   	cltd   
  10a044:	f7 7d 10             	idivl  0x10(%ebp)
  10a047:	89 55 ec             	mov    %edx,-0x14(%ebp)

		n /= base;
  10a04a:	8b 45 0c             	mov    0xc(%ebp),%eax
  10a04d:	99                   	cltd   
  10a04e:	f7 7d 10             	idivl  0x10(%ebp)
  10a051:	89 45 0c             	mov    %eax,0xc(%ebp)

		--p;
  10a054:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
		*p = (char)digits[d];
  10a058:	8b 15 a8 d1 10 00    	mov    0x10d1a8,%edx
  10a05e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10a061:	01 d0                	add    %edx,%eax
  10a063:	0f b6 10             	movzbl (%eax),%edx
  10a066:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10a069:	88 10                	mov    %dl,(%eax)

		len++;
  10a06b:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
		
	} while(n);
  10a06f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  10a073:	75 cb                	jne    10a040 <sputn+0x30>

	while(len < precision)
  10a075:	eb 0e                	jmp    10a085 <sputn+0x75>
	{
		*--p = '0';
  10a077:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
  10a07b:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10a07e:	c6 00 30             	movb   $0x30,(%eax)

		len++;
  10a081:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)

		len++;
		
	} while(n);

	while(len < precision)
  10a085:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10a088:	3b 45 14             	cmp    0x14(%ebp),%eax
  10a08b:	7c ea                	jl     10a077 <sputn+0x67>
		*--p = '0';

		len++;
	}

	if(s)
  10a08d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  10a091:	74 12                	je     10a0a5 <sputn+0x95>
	{
		strcpy(s, p);
  10a093:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10a096:	89 44 24 04          	mov    %eax,0x4(%esp)
  10a09a:	8b 45 08             	mov    0x8(%ebp),%eax
  10a09d:	89 04 24             	mov    %eax,(%esp)
  10a0a0:	e8 6d fa ff ff       	call   109b12 <strcpy>
	}

	return p;
  10a0a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
  10a0a8:	c9                   	leave  
  10a0a9:	c3                   	ret    

0010a0aa <snprintf>:

int snprintf( char *s, size_t size, const char *format, ... )
{
  10a0aa:	55                   	push   %ebp
  10a0ab:	89 e5                	mov    %esp,%ebp
  10a0ad:	83 ec 28             	sub    $0x28,%esp
	va_list vl;
	va_start(vl, format);
  10a0b0:	8d 45 14             	lea    0x14(%ebp),%eax
  10a0b3:	89 45 f0             	mov    %eax,-0x10(%ebp)

	int n = vsnprintf(s, size, format, vl );
  10a0b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10a0b9:	89 44 24 0c          	mov    %eax,0xc(%esp)
  10a0bd:	8b 45 10             	mov    0x10(%ebp),%eax
  10a0c0:	89 44 24 08          	mov    %eax,0x8(%esp)
  10a0c4:	8b 45 0c             	mov    0xc(%ebp),%eax
  10a0c7:	89 44 24 04          	mov    %eax,0x4(%esp)
  10a0cb:	8b 45 08             	mov    0x8(%ebp),%eax
  10a0ce:	89 04 24             	mov    %eax,(%esp)
  10a0d1:	e8 35 00 00 00       	call   10a10b <vsnprintf>
  10a0d6:	89 45 f4             	mov    %eax,-0xc(%ebp)

	va_end(vl);

	return n;
  10a0d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
  10a0dc:	c9                   	leave  
  10a0dd:	c3                   	ret    

0010a0de <sprintf>:

int sprintf( char *s, const char *format, ... )
{
  10a0de:	55                   	push   %ebp
  10a0df:	89 e5                	mov    %esp,%ebp
  10a0e1:	83 ec 28             	sub    $0x28,%esp
	va_list vl;
	va_start(vl, format);
  10a0e4:	8d 45 10             	lea    0x10(%ebp),%eax
  10a0e7:	89 45 f0             	mov    %eax,-0x10(%ebp)

	int n = vsprintf(s, format, vl );
  10a0ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10a0ed:	89 44 24 08          	mov    %eax,0x8(%esp)
  10a0f1:	8b 45 0c             	mov    0xc(%ebp),%eax
  10a0f4:	89 44 24 04          	mov    %eax,0x4(%esp)
  10a0f8:	8b 45 08             	mov    0x8(%ebp),%eax
  10a0fb:	89 04 24             	mov    %eax,(%esp)
  10a0fe:	e8 9c 05 00 00       	call   10a69f <vsprintf>
  10a103:	89 45 f4             	mov    %eax,-0xc(%ebp)

	va_end(vl);

	return n;
  10a106:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
  10a109:	c9                   	leave  
  10a10a:	c3                   	ret    

0010a10b <vsnprintf>:

int vsnprintf(char *s, size_t size, const char *format, va_list arg )
{
  10a10b:	55                   	push   %ebp
  10a10c:	89 e5                	mov    %esp,%ebp
  10a10e:	83 ec 38             	sub    $0x38,%esp
	size_t written_char = 0;
  10a111:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if(format == NULL || size == 0)
  10a118:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
  10a11c:	74 06                	je     10a124 <vsnprintf+0x19>
  10a11e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
  10a122:	75 0a                	jne    10a12e <vsnprintf+0x23>
	{
		return -1;
  10a124:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  10a129:	e9 6f 05 00 00       	jmp    10a69d <vsnprintf+0x592>

	size_t n, precision, width;
	char chr;
	
	static char chrar[65];
	char *str = chrar;
  10a12e:	c7 45 e8 60 39 13 00 	movl   $0x133960,-0x18(%ebp)

	precision = 1;
  10a135:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	width 	  = 1;
  10a13c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

	while(*format != '\0' && written_char < size)
  10a143:	e9 36 05 00 00       	jmp    10a67e <vsnprintf+0x573>
	{
		str = chrar;
  10a148:	c7 45 e8 60 39 13 00 	movl   $0x133960,-0x18(%ebp)

		if(*format == '%')
  10a14f:	8b 45 10             	mov    0x10(%ebp),%eax
  10a152:	0f b6 00             	movzbl (%eax),%eax
  10a155:	3c 25                	cmp    $0x25,%al
  10a157:	0f 85 0a 05 00 00    	jne    10a667 <vsnprintf+0x55c>
		{
			format++;
  10a15d:	83 45 10 01          	addl   $0x1,0x10(%ebp)

			if(*format == '.')
  10a161:	8b 45 10             	mov    0x10(%ebp),%eax
  10a164:	0f b6 00             	movzbl (%eax),%eax
  10a167:	3c 2e                	cmp    $0x2e,%al
  10a169:	75 6d                	jne    10a1d8 <vsnprintf+0xcd>
			{
					format++;
  10a16b:	83 45 10 01          	addl   $0x1,0x10(%ebp)

					if(*format == '*')
  10a16f:	8b 45 10             	mov    0x10(%ebp),%eax
  10a172:	0f b6 00             	movzbl (%eax),%eax
  10a175:	3c 2a                	cmp    $0x2a,%al
  10a177:	75 17                	jne    10a190 <vsnprintf+0x85>
					{
						precision = va_arg(arg, int);
  10a179:	8b 45 14             	mov    0x14(%ebp),%eax
  10a17c:	8d 50 04             	lea    0x4(%eax),%edx
  10a17f:	89 55 14             	mov    %edx,0x14(%ebp)
  10a182:	8b 00                	mov    (%eax),%eax
  10a184:	89 45 f0             	mov    %eax,-0x10(%ebp)
                                                format++;
  10a187:	83 45 10 01          	addl   $0x1,0x10(%ebp)
  10a18b:	e9 a2 00 00 00       	jmp    10a232 <vsnprintf+0x127>
					}
					else if(*format >= '0' && *format <= '9')
  10a190:	8b 45 10             	mov    0x10(%ebp),%eax
  10a193:	0f b6 00             	movzbl (%eax),%eax
  10a196:	3c 2f                	cmp    $0x2f,%al
  10a198:	7e 35                	jle    10a1cf <vsnprintf+0xc4>
  10a19a:	8b 45 10             	mov    0x10(%ebp),%eax
  10a19d:	0f b6 00             	movzbl (%eax),%eax
  10a1a0:	3c 39                	cmp    $0x39,%al
  10a1a2:	7f 2b                	jg     10a1cf <vsnprintf+0xc4>
					{
						precision = atoi(format);
  10a1a4:	8b 45 10             	mov    0x10(%ebp),%eax
  10a1a7:	89 04 24             	mov    %eax,(%esp)
  10a1aa:	e8 19 05 00 00       	call   10a6c8 <atoi>
  10a1af:	89 45 f0             	mov    %eax,-0x10(%ebp)
					
						while (*format >= '0' && *format <= '9') 
  10a1b2:	eb 04                	jmp    10a1b8 <vsnprintf+0xad>
						{
							format++;
  10a1b4:	83 45 10 01          	addl   $0x1,0x10(%ebp)
					}
					else if(*format >= '0' && *format <= '9')
					{
						precision = atoi(format);
					
						while (*format >= '0' && *format <= '9') 
  10a1b8:	8b 45 10             	mov    0x10(%ebp),%eax
  10a1bb:	0f b6 00             	movzbl (%eax),%eax
  10a1be:	3c 2f                	cmp    $0x2f,%al
  10a1c0:	7e 0a                	jle    10a1cc <vsnprintf+0xc1>
  10a1c2:	8b 45 10             	mov    0x10(%ebp),%eax
  10a1c5:	0f b6 00             	movzbl (%eax),%eax
  10a1c8:	3c 39                	cmp    $0x39,%al
  10a1ca:	7e e8                	jle    10a1b4 <vsnprintf+0xa9>
					if(*format == '*')
					{
						precision = va_arg(arg, int);
                                                format++;
					}
					else if(*format >= '0' && *format <= '9')
  10a1cc:	90                   	nop
  10a1cd:	eb 63                	jmp    10a232 <vsnprintf+0x127>
							format++;
						}
					}
					else
					{
						precision = 1;
  10a1cf:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
  10a1d6:	eb 5a                	jmp    10a232 <vsnprintf+0x127>
					}
			}
			else if(*format >= '0' && *format <= '9')
  10a1d8:	8b 45 10             	mov    0x10(%ebp),%eax
  10a1db:	0f b6 00             	movzbl (%eax),%eax
  10a1de:	3c 2f                	cmp    $0x2f,%al
  10a1e0:	7e 34                	jle    10a216 <vsnprintf+0x10b>
  10a1e2:	8b 45 10             	mov    0x10(%ebp),%eax
  10a1e5:	0f b6 00             	movzbl (%eax),%eax
  10a1e8:	3c 39                	cmp    $0x39,%al
  10a1ea:	7f 2a                	jg     10a216 <vsnprintf+0x10b>
			{
				width = atoi(format);
  10a1ec:	8b 45 10             	mov    0x10(%ebp),%eax
  10a1ef:	89 04 24             	mov    %eax,(%esp)
  10a1f2:	e8 d1 04 00 00       	call   10a6c8 <atoi>
  10a1f7:	89 45 ec             	mov    %eax,-0x14(%ebp)
					
				while (*format >= '0' && *format <= '9') 
  10a1fa:	eb 04                	jmp    10a200 <vsnprintf+0xf5>
				{
					format++;
  10a1fc:	83 45 10 01          	addl   $0x1,0x10(%ebp)
			}
			else if(*format >= '0' && *format <= '9')
			{
				width = atoi(format);
					
				while (*format >= '0' && *format <= '9') 
  10a200:	8b 45 10             	mov    0x10(%ebp),%eax
  10a203:	0f b6 00             	movzbl (%eax),%eax
  10a206:	3c 2f                	cmp    $0x2f,%al
  10a208:	7e 0a                	jle    10a214 <vsnprintf+0x109>
  10a20a:	8b 45 10             	mov    0x10(%ebp),%eax
  10a20d:	0f b6 00             	movzbl (%eax),%eax
  10a210:	3c 39                	cmp    $0x39,%al
  10a212:	7e e8                	jle    10a1fc <vsnprintf+0xf1>
					else
					{
						precision = 1;
					}
			}
			else if(*format >= '0' && *format <= '9')
  10a214:	eb 1c                	jmp    10a232 <vsnprintf+0x127>
				while (*format >= '0' && *format <= '9') 
				{
					format++;
				}
			}
			else if(*format == '*')
  10a216:	8b 45 10             	mov    0x10(%ebp),%eax
  10a219:	0f b6 00             	movzbl (%eax),%eax
  10a21c:	3c 2a                	cmp    $0x2a,%al
  10a21e:	75 12                	jne    10a232 <vsnprintf+0x127>
			{
				width = va_arg(arg, int);
  10a220:	8b 45 14             	mov    0x14(%ebp),%eax
  10a223:	8d 50 04             	lea    0x4(%eax),%edx
  10a226:	89 55 14             	mov    %edx,0x14(%ebp)
  10a229:	8b 00                	mov    (%eax),%eax
  10a22b:	89 45 ec             	mov    %eax,-0x14(%ebp)
                                format++;
  10a22e:	83 45 10 01          	addl   $0x1,0x10(%ebp)
			}
			
			switch(*format)
  10a232:	8b 45 10             	mov    0x10(%ebp),%eax
  10a235:	0f b6 00             	movzbl (%eax),%eax
  10a238:	0f be c0             	movsbl %al,%eax
  10a23b:	83 e8 25             	sub    $0x25,%eax
  10a23e:	83 f8 53             	cmp    $0x53,%eax
  10a241:	0f 87 08 04 00 00    	ja     10a64f <vsnprintf+0x544>
  10a247:	8b 04 85 00 ff 10 00 	mov    0x10ff00(,%eax,4),%eax
  10a24e:	ff e0                	jmp    *%eax
			{
				case 'd':
				case 'i':
					n = va_arg(arg, int);
  10a250:	8b 45 14             	mov    0x14(%ebp),%eax
  10a253:	8d 50 04             	lea    0x4(%eax),%edx
  10a256:	89 55 14             	mov    %edx,0x14(%ebp)
  10a259:	8b 00                	mov    (%eax),%eax
  10a25b:	89 45 e4             	mov    %eax,-0x1c(%ebp)

					sputn(str, n, 10, precision);
  10a25e:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10a261:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10a264:	89 54 24 0c          	mov    %edx,0xc(%esp)
  10a268:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
  10a26f:	00 
  10a270:	89 44 24 04          	mov    %eax,0x4(%esp)
  10a274:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10a277:	89 04 24             	mov    %eax,(%esp)
  10a27a:	e8 91 fd ff ff       	call   10a010 <sputn>

					precision = 1;
  10a27f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

					while(strlen(str) < width--)
  10a286:	eb 0e                	jmp    10a296 <vsnprintf+0x18b>
					{
						*s = ' ';
  10a288:	8b 45 08             	mov    0x8(%ebp),%eax
  10a28b:	c6 00 20             	movb   $0x20,(%eax)
						s++;
  10a28e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
						written_char++;
  10a292:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)

					sputn(str, n, 10, precision);

					precision = 1;

					while(strlen(str) < width--)
  10a296:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10a299:	89 04 24             	mov    %eax,(%esp)
  10a29c:	e8 49 fd ff ff       	call   109fea <strlen>
  10a2a1:	89 c2                	mov    %eax,%edx
  10a2a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10a2a6:	8d 48 ff             	lea    -0x1(%eax),%ecx
  10a2a9:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  10a2ac:	39 c2                	cmp    %eax,%edx
  10a2ae:	72 d8                	jb     10a288 <vsnprintf+0x17d>
						*s = ' ';
						s++;
						written_char++;
					}

					width = 0;
  10a2b0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

					while(*str)
  10a2b7:	eb 17                	jmp    10a2d0 <vsnprintf+0x1c5>
					{
						*s = *str;
  10a2b9:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10a2bc:	0f b6 10             	movzbl (%eax),%edx
  10a2bf:	8b 45 08             	mov    0x8(%ebp),%eax
  10a2c2:	88 10                	mov    %dl,(%eax)
						s++; str++;
  10a2c4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
  10a2c8:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
						written_char++;
  10a2cc:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
						written_char++;
					}

					width = 0;

					while(*str)
  10a2d0:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10a2d3:	0f b6 00             	movzbl (%eax),%eax
  10a2d6:	84 c0                	test   %al,%al
  10a2d8:	75 df                	jne    10a2b9 <vsnprintf+0x1ae>
					{
						*s = *str;
						s++; str++;
						written_char++;
					}
				break;
  10a2da:	e9 86 03 00 00       	jmp    10a665 <vsnprintf+0x55a>

				case 'u':
					n = va_arg(arg, unsigned int);
  10a2df:	8b 45 14             	mov    0x14(%ebp),%eax
  10a2e2:	8d 50 04             	lea    0x4(%eax),%edx
  10a2e5:	89 55 14             	mov    %edx,0x14(%ebp)
  10a2e8:	8b 00                	mov    (%eax),%eax
  10a2ea:	89 45 e4             	mov    %eax,-0x1c(%ebp)

					sputn(str, n, 10, precision);
  10a2ed:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10a2f0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10a2f3:	89 54 24 0c          	mov    %edx,0xc(%esp)
  10a2f7:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
  10a2fe:	00 
  10a2ff:	89 44 24 04          	mov    %eax,0x4(%esp)
  10a303:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10a306:	89 04 24             	mov    %eax,(%esp)
  10a309:	e8 02 fd ff ff       	call   10a010 <sputn>

					precision = 1;
  10a30e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

					while(strlen(str) < width--)
  10a315:	eb 0e                	jmp    10a325 <vsnprintf+0x21a>
					{
						*s = ' ';
  10a317:	8b 45 08             	mov    0x8(%ebp),%eax
  10a31a:	c6 00 20             	movb   $0x20,(%eax)
						s++;
  10a31d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
						written_char++;
  10a321:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)

					sputn(str, n, 10, precision);

					precision = 1;

					while(strlen(str) < width--)
  10a325:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10a328:	89 04 24             	mov    %eax,(%esp)
  10a32b:	e8 ba fc ff ff       	call   109fea <strlen>
  10a330:	89 c2                	mov    %eax,%edx
  10a332:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10a335:	8d 48 ff             	lea    -0x1(%eax),%ecx
  10a338:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  10a33b:	39 c2                	cmp    %eax,%edx
  10a33d:	72 d8                	jb     10a317 <vsnprintf+0x20c>
						*s = ' ';
						s++;
						written_char++;
					}

					width = 0;
  10a33f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

					while(*str)
  10a346:	eb 17                	jmp    10a35f <vsnprintf+0x254>
					{
						*s = *str;
  10a348:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10a34b:	0f b6 10             	movzbl (%eax),%edx
  10a34e:	8b 45 08             	mov    0x8(%ebp),%eax
  10a351:	88 10                	mov    %dl,(%eax)
						s++; str++;
  10a353:	83 45 08 01          	addl   $0x1,0x8(%ebp)
  10a357:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
						written_char++;
  10a35b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
						written_char++;
					}

					width = 0;

					while(*str)
  10a35f:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10a362:	0f b6 00             	movzbl (%eax),%eax
  10a365:	84 c0                	test   %al,%al
  10a367:	75 df                	jne    10a348 <vsnprintf+0x23d>
					{
						*s = *str;
						s++; str++;
						written_char++;
					}
				break;
  10a369:	e9 f7 02 00 00       	jmp    10a665 <vsnprintf+0x55a>
	
				case 'o':
					n = va_arg(arg, unsigned int);
  10a36e:	8b 45 14             	mov    0x14(%ebp),%eax
  10a371:	8d 50 04             	lea    0x4(%eax),%edx
  10a374:	89 55 14             	mov    %edx,0x14(%ebp)
  10a377:	8b 00                	mov    (%eax),%eax
  10a379:	89 45 e4             	mov    %eax,-0x1c(%ebp)

					sputn(str, n, 8, precision);
  10a37c:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10a37f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10a382:	89 54 24 0c          	mov    %edx,0xc(%esp)
  10a386:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%esp)
  10a38d:	00 
  10a38e:	89 44 24 04          	mov    %eax,0x4(%esp)
  10a392:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10a395:	89 04 24             	mov    %eax,(%esp)
  10a398:	e8 73 fc ff ff       	call   10a010 <sputn>

					precision = 1;
  10a39d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

					while(strlen(str) < width--)
  10a3a4:	eb 0e                	jmp    10a3b4 <vsnprintf+0x2a9>
					{
						*s = ' ';
  10a3a6:	8b 45 08             	mov    0x8(%ebp),%eax
  10a3a9:	c6 00 20             	movb   $0x20,(%eax)
						s++;
  10a3ac:	83 45 08 01          	addl   $0x1,0x8(%ebp)
						written_char++;
  10a3b0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)

					sputn(str, n, 8, precision);

					precision = 1;

					while(strlen(str) < width--)
  10a3b4:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10a3b7:	89 04 24             	mov    %eax,(%esp)
  10a3ba:	e8 2b fc ff ff       	call   109fea <strlen>
  10a3bf:	89 c2                	mov    %eax,%edx
  10a3c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10a3c4:	8d 48 ff             	lea    -0x1(%eax),%ecx
  10a3c7:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  10a3ca:	39 c2                	cmp    %eax,%edx
  10a3cc:	72 d8                	jb     10a3a6 <vsnprintf+0x29b>
						*s = ' ';
						s++;
						written_char++;
					}

					width = 0;
  10a3ce:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

					while(*str)
  10a3d5:	eb 17                	jmp    10a3ee <vsnprintf+0x2e3>
					{
						*s = *str;
  10a3d7:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10a3da:	0f b6 10             	movzbl (%eax),%edx
  10a3dd:	8b 45 08             	mov    0x8(%ebp),%eax
  10a3e0:	88 10                	mov    %dl,(%eax)
						s++; str++;
  10a3e2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
  10a3e6:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
						written_char++;
  10a3ea:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
						written_char++;
					}

					width = 0;

					while(*str)
  10a3ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10a3f1:	0f b6 00             	movzbl (%eax),%eax
  10a3f4:	84 c0                	test   %al,%al
  10a3f6:	75 df                	jne    10a3d7 <vsnprintf+0x2cc>
					{
						*s = *str;
						s++; str++;
						written_char++;
					}
				break;
  10a3f8:	e9 68 02 00 00       	jmp    10a665 <vsnprintf+0x55a>
			
				case 'x':
					n = va_arg(arg, unsigned int);
  10a3fd:	8b 45 14             	mov    0x14(%ebp),%eax
  10a400:	8d 50 04             	lea    0x4(%eax),%edx
  10a403:	89 55 14             	mov    %edx,0x14(%ebp)
  10a406:	8b 00                	mov    (%eax),%eax
  10a408:	89 45 e4             	mov    %eax,-0x1c(%ebp)

					sputn(str, n, 16, precision);
  10a40b:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10a40e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10a411:	89 54 24 0c          	mov    %edx,0xc(%esp)
  10a415:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
  10a41c:	00 
  10a41d:	89 44 24 04          	mov    %eax,0x4(%esp)
  10a421:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10a424:	89 04 24             	mov    %eax,(%esp)
  10a427:	e8 e4 fb ff ff       	call   10a010 <sputn>

					precision = 1;
  10a42c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

					while(strlen(str) < width--)
  10a433:	eb 0e                	jmp    10a443 <vsnprintf+0x338>
					{
						*s = ' ';
  10a435:	8b 45 08             	mov    0x8(%ebp),%eax
  10a438:	c6 00 20             	movb   $0x20,(%eax)
						s++;
  10a43b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
						written_char++;
  10a43f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)

					sputn(str, n, 16, precision);

					precision = 1;

					while(strlen(str) < width--)
  10a443:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10a446:	89 04 24             	mov    %eax,(%esp)
  10a449:	e8 9c fb ff ff       	call   109fea <strlen>
  10a44e:	89 c2                	mov    %eax,%edx
  10a450:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10a453:	8d 48 ff             	lea    -0x1(%eax),%ecx
  10a456:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  10a459:	39 c2                	cmp    %eax,%edx
  10a45b:	72 d8                	jb     10a435 <vsnprintf+0x32a>
						*s = ' ';
						s++;
						written_char++;
					}

					width = 0;
  10a45d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

					while(*str)
  10a464:	eb 17                	jmp    10a47d <vsnprintf+0x372>
					{
						*s = *str;
  10a466:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10a469:	0f b6 10             	movzbl (%eax),%edx
  10a46c:	8b 45 08             	mov    0x8(%ebp),%eax
  10a46f:	88 10                	mov    %dl,(%eax)
						s++; str++;
  10a471:	83 45 08 01          	addl   $0x1,0x8(%ebp)
  10a475:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
						written_char++;
  10a479:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
						written_char++;
					}

					width = 0;

					while(*str)
  10a47d:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10a480:	0f b6 00             	movzbl (%eax),%eax
  10a483:	84 c0                	test   %al,%al
  10a485:	75 df                	jne    10a466 <vsnprintf+0x35b>
					{
						*s = *str;
						s++; str++;
						written_char++;
					}
				break;
  10a487:	e9 d9 01 00 00       	jmp    10a665 <vsnprintf+0x55a>

				case 'X':
					n = va_arg(arg, unsigned int);
  10a48c:	8b 45 14             	mov    0x14(%ebp),%eax
  10a48f:	8d 50 04             	lea    0x4(%eax),%edx
  10a492:	89 55 14             	mov    %edx,0x14(%ebp)
  10a495:	8b 00                	mov    (%eax),%eax
  10a497:	89 45 e4             	mov    %eax,-0x1c(%ebp)

					sputn(str, n, 16, precision);
  10a49a:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10a49d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10a4a0:	89 54 24 0c          	mov    %edx,0xc(%esp)
  10a4a4:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
  10a4ab:	00 
  10a4ac:	89 44 24 04          	mov    %eax,0x4(%esp)
  10a4b0:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10a4b3:	89 04 24             	mov    %eax,(%esp)
  10a4b6:	e8 55 fb ff ff       	call   10a010 <sputn>

					precision = 1;
  10a4bb:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

					while(strlen(str) < width--)
  10a4c2:	eb 0e                	jmp    10a4d2 <vsnprintf+0x3c7>
					{
						*s = ' ';
  10a4c4:	8b 45 08             	mov    0x8(%ebp),%eax
  10a4c7:	c6 00 20             	movb   $0x20,(%eax)
						s++;
  10a4ca:	83 45 08 01          	addl   $0x1,0x8(%ebp)
						written_char++;
  10a4ce:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)

					sputn(str, n, 16, precision);

					precision = 1;

					while(strlen(str) < width--)
  10a4d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10a4d5:	89 04 24             	mov    %eax,(%esp)
  10a4d8:	e8 0d fb ff ff       	call   109fea <strlen>
  10a4dd:	89 c2                	mov    %eax,%edx
  10a4df:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10a4e2:	8d 48 ff             	lea    -0x1(%eax),%ecx
  10a4e5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  10a4e8:	39 c2                	cmp    %eax,%edx
  10a4ea:	72 d8                	jb     10a4c4 <vsnprintf+0x3b9>
						*s = ' ';
						s++;
						written_char++;
					}

					width = 0;
  10a4ec:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

					while(*str)
  10a4f3:	eb 24                	jmp    10a519 <vsnprintf+0x40e>
					{
						*s = toupper(*str);
  10a4f5:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10a4f8:	0f b6 00             	movzbl (%eax),%eax
  10a4fb:	0f be c0             	movsbl %al,%eax
  10a4fe:	89 04 24             	mov    %eax,(%esp)
  10a501:	e8 34 0f 00 00       	call   10b43a <toupper>
  10a506:	89 c2                	mov    %eax,%edx
  10a508:	8b 45 08             	mov    0x8(%ebp),%eax
  10a50b:	88 10                	mov    %dl,(%eax)
						s++; str++;
  10a50d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
  10a511:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
						written_char++;
  10a515:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
						written_char++;
					}

					width = 0;

					while(*str)
  10a519:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10a51c:	0f b6 00             	movzbl (%eax),%eax
  10a51f:	84 c0                	test   %al,%al
  10a521:	75 d2                	jne    10a4f5 <vsnprintf+0x3ea>
					{
						*s = toupper(*str);
						s++; str++;
						written_char++;
					}
				break;
  10a523:	e9 3d 01 00 00       	jmp    10a665 <vsnprintf+0x55a>
				case 'A':
					//TODO
				break;

				case 'c':
					chr = (char)va_arg(arg, int);
  10a528:	8b 45 14             	mov    0x14(%ebp),%eax
  10a52b:	8d 50 04             	lea    0x4(%eax),%edx
  10a52e:	89 55 14             	mov    %edx,0x14(%ebp)
  10a531:	8b 00                	mov    (%eax),%eax
  10a533:	88 45 e3             	mov    %al,-0x1d(%ebp)
					*s = chr;
  10a536:	8b 45 08             	mov    0x8(%ebp),%eax
  10a539:	0f b6 55 e3          	movzbl -0x1d(%ebp),%edx
  10a53d:	88 10                	mov    %dl,(%eax)
					s++;
  10a53f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
					written_char++;
  10a543:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
				break;
  10a547:	e9 19 01 00 00       	jmp    10a665 <vsnprintf+0x55a>

				case 's':
					str = va_arg(arg, char*);
  10a54c:	8b 45 14             	mov    0x14(%ebp),%eax
  10a54f:	8d 50 04             	lea    0x4(%eax),%edx
  10a552:	89 55 14             	mov    %edx,0x14(%ebp)
  10a555:	8b 00                	mov    (%eax),%eax
  10a557:	89 45 e8             	mov    %eax,-0x18(%ebp)

					while(strlen(str) < width--)
  10a55a:	eb 0e                	jmp    10a56a <vsnprintf+0x45f>
					{
						*s = ' ';
  10a55c:	8b 45 08             	mov    0x8(%ebp),%eax
  10a55f:	c6 00 20             	movb   $0x20,(%eax)
						s++;
  10a562:	83 45 08 01          	addl   $0x1,0x8(%ebp)
						written_char++;
  10a566:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
				break;

				case 's':
					str = va_arg(arg, char*);

					while(strlen(str) < width--)
  10a56a:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10a56d:	89 04 24             	mov    %eax,(%esp)
  10a570:	e8 75 fa ff ff       	call   109fea <strlen>
  10a575:	89 c2                	mov    %eax,%edx
  10a577:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10a57a:	8d 48 ff             	lea    -0x1(%eax),%ecx
  10a57d:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  10a580:	39 c2                	cmp    %eax,%edx
  10a582:	72 d8                	jb     10a55c <vsnprintf+0x451>
						*s = ' ';
						s++;
						written_char++;
					}

					width = 0;
  10a584:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

					while(*str)
  10a58b:	eb 17                	jmp    10a5a4 <vsnprintf+0x499>
					{
						*s = *str;
  10a58d:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10a590:	0f b6 10             	movzbl (%eax),%edx
  10a593:	8b 45 08             	mov    0x8(%ebp),%eax
  10a596:	88 10                	mov    %dl,(%eax)
						s++; str++;
  10a598:	83 45 08 01          	addl   $0x1,0x8(%ebp)
  10a59c:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
						written_char++;
  10a5a0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
						written_char++;
					}

					width = 0;

					while(*str)
  10a5a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10a5a7:	0f b6 00             	movzbl (%eax),%eax
  10a5aa:	84 c0                	test   %al,%al
  10a5ac:	75 df                	jne    10a58d <vsnprintf+0x482>
					{
						*s = *str;
						s++; str++;
						written_char++;
					}
				break;
  10a5ae:	e9 b2 00 00 00       	jmp    10a665 <vsnprintf+0x55a>

				case 'p':
					n = (int)va_arg(arg, void*);
  10a5b3:	8b 45 14             	mov    0x14(%ebp),%eax
  10a5b6:	8d 50 04             	lea    0x4(%eax),%edx
  10a5b9:	89 55 14             	mov    %edx,0x14(%ebp)
  10a5bc:	8b 00                	mov    (%eax),%eax
  10a5be:	89 45 e4             	mov    %eax,-0x1c(%ebp)

					sputn(str, n, 16, precision);
  10a5c1:	8b 55 f0             	mov    -0x10(%ebp),%edx
  10a5c4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10a5c7:	89 54 24 0c          	mov    %edx,0xc(%esp)
  10a5cb:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
  10a5d2:	00 
  10a5d3:	89 44 24 04          	mov    %eax,0x4(%esp)
  10a5d7:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10a5da:	89 04 24             	mov    %eax,(%esp)
  10a5dd:	e8 2e fa ff ff       	call   10a010 <sputn>

					precision = 1;
  10a5e2:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

					while(strlen(str) < width--)
  10a5e9:	eb 0e                	jmp    10a5f9 <vsnprintf+0x4ee>
					{
						*s = ' ';
  10a5eb:	8b 45 08             	mov    0x8(%ebp),%eax
  10a5ee:	c6 00 20             	movb   $0x20,(%eax)
						s++;
  10a5f1:	83 45 08 01          	addl   $0x1,0x8(%ebp)
						written_char++;
  10a5f5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)

					sputn(str, n, 16, precision);

					precision = 1;

					while(strlen(str) < width--)
  10a5f9:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10a5fc:	89 04 24             	mov    %eax,(%esp)
  10a5ff:	e8 e6 f9 ff ff       	call   109fea <strlen>
  10a604:	89 c2                	mov    %eax,%edx
  10a606:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10a609:	8d 48 ff             	lea    -0x1(%eax),%ecx
  10a60c:	89 4d ec             	mov    %ecx,-0x14(%ebp)
  10a60f:	39 c2                	cmp    %eax,%edx
  10a611:	72 d8                	jb     10a5eb <vsnprintf+0x4e0>
						*s = ' ';
						s++;
						written_char++;
					}

					width = 0;
  10a613:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

					while(*str)
  10a61a:	eb 17                	jmp    10a633 <vsnprintf+0x528>
					{
						*s = *str;
  10a61c:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10a61f:	0f b6 10             	movzbl (%eax),%edx
  10a622:	8b 45 08             	mov    0x8(%ebp),%eax
  10a625:	88 10                	mov    %dl,(%eax)
						s++; str++;
  10a627:	83 45 08 01          	addl   $0x1,0x8(%ebp)
  10a62b:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
						written_char++;
  10a62f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
						written_char++;
					}

					width = 0;

					while(*str)
  10a633:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10a636:	0f b6 00             	movzbl (%eax),%eax
  10a639:	84 c0                	test   %al,%al
  10a63b:	75 df                	jne    10a61c <vsnprintf+0x511>
					{
						*s = *str;
						s++; str++;
						written_char++;
					}
				break;
  10a63d:	eb 26                	jmp    10a665 <vsnprintf+0x55a>
				case 'n':
					//TODO
				break;

				case '%':
					*s = '%';
  10a63f:	8b 45 08             	mov    0x8(%ebp),%eax
  10a642:	c6 00 25             	movb   $0x25,(%eax)
					s++;
  10a645:	83 45 08 01          	addl   $0x1,0x8(%ebp)
					written_char++;
  10a649:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
				break;
  10a64d:	eb 16                	jmp    10a665 <vsnprintf+0x55a>

				default:
					*s = *format;
  10a64f:	8b 45 10             	mov    0x10(%ebp),%eax
  10a652:	0f b6 10             	movzbl (%eax),%edx
  10a655:	8b 45 08             	mov    0x8(%ebp),%eax
  10a658:	88 10                	mov    %dl,(%eax)
					s++;
  10a65a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
					written_char++;
  10a65e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
				break;
  10a662:	eb 01                	jmp    10a665 <vsnprintf+0x55a>
					//TODO
				break;

				case 'A':
					//TODO
				break;
  10a664:	90                   	nop
  10a665:	eb 13                	jmp    10a67a <vsnprintf+0x56f>
				break;
			}
		}
		else
		{
			*s = *format;
  10a667:	8b 45 10             	mov    0x10(%ebp),%eax
  10a66a:	0f b6 10             	movzbl (%eax),%edx
  10a66d:	8b 45 08             	mov    0x8(%ebp),%eax
  10a670:	88 10                	mov    %dl,(%eax)
			s++;
  10a672:	83 45 08 01          	addl   $0x1,0x8(%ebp)
			written_char++;
  10a676:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
		}

		format++;
  10a67a:	83 45 10 01          	addl   $0x1,0x10(%ebp)
	char *str = chrar;

	precision = 1;
	width 	  = 1;

	while(*format != '\0' && written_char < size)
  10a67e:	8b 45 10             	mov    0x10(%ebp),%eax
  10a681:	0f b6 00             	movzbl (%eax),%eax
  10a684:	84 c0                	test   %al,%al
  10a686:	74 0c                	je     10a694 <vsnprintf+0x589>
  10a688:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10a68b:	3b 45 0c             	cmp    0xc(%ebp),%eax
  10a68e:	0f 82 b4 fa ff ff    	jb     10a148 <vsnprintf+0x3d>
		}

		format++;
	}

	*s = '\0';
  10a694:	8b 45 08             	mov    0x8(%ebp),%eax
  10a697:	c6 00 00             	movb   $0x0,(%eax)

	return written_char;
  10a69a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
  10a69d:	c9                   	leave  
  10a69e:	c3                   	ret    

0010a69f <vsprintf>:

int vsprintf( char *s, const char *format, va_list arg )
{
  10a69f:	55                   	push   %ebp
  10a6a0:	89 e5                	mov    %esp,%ebp
  10a6a2:	83 ec 18             	sub    $0x18,%esp
	 return vsnprintf(s, (size_t)-1, format, arg);
  10a6a5:	8b 45 10             	mov    0x10(%ebp),%eax
  10a6a8:	89 44 24 0c          	mov    %eax,0xc(%esp)
  10a6ac:	8b 45 0c             	mov    0xc(%ebp),%eax
  10a6af:	89 44 24 08          	mov    %eax,0x8(%esp)
  10a6b3:	c7 44 24 04 ff ff ff 	movl   $0xffffffff,0x4(%esp)
  10a6ba:	ff 
  10a6bb:	8b 45 08             	mov    0x8(%ebp),%eax
  10a6be:	89 04 24             	mov    %eax,(%esp)
  10a6c1:	e8 45 fa ff ff       	call   10a10b <vsnprintf>
}
  10a6c6:	c9                   	leave  
  10a6c7:	c3                   	ret    

0010a6c8 <atoi>:
#include "include/stdlib.h"

int atoi( const char *str )
{
  10a6c8:	55                   	push   %ebp
  10a6c9:	89 e5                	mov    %esp,%ebp
  10a6cb:	83 ec 10             	sub    $0x10,%esp
	int r = 0;
  10a6ce:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	
	int sign = 1;
  10a6d5:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	
	while( *str == ' ' || *str == '\t' || *str == '\r' || *str == '\n' || *str == '\v' )
  10a6dc:	eb 04                	jmp    10a6e2 <atoi+0x1a>
	{
		str++;
  10a6de:	83 45 08 01          	addl   $0x1,0x8(%ebp)
{
	int r = 0;
	
	int sign = 1;
	
	while( *str == ' ' || *str == '\t' || *str == '\r' || *str == '\n' || *str == '\v' )
  10a6e2:	8b 45 08             	mov    0x8(%ebp),%eax
  10a6e5:	0f b6 00             	movzbl (%eax),%eax
  10a6e8:	3c 20                	cmp    $0x20,%al
  10a6ea:	74 f2                	je     10a6de <atoi+0x16>
  10a6ec:	8b 45 08             	mov    0x8(%ebp),%eax
  10a6ef:	0f b6 00             	movzbl (%eax),%eax
  10a6f2:	3c 09                	cmp    $0x9,%al
  10a6f4:	74 e8                	je     10a6de <atoi+0x16>
  10a6f6:	8b 45 08             	mov    0x8(%ebp),%eax
  10a6f9:	0f b6 00             	movzbl (%eax),%eax
  10a6fc:	3c 0d                	cmp    $0xd,%al
  10a6fe:	74 de                	je     10a6de <atoi+0x16>
  10a700:	8b 45 08             	mov    0x8(%ebp),%eax
  10a703:	0f b6 00             	movzbl (%eax),%eax
  10a706:	3c 0a                	cmp    $0xa,%al
  10a708:	74 d4                	je     10a6de <atoi+0x16>
  10a70a:	8b 45 08             	mov    0x8(%ebp),%eax
  10a70d:	0f b6 00             	movzbl (%eax),%eax
  10a710:	3c 0b                	cmp    $0xb,%al
  10a712:	74 ca                	je     10a6de <atoi+0x16>
	{
		str++;
	}

	if(*str == '-')
  10a714:	8b 45 08             	mov    0x8(%ebp),%eax
  10a717:	0f b6 00             	movzbl (%eax),%eax
  10a71a:	3c 2d                	cmp    $0x2d,%al
  10a71c:	75 0d                	jne    10a72b <atoi+0x63>
	{
		sign = -1;
  10a71e:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
		str++;
  10a725:	83 45 08 01          	addl   $0x1,0x8(%ebp)
	}

	while(*str != '\0')
  10a729:	eb 4f                	jmp    10a77a <atoi+0xb2>
  10a72b:	eb 4d                	jmp    10a77a <atoi+0xb2>
	{
		if( (*str - '0') < 0 || (*str - '0') > 9 )
  10a72d:	8b 45 08             	mov    0x8(%ebp),%eax
  10a730:	0f b6 00             	movzbl (%eax),%eax
  10a733:	0f be c0             	movsbl %al,%eax
  10a736:	83 e8 30             	sub    $0x30,%eax
  10a739:	85 c0                	test   %eax,%eax
  10a73b:	78 11                	js     10a74e <atoi+0x86>
  10a73d:	8b 45 08             	mov    0x8(%ebp),%eax
  10a740:	0f b6 00             	movzbl (%eax),%eax
  10a743:	0f be c0             	movsbl %al,%eax
  10a746:	83 e8 30             	sub    $0x30,%eax
  10a749:	83 f8 09             	cmp    $0x9,%eax
  10a74c:	7e 09                	jle    10a757 <atoi+0x8f>
		{
			return (r * sign);
  10a74e:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10a751:	0f af 45 f8          	imul   -0x8(%ebp),%eax
  10a755:	eb 34                	jmp    10a78b <atoi+0xc3>
		}
		else
		{
			r = r * 10 + (*str - '0');
  10a757:	8b 55 fc             	mov    -0x4(%ebp),%edx
  10a75a:	89 d0                	mov    %edx,%eax
  10a75c:	c1 e0 02             	shl    $0x2,%eax
  10a75f:	01 d0                	add    %edx,%eax
  10a761:	01 c0                	add    %eax,%eax
  10a763:	89 c2                	mov    %eax,%edx
  10a765:	8b 45 08             	mov    0x8(%ebp),%eax
  10a768:	0f b6 00             	movzbl (%eax),%eax
  10a76b:	0f be c0             	movsbl %al,%eax
  10a76e:	83 e8 30             	sub    $0x30,%eax
  10a771:	01 d0                	add    %edx,%eax
  10a773:	89 45 fc             	mov    %eax,-0x4(%ebp)
		}

		str++;
  10a776:	83 45 08 01          	addl   $0x1,0x8(%ebp)
	{
		sign = -1;
		str++;
	}

	while(*str != '\0')
  10a77a:	8b 45 08             	mov    0x8(%ebp),%eax
  10a77d:	0f b6 00             	movzbl (%eax),%eax
  10a780:	84 c0                	test   %al,%al
  10a782:	75 a9                	jne    10a72d <atoi+0x65>
		}

		str++;
	}

	return (r * sign);
  10a784:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10a787:	0f af 45 f8          	imul   -0x8(%ebp),%eax
}
  10a78b:	c9                   	leave  
  10a78c:	c3                   	ret    

0010a78d <atol>:

long int atol( const char *str )
{
  10a78d:	55                   	push   %ebp
  10a78e:	89 e5                	mov    %esp,%ebp
  10a790:	83 ec 10             	sub    $0x10,%esp
	long int r = 0;
  10a793:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	
	long int sign = 1;
  10a79a:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	
	while( *str == ' ' || *str == '\t' || *str == '\r' || *str == '\n' || *str == '\v' )
  10a7a1:	eb 04                	jmp    10a7a7 <atol+0x1a>
	{
		str++;
  10a7a3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
{
	long int r = 0;
	
	long int sign = 1;
	
	while( *str == ' ' || *str == '\t' || *str == '\r' || *str == '\n' || *str == '\v' )
  10a7a7:	8b 45 08             	mov    0x8(%ebp),%eax
  10a7aa:	0f b6 00             	movzbl (%eax),%eax
  10a7ad:	3c 20                	cmp    $0x20,%al
  10a7af:	74 f2                	je     10a7a3 <atol+0x16>
  10a7b1:	8b 45 08             	mov    0x8(%ebp),%eax
  10a7b4:	0f b6 00             	movzbl (%eax),%eax
  10a7b7:	3c 09                	cmp    $0x9,%al
  10a7b9:	74 e8                	je     10a7a3 <atol+0x16>
  10a7bb:	8b 45 08             	mov    0x8(%ebp),%eax
  10a7be:	0f b6 00             	movzbl (%eax),%eax
  10a7c1:	3c 0d                	cmp    $0xd,%al
  10a7c3:	74 de                	je     10a7a3 <atol+0x16>
  10a7c5:	8b 45 08             	mov    0x8(%ebp),%eax
  10a7c8:	0f b6 00             	movzbl (%eax),%eax
  10a7cb:	3c 0a                	cmp    $0xa,%al
  10a7cd:	74 d4                	je     10a7a3 <atol+0x16>
  10a7cf:	8b 45 08             	mov    0x8(%ebp),%eax
  10a7d2:	0f b6 00             	movzbl (%eax),%eax
  10a7d5:	3c 0b                	cmp    $0xb,%al
  10a7d7:	74 ca                	je     10a7a3 <atol+0x16>
	{
		str++;
	}

	if(*str == '-')
  10a7d9:	8b 45 08             	mov    0x8(%ebp),%eax
  10a7dc:	0f b6 00             	movzbl (%eax),%eax
  10a7df:	3c 2d                	cmp    $0x2d,%al
  10a7e1:	75 0d                	jne    10a7f0 <atol+0x63>
	{
		sign = -1;
  10a7e3:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
		str++;
  10a7ea:	83 45 08 01          	addl   $0x1,0x8(%ebp)
	}

	while(*str != '\0')
  10a7ee:	eb 4f                	jmp    10a83f <atol+0xb2>
  10a7f0:	eb 4d                	jmp    10a83f <atol+0xb2>
	{
		if( (*str - '0') < 0 || (*str - '0') > 9 )
  10a7f2:	8b 45 08             	mov    0x8(%ebp),%eax
  10a7f5:	0f b6 00             	movzbl (%eax),%eax
  10a7f8:	0f be c0             	movsbl %al,%eax
  10a7fb:	83 e8 30             	sub    $0x30,%eax
  10a7fe:	85 c0                	test   %eax,%eax
  10a800:	78 11                	js     10a813 <atol+0x86>
  10a802:	8b 45 08             	mov    0x8(%ebp),%eax
  10a805:	0f b6 00             	movzbl (%eax),%eax
  10a808:	0f be c0             	movsbl %al,%eax
  10a80b:	83 e8 30             	sub    $0x30,%eax
  10a80e:	83 f8 09             	cmp    $0x9,%eax
  10a811:	7e 09                	jle    10a81c <atol+0x8f>
		{
			return (r * sign);
  10a813:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10a816:	0f af 45 f8          	imul   -0x8(%ebp),%eax
  10a81a:	eb 34                	jmp    10a850 <atol+0xc3>
		}
		else
		{
			r = r * 10 + (*str - '0');
  10a81c:	8b 55 fc             	mov    -0x4(%ebp),%edx
  10a81f:	89 d0                	mov    %edx,%eax
  10a821:	c1 e0 02             	shl    $0x2,%eax
  10a824:	01 d0                	add    %edx,%eax
  10a826:	01 c0                	add    %eax,%eax
  10a828:	89 c2                	mov    %eax,%edx
  10a82a:	8b 45 08             	mov    0x8(%ebp),%eax
  10a82d:	0f b6 00             	movzbl (%eax),%eax
  10a830:	0f be c0             	movsbl %al,%eax
  10a833:	83 e8 30             	sub    $0x30,%eax
  10a836:	01 d0                	add    %edx,%eax
  10a838:	89 45 fc             	mov    %eax,-0x4(%ebp)
		}

		str++;
  10a83b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
	{
		sign = -1;
		str++;
	}

	while(*str != '\0')
  10a83f:	8b 45 08             	mov    0x8(%ebp),%eax
  10a842:	0f b6 00             	movzbl (%eax),%eax
  10a845:	84 c0                	test   %al,%al
  10a847:	75 a9                	jne    10a7f2 <atol+0x65>
		}

		str++;
	}

	return (r * sign);
  10a849:	8b 45 fc             	mov    -0x4(%ebp),%eax
  10a84c:	0f af 45 f8          	imul   -0x8(%ebp),%eax
}
  10a850:	c9                   	leave  
  10a851:	c3                   	ret    

0010a852 <atoll>:

long long int atoll( const char *str )
{
  10a852:	55                   	push   %ebp
  10a853:	89 e5                	mov    %esp,%ebp
  10a855:	53                   	push   %ebx
  10a856:	83 ec 14             	sub    $0x14,%esp
	long long int r = 0;
  10a859:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
  10a860:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	
	long long int sign = 1;
  10a867:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
  10a86e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	
	while( *str == ' ' || *str == '\t' || *str == '\r' || *str == '\n' || *str == '\v' )
  10a875:	eb 04                	jmp    10a87b <atoll+0x29>
	{
		str++;
  10a877:	83 45 08 01          	addl   $0x1,0x8(%ebp)
{
	long long int r = 0;
	
	long long int sign = 1;
	
	while( *str == ' ' || *str == '\t' || *str == '\r' || *str == '\n' || *str == '\v' )
  10a87b:	8b 45 08             	mov    0x8(%ebp),%eax
  10a87e:	0f b6 00             	movzbl (%eax),%eax
  10a881:	3c 20                	cmp    $0x20,%al
  10a883:	74 f2                	je     10a877 <atoll+0x25>
  10a885:	8b 45 08             	mov    0x8(%ebp),%eax
  10a888:	0f b6 00             	movzbl (%eax),%eax
  10a88b:	3c 09                	cmp    $0x9,%al
  10a88d:	74 e8                	je     10a877 <atoll+0x25>
  10a88f:	8b 45 08             	mov    0x8(%ebp),%eax
  10a892:	0f b6 00             	movzbl (%eax),%eax
  10a895:	3c 0d                	cmp    $0xd,%al
  10a897:	74 de                	je     10a877 <atoll+0x25>
  10a899:	8b 45 08             	mov    0x8(%ebp),%eax
  10a89c:	0f b6 00             	movzbl (%eax),%eax
  10a89f:	3c 0a                	cmp    $0xa,%al
  10a8a1:	74 d4                	je     10a877 <atoll+0x25>
  10a8a3:	8b 45 08             	mov    0x8(%ebp),%eax
  10a8a6:	0f b6 00             	movzbl (%eax),%eax
  10a8a9:	3c 0b                	cmp    $0xb,%al
  10a8ab:	74 ca                	je     10a877 <atoll+0x25>
	{
		str++;
	}

	if(*str == '-')
  10a8ad:	8b 45 08             	mov    0x8(%ebp),%eax
  10a8b0:	0f b6 00             	movzbl (%eax),%eax
  10a8b3:	3c 2d                	cmp    $0x2d,%al
  10a8b5:	75 14                	jne    10a8cb <atoll+0x79>
	{
		sign = -1;
  10a8b7:	c7 45 e8 ff ff ff ff 	movl   $0xffffffff,-0x18(%ebp)
  10a8be:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
		str++;
  10a8c5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
	}

	while(*str != '\0')
  10a8c9:	eb 7c                	jmp    10a947 <atoll+0xf5>
  10a8cb:	eb 7a                	jmp    10a947 <atoll+0xf5>
	{
		if( (*str - '0') < 0 || (*str - '0') > 9 )
  10a8cd:	8b 45 08             	mov    0x8(%ebp),%eax
  10a8d0:	0f b6 00             	movzbl (%eax),%eax
  10a8d3:	0f be c0             	movsbl %al,%eax
  10a8d6:	83 e8 30             	sub    $0x30,%eax
  10a8d9:	85 c0                	test   %eax,%eax
  10a8db:	78 11                	js     10a8ee <atoll+0x9c>
  10a8dd:	8b 45 08             	mov    0x8(%ebp),%eax
  10a8e0:	0f b6 00             	movzbl (%eax),%eax
  10a8e3:	0f be c0             	movsbl %al,%eax
  10a8e6:	83 e8 30             	sub    $0x30,%eax
  10a8e9:	83 f8 09             	cmp    $0x9,%eax
  10a8ec:	7e 1f                	jle    10a90d <atoll+0xbb>
		{
			return (r * sign);
  10a8ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10a8f1:	0f af 45 e8          	imul   -0x18(%ebp),%eax
  10a8f5:	89 c2                	mov    %eax,%edx
  10a8f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10a8fa:	0f af 45 f0          	imul   -0x10(%ebp),%eax
  10a8fe:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  10a901:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10a904:	f7 65 f0             	mull   -0x10(%ebp)
  10a907:	01 d1                	add    %edx,%ecx
  10a909:	89 ca                	mov    %ecx,%edx
  10a90b:	eb 65                	jmp    10a972 <atoll+0x120>
		}
		else
		{
			r = r * 10 + (*str - '0');
  10a90d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10a910:	6b d0 0a             	imul   $0xa,%eax,%edx
  10a913:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10a916:	6b c0 00             	imul   $0x0,%eax,%eax
  10a919:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  10a91c:	b8 0a 00 00 00       	mov    $0xa,%eax
  10a921:	f7 65 f0             	mull   -0x10(%ebp)
  10a924:	01 d1                	add    %edx,%ecx
  10a926:	89 ca                	mov    %ecx,%edx
  10a928:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10a92b:	0f b6 09             	movzbl (%ecx),%ecx
  10a92e:	0f be c9             	movsbl %cl,%ecx
  10a931:	83 e9 30             	sub    $0x30,%ecx
  10a934:	89 cb                	mov    %ecx,%ebx
  10a936:	c1 fb 1f             	sar    $0x1f,%ebx
  10a939:	01 c8                	add    %ecx,%eax
  10a93b:	11 da                	adc    %ebx,%edx
  10a93d:	89 45 f0             	mov    %eax,-0x10(%ebp)
  10a940:	89 55 f4             	mov    %edx,-0xc(%ebp)
		}

		str++;
  10a943:	83 45 08 01          	addl   $0x1,0x8(%ebp)
	{
		sign = -1;
		str++;
	}

	while(*str != '\0')
  10a947:	8b 45 08             	mov    0x8(%ebp),%eax
  10a94a:	0f b6 00             	movzbl (%eax),%eax
  10a94d:	84 c0                	test   %al,%al
  10a94f:	0f 85 78 ff ff ff    	jne    10a8cd <atoll+0x7b>
		}

		str++;
	}

	return (r * sign);
  10a955:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10a958:	0f af 45 e8          	imul   -0x18(%ebp),%eax
  10a95c:	89 c2                	mov    %eax,%edx
  10a95e:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10a961:	0f af 45 f0          	imul   -0x10(%ebp),%eax
  10a965:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  10a968:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10a96b:	f7 65 f0             	mull   -0x10(%ebp)
  10a96e:	01 d1                	add    %edx,%ecx
  10a970:	89 ca                	mov    %ecx,%edx
}
  10a972:	83 c4 14             	add    $0x14,%esp
  10a975:	5b                   	pop    %ebx
  10a976:	5d                   	pop    %ebp
  10a977:	c3                   	ret    

0010a978 <rand>:

static unsigned long ran = 1;

int rand()
{
  10a978:	55                   	push   %ebp
  10a979:	89 e5                	mov    %esp,%ebp
	ran = ran * 135797531 + 123456;
  10a97b:	a1 ac d1 10 00       	mov    0x10d1ac,%eax
  10a980:	69 c0 1b 1b 18 08    	imul   $0x8181b1b,%eax,%eax
  10a986:	05 40 e2 01 00       	add    $0x1e240,%eax
  10a98b:	a3 ac d1 10 00       	mov    %eax,0x10d1ac

	return (ran % RAND_MAX + 1);
  10a990:	8b 0d ac d1 10 00    	mov    0x10d1ac,%ecx
  10a996:	ba 05 00 02 00       	mov    $0x20005,%edx
  10a99b:	89 c8                	mov    %ecx,%eax
  10a99d:	f7 e2                	mul    %edx
  10a99f:	89 c8                	mov    %ecx,%eax
  10a9a1:	29 d0                	sub    %edx,%eax
  10a9a3:	d1 e8                	shr    %eax
  10a9a5:	01 d0                	add    %edx,%eax
  10a9a7:	c1 e8 0e             	shr    $0xe,%eax
  10a9aa:	89 c2                	mov    %eax,%edx
  10a9ac:	89 d0                	mov    %edx,%eax
  10a9ae:	c1 e0 0f             	shl    $0xf,%eax
  10a9b1:	29 d0                	sub    %edx,%eax
  10a9b3:	29 c1                	sub    %eax,%ecx
  10a9b5:	89 ca                	mov    %ecx,%edx
  10a9b7:	8d 42 01             	lea    0x1(%edx),%eax
}
  10a9ba:	5d                   	pop    %ebp
  10a9bb:	c3                   	ret    

0010a9bc <srand>:

void srand( unsigned int seed )
{
  10a9bc:	55                   	push   %ebp
  10a9bd:	89 e5                	mov    %esp,%ebp
	ran = seed;
  10a9bf:	8b 45 08             	mov    0x8(%ebp),%eax
  10a9c2:	a3 ac d1 10 00       	mov    %eax,0x10d1ac
}
  10a9c7:	5d                   	pop    %ebp
  10a9c8:	c3                   	ret    

0010a9c9 <abs>:

int abs( int n )
{
  10a9c9:	55                   	push   %ebp
  10a9ca:	89 e5                	mov    %esp,%ebp
	if(n > 0)
  10a9cc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  10a9d0:	7e 05                	jle    10a9d7 <abs+0xe>
	{
		return n;
  10a9d2:	8b 45 08             	mov    0x8(%ebp),%eax
  10a9d5:	eb 05                	jmp    10a9dc <abs+0x13>
	}
	else
	{
		return (n * (-1));
  10a9d7:	8b 45 08             	mov    0x8(%ebp),%eax
  10a9da:	f7 d8                	neg    %eax
	}
}
  10a9dc:	5d                   	pop    %ebp
  10a9dd:	c3                   	ret    

0010a9de <div>:

div_t div( int numer, int denom )
{
  10a9de:	55                   	push   %ebp
  10a9df:	89 e5                	mov    %esp,%ebp
  10a9e1:	83 ec 10             	sub    $0x10,%esp
	div_t r;

	r.quot = numer / denom;
  10a9e4:	8b 45 0c             	mov    0xc(%ebp),%eax
  10a9e7:	99                   	cltd   
  10a9e8:	f7 7d 10             	idivl  0x10(%ebp)
  10a9eb:	89 45 f8             	mov    %eax,-0x8(%ebp)
	r.rem  = numer % denom;
  10a9ee:	8b 45 0c             	mov    0xc(%ebp),%eax
  10a9f1:	99                   	cltd   
  10a9f2:	f7 7d 10             	idivl  0x10(%ebp)
  10a9f5:	89 d0                	mov    %edx,%eax
  10a9f7:	89 45 fc             	mov    %eax,-0x4(%ebp)
	
	return r;
  10a9fa:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10a9fd:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10aa00:	8b 55 fc             	mov    -0x4(%ebp),%edx
  10aa03:	89 01                	mov    %eax,(%ecx)
  10aa05:	89 51 04             	mov    %edx,0x4(%ecx)
}
  10aa08:	8b 45 08             	mov    0x8(%ebp),%eax
  10aa0b:	c9                   	leave  
  10aa0c:	c2 04 00             	ret    $0x4

0010aa0f <labs>:

long int labs( long int n )
{
  10aa0f:	55                   	push   %ebp
  10aa10:	89 e5                	mov    %esp,%ebp
	if(n > 0)
  10aa12:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  10aa16:	7e 05                	jle    10aa1d <labs+0xe>
	{
		return n;
  10aa18:	8b 45 08             	mov    0x8(%ebp),%eax
  10aa1b:	eb 05                	jmp    10aa22 <labs+0x13>
	}
	else
	{
		return (n * (-1));
  10aa1d:	8b 45 08             	mov    0x8(%ebp),%eax
  10aa20:	f7 d8                	neg    %eax
	}
}
  10aa22:	5d                   	pop    %ebp
  10aa23:	c3                   	ret    

0010aa24 <ldiv>:

ldiv_t ldiv( long int numer, long int denom )
{
  10aa24:	55                   	push   %ebp
  10aa25:	89 e5                	mov    %esp,%ebp
  10aa27:	83 ec 10             	sub    $0x10,%esp
	ldiv_t r;

	r.quot = numer / denom;
  10aa2a:	8b 45 0c             	mov    0xc(%ebp),%eax
  10aa2d:	99                   	cltd   
  10aa2e:	f7 7d 10             	idivl  0x10(%ebp)
  10aa31:	89 45 f8             	mov    %eax,-0x8(%ebp)
	r.rem  = numer % denom;
  10aa34:	8b 45 0c             	mov    0xc(%ebp),%eax
  10aa37:	99                   	cltd   
  10aa38:	f7 7d 10             	idivl  0x10(%ebp)
  10aa3b:	89 d0                	mov    %edx,%eax
  10aa3d:	89 45 fc             	mov    %eax,-0x4(%ebp)
	
	return r;
  10aa40:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10aa43:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10aa46:	8b 55 fc             	mov    -0x4(%ebp),%edx
  10aa49:	89 01                	mov    %eax,(%ecx)
  10aa4b:	89 51 04             	mov    %edx,0x4(%ecx)
}
  10aa4e:	8b 45 08             	mov    0x8(%ebp),%eax
  10aa51:	c9                   	leave  
  10aa52:	c2 04 00             	ret    $0x4

0010aa55 <llabs>:

long long int llabs (long long int n)
{
  10aa55:	55                   	push   %ebp
  10aa56:	89 e5                	mov    %esp,%ebp
  10aa58:	83 ec 08             	sub    $0x8,%esp
  10aa5b:	8b 45 08             	mov    0x8(%ebp),%eax
  10aa5e:	89 45 f8             	mov    %eax,-0x8(%ebp)
  10aa61:	8b 45 0c             	mov    0xc(%ebp),%eax
  10aa64:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if(n > 0)
  10aa67:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
  10aa6b:	78 14                	js     10aa81 <llabs+0x2c>
  10aa6d:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
  10aa71:	7f 06                	jg     10aa79 <llabs+0x24>
  10aa73:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
  10aa77:	76 08                	jbe    10aa81 <llabs+0x2c>
	{
		return n;
  10aa79:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10aa7c:	8b 55 fc             	mov    -0x4(%ebp),%edx
  10aa7f:	eb 0d                	jmp    10aa8e <llabs+0x39>
	}
	else
	{
		return (n * (-1));
  10aa81:	8b 45 f8             	mov    -0x8(%ebp),%eax
  10aa84:	8b 55 fc             	mov    -0x4(%ebp),%edx
  10aa87:	f7 d8                	neg    %eax
  10aa89:	83 d2 00             	adc    $0x0,%edx
  10aa8c:	f7 da                	neg    %edx
	}
}
  10aa8e:	c9                   	leave  
  10aa8f:	c3                   	ret    

0010aa90 <unixtime>:
	Aus WIKIPEDIA Die freie Enzyklopädie

	http://de.wikipedia.org/wiki/Unixzeit#Beispiel-Implementierung
*/
time_t unixtime( int year, int month, int day, int hour, int minute, int seconds )
{
  10aa90:	55                   	push   %ebp
  10aa91:	89 e5                	mov    %esp,%ebp
  10aa93:	53                   	push   %ebx
  10aa94:	83 ec 10             	sub    $0x10,%esp
	static const short yday[12] = { 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334};
 
	time_t unix_time;
	long years = year - 1970 ;
  10aa97:	8b 45 08             	mov    0x8(%ebp),%eax
  10aa9a:	2d b2 07 00 00       	sub    $0x7b2,%eax
  10aa9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int leap_year = ((year - 1) - 1968) / 4 - ((year - 1) - 1900) / 100 + ((year - 1) - 1600) / 400;
  10aaa2:	8b 45 08             	mov    0x8(%ebp),%eax
  10aaa5:	2d b1 07 00 00       	sub    $0x7b1,%eax
  10aaaa:	8d 50 03             	lea    0x3(%eax),%edx
  10aaad:	85 c0                	test   %eax,%eax
  10aaaf:	0f 48 c2             	cmovs  %edx,%eax
  10aab2:	c1 f8 02             	sar    $0x2,%eax
  10aab5:	89 c3                	mov    %eax,%ebx
  10aab7:	8b 45 08             	mov    0x8(%ebp),%eax
  10aaba:	8d 88 93 f8 ff ff    	lea    -0x76d(%eax),%ecx
  10aac0:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
  10aac5:	89 c8                	mov    %ecx,%eax
  10aac7:	f7 ea                	imul   %edx
  10aac9:	c1 fa 05             	sar    $0x5,%edx
  10aacc:	89 c8                	mov    %ecx,%eax
  10aace:	c1 f8 1f             	sar    $0x1f,%eax
  10aad1:	29 c2                	sub    %eax,%edx
  10aad3:	89 d0                	mov    %edx,%eax
  10aad5:	29 c3                	sub    %eax,%ebx
  10aad7:	8b 45 08             	mov    0x8(%ebp),%eax
  10aada:	8d 88 bf f9 ff ff    	lea    -0x641(%eax),%ecx
  10aae0:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
  10aae5:	89 c8                	mov    %ecx,%eax
  10aae7:	f7 ea                	imul   %edx
  10aae9:	c1 fa 07             	sar    $0x7,%edx
  10aaec:	89 c8                	mov    %ecx,%eax
  10aaee:	c1 f8 1f             	sar    $0x1f,%eax
  10aaf1:	29 c2                	sub    %eax,%edx
  10aaf3:	89 d0                	mov    %edx,%eax
  10aaf5:	01 d8                	add    %ebx,%eax
  10aaf7:	89 45 f0             	mov    %eax,-0x10(%ebp)
 
	unix_time = seconds + 60 * minute + 60 * 60 * hour + (yday[month - 1] + day - 1) * 60 * 60 * 24 + (years * 365 + leap_year) * 60 * 60 *24;
  10aafa:	8b 45 18             	mov    0x18(%ebp),%eax
  10aafd:	c1 e0 02             	shl    $0x2,%eax
  10ab00:	89 c2                	mov    %eax,%edx
  10ab02:	c1 e2 04             	shl    $0x4,%edx
  10ab05:	29 c2                	sub    %eax,%edx
  10ab07:	8b 45 1c             	mov    0x1c(%ebp),%eax
  10ab0a:	01 c2                	add    %eax,%edx
  10ab0c:	8b 45 14             	mov    0x14(%ebp),%eax
  10ab0f:	69 c0 10 0e 00 00    	imul   $0xe10,%eax,%eax
  10ab15:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  10ab18:	8b 45 0c             	mov    0xc(%ebp),%eax
  10ab1b:	83 e8 01             	sub    $0x1,%eax
  10ab1e:	0f b7 84 00 9e 00 11 	movzwl 0x11009e(%eax,%eax,1),%eax
  10ab25:	00 
  10ab26:	0f bf d0             	movswl %ax,%edx
  10ab29:	8b 45 10             	mov    0x10(%ebp),%eax
  10ab2c:	01 d0                	add    %edx,%eax
  10ab2e:	83 e8 01             	sub    $0x1,%eax
  10ab31:	69 c0 80 51 01 00    	imul   $0x15180,%eax,%eax
  10ab37:	01 c1                	add    %eax,%ecx
  10ab39:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10ab3c:	69 d0 6d 01 00 00    	imul   $0x16d,%eax,%edx
  10ab42:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10ab45:	01 d0                	add    %edx,%eax
  10ab47:	69 c0 80 51 01 00    	imul   $0x15180,%eax,%eax
  10ab4d:	01 c8                	add    %ecx,%eax
  10ab4f:	89 45 f8             	mov    %eax,-0x8(%ebp)
 
  	if ( (month > 2) && (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)) )
  10ab52:	83 7d 0c 02          	cmpl   $0x2,0xc(%ebp)
  10ab56:	7e 5a                	jle    10abb2 <unixtime+0x122>
  10ab58:	8b 45 08             	mov    0x8(%ebp),%eax
  10ab5b:	83 e0 03             	and    $0x3,%eax
  10ab5e:	85 c0                	test   %eax,%eax
  10ab60:	75 50                	jne    10abb2 <unixtime+0x122>
  10ab62:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10ab65:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
  10ab6a:	89 c8                	mov    %ecx,%eax
  10ab6c:	f7 ea                	imul   %edx
  10ab6e:	c1 fa 05             	sar    $0x5,%edx
  10ab71:	89 c8                	mov    %ecx,%eax
  10ab73:	c1 f8 1f             	sar    $0x1f,%eax
  10ab76:	29 c2                	sub    %eax,%edx
  10ab78:	89 d0                	mov    %edx,%eax
  10ab7a:	6b c0 64             	imul   $0x64,%eax,%eax
  10ab7d:	29 c1                	sub    %eax,%ecx
  10ab7f:	89 c8                	mov    %ecx,%eax
  10ab81:	85 c0                	test   %eax,%eax
  10ab83:	75 26                	jne    10abab <unixtime+0x11b>
  10ab85:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10ab88:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
  10ab8d:	89 c8                	mov    %ecx,%eax
  10ab8f:	f7 ea                	imul   %edx
  10ab91:	c1 fa 07             	sar    $0x7,%edx
  10ab94:	89 c8                	mov    %ecx,%eax
  10ab96:	c1 f8 1f             	sar    $0x1f,%eax
  10ab99:	29 c2                	sub    %eax,%edx
  10ab9b:	89 d0                	mov    %edx,%eax
  10ab9d:	69 c0 90 01 00 00    	imul   $0x190,%eax,%eax
  10aba3:	29 c1                	sub    %eax,%ecx
  10aba5:	89 c8                	mov    %ecx,%eax
  10aba7:	85 c0                	test   %eax,%eax
  10aba9:	75 07                	jne    10abb2 <unixtime+0x122>
	{
    		unix_time += 60 * 60 * 24; 
  10abab:	81 45 f8 80 51 01 00 	addl   $0x15180,-0x8(%ebp)
	}

	return unix_time;
  10abb2:	8b 45 f8             	mov    -0x8(%ebp),%eax
} 
  10abb5:	83 c4 10             	add    $0x10,%esp
  10abb8:	5b                   	pop    %ebx
  10abb9:	5d                   	pop    %ebp
  10abba:	c3                   	ret    

0010abbb <difftime>:


clock_t clock();

double difftime( time_t end, time_t beg )
{
  10abbb:	55                   	push   %ebp
  10abbc:	89 e5                	mov    %esp,%ebp
  10abbe:	83 ec 04             	sub    $0x4,%esp
	return (double)(end - beg);
  10abc1:	8b 45 0c             	mov    0xc(%ebp),%eax
  10abc4:	8b 55 08             	mov    0x8(%ebp),%edx
  10abc7:	29 c2                	sub    %eax,%edx
  10abc9:	89 d0                	mov    %edx,%eax
  10abcb:	89 45 fc             	mov    %eax,-0x4(%ebp)
  10abce:	db 45 fc             	fildl  -0x4(%ebp)
}
  10abd1:	c9                   	leave  
  10abd2:	c3                   	ret    

0010abd3 <time>:

time_t mktime( struct tm *timeptr );

time_t time( time_t *timer )
{
  10abd3:	55                   	push   %ebp
  10abd4:	89 e5                	mov    %esp,%ebp
  10abd6:	83 ec 10             	sub    $0x10,%esp
	time_t time = 0;
  10abd9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

	if(timer != NULL)
  10abe0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  10abe4:	74 08                	je     10abee <time+0x1b>
	{
		*timer = time;
  10abe6:	8b 45 08             	mov    0x8(%ebp),%eax
  10abe9:	8b 55 fc             	mov    -0x4(%ebp),%edx
  10abec:	89 10                	mov    %edx,(%eax)
	}

	return time;
  10abee:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
  10abf1:	c9                   	leave  
  10abf2:	c3                   	ret    

0010abf3 <asctime>:


char *asctime( const struct tm *timeptr )
{
  10abf3:	55                   	push   %ebp
  10abf4:	89 e5                	mov    %esp,%ebp
  10abf6:	57                   	push   %edi
  10abf7:	56                   	push   %esi
  10abf8:	53                   	push   %ebx
  10abf9:	83 ec 3c             	sub    $0x3c,%esp
	{
    		"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
  	};

  	static char result[26];
  	sprintf(result, "%s %s %.2d %.2d:%.2d:%.2d %d\n", wday_name[timeptr->tm_wday], mon_name[timeptr->tm_mon], timeptr->tm_mday, timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec, 1900 + timeptr->tm_year);
  10abfc:	8b 45 08             	mov    0x8(%ebp),%eax
  10abff:	8b 40 14             	mov    0x14(%eax),%eax
  10ac02:	05 6c 07 00 00       	add    $0x76c,%eax
  10ac07:	89 c2                	mov    %eax,%edx
  10ac09:	8b 45 08             	mov    0x8(%ebp),%eax
  10ac0c:	8b 30                	mov    (%eax),%esi
  10ac0e:	8b 45 08             	mov    0x8(%ebp),%eax
  10ac11:	8b 58 04             	mov    0x4(%eax),%ebx
  10ac14:	8b 45 08             	mov    0x8(%ebp),%eax
  10ac17:	8b 48 08             	mov    0x8(%eax),%ecx
  10ac1a:	8b 45 08             	mov    0x8(%ebp),%eax
  10ac1d:	8b 40 0c             	mov    0xc(%eax),%eax
  10ac20:	89 45 e4             	mov    %eax,-0x1c(%ebp)
  10ac23:	8b 45 08             	mov    0x8(%ebp),%eax
  10ac26:	8b 40 10             	mov    0x10(%eax),%eax
  10ac29:	c1 e0 02             	shl    $0x2,%eax
  10ac2c:	8d b8 c0 00 11 00    	lea    0x1100c0(%eax),%edi
  10ac32:	8b 45 08             	mov    0x8(%ebp),%eax
  10ac35:	8b 40 18             	mov    0x18(%eax),%eax
  10ac38:	c1 e0 02             	shl    $0x2,%eax
  10ac3b:	05 f0 00 11 00       	add    $0x1100f0,%eax
  10ac40:	89 54 24 20          	mov    %edx,0x20(%esp)
  10ac44:	89 74 24 1c          	mov    %esi,0x1c(%esp)
  10ac48:	89 5c 24 18          	mov    %ebx,0x18(%esp)
  10ac4c:	89 4c 24 14          	mov    %ecx,0x14(%esp)
  10ac50:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
  10ac53:	89 4c 24 10          	mov    %ecx,0x10(%esp)
  10ac57:	89 7c 24 0c          	mov    %edi,0xc(%esp)
  10ac5b:	89 44 24 08          	mov    %eax,0x8(%esp)
  10ac5f:	c7 44 24 04 80 00 11 	movl   $0x110080,0x4(%esp)
  10ac66:	00 
  10ac67:	c7 04 24 c0 39 13 00 	movl   $0x1339c0,(%esp)
  10ac6e:	e8 6b f4 ff ff       	call   10a0de <sprintf>
  
	return result;
  10ac73:	b8 c0 39 13 00       	mov    $0x1339c0,%eax
}
  10ac78:	83 c4 3c             	add    $0x3c,%esp
  10ac7b:	5b                   	pop    %ebx
  10ac7c:	5e                   	pop    %esi
  10ac7d:	5f                   	pop    %edi
  10ac7e:	5d                   	pop    %ebp
  10ac7f:	c3                   	ret    

0010ac80 <ctime>:

char *ctime( const time_t *timer )
{
  10ac80:	55                   	push   %ebp
  10ac81:	89 e5                	mov    %esp,%ebp
  10ac83:	83 ec 18             	sub    $0x18,%esp
	return asctime( localtime(timer) );
  10ac86:	8b 45 08             	mov    0x8(%ebp),%eax
  10ac89:	89 04 24             	mov    %eax,(%esp)
  10ac8c:	e8 88 05 00 00       	call   10b219 <localtime>
  10ac91:	89 04 24             	mov    %eax,(%esp)
  10ac94:	e8 5a ff ff ff       	call   10abf3 <asctime>
} 
  10ac99:	c9                   	leave  
  10ac9a:	c3                   	ret    

0010ac9b <gmtime>:

struct tm *gmtime( const time_t	*timer )
{	
  10ac9b:	55                   	push   %ebp
  10ac9c:	89 e5                	mov    %esp,%ebp
  10ac9e:	57                   	push   %edi
  10ac9f:	56                   	push   %esi
  10aca0:	53                   	push   %ebx
  10aca1:	83 ec 20             	sub    $0x20,%esp
	static int z[] = {0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4};

	int t = *timer;
  10aca4:	8b 45 08             	mov    0x8(%ebp),%eax
  10aca7:	8b 00                	mov    (%eax),%eax
  10aca9:	89 45 e8             	mov    %eax,-0x18(%ebp)

	int y, m, d, yd;

	static struct tm time;

	time.tm_sec 	= t % 60; t = t / 60;
  10acac:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  10acaf:	ba 89 88 88 88       	mov    $0x88888889,%edx
  10acb4:	89 c8                	mov    %ecx,%eax
  10acb6:	f7 ea                	imul   %edx
  10acb8:	8d 04 0a             	lea    (%edx,%ecx,1),%eax
  10acbb:	c1 f8 05             	sar    $0x5,%eax
  10acbe:	89 c2                	mov    %eax,%edx
  10acc0:	89 c8                	mov    %ecx,%eax
  10acc2:	c1 f8 1f             	sar    $0x1f,%eax
  10acc5:	29 c2                	sub    %eax,%edx
  10acc7:	89 d0                	mov    %edx,%eax
  10acc9:	c1 e0 02             	shl    $0x2,%eax
  10accc:	89 c2                	mov    %eax,%edx
  10acce:	c1 e2 04             	shl    $0x4,%edx
  10acd1:	29 c2                	sub    %eax,%edx
  10acd3:	89 c8                	mov    %ecx,%eax
  10acd5:	29 d0                	sub    %edx,%eax
  10acd7:	a3 e0 39 13 00       	mov    %eax,0x1339e0
  10acdc:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  10acdf:	ba 89 88 88 88       	mov    $0x88888889,%edx
  10ace4:	89 c8                	mov    %ecx,%eax
  10ace6:	f7 ea                	imul   %edx
  10ace8:	8d 04 0a             	lea    (%edx,%ecx,1),%eax
  10aceb:	c1 f8 05             	sar    $0x5,%eax
  10acee:	89 c2                	mov    %eax,%edx
  10acf0:	89 c8                	mov    %ecx,%eax
  10acf2:	c1 f8 1f             	sar    $0x1f,%eax
  10acf5:	29 c2                	sub    %eax,%edx
  10acf7:	89 d0                	mov    %edx,%eax
  10acf9:	89 45 e8             	mov    %eax,-0x18(%ebp)
	time.tm_min 	= t % 60; t = t / 60;
  10acfc:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  10acff:	ba 89 88 88 88       	mov    $0x88888889,%edx
  10ad04:	89 c8                	mov    %ecx,%eax
  10ad06:	f7 ea                	imul   %edx
  10ad08:	8d 04 0a             	lea    (%edx,%ecx,1),%eax
  10ad0b:	c1 f8 05             	sar    $0x5,%eax
  10ad0e:	89 c2                	mov    %eax,%edx
  10ad10:	89 c8                	mov    %ecx,%eax
  10ad12:	c1 f8 1f             	sar    $0x1f,%eax
  10ad15:	29 c2                	sub    %eax,%edx
  10ad17:	89 d0                	mov    %edx,%eax
  10ad19:	c1 e0 02             	shl    $0x2,%eax
  10ad1c:	89 c2                	mov    %eax,%edx
  10ad1e:	c1 e2 04             	shl    $0x4,%edx
  10ad21:	29 c2                	sub    %eax,%edx
  10ad23:	89 c8                	mov    %ecx,%eax
  10ad25:	29 d0                	sub    %edx,%eax
  10ad27:	a3 e4 39 13 00       	mov    %eax,0x1339e4
  10ad2c:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  10ad2f:	ba 89 88 88 88       	mov    $0x88888889,%edx
  10ad34:	89 c8                	mov    %ecx,%eax
  10ad36:	f7 ea                	imul   %edx
  10ad38:	8d 04 0a             	lea    (%edx,%ecx,1),%eax
  10ad3b:	c1 f8 05             	sar    $0x5,%eax
  10ad3e:	89 c2                	mov    %eax,%edx
  10ad40:	89 c8                	mov    %ecx,%eax
  10ad42:	c1 f8 1f             	sar    $0x1f,%eax
  10ad45:	29 c2                	sub    %eax,%edx
  10ad47:	89 d0                	mov    %edx,%eax
  10ad49:	89 45 e8             	mov    %eax,-0x18(%ebp)
	time.tm_hour	= t % 24; t = t / 24;
  10ad4c:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  10ad4f:	ba ab aa aa 2a       	mov    $0x2aaaaaab,%edx
  10ad54:	89 c8                	mov    %ecx,%eax
  10ad56:	f7 ea                	imul   %edx
  10ad58:	c1 fa 02             	sar    $0x2,%edx
  10ad5b:	89 c8                	mov    %ecx,%eax
  10ad5d:	c1 f8 1f             	sar    $0x1f,%eax
  10ad60:	29 c2                	sub    %eax,%edx
  10ad62:	89 d0                	mov    %edx,%eax
  10ad64:	01 c0                	add    %eax,%eax
  10ad66:	01 d0                	add    %edx,%eax
  10ad68:	c1 e0 03             	shl    $0x3,%eax
  10ad6b:	29 c1                	sub    %eax,%ecx
  10ad6d:	89 ca                	mov    %ecx,%edx
  10ad6f:	89 15 e8 39 13 00    	mov    %edx,0x1339e8
  10ad75:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  10ad78:	ba ab aa aa 2a       	mov    $0x2aaaaaab,%edx
  10ad7d:	89 c8                	mov    %ecx,%eax
  10ad7f:	f7 ea                	imul   %edx
  10ad81:	c1 fa 02             	sar    $0x2,%edx
  10ad84:	89 c8                	mov    %ecx,%eax
  10ad86:	c1 f8 1f             	sar    $0x1f,%eax
  10ad89:	29 c2                	sub    %eax,%edx
  10ad8b:	89 d0                	mov    %edx,%eax
  10ad8d:	89 45 e8             	mov    %eax,-0x18(%ebp)

	time.tm_yday	= t % 365; t = t / 365;
  10ad90:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  10ad93:	ba b1 f9 8c b3       	mov    $0xb38cf9b1,%edx
  10ad98:	89 c8                	mov    %ecx,%eax
  10ad9a:	f7 ea                	imul   %edx
  10ad9c:	8d 04 0a             	lea    (%edx,%ecx,1),%eax
  10ad9f:	c1 f8 08             	sar    $0x8,%eax
  10ada2:	89 c2                	mov    %eax,%edx
  10ada4:	89 c8                	mov    %ecx,%eax
  10ada6:	c1 f8 1f             	sar    $0x1f,%eax
  10ada9:	29 c2                	sub    %eax,%edx
  10adab:	89 d0                	mov    %edx,%eax
  10adad:	69 c0 6d 01 00 00    	imul   $0x16d,%eax,%eax
  10adb3:	29 c1                	sub    %eax,%ecx
  10adb5:	89 c8                	mov    %ecx,%eax
  10adb7:	a3 fc 39 13 00       	mov    %eax,0x1339fc
  10adbc:	8b 4d e8             	mov    -0x18(%ebp),%ecx
  10adbf:	ba b1 f9 8c b3       	mov    $0xb38cf9b1,%edx
  10adc4:	89 c8                	mov    %ecx,%eax
  10adc6:	f7 ea                	imul   %edx
  10adc8:	8d 04 0a             	lea    (%edx,%ecx,1),%eax
  10adcb:	c1 f8 08             	sar    $0x8,%eax
  10adce:	89 c2                	mov    %eax,%edx
  10add0:	89 c8                	mov    %ecx,%eax
  10add2:	c1 f8 1f             	sar    $0x1f,%eax
  10add5:	29 c2                	sub    %eax,%edx
  10add7:	89 d0                	mov    %edx,%eax
  10add9:	89 45 e8             	mov    %eax,-0x18(%ebp)
	time.tm_year	= 1970 + t - 1900;
  10addc:	8b 45 e8             	mov    -0x18(%ebp),%eax
  10addf:	83 c0 46             	add    $0x46,%eax
  10ade2:	a3 f4 39 13 00       	mov    %eax,0x1339f4

	y = time.tm_year + 1900;
  10ade7:	a1 f4 39 13 00       	mov    0x1339f4,%eax
  10adec:	05 6c 07 00 00       	add    $0x76c,%eax
  10adf1:	89 45 f0             	mov    %eax,-0x10(%ebp)

	int num_leap_years 	= ( ((y - 1) - 1968) / 4 - ((y - 1) - 1900) / 100 + ((y - 1) - 1600) / 400 );
  10adf4:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10adf7:	2d b1 07 00 00       	sub    $0x7b1,%eax
  10adfc:	8d 50 03             	lea    0x3(%eax),%edx
  10adff:	85 c0                	test   %eax,%eax
  10ae01:	0f 48 c2             	cmovs  %edx,%eax
  10ae04:	c1 f8 02             	sar    $0x2,%eax
  10ae07:	89 c3                	mov    %eax,%ebx
  10ae09:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10ae0c:	8d 88 93 f8 ff ff    	lea    -0x76d(%eax),%ecx
  10ae12:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
  10ae17:	89 c8                	mov    %ecx,%eax
  10ae19:	f7 ea                	imul   %edx
  10ae1b:	c1 fa 05             	sar    $0x5,%edx
  10ae1e:	89 c8                	mov    %ecx,%eax
  10ae20:	c1 f8 1f             	sar    $0x1f,%eax
  10ae23:	29 c2                	sub    %eax,%edx
  10ae25:	89 d0                	mov    %edx,%eax
  10ae27:	29 c3                	sub    %eax,%ebx
  10ae29:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10ae2c:	8d 88 bf f9 ff ff    	lea    -0x641(%eax),%ecx
  10ae32:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
  10ae37:	89 c8                	mov    %ecx,%eax
  10ae39:	f7 ea                	imul   %edx
  10ae3b:	c1 fa 07             	sar    $0x7,%edx
  10ae3e:	89 c8                	mov    %ecx,%eax
  10ae40:	c1 f8 1f             	sar    $0x1f,%eax
  10ae43:	29 c2                	sub    %eax,%edx
  10ae45:	89 d0                	mov    %edx,%eax
  10ae47:	01 d8                	add    %ebx,%eax
  10ae49:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	int is_leap_year 	= ( 1 / (1 + y % 4) - 1 / (1 + y % 100) + 1 / (1 + y % 400) );
  10ae4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10ae4f:	99                   	cltd   
  10ae50:	c1 ea 1e             	shr    $0x1e,%edx
  10ae53:	01 d0                	add    %edx,%eax
  10ae55:	83 e0 03             	and    $0x3,%eax
  10ae58:	29 d0                	sub    %edx,%eax
  10ae5a:	8d 70 01             	lea    0x1(%eax),%esi
  10ae5d:	b8 01 00 00 00       	mov    $0x1,%eax
  10ae62:	99                   	cltd   
  10ae63:	f7 fe                	idiv   %esi
  10ae65:	89 c3                	mov    %eax,%ebx
  10ae67:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10ae6a:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
  10ae6f:	89 c8                	mov    %ecx,%eax
  10ae71:	f7 ea                	imul   %edx
  10ae73:	c1 fa 05             	sar    $0x5,%edx
  10ae76:	89 c8                	mov    %ecx,%eax
  10ae78:	c1 f8 1f             	sar    $0x1f,%eax
  10ae7b:	29 c2                	sub    %eax,%edx
  10ae7d:	89 d0                	mov    %edx,%eax
  10ae7f:	6b c0 64             	imul   $0x64,%eax,%eax
  10ae82:	29 c1                	sub    %eax,%ecx
  10ae84:	89 c8                	mov    %ecx,%eax
  10ae86:	8d 78 01             	lea    0x1(%eax),%edi
  10ae89:	b8 01 00 00 00       	mov    $0x1,%eax
  10ae8e:	99                   	cltd   
  10ae8f:	f7 ff                	idiv   %edi
  10ae91:	29 c3                	sub    %eax,%ebx
  10ae93:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10ae96:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
  10ae9b:	89 c8                	mov    %ecx,%eax
  10ae9d:	f7 ea                	imul   %edx
  10ae9f:	c1 fa 07             	sar    $0x7,%edx
  10aea2:	89 c8                	mov    %ecx,%eax
  10aea4:	c1 f8 1f             	sar    $0x1f,%eax
  10aea7:	29 c2                	sub    %eax,%edx
  10aea9:	89 d0                	mov    %edx,%eax
  10aeab:	69 c0 90 01 00 00    	imul   $0x190,%eax,%eax
  10aeb1:	29 c1                	sub    %eax,%ecx
  10aeb3:	89 c8                	mov    %ecx,%eax
  10aeb5:	8d 70 01             	lea    0x1(%eax),%esi
  10aeb8:	b8 01 00 00 00       	mov    $0x1,%eax
  10aebd:	99                   	cltd   
  10aebe:	f7 fe                	idiv   %esi
  10aec0:	01 d8                	add    %ebx,%eax
  10aec2:	89 45 e0             	mov    %eax,-0x20(%ebp)

	time.tm_yday	= time.tm_yday - num_leap_years;
  10aec5:	a1 fc 39 13 00       	mov    0x1339fc,%eax
  10aeca:	2b 45 e4             	sub    -0x1c(%ebp),%eax
  10aecd:	a3 fc 39 13 00       	mov    %eax,0x1339fc

	yd = time.tm_yday + 1;
  10aed2:	a1 fc 39 13 00       	mov    0x1339fc,%eax
  10aed7:	83 c0 01             	add    $0x1,%eax
  10aeda:	89 45 dc             	mov    %eax,-0x24(%ebp)
	time.tm_mon	= ( yd + 30 + (yd + is_leap_year + 400) / 460 * (2 - is_leap_year) ) * 16 / 489 - 1;
  10aedd:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10aee0:	8d 58 1e             	lea    0x1e(%eax),%ebx
  10aee3:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10aee6:	8b 55 dc             	mov    -0x24(%ebp),%edx
  10aee9:	01 d0                	add    %edx,%eax
  10aeeb:	8d 88 90 01 00 00    	lea    0x190(%eax),%ecx
  10aef1:	ba b7 1a 3c 47       	mov    $0x473c1ab7,%edx
  10aef6:	89 c8                	mov    %ecx,%eax
  10aef8:	f7 ea                	imul   %edx
  10aefa:	c1 fa 07             	sar    $0x7,%edx
  10aefd:	89 c8                	mov    %ecx,%eax
  10aeff:	c1 f8 1f             	sar    $0x1f,%eax
  10af02:	29 c2                	sub    %eax,%edx
  10af04:	b8 02 00 00 00       	mov    $0x2,%eax
  10af09:	2b 45 e0             	sub    -0x20(%ebp),%eax
  10af0c:	0f af c2             	imul   %edx,%eax
  10af0f:	01 d8                	add    %ebx,%eax
  10af11:	c1 e0 04             	shl    $0x4,%eax
  10af14:	89 c1                	mov    %eax,%ecx
  10af16:	ba 35 3c 05 86       	mov    $0x86053c35,%edx
  10af1b:	89 c8                	mov    %ecx,%eax
  10af1d:	f7 ea                	imul   %edx
  10af1f:	8d 04 0a             	lea    (%edx,%ecx,1),%eax
  10af22:	c1 f8 08             	sar    $0x8,%eax
  10af25:	89 c2                	mov    %eax,%edx
  10af27:	89 c8                	mov    %ecx,%eax
  10af29:	c1 f8 1f             	sar    $0x1f,%eax
  10af2c:	29 c2                	sub    %eax,%edx
  10af2e:	89 d0                	mov    %edx,%eax
  10af30:	83 e8 01             	sub    $0x1,%eax
  10af33:	a3 f0 39 13 00       	mov    %eax,0x1339f0
	
	m = time.tm_mon + 1;
  10af38:	a1 f0 39 13 00       	mov    0x1339f0,%eax
  10af3d:	83 c0 01             	add    $0x1,%eax
  10af40:	89 45 ec             	mov    %eax,-0x14(%ebp)
	time.tm_mday	= yd + 30 - 489 * m / 16 + (7 + m) / 10 * (2 - is_leap_year) ;
  10af43:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10af46:	8d 48 1e             	lea    0x1e(%eax),%ecx
  10af49:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10af4c:	69 c0 e9 01 00 00    	imul   $0x1e9,%eax,%eax
  10af52:	8d 50 0f             	lea    0xf(%eax),%edx
  10af55:	85 c0                	test   %eax,%eax
  10af57:	0f 48 c2             	cmovs  %edx,%eax
  10af5a:	c1 f8 04             	sar    $0x4,%eax
  10af5d:	89 cb                	mov    %ecx,%ebx
  10af5f:	29 c3                	sub    %eax,%ebx
  10af61:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10af64:	8d 48 07             	lea    0x7(%eax),%ecx
  10af67:	ba 67 66 66 66       	mov    $0x66666667,%edx
  10af6c:	89 c8                	mov    %ecx,%eax
  10af6e:	f7 ea                	imul   %edx
  10af70:	c1 fa 02             	sar    $0x2,%edx
  10af73:	89 c8                	mov    %ecx,%eax
  10af75:	c1 f8 1f             	sar    $0x1f,%eax
  10af78:	29 c2                	sub    %eax,%edx
  10af7a:	b8 02 00 00 00       	mov    $0x2,%eax
  10af7f:	2b 45 e0             	sub    -0x20(%ebp),%eax
  10af82:	0f af c2             	imul   %edx,%eax
  10af85:	01 d8                	add    %ebx,%eax
  10af87:	a3 ec 39 13 00       	mov    %eax,0x1339ec

	if(time.tm_mon < 0)
  10af8c:	a1 f0 39 13 00       	mov    0x1339f0,%eax
  10af91:	85 c0                	test   %eax,%eax
  10af93:	0f 89 73 01 00 00    	jns    10b10c <gmtime+0x471>
	{
		time.tm_year -= 1;
  10af99:	a1 f4 39 13 00       	mov    0x1339f4,%eax
  10af9e:	83 e8 01             	sub    $0x1,%eax
  10afa1:	a3 f4 39 13 00       	mov    %eax,0x1339f4

		y = time.tm_year + 1900;
  10afa6:	a1 f4 39 13 00       	mov    0x1339f4,%eax
  10afab:	05 6c 07 00 00       	add    $0x76c,%eax
  10afb0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		is_leap_year 	= ( 1 / (1 + y % 4) - 1 / (1 + y % 100) + 1 / (1 + y % 400) );
  10afb3:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10afb6:	99                   	cltd   
  10afb7:	c1 ea 1e             	shr    $0x1e,%edx
  10afba:	01 d0                	add    %edx,%eax
  10afbc:	83 e0 03             	and    $0x3,%eax
  10afbf:	29 d0                	sub    %edx,%eax
  10afc1:	8d 78 01             	lea    0x1(%eax),%edi
  10afc4:	b8 01 00 00 00       	mov    $0x1,%eax
  10afc9:	99                   	cltd   
  10afca:	f7 ff                	idiv   %edi
  10afcc:	89 c3                	mov    %eax,%ebx
  10afce:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10afd1:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
  10afd6:	89 c8                	mov    %ecx,%eax
  10afd8:	f7 ea                	imul   %edx
  10afda:	c1 fa 05             	sar    $0x5,%edx
  10afdd:	89 c8                	mov    %ecx,%eax
  10afdf:	c1 f8 1f             	sar    $0x1f,%eax
  10afe2:	29 c2                	sub    %eax,%edx
  10afe4:	89 d0                	mov    %edx,%eax
  10afe6:	6b c0 64             	imul   $0x64,%eax,%eax
  10afe9:	29 c1                	sub    %eax,%ecx
  10afeb:	89 c8                	mov    %ecx,%eax
  10afed:	8d 70 01             	lea    0x1(%eax),%esi
  10aff0:	b8 01 00 00 00       	mov    $0x1,%eax
  10aff5:	99                   	cltd   
  10aff6:	f7 fe                	idiv   %esi
  10aff8:	29 c3                	sub    %eax,%ebx
  10affa:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10affd:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
  10b002:	89 c8                	mov    %ecx,%eax
  10b004:	f7 ea                	imul   %edx
  10b006:	c1 fa 07             	sar    $0x7,%edx
  10b009:	89 c8                	mov    %ecx,%eax
  10b00b:	c1 f8 1f             	sar    $0x1f,%eax
  10b00e:	29 c2                	sub    %eax,%edx
  10b010:	89 d0                	mov    %edx,%eax
  10b012:	69 c0 90 01 00 00    	imul   $0x190,%eax,%eax
  10b018:	29 c1                	sub    %eax,%ecx
  10b01a:	89 c8                	mov    %ecx,%eax
  10b01c:	8d 78 01             	lea    0x1(%eax),%edi
  10b01f:	b8 01 00 00 00       	mov    $0x1,%eax
  10b024:	99                   	cltd   
  10b025:	f7 ff                	idiv   %edi
  10b027:	01 d8                	add    %ebx,%eax
  10b029:	89 45 e0             	mov    %eax,-0x20(%ebp)
		if(is_leap_year)
  10b02c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
  10b030:	74 11                	je     10b043 <gmtime+0x3a8>
		{
			time.tm_yday = 366 + time.tm_yday;
  10b032:	a1 fc 39 13 00       	mov    0x1339fc,%eax
  10b037:	05 6e 01 00 00       	add    $0x16e,%eax
  10b03c:	a3 fc 39 13 00       	mov    %eax,0x1339fc
  10b041:	eb 0f                	jmp    10b052 <gmtime+0x3b7>
		}
		else
		{
			time.tm_yday = 365 + time.tm_yday;
  10b043:	a1 fc 39 13 00       	mov    0x1339fc,%eax
  10b048:	05 6d 01 00 00       	add    $0x16d,%eax
  10b04d:	a3 fc 39 13 00       	mov    %eax,0x1339fc
		}

		yd = time.tm_yday + 1;
  10b052:	a1 fc 39 13 00       	mov    0x1339fc,%eax
  10b057:	83 c0 01             	add    $0x1,%eax
  10b05a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		time.tm_mon	= ( yd + 30 + (yd + is_leap_year + 400) / 460 * (2 - is_leap_year) ) * 16 / 489 - 1;
  10b05d:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10b060:	8d 58 1e             	lea    0x1e(%eax),%ebx
  10b063:	8b 45 e0             	mov    -0x20(%ebp),%eax
  10b066:	8b 55 dc             	mov    -0x24(%ebp),%edx
  10b069:	01 d0                	add    %edx,%eax
  10b06b:	8d 88 90 01 00 00    	lea    0x190(%eax),%ecx
  10b071:	ba b7 1a 3c 47       	mov    $0x473c1ab7,%edx
  10b076:	89 c8                	mov    %ecx,%eax
  10b078:	f7 ea                	imul   %edx
  10b07a:	c1 fa 07             	sar    $0x7,%edx
  10b07d:	89 c8                	mov    %ecx,%eax
  10b07f:	c1 f8 1f             	sar    $0x1f,%eax
  10b082:	29 c2                	sub    %eax,%edx
  10b084:	b8 02 00 00 00       	mov    $0x2,%eax
  10b089:	2b 45 e0             	sub    -0x20(%ebp),%eax
  10b08c:	0f af c2             	imul   %edx,%eax
  10b08f:	01 d8                	add    %ebx,%eax
  10b091:	c1 e0 04             	shl    $0x4,%eax
  10b094:	89 c1                	mov    %eax,%ecx
  10b096:	ba 35 3c 05 86       	mov    $0x86053c35,%edx
  10b09b:	89 c8                	mov    %ecx,%eax
  10b09d:	f7 ea                	imul   %edx
  10b09f:	8d 04 0a             	lea    (%edx,%ecx,1),%eax
  10b0a2:	c1 f8 08             	sar    $0x8,%eax
  10b0a5:	89 c2                	mov    %eax,%edx
  10b0a7:	89 c8                	mov    %ecx,%eax
  10b0a9:	c1 f8 1f             	sar    $0x1f,%eax
  10b0ac:	29 c2                	sub    %eax,%edx
  10b0ae:	89 d0                	mov    %edx,%eax
  10b0b0:	83 e8 01             	sub    $0x1,%eax
  10b0b3:	a3 f0 39 13 00       	mov    %eax,0x1339f0

		m = time.tm_mon + 1;
  10b0b8:	a1 f0 39 13 00       	mov    0x1339f0,%eax
  10b0bd:	83 c0 01             	add    $0x1,%eax
  10b0c0:	89 45 ec             	mov    %eax,-0x14(%ebp)
		time.tm_mday	= yd + 30 - 489 * m / 16 + (7 + m) / 10 * (2 - is_leap_year) ;
  10b0c3:	8b 45 dc             	mov    -0x24(%ebp),%eax
  10b0c6:	8d 48 1e             	lea    0x1e(%eax),%ecx
  10b0c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10b0cc:	69 c0 e9 01 00 00    	imul   $0x1e9,%eax,%eax
  10b0d2:	8d 50 0f             	lea    0xf(%eax),%edx
  10b0d5:	85 c0                	test   %eax,%eax
  10b0d7:	0f 48 c2             	cmovs  %edx,%eax
  10b0da:	c1 f8 04             	sar    $0x4,%eax
  10b0dd:	89 cb                	mov    %ecx,%ebx
  10b0df:	29 c3                	sub    %eax,%ebx
  10b0e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10b0e4:	8d 48 07             	lea    0x7(%eax),%ecx
  10b0e7:	ba 67 66 66 66       	mov    $0x66666667,%edx
  10b0ec:	89 c8                	mov    %ecx,%eax
  10b0ee:	f7 ea                	imul   %edx
  10b0f0:	c1 fa 02             	sar    $0x2,%edx
  10b0f3:	89 c8                	mov    %ecx,%eax
  10b0f5:	c1 f8 1f             	sar    $0x1f,%eax
  10b0f8:	29 c2                	sub    %eax,%edx
  10b0fa:	b8 02 00 00 00       	mov    $0x2,%eax
  10b0ff:	2b 45 e0             	sub    -0x20(%ebp),%eax
  10b102:	0f af c2             	imul   %edx,%eax
  10b105:	01 d8                	add    %ebx,%eax
  10b107:	a3 ec 39 13 00       	mov    %eax,0x1339ec
	}
	
	d = time.tm_mday;
  10b10c:	a1 ec 39 13 00       	mov    0x1339ec,%eax
  10b111:	89 45 d8             	mov    %eax,-0x28(%ebp)
    	y -= m < 3;
  10b114:	83 7d ec 02          	cmpl   $0x2,-0x14(%ebp)
  10b118:	0f 9e c0             	setle  %al
  10b11b:	0f b6 c0             	movzbl %al,%eax
  10b11e:	29 45 f0             	sub    %eax,-0x10(%ebp)
  	time.tm_wday = (y + y / 4 - y / 100 + y / 400 + z[m - 1] + d) % 7;
  10b121:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10b124:	8d 50 03             	lea    0x3(%eax),%edx
  10b127:	85 c0                	test   %eax,%eax
  10b129:	0f 48 c2             	cmovs  %edx,%eax
  10b12c:	c1 f8 02             	sar    $0x2,%eax
  10b12f:	89 c2                	mov    %eax,%edx
  10b131:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10b134:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
  10b137:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10b13a:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
  10b13f:	89 c8                	mov    %ecx,%eax
  10b141:	f7 ea                	imul   %edx
  10b143:	c1 fa 05             	sar    $0x5,%edx
  10b146:	89 c8                	mov    %ecx,%eax
  10b148:	c1 f8 1f             	sar    $0x1f,%eax
  10b14b:	29 c2                	sub    %eax,%edx
  10b14d:	89 d0                	mov    %edx,%eax
  10b14f:	29 c3                	sub    %eax,%ebx
  10b151:	8b 4d f0             	mov    -0x10(%ebp),%ecx
  10b154:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
  10b159:	89 c8                	mov    %ecx,%eax
  10b15b:	f7 ea                	imul   %edx
  10b15d:	c1 fa 07             	sar    $0x7,%edx
  10b160:	89 c8                	mov    %ecx,%eax
  10b162:	c1 f8 1f             	sar    $0x1f,%eax
  10b165:	29 c2                	sub    %eax,%edx
  10b167:	89 d0                	mov    %edx,%eax
  10b169:	8d 14 03             	lea    (%ebx,%eax,1),%edx
  10b16c:	8b 45 ec             	mov    -0x14(%ebp),%eax
  10b16f:	83 e8 01             	sub    $0x1,%eax
  10b172:	8b 04 85 c0 d1 10 00 	mov    0x10d1c0(,%eax,4),%eax
  10b179:	01 c2                	add    %eax,%edx
  10b17b:	8b 45 d8             	mov    -0x28(%ebp),%eax
  10b17e:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
  10b181:	ba 93 24 49 92       	mov    $0x92492493,%edx
  10b186:	89 c8                	mov    %ecx,%eax
  10b188:	f7 ea                	imul   %edx
  10b18a:	8d 04 0a             	lea    (%edx,%ecx,1),%eax
  10b18d:	c1 f8 02             	sar    $0x2,%eax
  10b190:	89 c2                	mov    %eax,%edx
  10b192:	89 c8                	mov    %ecx,%eax
  10b194:	c1 f8 1f             	sar    $0x1f,%eax
  10b197:	29 c2                	sub    %eax,%edx
  10b199:	89 d0                	mov    %edx,%eax
  10b19b:	c1 e0 03             	shl    $0x3,%eax
  10b19e:	29 d0                	sub    %edx,%eax
  10b1a0:	29 c1                	sub    %eax,%ecx
  10b1a2:	89 ca                	mov    %ecx,%edx
  10b1a4:	89 15 f8 39 13 00    	mov    %edx,0x1339f8

	time.tm_isdst	= 0;
  10b1aa:	c7 05 00 3a 13 00 00 	movl   $0x0,0x133a00
  10b1b1:	00 00 00 

	if(time.tm_sec < 0)
  10b1b4:	a1 e0 39 13 00       	mov    0x1339e0,%eax
  10b1b9:	85 c0                	test   %eax,%eax
  10b1bb:	79 0d                	jns    10b1ca <gmtime+0x52f>
	{
		time.tm_sec = 60 + time.tm_sec;
  10b1bd:	a1 e0 39 13 00       	mov    0x1339e0,%eax
  10b1c2:	83 c0 3c             	add    $0x3c,%eax
  10b1c5:	a3 e0 39 13 00       	mov    %eax,0x1339e0
	}

	if(time.tm_min < 0)
  10b1ca:	a1 e4 39 13 00       	mov    0x1339e4,%eax
  10b1cf:	85 c0                	test   %eax,%eax
  10b1d1:	79 23                	jns    10b1f6 <gmtime+0x55b>
	{
		time.tm_min = 59 + time.tm_min;
  10b1d3:	a1 e4 39 13 00       	mov    0x1339e4,%eax
  10b1d8:	83 c0 3b             	add    $0x3b,%eax
  10b1db:	a3 e4 39 13 00       	mov    %eax,0x1339e4

		if(time.tm_sec == 0)
  10b1e0:	a1 e0 39 13 00       	mov    0x1339e0,%eax
  10b1e5:	85 c0                	test   %eax,%eax
  10b1e7:	75 0d                	jne    10b1f6 <gmtime+0x55b>
		{
			time.tm_min += 1;
  10b1e9:	a1 e4 39 13 00       	mov    0x1339e4,%eax
  10b1ee:	83 c0 01             	add    $0x1,%eax
  10b1f1:	a3 e4 39 13 00       	mov    %eax,0x1339e4
		}
	}

	if(time.tm_hour < 0)
  10b1f6:	a1 e8 39 13 00       	mov    0x1339e8,%eax
  10b1fb:	85 c0                	test   %eax,%eax
  10b1fd:	79 0d                	jns    10b20c <gmtime+0x571>
	{
		time.tm_hour = 23 + time.tm_hour;
  10b1ff:	a1 e8 39 13 00       	mov    0x1339e8,%eax
  10b204:	83 c0 17             	add    $0x17,%eax
  10b207:	a3 e8 39 13 00       	mov    %eax,0x1339e8
	}

	return &time;
  10b20c:	b8 e0 39 13 00       	mov    $0x1339e0,%eax

}
  10b211:	83 c4 20             	add    $0x20,%esp
  10b214:	5b                   	pop    %ebx
  10b215:	5e                   	pop    %esi
  10b216:	5f                   	pop    %edi
  10b217:	5d                   	pop    %ebp
  10b218:	c3                   	ret    

0010b219 <localtime>:

struct tm *localtime( const time_t *timer )
{
  10b219:	55                   	push   %ebp
  10b21a:	89 e5                	mov    %esp,%ebp
  10b21c:	83 ec 04             	sub    $0x4,%esp
	return gmtime(timer);
  10b21f:	8b 45 08             	mov    0x8(%ebp),%eax
  10b222:	89 04 24             	mov    %eax,(%esp)
  10b225:	e8 71 fa ff ff       	call   10ac9b <gmtime>
}
  10b22a:	c9                   	leave  
  10b22b:	c3                   	ret    

0010b22c <isalnum>:
#include "include/ctype.h"

int isalnum( int c )
{
  10b22c:	55                   	push   %ebp
  10b22d:	89 e5                	mov    %esp,%ebp
  10b22f:	83 ec 18             	sub    $0x18,%esp
	return isalpha(c) || isdigit(c);
  10b232:	8b 45 08             	mov    0x8(%ebp),%eax
  10b235:	89 04 24             	mov    %eax,(%esp)
  10b238:	e8 21 00 00 00       	call   10b25e <isalpha>
  10b23d:	85 c0                	test   %eax,%eax
  10b23f:	75 0f                	jne    10b250 <isalnum+0x24>
  10b241:	8b 45 08             	mov    0x8(%ebp),%eax
  10b244:	89 04 24             	mov    %eax,(%esp)
  10b247:	e8 7b 00 00 00       	call   10b2c7 <isdigit>
  10b24c:	85 c0                	test   %eax,%eax
  10b24e:	74 07                	je     10b257 <isalnum+0x2b>
  10b250:	b8 01 00 00 00       	mov    $0x1,%eax
  10b255:	eb 05                	jmp    10b25c <isalnum+0x30>
  10b257:	b8 00 00 00 00       	mov    $0x0,%eax
}
  10b25c:	c9                   	leave  
  10b25d:	c3                   	ret    

0010b25e <isalpha>:

int isalpha( int c )
{
  10b25e:	55                   	push   %ebp
  10b25f:	89 e5                	mov    %esp,%ebp
	return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
  10b261:	83 7d 08 60          	cmpl   $0x60,0x8(%ebp)
  10b265:	7e 06                	jle    10b26d <isalpha+0xf>
  10b267:	83 7d 08 7a          	cmpl   $0x7a,0x8(%ebp)
  10b26b:	7e 0c                	jle    10b279 <isalpha+0x1b>
  10b26d:	83 7d 08 40          	cmpl   $0x40,0x8(%ebp)
  10b271:	7e 0d                	jle    10b280 <isalpha+0x22>
  10b273:	83 7d 08 5a          	cmpl   $0x5a,0x8(%ebp)
  10b277:	7f 07                	jg     10b280 <isalpha+0x22>
  10b279:	b8 01 00 00 00       	mov    $0x1,%eax
  10b27e:	eb 05                	jmp    10b285 <isalpha+0x27>
  10b280:	b8 00 00 00 00       	mov    $0x0,%eax
}
  10b285:	5d                   	pop    %ebp
  10b286:	c3                   	ret    

0010b287 <isblank>:

int isblank( int c )
{
  10b287:	55                   	push   %ebp
  10b288:	89 e5                	mov    %esp,%ebp
	return c == ' ' || c == '\t';
  10b28a:	83 7d 08 20          	cmpl   $0x20,0x8(%ebp)
  10b28e:	74 06                	je     10b296 <isblank+0xf>
  10b290:	83 7d 08 09          	cmpl   $0x9,0x8(%ebp)
  10b294:	75 07                	jne    10b29d <isblank+0x16>
  10b296:	b8 01 00 00 00       	mov    $0x1,%eax
  10b29b:	eb 05                	jmp    10b2a2 <isblank+0x1b>
  10b29d:	b8 00 00 00 00       	mov    $0x0,%eax
}
  10b2a2:	5d                   	pop    %ebp
  10b2a3:	c3                   	ret    

0010b2a4 <iscntrl>:

int iscntrl( int c )
{
  10b2a4:	55                   	push   %ebp
  10b2a5:	89 e5                	mov    %esp,%ebp
	return (c >= 0 && c <= 0x1F) || c == 0x7F;
  10b2a7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  10b2ab:	78 06                	js     10b2b3 <iscntrl+0xf>
  10b2ad:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
  10b2b1:	7e 06                	jle    10b2b9 <iscntrl+0x15>
  10b2b3:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
  10b2b7:	75 07                	jne    10b2c0 <iscntrl+0x1c>
  10b2b9:	b8 01 00 00 00       	mov    $0x1,%eax
  10b2be:	eb 05                	jmp    10b2c5 <iscntrl+0x21>
  10b2c0:	b8 00 00 00 00       	mov    $0x0,%eax
}
  10b2c5:	5d                   	pop    %ebp
  10b2c6:	c3                   	ret    

0010b2c7 <isdigit>:

int isdigit( int c )
{
  10b2c7:	55                   	push   %ebp
  10b2c8:	89 e5                	mov    %esp,%ebp
	return c >= '0' && c <= '9';
  10b2ca:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
  10b2ce:	7e 0d                	jle    10b2dd <isdigit+0x16>
  10b2d0:	83 7d 08 39          	cmpl   $0x39,0x8(%ebp)
  10b2d4:	7f 07                	jg     10b2dd <isdigit+0x16>
  10b2d6:	b8 01 00 00 00       	mov    $0x1,%eax
  10b2db:	eb 05                	jmp    10b2e2 <isdigit+0x1b>
  10b2dd:	b8 00 00 00 00       	mov    $0x0,%eax
}
  10b2e2:	5d                   	pop    %ebp
  10b2e3:	c3                   	ret    

0010b2e4 <isgraph>:

int isgraph( int c )
{
  10b2e4:	55                   	push   %ebp
  10b2e5:	89 e5                	mov    %esp,%ebp
  10b2e7:	83 ec 18             	sub    $0x18,%esp
	return isalnum(c) || ispunct(c);
  10b2ea:	8b 45 08             	mov    0x8(%ebp),%eax
  10b2ed:	89 04 24             	mov    %eax,(%esp)
  10b2f0:	e8 37 ff ff ff       	call   10b22c <isalnum>
  10b2f5:	85 c0                	test   %eax,%eax
  10b2f7:	75 0f                	jne    10b308 <isgraph+0x24>
  10b2f9:	8b 45 08             	mov    0x8(%ebp),%eax
  10b2fc:	89 04 24             	mov    %eax,(%esp)
  10b2ff:	e8 4c 00 00 00       	call   10b350 <ispunct>
  10b304:	85 c0                	test   %eax,%eax
  10b306:	74 07                	je     10b30f <isgraph+0x2b>
  10b308:	b8 01 00 00 00       	mov    $0x1,%eax
  10b30d:	eb 05                	jmp    10b314 <isgraph+0x30>
  10b30f:	b8 00 00 00 00       	mov    $0x0,%eax
}
  10b314:	c9                   	leave  
  10b315:	c3                   	ret    

0010b316 <islower>:

int islower( int c )
{
  10b316:	55                   	push   %ebp
  10b317:	89 e5                	mov    %esp,%ebp
	return c >= 'a' && c <= 'z';
  10b319:	83 7d 08 60          	cmpl   $0x60,0x8(%ebp)
  10b31d:	7e 0d                	jle    10b32c <islower+0x16>
  10b31f:	83 7d 08 7a          	cmpl   $0x7a,0x8(%ebp)
  10b323:	7f 07                	jg     10b32c <islower+0x16>
  10b325:	b8 01 00 00 00       	mov    $0x1,%eax
  10b32a:	eb 05                	jmp    10b331 <islower+0x1b>
  10b32c:	b8 00 00 00 00       	mov    $0x0,%eax
}
  10b331:	5d                   	pop    %ebp
  10b332:	c3                   	ret    

0010b333 <isprint>:

int isprint( int c )
{
  10b333:	55                   	push   %ebp
  10b334:	89 e5                	mov    %esp,%ebp
	return c >= ' ' && c <= '~';
  10b336:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
  10b33a:	7e 0d                	jle    10b349 <isprint+0x16>
  10b33c:	83 7d 08 7e          	cmpl   $0x7e,0x8(%ebp)
  10b340:	7f 07                	jg     10b349 <isprint+0x16>
  10b342:	b8 01 00 00 00       	mov    $0x1,%eax
  10b347:	eb 05                	jmp    10b34e <isprint+0x1b>
  10b349:	b8 00 00 00 00       	mov    $0x0,%eax
}
  10b34e:	5d                   	pop    %ebp
  10b34f:	c3                   	ret    

0010b350 <ispunct>:

int ispunct( int c )
{
  10b350:	55                   	push   %ebp
  10b351:	89 e5                	mov    %esp,%ebp
	return (c >= '!' && c <= '/') || (c >= ':' && c <= '@') || (c >= '[' && c <= '`') || (c >= '{' && c <= '~');
  10b353:	83 7d 08 20          	cmpl   $0x20,0x8(%ebp)
  10b357:	7e 06                	jle    10b35f <ispunct+0xf>
  10b359:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
  10b35d:	7e 24                	jle    10b383 <ispunct+0x33>
  10b35f:	83 7d 08 39          	cmpl   $0x39,0x8(%ebp)
  10b363:	7e 06                	jle    10b36b <ispunct+0x1b>
  10b365:	83 7d 08 40          	cmpl   $0x40,0x8(%ebp)
  10b369:	7e 18                	jle    10b383 <ispunct+0x33>
  10b36b:	83 7d 08 5a          	cmpl   $0x5a,0x8(%ebp)
  10b36f:	7e 06                	jle    10b377 <ispunct+0x27>
  10b371:	83 7d 08 60          	cmpl   $0x60,0x8(%ebp)
  10b375:	7e 0c                	jle    10b383 <ispunct+0x33>
  10b377:	83 7d 08 7a          	cmpl   $0x7a,0x8(%ebp)
  10b37b:	7e 0d                	jle    10b38a <ispunct+0x3a>
  10b37d:	83 7d 08 7e          	cmpl   $0x7e,0x8(%ebp)
  10b381:	7f 07                	jg     10b38a <ispunct+0x3a>
  10b383:	b8 01 00 00 00       	mov    $0x1,%eax
  10b388:	eb 05                	jmp    10b38f <ispunct+0x3f>
  10b38a:	b8 00 00 00 00       	mov    $0x0,%eax
}
  10b38f:	5d                   	pop    %ebp
  10b390:	c3                   	ret    

0010b391 <isspace>:

int isspace( int c )
{
  10b391:	55                   	push   %ebp
  10b392:	89 e5                	mov    %esp,%ebp
  10b394:	83 ec 04             	sub    $0x4,%esp
	return isblank(c) || (c >= '\f' && c <= '\r');
  10b397:	8b 45 08             	mov    0x8(%ebp),%eax
  10b39a:	89 04 24             	mov    %eax,(%esp)
  10b39d:	e8 e5 fe ff ff       	call   10b287 <isblank>
  10b3a2:	85 c0                	test   %eax,%eax
  10b3a4:	75 0c                	jne    10b3b2 <isspace+0x21>
  10b3a6:	83 7d 08 0b          	cmpl   $0xb,0x8(%ebp)
  10b3aa:	7e 0d                	jle    10b3b9 <isspace+0x28>
  10b3ac:	83 7d 08 0d          	cmpl   $0xd,0x8(%ebp)
  10b3b0:	7f 07                	jg     10b3b9 <isspace+0x28>
  10b3b2:	b8 01 00 00 00       	mov    $0x1,%eax
  10b3b7:	eb 05                	jmp    10b3be <isspace+0x2d>
  10b3b9:	b8 00 00 00 00       	mov    $0x0,%eax
}
  10b3be:	c9                   	leave  
  10b3bf:	c3                   	ret    

0010b3c0 <isupper>:

int isupper( int c )
{
  10b3c0:	55                   	push   %ebp
  10b3c1:	89 e5                	mov    %esp,%ebp
	return c >= 'A' && c <= 'Z';
  10b3c3:	83 7d 08 40          	cmpl   $0x40,0x8(%ebp)
  10b3c7:	7e 0d                	jle    10b3d6 <isupper+0x16>
  10b3c9:	83 7d 08 5a          	cmpl   $0x5a,0x8(%ebp)
  10b3cd:	7f 07                	jg     10b3d6 <isupper+0x16>
  10b3cf:	b8 01 00 00 00       	mov    $0x1,%eax
  10b3d4:	eb 05                	jmp    10b3db <isupper+0x1b>
  10b3d6:	b8 00 00 00 00       	mov    $0x0,%eax
}
  10b3db:	5d                   	pop    %ebp
  10b3dc:	c3                   	ret    

0010b3dd <isxdigit>:

int isxdigit( int c )
{
  10b3dd:	55                   	push   %ebp
  10b3de:	89 e5                	mov    %esp,%ebp
  10b3e0:	83 ec 04             	sub    $0x4,%esp
	return isdigit(c) || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');
  10b3e3:	8b 45 08             	mov    0x8(%ebp),%eax
  10b3e6:	89 04 24             	mov    %eax,(%esp)
  10b3e9:	e8 d9 fe ff ff       	call   10b2c7 <isdigit>
  10b3ee:	85 c0                	test   %eax,%eax
  10b3f0:	75 18                	jne    10b40a <isxdigit+0x2d>
  10b3f2:	83 7d 08 60          	cmpl   $0x60,0x8(%ebp)
  10b3f6:	7e 06                	jle    10b3fe <isxdigit+0x21>
  10b3f8:	83 7d 08 66          	cmpl   $0x66,0x8(%ebp)
  10b3fc:	7e 0c                	jle    10b40a <isxdigit+0x2d>
  10b3fe:	83 7d 08 40          	cmpl   $0x40,0x8(%ebp)
  10b402:	7e 0d                	jle    10b411 <isxdigit+0x34>
  10b404:	83 7d 08 46          	cmpl   $0x46,0x8(%ebp)
  10b408:	7f 07                	jg     10b411 <isxdigit+0x34>
  10b40a:	b8 01 00 00 00       	mov    $0x1,%eax
  10b40f:	eb 05                	jmp    10b416 <isxdigit+0x39>
  10b411:	b8 00 00 00 00       	mov    $0x0,%eax
}
  10b416:	c9                   	leave  
  10b417:	c3                   	ret    

0010b418 <tolower>:

int tolower( int c )
{
  10b418:	55                   	push   %ebp
  10b419:	89 e5                	mov    %esp,%ebp
  10b41b:	83 ec 04             	sub    $0x4,%esp
	if(isupper(c))
  10b41e:	8b 45 08             	mov    0x8(%ebp),%eax
  10b421:	89 04 24             	mov    %eax,(%esp)
  10b424:	e8 97 ff ff ff       	call   10b3c0 <isupper>
  10b429:	85 c0                	test   %eax,%eax
  10b42b:	74 08                	je     10b435 <tolower+0x1d>
	{
		return c + ('a' - 'A');
  10b42d:	8b 45 08             	mov    0x8(%ebp),%eax
  10b430:	83 c0 20             	add    $0x20,%eax
  10b433:	eb 03                	jmp    10b438 <tolower+0x20>
	}

	return c;
  10b435:	8b 45 08             	mov    0x8(%ebp),%eax
}
  10b438:	c9                   	leave  
  10b439:	c3                   	ret    

0010b43a <toupper>:

int toupper( int c )
{
  10b43a:	55                   	push   %ebp
  10b43b:	89 e5                	mov    %esp,%ebp
  10b43d:	83 ec 04             	sub    $0x4,%esp
	if(islower(c))
  10b440:	8b 45 08             	mov    0x8(%ebp),%eax
  10b443:	89 04 24             	mov    %eax,(%esp)
  10b446:	e8 cb fe ff ff       	call   10b316 <islower>
  10b44b:	85 c0                	test   %eax,%eax
  10b44d:	74 08                	je     10b457 <toupper+0x1d>
	{
		return c - ('a' - 'A');
  10b44f:	8b 45 08             	mov    0x8(%ebp),%eax
  10b452:	83 e8 20             	sub    $0x20,%eax
  10b455:	eb 03                	jmp    10b45a <toupper+0x20>
	}

	return c;
  10b457:	8b 45 08             	mov    0x8(%ebp),%eax
}
  10b45a:	c9                   	leave  
  10b45b:	c3                   	ret    

0010b45c <intr_0>:
  10b45c:	6a 00                	push   $0x0
  10b45e:	6a 00                	push   $0x0
  10b460:	e9 3a 0a 00 00       	jmp    10be9f <intr_common_handler>

0010b465 <intr_1>:
  10b465:	6a 00                	push   $0x0
  10b467:	6a 01                	push   $0x1
  10b469:	e9 31 0a 00 00       	jmp    10be9f <intr_common_handler>

0010b46e <intr_2>:
  10b46e:	6a 00                	push   $0x0
  10b470:	6a 02                	push   $0x2
  10b472:	e9 28 0a 00 00       	jmp    10be9f <intr_common_handler>

0010b477 <intr_3>:
  10b477:	6a 00                	push   $0x0
  10b479:	6a 03                	push   $0x3
  10b47b:	e9 1f 0a 00 00       	jmp    10be9f <intr_common_handler>

0010b480 <intr_4>:
  10b480:	6a 00                	push   $0x0
  10b482:	6a 04                	push   $0x4
  10b484:	e9 16 0a 00 00       	jmp    10be9f <intr_common_handler>

0010b489 <intr_5>:
  10b489:	6a 00                	push   $0x0
  10b48b:	6a 05                	push   $0x5
  10b48d:	e9 0d 0a 00 00       	jmp    10be9f <intr_common_handler>

0010b492 <intr_6>:
  10b492:	6a 00                	push   $0x0
  10b494:	6a 06                	push   $0x6
  10b496:	e9 04 0a 00 00       	jmp    10be9f <intr_common_handler>

0010b49b <intr_7>:
  10b49b:	6a 00                	push   $0x0
  10b49d:	6a 07                	push   $0x7
  10b49f:	e9 fb 09 00 00       	jmp    10be9f <intr_common_handler>

0010b4a4 <intr_8>:
  10b4a4:	6a 08                	push   $0x8
  10b4a6:	e9 f4 09 00 00       	jmp    10be9f <intr_common_handler>

0010b4ab <intr_9>:
  10b4ab:	6a 00                	push   $0x0
  10b4ad:	6a 09                	push   $0x9
  10b4af:	e9 eb 09 00 00       	jmp    10be9f <intr_common_handler>

0010b4b4 <intr_10>:
  10b4b4:	6a 0a                	push   $0xa
  10b4b6:	e9 e4 09 00 00       	jmp    10be9f <intr_common_handler>

0010b4bb <intr_11>:
  10b4bb:	6a 0b                	push   $0xb
  10b4bd:	e9 dd 09 00 00       	jmp    10be9f <intr_common_handler>

0010b4c2 <intr_12>:
  10b4c2:	6a 0c                	push   $0xc
  10b4c4:	e9 d6 09 00 00       	jmp    10be9f <intr_common_handler>

0010b4c9 <intr_13>:
  10b4c9:	6a 0d                	push   $0xd
  10b4cb:	e9 cf 09 00 00       	jmp    10be9f <intr_common_handler>

0010b4d0 <intr_14>:
  10b4d0:	6a 0e                	push   $0xe
  10b4d2:	e9 c8 09 00 00       	jmp    10be9f <intr_common_handler>

0010b4d7 <intr_15>:
  10b4d7:	6a 00                	push   $0x0
  10b4d9:	6a 0f                	push   $0xf
  10b4db:	e9 bf 09 00 00       	jmp    10be9f <intr_common_handler>

0010b4e0 <intr_16>:
  10b4e0:	6a 00                	push   $0x0
  10b4e2:	6a 10                	push   $0x10
  10b4e4:	e9 b6 09 00 00       	jmp    10be9f <intr_common_handler>

0010b4e9 <intr_17>:
  10b4e9:	6a 11                	push   $0x11
  10b4eb:	e9 af 09 00 00       	jmp    10be9f <intr_common_handler>

0010b4f0 <intr_18>:
  10b4f0:	6a 00                	push   $0x0
  10b4f2:	6a 12                	push   $0x12
  10b4f4:	e9 a6 09 00 00       	jmp    10be9f <intr_common_handler>

0010b4f9 <intr_19>:
  10b4f9:	6a 00                	push   $0x0
  10b4fb:	6a 13                	push   $0x13
  10b4fd:	e9 9d 09 00 00       	jmp    10be9f <intr_common_handler>

0010b502 <intr_20>:
  10b502:	6a 00                	push   $0x0
  10b504:	6a 14                	push   $0x14
  10b506:	e9 94 09 00 00       	jmp    10be9f <intr_common_handler>

0010b50b <intr_21>:
  10b50b:	6a 00                	push   $0x0
  10b50d:	6a 15                	push   $0x15
  10b50f:	e9 8b 09 00 00       	jmp    10be9f <intr_common_handler>

0010b514 <intr_22>:
  10b514:	6a 00                	push   $0x0
  10b516:	6a 16                	push   $0x16
  10b518:	e9 82 09 00 00       	jmp    10be9f <intr_common_handler>

0010b51d <intr_23>:
  10b51d:	6a 00                	push   $0x0
  10b51f:	6a 17                	push   $0x17
  10b521:	e9 79 09 00 00       	jmp    10be9f <intr_common_handler>

0010b526 <intr_24>:
  10b526:	6a 00                	push   $0x0
  10b528:	6a 18                	push   $0x18
  10b52a:	e9 70 09 00 00       	jmp    10be9f <intr_common_handler>

0010b52f <intr_25>:
  10b52f:	6a 00                	push   $0x0
  10b531:	6a 19                	push   $0x19
  10b533:	e9 67 09 00 00       	jmp    10be9f <intr_common_handler>

0010b538 <intr_26>:
  10b538:	6a 00                	push   $0x0
  10b53a:	6a 1a                	push   $0x1a
  10b53c:	e9 5e 09 00 00       	jmp    10be9f <intr_common_handler>

0010b541 <intr_27>:
  10b541:	6a 00                	push   $0x0
  10b543:	6a 1b                	push   $0x1b
  10b545:	e9 55 09 00 00       	jmp    10be9f <intr_common_handler>

0010b54a <intr_28>:
  10b54a:	6a 00                	push   $0x0
  10b54c:	6a 1c                	push   $0x1c
  10b54e:	e9 4c 09 00 00       	jmp    10be9f <intr_common_handler>

0010b553 <intr_29>:
  10b553:	6a 00                	push   $0x0
  10b555:	6a 1d                	push   $0x1d
  10b557:	e9 43 09 00 00       	jmp    10be9f <intr_common_handler>

0010b55c <intr_30>:
  10b55c:	6a 1e                	push   $0x1e
  10b55e:	e9 3c 09 00 00       	jmp    10be9f <intr_common_handler>

0010b563 <intr_31>:
  10b563:	6a 00                	push   $0x0
  10b565:	6a 1f                	push   $0x1f
  10b567:	e9 33 09 00 00       	jmp    10be9f <intr_common_handler>

0010b56c <intr_32>:
  10b56c:	6a 00                	push   $0x0
  10b56e:	6a 20                	push   $0x20
  10b570:	e9 2a 09 00 00       	jmp    10be9f <intr_common_handler>

0010b575 <intr_33>:
  10b575:	6a 00                	push   $0x0
  10b577:	6a 21                	push   $0x21
  10b579:	e9 21 09 00 00       	jmp    10be9f <intr_common_handler>

0010b57e <intr_34>:
  10b57e:	6a 00                	push   $0x0
  10b580:	6a 22                	push   $0x22
  10b582:	e9 18 09 00 00       	jmp    10be9f <intr_common_handler>

0010b587 <intr_35>:
  10b587:	6a 00                	push   $0x0
  10b589:	6a 23                	push   $0x23
  10b58b:	e9 0f 09 00 00       	jmp    10be9f <intr_common_handler>

0010b590 <intr_36>:
  10b590:	6a 00                	push   $0x0
  10b592:	6a 24                	push   $0x24
  10b594:	e9 06 09 00 00       	jmp    10be9f <intr_common_handler>

0010b599 <intr_37>:
  10b599:	6a 00                	push   $0x0
  10b59b:	6a 25                	push   $0x25
  10b59d:	e9 fd 08 00 00       	jmp    10be9f <intr_common_handler>

0010b5a2 <intr_38>:
  10b5a2:	6a 00                	push   $0x0
  10b5a4:	6a 26                	push   $0x26
  10b5a6:	e9 f4 08 00 00       	jmp    10be9f <intr_common_handler>

0010b5ab <intr_39>:
  10b5ab:	6a 00                	push   $0x0
  10b5ad:	6a 27                	push   $0x27
  10b5af:	e9 eb 08 00 00       	jmp    10be9f <intr_common_handler>

0010b5b4 <intr_40>:
  10b5b4:	6a 00                	push   $0x0
  10b5b6:	6a 28                	push   $0x28
  10b5b8:	e9 e2 08 00 00       	jmp    10be9f <intr_common_handler>

0010b5bd <intr_41>:
  10b5bd:	6a 00                	push   $0x0
  10b5bf:	6a 29                	push   $0x29
  10b5c1:	e9 d9 08 00 00       	jmp    10be9f <intr_common_handler>

0010b5c6 <intr_42>:
  10b5c6:	6a 00                	push   $0x0
  10b5c8:	6a 2a                	push   $0x2a
  10b5ca:	e9 d0 08 00 00       	jmp    10be9f <intr_common_handler>

0010b5cf <intr_43>:
  10b5cf:	6a 00                	push   $0x0
  10b5d1:	6a 2b                	push   $0x2b
  10b5d3:	e9 c7 08 00 00       	jmp    10be9f <intr_common_handler>

0010b5d8 <intr_44>:
  10b5d8:	6a 00                	push   $0x0
  10b5da:	6a 2c                	push   $0x2c
  10b5dc:	e9 be 08 00 00       	jmp    10be9f <intr_common_handler>

0010b5e1 <intr_45>:
  10b5e1:	6a 00                	push   $0x0
  10b5e3:	6a 2d                	push   $0x2d
  10b5e5:	e9 b5 08 00 00       	jmp    10be9f <intr_common_handler>

0010b5ea <intr_46>:
  10b5ea:	6a 00                	push   $0x0
  10b5ec:	6a 2e                	push   $0x2e
  10b5ee:	e9 ac 08 00 00       	jmp    10be9f <intr_common_handler>

0010b5f3 <intr_47>:
  10b5f3:	6a 00                	push   $0x0
  10b5f5:	6a 2f                	push   $0x2f
  10b5f7:	e9 a3 08 00 00       	jmp    10be9f <intr_common_handler>

0010b5fc <intr_48>:
  10b5fc:	6a 00                	push   $0x0
  10b5fe:	6a 30                	push   $0x30
  10b600:	e9 9a 08 00 00       	jmp    10be9f <intr_common_handler>

0010b605 <intr_49>:
  10b605:	6a 00                	push   $0x0
  10b607:	6a 31                	push   $0x31
  10b609:	e9 91 08 00 00       	jmp    10be9f <intr_common_handler>

0010b60e <intr_50>:
  10b60e:	6a 00                	push   $0x0
  10b610:	6a 32                	push   $0x32
  10b612:	e9 88 08 00 00       	jmp    10be9f <intr_common_handler>

0010b617 <intr_51>:
  10b617:	6a 00                	push   $0x0
  10b619:	6a 33                	push   $0x33
  10b61b:	e9 7f 08 00 00       	jmp    10be9f <intr_common_handler>

0010b620 <intr_52>:
  10b620:	6a 00                	push   $0x0
  10b622:	6a 34                	push   $0x34
  10b624:	e9 76 08 00 00       	jmp    10be9f <intr_common_handler>

0010b629 <intr_53>:
  10b629:	6a 00                	push   $0x0
  10b62b:	6a 35                	push   $0x35
  10b62d:	e9 6d 08 00 00       	jmp    10be9f <intr_common_handler>

0010b632 <intr_54>:
  10b632:	6a 00                	push   $0x0
  10b634:	6a 36                	push   $0x36
  10b636:	e9 64 08 00 00       	jmp    10be9f <intr_common_handler>

0010b63b <intr_55>:
  10b63b:	6a 00                	push   $0x0
  10b63d:	6a 37                	push   $0x37
  10b63f:	e9 5b 08 00 00       	jmp    10be9f <intr_common_handler>

0010b644 <intr_56>:
  10b644:	6a 00                	push   $0x0
  10b646:	6a 38                	push   $0x38
  10b648:	e9 52 08 00 00       	jmp    10be9f <intr_common_handler>

0010b64d <intr_57>:
  10b64d:	6a 00                	push   $0x0
  10b64f:	6a 39                	push   $0x39
  10b651:	e9 49 08 00 00       	jmp    10be9f <intr_common_handler>

0010b656 <intr_58>:
  10b656:	6a 00                	push   $0x0
  10b658:	6a 3a                	push   $0x3a
  10b65a:	e9 40 08 00 00       	jmp    10be9f <intr_common_handler>

0010b65f <intr_59>:
  10b65f:	6a 00                	push   $0x0
  10b661:	6a 3b                	push   $0x3b
  10b663:	e9 37 08 00 00       	jmp    10be9f <intr_common_handler>

0010b668 <intr_60>:
  10b668:	6a 00                	push   $0x0
  10b66a:	6a 3c                	push   $0x3c
  10b66c:	e9 2e 08 00 00       	jmp    10be9f <intr_common_handler>

0010b671 <intr_61>:
  10b671:	6a 00                	push   $0x0
  10b673:	6a 3d                	push   $0x3d
  10b675:	e9 25 08 00 00       	jmp    10be9f <intr_common_handler>

0010b67a <intr_62>:
  10b67a:	6a 00                	push   $0x0
  10b67c:	6a 3e                	push   $0x3e
  10b67e:	e9 1c 08 00 00       	jmp    10be9f <intr_common_handler>

0010b683 <intr_63>:
  10b683:	6a 00                	push   $0x0
  10b685:	6a 3f                	push   $0x3f
  10b687:	e9 13 08 00 00       	jmp    10be9f <intr_common_handler>

0010b68c <intr_64>:
  10b68c:	6a 00                	push   $0x0
  10b68e:	6a 40                	push   $0x40
  10b690:	e9 0a 08 00 00       	jmp    10be9f <intr_common_handler>

0010b695 <intr_65>:
  10b695:	6a 00                	push   $0x0
  10b697:	6a 41                	push   $0x41
  10b699:	e9 01 08 00 00       	jmp    10be9f <intr_common_handler>

0010b69e <intr_66>:
  10b69e:	6a 00                	push   $0x0
  10b6a0:	6a 42                	push   $0x42
  10b6a2:	e9 f8 07 00 00       	jmp    10be9f <intr_common_handler>

0010b6a7 <intr_67>:
  10b6a7:	6a 00                	push   $0x0
  10b6a9:	6a 43                	push   $0x43
  10b6ab:	e9 ef 07 00 00       	jmp    10be9f <intr_common_handler>

0010b6b0 <intr_68>:
  10b6b0:	6a 00                	push   $0x0
  10b6b2:	6a 44                	push   $0x44
  10b6b4:	e9 e6 07 00 00       	jmp    10be9f <intr_common_handler>

0010b6b9 <intr_69>:
  10b6b9:	6a 00                	push   $0x0
  10b6bb:	6a 45                	push   $0x45
  10b6bd:	e9 dd 07 00 00       	jmp    10be9f <intr_common_handler>

0010b6c2 <intr_70>:
  10b6c2:	6a 00                	push   $0x0
  10b6c4:	6a 46                	push   $0x46
  10b6c6:	e9 d4 07 00 00       	jmp    10be9f <intr_common_handler>

0010b6cb <intr_71>:
  10b6cb:	6a 00                	push   $0x0
  10b6cd:	6a 47                	push   $0x47
  10b6cf:	e9 cb 07 00 00       	jmp    10be9f <intr_common_handler>

0010b6d4 <intr_72>:
  10b6d4:	6a 00                	push   $0x0
  10b6d6:	6a 48                	push   $0x48
  10b6d8:	e9 c2 07 00 00       	jmp    10be9f <intr_common_handler>

0010b6dd <intr_73>:
  10b6dd:	6a 00                	push   $0x0
  10b6df:	6a 49                	push   $0x49
  10b6e1:	e9 b9 07 00 00       	jmp    10be9f <intr_common_handler>

0010b6e6 <intr_74>:
  10b6e6:	6a 00                	push   $0x0
  10b6e8:	6a 4a                	push   $0x4a
  10b6ea:	e9 b0 07 00 00       	jmp    10be9f <intr_common_handler>

0010b6ef <intr_75>:
  10b6ef:	6a 00                	push   $0x0
  10b6f1:	6a 4b                	push   $0x4b
  10b6f3:	e9 a7 07 00 00       	jmp    10be9f <intr_common_handler>

0010b6f8 <intr_76>:
  10b6f8:	6a 00                	push   $0x0
  10b6fa:	6a 4c                	push   $0x4c
  10b6fc:	e9 9e 07 00 00       	jmp    10be9f <intr_common_handler>

0010b701 <intr_77>:
  10b701:	6a 00                	push   $0x0
  10b703:	6a 4d                	push   $0x4d
  10b705:	e9 95 07 00 00       	jmp    10be9f <intr_common_handler>

0010b70a <intr_78>:
  10b70a:	6a 00                	push   $0x0
  10b70c:	6a 4e                	push   $0x4e
  10b70e:	e9 8c 07 00 00       	jmp    10be9f <intr_common_handler>

0010b713 <intr_79>:
  10b713:	6a 00                	push   $0x0
  10b715:	6a 4f                	push   $0x4f
  10b717:	e9 83 07 00 00       	jmp    10be9f <intr_common_handler>

0010b71c <intr_80>:
  10b71c:	6a 00                	push   $0x0
  10b71e:	6a 50                	push   $0x50
  10b720:	e9 7a 07 00 00       	jmp    10be9f <intr_common_handler>

0010b725 <intr_81>:
  10b725:	6a 00                	push   $0x0
  10b727:	6a 51                	push   $0x51
  10b729:	e9 71 07 00 00       	jmp    10be9f <intr_common_handler>

0010b72e <intr_82>:
  10b72e:	6a 00                	push   $0x0
  10b730:	6a 52                	push   $0x52
  10b732:	e9 68 07 00 00       	jmp    10be9f <intr_common_handler>

0010b737 <intr_83>:
  10b737:	6a 00                	push   $0x0
  10b739:	6a 53                	push   $0x53
  10b73b:	e9 5f 07 00 00       	jmp    10be9f <intr_common_handler>

0010b740 <intr_84>:
  10b740:	6a 00                	push   $0x0
  10b742:	6a 54                	push   $0x54
  10b744:	e9 56 07 00 00       	jmp    10be9f <intr_common_handler>

0010b749 <intr_85>:
  10b749:	6a 00                	push   $0x0
  10b74b:	6a 55                	push   $0x55
  10b74d:	e9 4d 07 00 00       	jmp    10be9f <intr_common_handler>

0010b752 <intr_86>:
  10b752:	6a 00                	push   $0x0
  10b754:	6a 56                	push   $0x56
  10b756:	e9 44 07 00 00       	jmp    10be9f <intr_common_handler>

0010b75b <intr_87>:
  10b75b:	6a 00                	push   $0x0
  10b75d:	6a 57                	push   $0x57
  10b75f:	e9 3b 07 00 00       	jmp    10be9f <intr_common_handler>

0010b764 <intr_88>:
  10b764:	6a 00                	push   $0x0
  10b766:	6a 58                	push   $0x58
  10b768:	e9 32 07 00 00       	jmp    10be9f <intr_common_handler>

0010b76d <intr_89>:
  10b76d:	6a 00                	push   $0x0
  10b76f:	6a 59                	push   $0x59
  10b771:	e9 29 07 00 00       	jmp    10be9f <intr_common_handler>

0010b776 <intr_90>:
  10b776:	6a 00                	push   $0x0
  10b778:	6a 5a                	push   $0x5a
  10b77a:	e9 20 07 00 00       	jmp    10be9f <intr_common_handler>

0010b77f <intr_91>:
  10b77f:	6a 00                	push   $0x0
  10b781:	6a 5b                	push   $0x5b
  10b783:	e9 17 07 00 00       	jmp    10be9f <intr_common_handler>

0010b788 <intr_92>:
  10b788:	6a 00                	push   $0x0
  10b78a:	6a 5c                	push   $0x5c
  10b78c:	e9 0e 07 00 00       	jmp    10be9f <intr_common_handler>

0010b791 <intr_93>:
  10b791:	6a 00                	push   $0x0
  10b793:	6a 5d                	push   $0x5d
  10b795:	e9 05 07 00 00       	jmp    10be9f <intr_common_handler>

0010b79a <intr_94>:
  10b79a:	6a 00                	push   $0x0
  10b79c:	6a 5e                	push   $0x5e
  10b79e:	e9 fc 06 00 00       	jmp    10be9f <intr_common_handler>

0010b7a3 <intr_95>:
  10b7a3:	6a 00                	push   $0x0
  10b7a5:	6a 5f                	push   $0x5f
  10b7a7:	e9 f3 06 00 00       	jmp    10be9f <intr_common_handler>

0010b7ac <intr_96>:
  10b7ac:	6a 00                	push   $0x0
  10b7ae:	6a 60                	push   $0x60
  10b7b0:	e9 ea 06 00 00       	jmp    10be9f <intr_common_handler>

0010b7b5 <intr_97>:
  10b7b5:	6a 00                	push   $0x0
  10b7b7:	6a 61                	push   $0x61
  10b7b9:	e9 e1 06 00 00       	jmp    10be9f <intr_common_handler>

0010b7be <intr_98>:
  10b7be:	6a 00                	push   $0x0
  10b7c0:	6a 62                	push   $0x62
  10b7c2:	e9 d8 06 00 00       	jmp    10be9f <intr_common_handler>

0010b7c7 <intr_99>:
  10b7c7:	6a 00                	push   $0x0
  10b7c9:	6a 63                	push   $0x63
  10b7cb:	e9 cf 06 00 00       	jmp    10be9f <intr_common_handler>

0010b7d0 <intr_100>:
  10b7d0:	6a 00                	push   $0x0
  10b7d2:	6a 64                	push   $0x64
  10b7d4:	e9 c6 06 00 00       	jmp    10be9f <intr_common_handler>

0010b7d9 <intr_101>:
  10b7d9:	6a 00                	push   $0x0
  10b7db:	6a 65                	push   $0x65
  10b7dd:	e9 bd 06 00 00       	jmp    10be9f <intr_common_handler>

0010b7e2 <intr_102>:
  10b7e2:	6a 00                	push   $0x0
  10b7e4:	6a 66                	push   $0x66
  10b7e6:	e9 b4 06 00 00       	jmp    10be9f <intr_common_handler>

0010b7eb <intr_103>:
  10b7eb:	6a 00                	push   $0x0
  10b7ed:	6a 67                	push   $0x67
  10b7ef:	e9 ab 06 00 00       	jmp    10be9f <intr_common_handler>

0010b7f4 <intr_104>:
  10b7f4:	6a 00                	push   $0x0
  10b7f6:	6a 68                	push   $0x68
  10b7f8:	e9 a2 06 00 00       	jmp    10be9f <intr_common_handler>

0010b7fd <intr_105>:
  10b7fd:	6a 00                	push   $0x0
  10b7ff:	6a 69                	push   $0x69
  10b801:	e9 99 06 00 00       	jmp    10be9f <intr_common_handler>

0010b806 <intr_106>:
  10b806:	6a 00                	push   $0x0
  10b808:	6a 6a                	push   $0x6a
  10b80a:	e9 90 06 00 00       	jmp    10be9f <intr_common_handler>

0010b80f <intr_107>:
  10b80f:	6a 00                	push   $0x0
  10b811:	6a 6b                	push   $0x6b
  10b813:	e9 87 06 00 00       	jmp    10be9f <intr_common_handler>

0010b818 <intr_108>:
  10b818:	6a 00                	push   $0x0
  10b81a:	6a 6c                	push   $0x6c
  10b81c:	e9 7e 06 00 00       	jmp    10be9f <intr_common_handler>

0010b821 <intr_109>:
  10b821:	6a 00                	push   $0x0
  10b823:	6a 6d                	push   $0x6d
  10b825:	e9 75 06 00 00       	jmp    10be9f <intr_common_handler>

0010b82a <intr_110>:
  10b82a:	6a 00                	push   $0x0
  10b82c:	6a 6e                	push   $0x6e
  10b82e:	e9 6c 06 00 00       	jmp    10be9f <intr_common_handler>

0010b833 <intr_111>:
  10b833:	6a 00                	push   $0x0
  10b835:	6a 6f                	push   $0x6f
  10b837:	e9 63 06 00 00       	jmp    10be9f <intr_common_handler>

0010b83c <intr_112>:
  10b83c:	6a 00                	push   $0x0
  10b83e:	6a 70                	push   $0x70
  10b840:	e9 5a 06 00 00       	jmp    10be9f <intr_common_handler>

0010b845 <intr_113>:
  10b845:	6a 00                	push   $0x0
  10b847:	6a 71                	push   $0x71
  10b849:	e9 51 06 00 00       	jmp    10be9f <intr_common_handler>

0010b84e <intr_114>:
  10b84e:	6a 00                	push   $0x0
  10b850:	6a 72                	push   $0x72
  10b852:	e9 48 06 00 00       	jmp    10be9f <intr_common_handler>

0010b857 <intr_115>:
  10b857:	6a 00                	push   $0x0
  10b859:	6a 73                	push   $0x73
  10b85b:	e9 3f 06 00 00       	jmp    10be9f <intr_common_handler>

0010b860 <intr_116>:
  10b860:	6a 00                	push   $0x0
  10b862:	6a 74                	push   $0x74
  10b864:	e9 36 06 00 00       	jmp    10be9f <intr_common_handler>

0010b869 <intr_117>:
  10b869:	6a 00                	push   $0x0
  10b86b:	6a 75                	push   $0x75
  10b86d:	e9 2d 06 00 00       	jmp    10be9f <intr_common_handler>

0010b872 <intr_118>:
  10b872:	6a 00                	push   $0x0
  10b874:	6a 76                	push   $0x76
  10b876:	e9 24 06 00 00       	jmp    10be9f <intr_common_handler>

0010b87b <intr_119>:
  10b87b:	6a 00                	push   $0x0
  10b87d:	6a 77                	push   $0x77
  10b87f:	e9 1b 06 00 00       	jmp    10be9f <intr_common_handler>

0010b884 <intr_120>:
  10b884:	6a 00                	push   $0x0
  10b886:	6a 78                	push   $0x78
  10b888:	e9 12 06 00 00       	jmp    10be9f <intr_common_handler>

0010b88d <intr_121>:
  10b88d:	6a 00                	push   $0x0
  10b88f:	6a 79                	push   $0x79
  10b891:	e9 09 06 00 00       	jmp    10be9f <intr_common_handler>

0010b896 <intr_122>:
  10b896:	6a 00                	push   $0x0
  10b898:	6a 7a                	push   $0x7a
  10b89a:	e9 00 06 00 00       	jmp    10be9f <intr_common_handler>

0010b89f <intr_123>:
  10b89f:	6a 00                	push   $0x0
  10b8a1:	6a 7b                	push   $0x7b
  10b8a3:	e9 f7 05 00 00       	jmp    10be9f <intr_common_handler>

0010b8a8 <intr_124>:
  10b8a8:	6a 00                	push   $0x0
  10b8aa:	6a 7c                	push   $0x7c
  10b8ac:	e9 ee 05 00 00       	jmp    10be9f <intr_common_handler>

0010b8b1 <intr_125>:
  10b8b1:	6a 00                	push   $0x0
  10b8b3:	6a 7d                	push   $0x7d
  10b8b5:	e9 e5 05 00 00       	jmp    10be9f <intr_common_handler>

0010b8ba <intr_126>:
  10b8ba:	6a 00                	push   $0x0
  10b8bc:	6a 7e                	push   $0x7e
  10b8be:	e9 dc 05 00 00       	jmp    10be9f <intr_common_handler>

0010b8c3 <intr_127>:
  10b8c3:	6a 00                	push   $0x0
  10b8c5:	6a 7f                	push   $0x7f
  10b8c7:	e9 d3 05 00 00       	jmp    10be9f <intr_common_handler>

0010b8cc <intr_128>:
  10b8cc:	6a 00                	push   $0x0
  10b8ce:	68 80 00 00 00       	push   $0x80
  10b8d3:	e9 c7 05 00 00       	jmp    10be9f <intr_common_handler>

0010b8d8 <intr_129>:
  10b8d8:	6a 00                	push   $0x0
  10b8da:	68 81 00 00 00       	push   $0x81
  10b8df:	e9 bb 05 00 00       	jmp    10be9f <intr_common_handler>

0010b8e4 <intr_130>:
  10b8e4:	6a 00                	push   $0x0
  10b8e6:	68 82 00 00 00       	push   $0x82
  10b8eb:	e9 af 05 00 00       	jmp    10be9f <intr_common_handler>

0010b8f0 <intr_131>:
  10b8f0:	6a 00                	push   $0x0
  10b8f2:	68 83 00 00 00       	push   $0x83
  10b8f7:	e9 a3 05 00 00       	jmp    10be9f <intr_common_handler>

0010b8fc <intr_132>:
  10b8fc:	6a 00                	push   $0x0
  10b8fe:	68 84 00 00 00       	push   $0x84
  10b903:	e9 97 05 00 00       	jmp    10be9f <intr_common_handler>

0010b908 <intr_133>:
  10b908:	6a 00                	push   $0x0
  10b90a:	68 85 00 00 00       	push   $0x85
  10b90f:	e9 8b 05 00 00       	jmp    10be9f <intr_common_handler>

0010b914 <intr_134>:
  10b914:	6a 00                	push   $0x0
  10b916:	68 86 00 00 00       	push   $0x86
  10b91b:	e9 7f 05 00 00       	jmp    10be9f <intr_common_handler>

0010b920 <intr_135>:
  10b920:	6a 00                	push   $0x0
  10b922:	68 87 00 00 00       	push   $0x87
  10b927:	e9 73 05 00 00       	jmp    10be9f <intr_common_handler>

0010b92c <intr_136>:
  10b92c:	6a 00                	push   $0x0
  10b92e:	68 88 00 00 00       	push   $0x88
  10b933:	e9 67 05 00 00       	jmp    10be9f <intr_common_handler>

0010b938 <intr_137>:
  10b938:	6a 00                	push   $0x0
  10b93a:	68 89 00 00 00       	push   $0x89
  10b93f:	e9 5b 05 00 00       	jmp    10be9f <intr_common_handler>

0010b944 <intr_138>:
  10b944:	6a 00                	push   $0x0
  10b946:	68 8a 00 00 00       	push   $0x8a
  10b94b:	e9 4f 05 00 00       	jmp    10be9f <intr_common_handler>

0010b950 <intr_139>:
  10b950:	6a 00                	push   $0x0
  10b952:	68 8b 00 00 00       	push   $0x8b
  10b957:	e9 43 05 00 00       	jmp    10be9f <intr_common_handler>

0010b95c <intr_140>:
  10b95c:	6a 00                	push   $0x0
  10b95e:	68 8c 00 00 00       	push   $0x8c
  10b963:	e9 37 05 00 00       	jmp    10be9f <intr_common_handler>

0010b968 <intr_141>:
  10b968:	6a 00                	push   $0x0
  10b96a:	68 8d 00 00 00       	push   $0x8d
  10b96f:	e9 2b 05 00 00       	jmp    10be9f <intr_common_handler>

0010b974 <intr_142>:
  10b974:	6a 00                	push   $0x0
  10b976:	68 8e 00 00 00       	push   $0x8e
  10b97b:	e9 1f 05 00 00       	jmp    10be9f <intr_common_handler>

0010b980 <intr_143>:
  10b980:	6a 00                	push   $0x0
  10b982:	68 8f 00 00 00       	push   $0x8f
  10b987:	e9 13 05 00 00       	jmp    10be9f <intr_common_handler>

0010b98c <intr_144>:
  10b98c:	6a 00                	push   $0x0
  10b98e:	68 90 00 00 00       	push   $0x90
  10b993:	e9 07 05 00 00       	jmp    10be9f <intr_common_handler>

0010b998 <intr_145>:
  10b998:	6a 00                	push   $0x0
  10b99a:	68 91 00 00 00       	push   $0x91
  10b99f:	e9 fb 04 00 00       	jmp    10be9f <intr_common_handler>

0010b9a4 <intr_146>:
  10b9a4:	6a 00                	push   $0x0
  10b9a6:	68 92 00 00 00       	push   $0x92
  10b9ab:	e9 ef 04 00 00       	jmp    10be9f <intr_common_handler>

0010b9b0 <intr_147>:
  10b9b0:	6a 00                	push   $0x0
  10b9b2:	68 93 00 00 00       	push   $0x93
  10b9b7:	e9 e3 04 00 00       	jmp    10be9f <intr_common_handler>

0010b9bc <intr_148>:
  10b9bc:	6a 00                	push   $0x0
  10b9be:	68 94 00 00 00       	push   $0x94
  10b9c3:	e9 d7 04 00 00       	jmp    10be9f <intr_common_handler>

0010b9c8 <intr_149>:
  10b9c8:	6a 00                	push   $0x0
  10b9ca:	68 95 00 00 00       	push   $0x95
  10b9cf:	e9 cb 04 00 00       	jmp    10be9f <intr_common_handler>

0010b9d4 <intr_150>:
  10b9d4:	6a 00                	push   $0x0
  10b9d6:	68 96 00 00 00       	push   $0x96
  10b9db:	e9 bf 04 00 00       	jmp    10be9f <intr_common_handler>

0010b9e0 <intr_151>:
  10b9e0:	6a 00                	push   $0x0
  10b9e2:	68 97 00 00 00       	push   $0x97
  10b9e7:	e9 b3 04 00 00       	jmp    10be9f <intr_common_handler>

0010b9ec <intr_152>:
  10b9ec:	6a 00                	push   $0x0
  10b9ee:	68 98 00 00 00       	push   $0x98
  10b9f3:	e9 a7 04 00 00       	jmp    10be9f <intr_common_handler>

0010b9f8 <intr_153>:
  10b9f8:	6a 00                	push   $0x0
  10b9fa:	68 99 00 00 00       	push   $0x99
  10b9ff:	e9 9b 04 00 00       	jmp    10be9f <intr_common_handler>

0010ba04 <intr_154>:
  10ba04:	6a 00                	push   $0x0
  10ba06:	68 9a 00 00 00       	push   $0x9a
  10ba0b:	e9 8f 04 00 00       	jmp    10be9f <intr_common_handler>

0010ba10 <intr_155>:
  10ba10:	6a 00                	push   $0x0
  10ba12:	68 9b 00 00 00       	push   $0x9b
  10ba17:	e9 83 04 00 00       	jmp    10be9f <intr_common_handler>

0010ba1c <intr_156>:
  10ba1c:	6a 00                	push   $0x0
  10ba1e:	68 9c 00 00 00       	push   $0x9c
  10ba23:	e9 77 04 00 00       	jmp    10be9f <intr_common_handler>

0010ba28 <intr_157>:
  10ba28:	6a 00                	push   $0x0
  10ba2a:	68 9d 00 00 00       	push   $0x9d
  10ba2f:	e9 6b 04 00 00       	jmp    10be9f <intr_common_handler>

0010ba34 <intr_158>:
  10ba34:	6a 00                	push   $0x0
  10ba36:	68 9e 00 00 00       	push   $0x9e
  10ba3b:	e9 5f 04 00 00       	jmp    10be9f <intr_common_handler>

0010ba40 <intr_159>:
  10ba40:	6a 00                	push   $0x0
  10ba42:	68 9f 00 00 00       	push   $0x9f
  10ba47:	e9 53 04 00 00       	jmp    10be9f <intr_common_handler>

0010ba4c <intr_160>:
  10ba4c:	6a 00                	push   $0x0
  10ba4e:	68 a0 00 00 00       	push   $0xa0
  10ba53:	e9 47 04 00 00       	jmp    10be9f <intr_common_handler>

0010ba58 <intr_161>:
  10ba58:	6a 00                	push   $0x0
  10ba5a:	68 a1 00 00 00       	push   $0xa1
  10ba5f:	e9 3b 04 00 00       	jmp    10be9f <intr_common_handler>

0010ba64 <intr_162>:
  10ba64:	6a 00                	push   $0x0
  10ba66:	68 a2 00 00 00       	push   $0xa2
  10ba6b:	e9 2f 04 00 00       	jmp    10be9f <intr_common_handler>

0010ba70 <intr_163>:
  10ba70:	6a 00                	push   $0x0
  10ba72:	68 a3 00 00 00       	push   $0xa3
  10ba77:	e9 23 04 00 00       	jmp    10be9f <intr_common_handler>

0010ba7c <intr_164>:
  10ba7c:	6a 00                	push   $0x0
  10ba7e:	68 a4 00 00 00       	push   $0xa4
  10ba83:	e9 17 04 00 00       	jmp    10be9f <intr_common_handler>

0010ba88 <intr_165>:
  10ba88:	6a 00                	push   $0x0
  10ba8a:	68 a5 00 00 00       	push   $0xa5
  10ba8f:	e9 0b 04 00 00       	jmp    10be9f <intr_common_handler>

0010ba94 <intr_166>:
  10ba94:	6a 00                	push   $0x0
  10ba96:	68 a6 00 00 00       	push   $0xa6
  10ba9b:	e9 ff 03 00 00       	jmp    10be9f <intr_common_handler>

0010baa0 <intr_167>:
  10baa0:	6a 00                	push   $0x0
  10baa2:	68 a7 00 00 00       	push   $0xa7
  10baa7:	e9 f3 03 00 00       	jmp    10be9f <intr_common_handler>

0010baac <intr_168>:
  10baac:	6a 00                	push   $0x0
  10baae:	68 a8 00 00 00       	push   $0xa8
  10bab3:	e9 e7 03 00 00       	jmp    10be9f <intr_common_handler>

0010bab8 <intr_169>:
  10bab8:	6a 00                	push   $0x0
  10baba:	68 a9 00 00 00       	push   $0xa9
  10babf:	e9 db 03 00 00       	jmp    10be9f <intr_common_handler>

0010bac4 <intr_170>:
  10bac4:	6a 00                	push   $0x0
  10bac6:	68 aa 00 00 00       	push   $0xaa
  10bacb:	e9 cf 03 00 00       	jmp    10be9f <intr_common_handler>

0010bad0 <intr_171>:
  10bad0:	6a 00                	push   $0x0
  10bad2:	68 ab 00 00 00       	push   $0xab
  10bad7:	e9 c3 03 00 00       	jmp    10be9f <intr_common_handler>

0010badc <intr_172>:
  10badc:	6a 00                	push   $0x0
  10bade:	68 ac 00 00 00       	push   $0xac
  10bae3:	e9 b7 03 00 00       	jmp    10be9f <intr_common_handler>

0010bae8 <intr_173>:
  10bae8:	6a 00                	push   $0x0
  10baea:	68 ad 00 00 00       	push   $0xad
  10baef:	e9 ab 03 00 00       	jmp    10be9f <intr_common_handler>

0010baf4 <intr_174>:
  10baf4:	6a 00                	push   $0x0
  10baf6:	68 ae 00 00 00       	push   $0xae
  10bafb:	e9 9f 03 00 00       	jmp    10be9f <intr_common_handler>

0010bb00 <intr_175>:
  10bb00:	6a 00                	push   $0x0
  10bb02:	68 af 00 00 00       	push   $0xaf
  10bb07:	e9 93 03 00 00       	jmp    10be9f <intr_common_handler>

0010bb0c <intr_176>:
  10bb0c:	6a 00                	push   $0x0
  10bb0e:	68 b0 00 00 00       	push   $0xb0
  10bb13:	e9 87 03 00 00       	jmp    10be9f <intr_common_handler>

0010bb18 <intr_177>:
  10bb18:	6a 00                	push   $0x0
  10bb1a:	68 b1 00 00 00       	push   $0xb1
  10bb1f:	e9 7b 03 00 00       	jmp    10be9f <intr_common_handler>

0010bb24 <intr_178>:
  10bb24:	6a 00                	push   $0x0
  10bb26:	68 b2 00 00 00       	push   $0xb2
  10bb2b:	e9 6f 03 00 00       	jmp    10be9f <intr_common_handler>

0010bb30 <intr_179>:
  10bb30:	6a 00                	push   $0x0
  10bb32:	68 b3 00 00 00       	push   $0xb3
  10bb37:	e9 63 03 00 00       	jmp    10be9f <intr_common_handler>

0010bb3c <intr_180>:
  10bb3c:	6a 00                	push   $0x0
  10bb3e:	68 b4 00 00 00       	push   $0xb4
  10bb43:	e9 57 03 00 00       	jmp    10be9f <intr_common_handler>

0010bb48 <intr_181>:
  10bb48:	6a 00                	push   $0x0
  10bb4a:	68 b5 00 00 00       	push   $0xb5
  10bb4f:	e9 4b 03 00 00       	jmp    10be9f <intr_common_handler>

0010bb54 <intr_182>:
  10bb54:	6a 00                	push   $0x0
  10bb56:	68 b6 00 00 00       	push   $0xb6
  10bb5b:	e9 3f 03 00 00       	jmp    10be9f <intr_common_handler>

0010bb60 <intr_183>:
  10bb60:	6a 00                	push   $0x0
  10bb62:	68 b7 00 00 00       	push   $0xb7
  10bb67:	e9 33 03 00 00       	jmp    10be9f <intr_common_handler>

0010bb6c <intr_184>:
  10bb6c:	6a 00                	push   $0x0
  10bb6e:	68 b8 00 00 00       	push   $0xb8
  10bb73:	e9 27 03 00 00       	jmp    10be9f <intr_common_handler>

0010bb78 <intr_185>:
  10bb78:	6a 00                	push   $0x0
  10bb7a:	68 b9 00 00 00       	push   $0xb9
  10bb7f:	e9 1b 03 00 00       	jmp    10be9f <intr_common_handler>

0010bb84 <intr_186>:
  10bb84:	6a 00                	push   $0x0
  10bb86:	68 ba 00 00 00       	push   $0xba
  10bb8b:	e9 0f 03 00 00       	jmp    10be9f <intr_common_handler>

0010bb90 <intr_187>:
  10bb90:	6a 00                	push   $0x0
  10bb92:	68 bb 00 00 00       	push   $0xbb
  10bb97:	e9 03 03 00 00       	jmp    10be9f <intr_common_handler>

0010bb9c <intr_188>:
  10bb9c:	6a 00                	push   $0x0
  10bb9e:	68 bc 00 00 00       	push   $0xbc
  10bba3:	e9 f7 02 00 00       	jmp    10be9f <intr_common_handler>

0010bba8 <intr_189>:
  10bba8:	6a 00                	push   $0x0
  10bbaa:	68 bd 00 00 00       	push   $0xbd
  10bbaf:	e9 eb 02 00 00       	jmp    10be9f <intr_common_handler>

0010bbb4 <intr_190>:
  10bbb4:	6a 00                	push   $0x0
  10bbb6:	68 be 00 00 00       	push   $0xbe
  10bbbb:	e9 df 02 00 00       	jmp    10be9f <intr_common_handler>

0010bbc0 <intr_191>:
  10bbc0:	6a 00                	push   $0x0
  10bbc2:	68 bf 00 00 00       	push   $0xbf
  10bbc7:	e9 d3 02 00 00       	jmp    10be9f <intr_common_handler>

0010bbcc <intr_192>:
  10bbcc:	6a 00                	push   $0x0
  10bbce:	68 c0 00 00 00       	push   $0xc0
  10bbd3:	e9 c7 02 00 00       	jmp    10be9f <intr_common_handler>

0010bbd8 <intr_193>:
  10bbd8:	6a 00                	push   $0x0
  10bbda:	68 c1 00 00 00       	push   $0xc1
  10bbdf:	e9 bb 02 00 00       	jmp    10be9f <intr_common_handler>

0010bbe4 <intr_194>:
  10bbe4:	6a 00                	push   $0x0
  10bbe6:	68 c2 00 00 00       	push   $0xc2
  10bbeb:	e9 af 02 00 00       	jmp    10be9f <intr_common_handler>

0010bbf0 <intr_195>:
  10bbf0:	6a 00                	push   $0x0
  10bbf2:	68 c3 00 00 00       	push   $0xc3
  10bbf7:	e9 a3 02 00 00       	jmp    10be9f <intr_common_handler>

0010bbfc <intr_196>:
  10bbfc:	6a 00                	push   $0x0
  10bbfe:	68 c4 00 00 00       	push   $0xc4
  10bc03:	e9 97 02 00 00       	jmp    10be9f <intr_common_handler>

0010bc08 <intr_197>:
  10bc08:	6a 00                	push   $0x0
  10bc0a:	68 c5 00 00 00       	push   $0xc5
  10bc0f:	e9 8b 02 00 00       	jmp    10be9f <intr_common_handler>

0010bc14 <intr_198>:
  10bc14:	6a 00                	push   $0x0
  10bc16:	68 c6 00 00 00       	push   $0xc6
  10bc1b:	e9 7f 02 00 00       	jmp    10be9f <intr_common_handler>

0010bc20 <intr_199>:
  10bc20:	6a 00                	push   $0x0
  10bc22:	68 c7 00 00 00       	push   $0xc7
  10bc27:	e9 73 02 00 00       	jmp    10be9f <intr_common_handler>

0010bc2c <intr_200>:
  10bc2c:	6a 00                	push   $0x0
  10bc2e:	68 c8 00 00 00       	push   $0xc8
  10bc33:	e9 67 02 00 00       	jmp    10be9f <intr_common_handler>

0010bc38 <intr_201>:
  10bc38:	6a 00                	push   $0x0
  10bc3a:	68 c9 00 00 00       	push   $0xc9
  10bc3f:	e9 5b 02 00 00       	jmp    10be9f <intr_common_handler>

0010bc44 <intr_202>:
  10bc44:	6a 00                	push   $0x0
  10bc46:	68 ca 00 00 00       	push   $0xca
  10bc4b:	e9 4f 02 00 00       	jmp    10be9f <intr_common_handler>

0010bc50 <intr_203>:
  10bc50:	6a 00                	push   $0x0
  10bc52:	68 cb 00 00 00       	push   $0xcb
  10bc57:	e9 43 02 00 00       	jmp    10be9f <intr_common_handler>

0010bc5c <intr_204>:
  10bc5c:	6a 00                	push   $0x0
  10bc5e:	68 cc 00 00 00       	push   $0xcc
  10bc63:	e9 37 02 00 00       	jmp    10be9f <intr_common_handler>

0010bc68 <intr_205>:
  10bc68:	6a 00                	push   $0x0
  10bc6a:	68 cd 00 00 00       	push   $0xcd
  10bc6f:	e9 2b 02 00 00       	jmp    10be9f <intr_common_handler>

0010bc74 <intr_206>:
  10bc74:	6a 00                	push   $0x0
  10bc76:	68 ce 00 00 00       	push   $0xce
  10bc7b:	e9 1f 02 00 00       	jmp    10be9f <intr_common_handler>

0010bc80 <intr_207>:
  10bc80:	6a 00                	push   $0x0
  10bc82:	68 cf 00 00 00       	push   $0xcf
  10bc87:	e9 13 02 00 00       	jmp    10be9f <intr_common_handler>

0010bc8c <intr_208>:
  10bc8c:	6a 00                	push   $0x0
  10bc8e:	68 d0 00 00 00       	push   $0xd0
  10bc93:	e9 07 02 00 00       	jmp    10be9f <intr_common_handler>

0010bc98 <intr_209>:
  10bc98:	6a 00                	push   $0x0
  10bc9a:	68 d1 00 00 00       	push   $0xd1
  10bc9f:	e9 fb 01 00 00       	jmp    10be9f <intr_common_handler>

0010bca4 <intr_210>:
  10bca4:	6a 00                	push   $0x0
  10bca6:	68 d2 00 00 00       	push   $0xd2
  10bcab:	e9 ef 01 00 00       	jmp    10be9f <intr_common_handler>

0010bcb0 <intr_211>:
  10bcb0:	6a 00                	push   $0x0
  10bcb2:	68 d3 00 00 00       	push   $0xd3
  10bcb7:	e9 e3 01 00 00       	jmp    10be9f <intr_common_handler>

0010bcbc <intr_212>:
  10bcbc:	6a 00                	push   $0x0
  10bcbe:	68 d4 00 00 00       	push   $0xd4
  10bcc3:	e9 d7 01 00 00       	jmp    10be9f <intr_common_handler>

0010bcc8 <intr_213>:
  10bcc8:	6a 00                	push   $0x0
  10bcca:	68 d5 00 00 00       	push   $0xd5
  10bccf:	e9 cb 01 00 00       	jmp    10be9f <intr_common_handler>

0010bcd4 <intr_214>:
  10bcd4:	6a 00                	push   $0x0
  10bcd6:	68 d6 00 00 00       	push   $0xd6
  10bcdb:	e9 bf 01 00 00       	jmp    10be9f <intr_common_handler>

0010bce0 <intr_215>:
  10bce0:	6a 00                	push   $0x0
  10bce2:	68 d7 00 00 00       	push   $0xd7
  10bce7:	e9 b3 01 00 00       	jmp    10be9f <intr_common_handler>

0010bcec <intr_216>:
  10bcec:	6a 00                	push   $0x0
  10bcee:	68 d8 00 00 00       	push   $0xd8
  10bcf3:	e9 a7 01 00 00       	jmp    10be9f <intr_common_handler>

0010bcf8 <intr_217>:
  10bcf8:	6a 00                	push   $0x0
  10bcfa:	68 d9 00 00 00       	push   $0xd9
  10bcff:	e9 9b 01 00 00       	jmp    10be9f <intr_common_handler>

0010bd04 <intr_218>:
  10bd04:	6a 00                	push   $0x0
  10bd06:	68 da 00 00 00       	push   $0xda
  10bd0b:	e9 8f 01 00 00       	jmp    10be9f <intr_common_handler>

0010bd10 <intr_219>:
  10bd10:	6a 00                	push   $0x0
  10bd12:	68 db 00 00 00       	push   $0xdb
  10bd17:	e9 83 01 00 00       	jmp    10be9f <intr_common_handler>

0010bd1c <intr_220>:
  10bd1c:	6a 00                	push   $0x0
  10bd1e:	68 dc 00 00 00       	push   $0xdc
  10bd23:	e9 77 01 00 00       	jmp    10be9f <intr_common_handler>

0010bd28 <intr_221>:
  10bd28:	6a 00                	push   $0x0
  10bd2a:	68 dd 00 00 00       	push   $0xdd
  10bd2f:	e9 6b 01 00 00       	jmp    10be9f <intr_common_handler>

0010bd34 <intr_222>:
  10bd34:	6a 00                	push   $0x0
  10bd36:	68 de 00 00 00       	push   $0xde
  10bd3b:	e9 5f 01 00 00       	jmp    10be9f <intr_common_handler>

0010bd40 <intr_223>:
  10bd40:	6a 00                	push   $0x0
  10bd42:	68 df 00 00 00       	push   $0xdf
  10bd47:	e9 53 01 00 00       	jmp    10be9f <intr_common_handler>

0010bd4c <intr_224>:
  10bd4c:	6a 00                	push   $0x0
  10bd4e:	68 e0 00 00 00       	push   $0xe0
  10bd53:	e9 47 01 00 00       	jmp    10be9f <intr_common_handler>

0010bd58 <intr_225>:
  10bd58:	6a 00                	push   $0x0
  10bd5a:	68 e1 00 00 00       	push   $0xe1
  10bd5f:	e9 3b 01 00 00       	jmp    10be9f <intr_common_handler>

0010bd64 <intr_226>:
  10bd64:	6a 00                	push   $0x0
  10bd66:	68 e2 00 00 00       	push   $0xe2
  10bd6b:	e9 2f 01 00 00       	jmp    10be9f <intr_common_handler>

0010bd70 <intr_227>:
  10bd70:	6a 00                	push   $0x0
  10bd72:	68 e3 00 00 00       	push   $0xe3
  10bd77:	e9 23 01 00 00       	jmp    10be9f <intr_common_handler>

0010bd7c <intr_228>:
  10bd7c:	6a 00                	push   $0x0
  10bd7e:	68 e4 00 00 00       	push   $0xe4
  10bd83:	e9 17 01 00 00       	jmp    10be9f <intr_common_handler>

0010bd88 <intr_229>:
  10bd88:	6a 00                	push   $0x0
  10bd8a:	68 e5 00 00 00       	push   $0xe5
  10bd8f:	e9 0b 01 00 00       	jmp    10be9f <intr_common_handler>

0010bd94 <intr_230>:
  10bd94:	6a 00                	push   $0x0
  10bd96:	68 e6 00 00 00       	push   $0xe6
  10bd9b:	e9 ff 00 00 00       	jmp    10be9f <intr_common_handler>

0010bda0 <intr_231>:
  10bda0:	6a 00                	push   $0x0
  10bda2:	68 e7 00 00 00       	push   $0xe7
  10bda7:	e9 f3 00 00 00       	jmp    10be9f <intr_common_handler>

0010bdac <intr_232>:
  10bdac:	6a 00                	push   $0x0
  10bdae:	68 e8 00 00 00       	push   $0xe8
  10bdb3:	e9 e7 00 00 00       	jmp    10be9f <intr_common_handler>

0010bdb8 <intr_233>:
  10bdb8:	6a 00                	push   $0x0
  10bdba:	68 e9 00 00 00       	push   $0xe9
  10bdbf:	e9 db 00 00 00       	jmp    10be9f <intr_common_handler>

0010bdc4 <intr_234>:
  10bdc4:	6a 00                	push   $0x0
  10bdc6:	68 ea 00 00 00       	push   $0xea
  10bdcb:	e9 cf 00 00 00       	jmp    10be9f <intr_common_handler>

0010bdd0 <intr_235>:
  10bdd0:	6a 00                	push   $0x0
  10bdd2:	68 eb 00 00 00       	push   $0xeb
  10bdd7:	e9 c3 00 00 00       	jmp    10be9f <intr_common_handler>

0010bddc <intr_236>:
  10bddc:	6a 00                	push   $0x0
  10bdde:	68 ec 00 00 00       	push   $0xec
  10bde3:	e9 b7 00 00 00       	jmp    10be9f <intr_common_handler>

0010bde8 <intr_237>:
  10bde8:	6a 00                	push   $0x0
  10bdea:	68 ed 00 00 00       	push   $0xed
  10bdef:	e9 ab 00 00 00       	jmp    10be9f <intr_common_handler>

0010bdf4 <intr_238>:
  10bdf4:	6a 00                	push   $0x0
  10bdf6:	68 ee 00 00 00       	push   $0xee
  10bdfb:	e9 9f 00 00 00       	jmp    10be9f <intr_common_handler>

0010be00 <intr_239>:
  10be00:	6a 00                	push   $0x0
  10be02:	68 ef 00 00 00       	push   $0xef
  10be07:	e9 93 00 00 00       	jmp    10be9f <intr_common_handler>

0010be0c <intr_240>:
  10be0c:	6a 00                	push   $0x0
  10be0e:	68 f0 00 00 00       	push   $0xf0
  10be13:	e9 87 00 00 00       	jmp    10be9f <intr_common_handler>

0010be18 <intr_241>:
  10be18:	6a 00                	push   $0x0
  10be1a:	68 f1 00 00 00       	push   $0xf1
  10be1f:	eb 7e                	jmp    10be9f <intr_common_handler>

0010be21 <intr_242>:
  10be21:	6a 00                	push   $0x0
  10be23:	68 f2 00 00 00       	push   $0xf2
  10be28:	eb 75                	jmp    10be9f <intr_common_handler>

0010be2a <intr_243>:
  10be2a:	6a 00                	push   $0x0
  10be2c:	68 f3 00 00 00       	push   $0xf3
  10be31:	eb 6c                	jmp    10be9f <intr_common_handler>

0010be33 <intr_244>:
  10be33:	6a 00                	push   $0x0
  10be35:	68 f4 00 00 00       	push   $0xf4
  10be3a:	eb 63                	jmp    10be9f <intr_common_handler>

0010be3c <intr_245>:
  10be3c:	6a 00                	push   $0x0
  10be3e:	68 f5 00 00 00       	push   $0xf5
  10be43:	eb 5a                	jmp    10be9f <intr_common_handler>

0010be45 <intr_246>:
  10be45:	6a 00                	push   $0x0
  10be47:	68 f6 00 00 00       	push   $0xf6
  10be4c:	eb 51                	jmp    10be9f <intr_common_handler>

0010be4e <intr_247>:
  10be4e:	6a 00                	push   $0x0
  10be50:	68 f7 00 00 00       	push   $0xf7
  10be55:	eb 48                	jmp    10be9f <intr_common_handler>

0010be57 <intr_248>:
  10be57:	6a 00                	push   $0x0
  10be59:	68 f8 00 00 00       	push   $0xf8
  10be5e:	eb 3f                	jmp    10be9f <intr_common_handler>

0010be60 <intr_249>:
  10be60:	6a 00                	push   $0x0
  10be62:	68 f9 00 00 00       	push   $0xf9
  10be67:	eb 36                	jmp    10be9f <intr_common_handler>

0010be69 <intr_250>:
  10be69:	6a 00                	push   $0x0
  10be6b:	68 fa 00 00 00       	push   $0xfa
  10be70:	eb 2d                	jmp    10be9f <intr_common_handler>

0010be72 <intr_251>:
  10be72:	6a 00                	push   $0x0
  10be74:	68 fb 00 00 00       	push   $0xfb
  10be79:	eb 24                	jmp    10be9f <intr_common_handler>

0010be7b <intr_252>:
  10be7b:	6a 00                	push   $0x0
  10be7d:	68 fc 00 00 00       	push   $0xfc
  10be82:	eb 1b                	jmp    10be9f <intr_common_handler>

0010be84 <intr_253>:
  10be84:	6a 00                	push   $0x0
  10be86:	68 fd 00 00 00       	push   $0xfd
  10be8b:	eb 12                	jmp    10be9f <intr_common_handler>

0010be8d <intr_254>:
  10be8d:	6a 00                	push   $0x0
  10be8f:	68 fe 00 00 00       	push   $0xfe
  10be94:	eb 09                	jmp    10be9f <intr_common_handler>

0010be96 <intr_255>:
  10be96:	6a 00                	push   $0x0
  10be98:	68 ff 00 00 00       	push   $0xff
  10be9d:	eb 00                	jmp    10be9f <intr_common_handler>

0010be9f <intr_common_handler>:
  10be9f:	55                   	push   %ebp
  10bea0:	57                   	push   %edi
  10bea1:	56                   	push   %esi
  10bea2:	52                   	push   %edx
  10bea3:	51                   	push   %ecx
  10bea4:	53                   	push   %ebx
  10bea5:	50                   	push   %eax
  10bea6:	66 b8 10 00          	mov    $0x10,%ax
  10beaa:	8e d8                	mov    %eax,%ds
  10beac:	8e c0                	mov    %eax,%es
  10beae:	54                   	push   %esp
  10beaf:	e8 a3 81 ff ff       	call   104057 <handle_interrupt>
  10beb4:	89 c4                	mov    %eax,%esp
  10beb6:	66 b8 23 00          	mov    $0x23,%ax
  10beba:	8e d8                	mov    %eax,%ds
  10bebc:	8e c0                	mov    %eax,%es
  10bebe:	58                   	pop    %eax
  10bebf:	5b                   	pop    %ebx
  10bec0:	59                   	pop    %ecx
  10bec1:	5a                   	pop    %edx
  10bec2:	5e                   	pop    %esi
  10bec3:	5f                   	pop    %edi
  10bec4:	5d                   	pop    %ebp
  10bec5:	83 c4 08             	add    $0x8,%esp
  10bec8:	cf                   	iret   

0010bec9 <cpuid_supported>:
  10bec9:	9c                   	pushf  
  10beca:	59                   	pop    %ecx
  10becb:	89 c8                	mov    %ecx,%eax
  10becd:	35 00 00 20 00       	xor    $0x200000,%eax
  10bed2:	50                   	push   %eax
  10bed3:	9d                   	popf   
  10bed4:	9c                   	pushf  
  10bed5:	58                   	pop    %eax
  10bed6:	31 c8                	xor    %ecx,%eax
  10bed8:	74 02                	je     10bedc <unsupported>
  10beda:	eb 05                	jmp    10bee1 <supported>

0010bedc <unsupported>:
  10bedc:	b8 00 00 00 00       	mov    $0x0,%eax

0010bee1 <supported>:
  10bee1:	b8 01 00 00 00       	mov    $0x1,%eax
  10bee6:	c3                   	ret    

0010bee7 <start>:
  10bee7:	bc 00 60 13 00       	mov    $0x136000,%esp
  10beec:	50                   	push   %eax
  10beed:	53                   	push   %ebx
  10beee:	e8 41 7a ff ff       	call   103934 <ctors>
  10bef3:	e8 f8 63 ff ff       	call   1022f0 <init>

0010bef8 <halt>:
  10bef8:	fa                   	cli    
  10bef9:	f4                   	hlt    
  10befa:	eb fc                	jmp    10bef8 <halt>

Disassembly of section .text._ZN3hal3x863pic8instanceEv:

0010befc <_ZN3hal3x863pic8instanceEv>:
		  *		This class contains Methods to initialiset the Programmable Interrupt Controller.
		  *		This class is implemented as a singleton, so only one instance of this class can be used (it is not possible to set up more than one PIC).
		  */
		class pic
		{
			SINGLETON(pic)
  10befc:	55                   	push   %ebp
  10befd:	89 e5                	mov    %esp,%ebp
  10beff:	83 ec 18             	sub    $0x18,%esp
  10bf02:	b8 00 60 13 00       	mov    $0x136000,%eax
  10bf07:	0f b6 00             	movzbl (%eax),%eax
  10bf0a:	84 c0                	test   %al,%al
  10bf0c:	75 14                	jne    10bf22 <_ZN3hal3x863pic8instanceEv+0x26>
  10bf0e:	c7 04 24 20 60 13 00 	movl   $0x136020,(%esp)
  10bf15:	e8 a2 81 ff ff       	call   1040bc <_ZN3hal3x863picC1Ev>
  10bf1a:	b8 00 60 13 00       	mov    $0x136000,%eax
  10bf1f:	c6 00 01             	movb   $0x1,(%eax)
  10bf22:	b8 20 60 13 00       	mov    $0x136020,%eax
  10bf27:	c9                   	leave  
  10bf28:	c3                   	ret    

Disassembly of section .text._ZN6kernel9schedulerD2Ev:

0010bf2a <_ZN6kernel9schedulerD1Ev>:
namespace kernel
{
	/**
	  * @brief	The scheduler
	  */
	class scheduler
  10bf2a:	55                   	push   %ebp
  10bf2b:	89 e5                	mov    %esp,%ebp
  10bf2d:	83 ec 18             	sub    $0x18,%esp
  10bf30:	8b 45 08             	mov    0x8(%ebp),%eax
  10bf33:	89 04 24             	mov    %eax,(%esp)
  10bf36:	e8 3b 00 00 00       	call   10bf76 <_ZN5tools4listIN6kernel6threadEED1Ev>
  10bf3b:	c9                   	leave  
  10bf3c:	c3                   	ret    

Disassembly of section .text._ZN6kernel9scheduler8instanceEv:

0010bf3d <_ZN6kernel9scheduler8instanceEv>:
	{
		friend cpu::cpu_state *syscall::handle( cpu::cpu_state *cpu );

		SINGLETON(scheduler)
  10bf3d:	55                   	push   %ebp
  10bf3e:	89 e5                	mov    %esp,%ebp
  10bf40:	83 ec 18             	sub    $0x18,%esp
  10bf43:	b8 08 60 13 00       	mov    $0x136008,%eax
  10bf48:	0f b6 00             	movzbl (%eax),%eax
  10bf4b:	84 c0                	test   %al,%al
  10bf4d:	75 20                	jne    10bf6f <_ZN6kernel9scheduler8instanceEv+0x32>
  10bf4f:	c7 04 24 60 60 13 00 	movl   $0x136060,(%esp)
  10bf56:	e8 c7 52 ff ff       	call   101222 <_ZN6kernel9schedulerC1Ev>
  10bf5b:	b8 08 60 13 00       	mov    $0x136008,%eax
  10bf60:	c6 00 01             	movb   $0x1,(%eax)
  10bf63:	c7 04 24 66 00 10 00 	movl   $0x100066,(%esp)
  10bf6a:	e8 14 7a ff ff       	call   103983 <atexit>
  10bf6f:	b8 60 60 13 00       	mov    $0x136060,%eax
  10bf74:	c9                   	leave  
  10bf75:	c3                   	ret    

Disassembly of section .text._ZN5tools4listIN6kernel6threadEED2Ev:

0010bf76 <_ZN5tools4listIN6kernel6threadEED1Ev>:
	this->post->value = nullptr; 
	this->post->next  = nullptr; 
	this->post->prev  = this->last;
}

template<typename T> list<T>::~list(  )
  10bf76:	55                   	push   %ebp
  10bf77:	89 e5                	mov    %esp,%ebp
  10bf79:	83 ec 18             	sub    $0x18,%esp
{
	while(!this->empty())
  10bf7c:	eb 0b                	jmp    10bf89 <_ZN5tools4listIN6kernel6threadEED1Ev+0x13>
	{
		this->pop_front();
  10bf7e:	8b 45 08             	mov    0x8(%ebp),%eax
  10bf81:	89 04 24             	mov    %eax,(%esp)
  10bf84:	e8 51 00 00 00       	call   10bfda <_ZN5tools4listIN6kernel6threadEE9pop_frontEv>
	this->post->prev  = this->last;
}

template<typename T> list<T>::~list(  )
{
	while(!this->empty())
  10bf89:	8b 45 08             	mov    0x8(%ebp),%eax
  10bf8c:	89 04 24             	mov    %eax,(%esp)
  10bf8f:	e8 36 00 00 00       	call   10bfca <_ZN5tools4listIN6kernel6threadEE5emptyEv>
  10bf94:	84 c0                	test   %al,%al
  10bf96:	0f 94 c0             	sete   %al
  10bf99:	84 c0                	test   %al,%al
  10bf9b:	75 e1                	jne    10bf7e <_ZN5tools4listIN6kernel6threadEED1Ev+0x8>
	{
		this->pop_front();
	}

	delete this->post;
  10bf9d:	8b 45 08             	mov    0x8(%ebp),%eax
  10bfa0:	8b 40 0c             	mov    0xc(%eax),%eax
  10bfa3:	89 04 24             	mov    %eax,(%esp)
  10bfa6:	e8 2b 62 ff ff       	call   1021d6 <_ZdlPv>

	this->first = nullptr;
  10bfab:	8b 45 08             	mov    0x8(%ebp),%eax
  10bfae:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	this->last  = nullptr;
  10bfb4:	8b 45 08             	mov    0x8(%ebp),%eax
  10bfb7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	this->post  = nullptr;
  10bfbe:	8b 45 08             	mov    0x8(%ebp),%eax
  10bfc1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
}
  10bfc8:	c9                   	leave  
  10bfc9:	c3                   	ret    

Disassembly of section .text._ZN5tools4listIN6kernel6threadEE5emptyEv:

0010bfca <_ZN5tools4listIN6kernel6threadEE5emptyEv>:
			T *pop_front(  );
			T *pop_back(  );

			inline size_t size(  ) { return this->counter; }

			inline bool empty(  ){ return (this->counter == 0); }
  10bfca:	55                   	push   %ebp
  10bfcb:	89 e5                	mov    %esp,%ebp
  10bfcd:	8b 45 08             	mov    0x8(%ebp),%eax
  10bfd0:	8b 40 10             	mov    0x10(%eax),%eax
  10bfd3:	85 c0                	test   %eax,%eax
  10bfd5:	0f 94 c0             	sete   %al
  10bfd8:	5d                   	pop    %ebp
  10bfd9:	c3                   	ret    

Disassembly of section .text._ZN5tools4listIN6kernel6threadEE9pop_frontEv:

0010bfda <_ZN5tools4listIN6kernel6threadEE9pop_frontEv>:
template<typename T> void list<T>::push_back( T *value )
{
	this->insert(this->end(), value);
}

template<typename T> T *list<T>::pop_front(  )
  10bfda:	55                   	push   %ebp
  10bfdb:	89 e5                	mov    %esp,%ebp
  10bfdd:	83 ec 38             	sub    $0x38,%esp
{
	list<T>::iterator it = this->begin();
  10bfe0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  10bfe3:	8b 55 08             	mov    0x8(%ebp),%edx
  10bfe6:	89 54 24 04          	mov    %edx,0x4(%esp)
  10bfea:	89 04 24             	mov    %eax,(%esp)
  10bfed:	e8 3a 00 00 00       	call   10c02c <_ZN5tools4listIN6kernel6threadEE5beginEv>
  10bff2:	83 ec 04             	sub    $0x4,%esp

	T *value = *it;
  10bff5:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  10bff8:	89 04 24             	mov    %eax,(%esp)
  10bffb:	e8 76 00 00 00       	call   10c076 <_ZN5tools4listIN6kernel6threadEE8iteratordeEv>
  10c000:	89 45 f4             	mov    %eax,-0xc(%ebp)

	this->erase(it);
  10c003:	8d 4d ec             	lea    -0x14(%ebp),%ecx
  10c006:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10c009:	8b 55 e8             	mov    -0x18(%ebp),%edx
  10c00c:	89 44 24 08          	mov    %eax,0x8(%esp)
  10c010:	89 54 24 0c          	mov    %edx,0xc(%esp)
  10c014:	8b 45 08             	mov    0x8(%ebp),%eax
  10c017:	89 44 24 04          	mov    %eax,0x4(%esp)
  10c01b:	89 0c 24             	mov    %ecx,(%esp)
  10c01e:	e8 5f 00 00 00       	call   10c082 <_ZN5tools4listIN6kernel6threadEE5eraseENS3_8iteratorE>
  10c023:	83 ec 04             	sub    $0x4,%esp

	return value;
  10c026:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
  10c029:	c9                   	leave  
  10c02a:	c3                   	ret    

Disassembly of section .text._ZN5tools4listIN6kernel6threadEE5beginEv:

0010c02c <_ZN5tools4listIN6kernel6threadEE5beginEv>:
	this->first = nullptr;
	this->last  = nullptr;
	this->post  = nullptr;
}

template<typename T> typename list<T>::iterator list<T>::begin(  )
  10c02c:	55                   	push   %ebp
  10c02d:	89 e5                	mov    %esp,%ebp
  10c02f:	83 ec 18             	sub    $0x18,%esp
{
	static list<T>::iterator it;
  10c032:	b8 10 60 13 00       	mov    $0x136010,%eax
  10c037:	0f b6 00             	movzbl (%eax),%eax
  10c03a:	84 c0                	test   %al,%al
  10c03c:	75 14                	jne    10c052 <_ZN5tools4listIN6kernel6threadEE5beginEv+0x26>
  10c03e:	c7 04 24 7c 60 13 00 	movl   $0x13607c,(%esp)
  10c045:	e8 08 01 00 00       	call   10c152 <_ZN5tools4listIN6kernel6threadEE8iteratorC1Ev>
  10c04a:	b8 10 60 13 00       	mov    $0x136010,%eax
  10c04f:	c6 00 01             	movb   $0x1,(%eax)

	it.itm = this->first;	
  10c052:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c055:	8b 00                	mov    (%eax),%eax
  10c057:	a3 7c 60 13 00       	mov    %eax,0x13607c

	return it;
  10c05c:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10c05f:	a1 7c 60 13 00       	mov    0x13607c,%eax
  10c064:	8b 15 80 60 13 00    	mov    0x136080,%edx
  10c06a:	89 01                	mov    %eax,(%ecx)
  10c06c:	89 51 04             	mov    %edx,0x4(%ecx)
}
  10c06f:	8b 45 08             	mov    0x8(%ebp),%eax
  10c072:	c9                   	leave  
  10c073:	c2 04 00             	ret    $0x4

Disassembly of section .text._ZN5tools4listIN6kernel6threadEE8iteratordeEv:

0010c076 <_ZN5tools4listIN6kernel6threadEE8iteratordeEv>:

				inline bool operator == ( const iterator &it ) { if(this->lst != it.lst) return false; if(this->itm != it.itm) return false; return true; }

				inline bool operator != ( const iterator &it ) { return !(*this == it); }

				inline T *operator * () { return this->itm->value; }
  10c076:	55                   	push   %ebp
  10c077:	89 e5                	mov    %esp,%ebp
  10c079:	8b 45 08             	mov    0x8(%ebp),%eax
  10c07c:	8b 00                	mov    (%eax),%eax
  10c07e:	8b 00                	mov    (%eax),%eax
  10c080:	5d                   	pop    %ebp
  10c081:	c3                   	ret    

Disassembly of section .text._ZN5tools4listIN6kernel6threadEE5eraseENS3_8iteratorE:

0010c082 <_ZN5tools4listIN6kernel6threadEE5eraseENS3_8iteratorE>:
	new_it.itm = new_itm;

	return new_it;
}

template<typename T> typename list<T>::iterator list<T>::erase( list<T>::iterator it )
  10c082:	55                   	push   %ebp
  10c083:	89 e5                	mov    %esp,%ebp
  10c085:	83 ec 18             	sub    $0x18,%esp
{
	if(it.itm == this->first)
  10c088:	8b 55 10             	mov    0x10(%ebp),%edx
  10c08b:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c08e:	8b 00                	mov    (%eax),%eax
  10c090:	39 c2                	cmp    %eax,%edx
  10c092:	75 0b                	jne    10c09f <_ZN5tools4listIN6kernel6threadEE5eraseENS3_8iteratorE+0x1d>
	{
		this->first = it.itm->next;
  10c094:	8b 45 10             	mov    0x10(%ebp),%eax
  10c097:	8b 50 08             	mov    0x8(%eax),%edx
  10c09a:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c09d:	89 10                	mov    %edx,(%eax)
	}

	if(it.itm == this->last)
  10c09f:	8b 55 10             	mov    0x10(%ebp),%edx
  10c0a2:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c0a5:	8b 40 04             	mov    0x4(%eax),%eax
  10c0a8:	39 c2                	cmp    %eax,%edx
  10c0aa:	75 0c                	jne    10c0b8 <_ZN5tools4listIN6kernel6threadEE5eraseENS3_8iteratorE+0x36>
	{
		this->last = it.itm->prev;
  10c0ac:	8b 45 10             	mov    0x10(%ebp),%eax
  10c0af:	8b 50 04             	mov    0x4(%eax),%edx
  10c0b2:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c0b5:	89 50 04             	mov    %edx,0x4(%eax)
	}

	if(it.itm->next)
  10c0b8:	8b 45 10             	mov    0x10(%ebp),%eax
  10c0bb:	8b 40 08             	mov    0x8(%eax),%eax
  10c0be:	85 c0                	test   %eax,%eax
  10c0c0:	74 0f                	je     10c0d1 <_ZN5tools4listIN6kernel6threadEE5eraseENS3_8iteratorE+0x4f>
	{
		it.itm->next->prev = it.itm->prev;
  10c0c2:	8b 45 10             	mov    0x10(%ebp),%eax
  10c0c5:	8b 40 08             	mov    0x8(%eax),%eax
  10c0c8:	8b 55 10             	mov    0x10(%ebp),%edx
  10c0cb:	8b 52 04             	mov    0x4(%edx),%edx
  10c0ce:	89 50 04             	mov    %edx,0x4(%eax)
	}
	
	if(it.itm->prev)
  10c0d1:	8b 45 10             	mov    0x10(%ebp),%eax
  10c0d4:	8b 40 04             	mov    0x4(%eax),%eax
  10c0d7:	85 c0                	test   %eax,%eax
  10c0d9:	74 0f                	je     10c0ea <_ZN5tools4listIN6kernel6threadEE5eraseENS3_8iteratorE+0x68>
	{
		it.itm->prev->next = it.itm->next;
  10c0db:	8b 45 10             	mov    0x10(%ebp),%eax
  10c0de:	8b 40 04             	mov    0x4(%eax),%eax
  10c0e1:	8b 55 10             	mov    0x10(%ebp),%edx
  10c0e4:	8b 52 08             	mov    0x8(%edx),%edx
  10c0e7:	89 50 08             	mov    %edx,0x8(%eax)
	}

	this->counter--;
  10c0ea:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c0ed:	8b 40 10             	mov    0x10(%eax),%eax
  10c0f0:	8d 50 ff             	lea    -0x1(%eax),%edx
  10c0f3:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c0f6:	89 50 10             	mov    %edx,0x10(%eax)

	static list<T>::iterator new_it;
  10c0f9:	b8 18 60 13 00       	mov    $0x136018,%eax
  10c0fe:	0f b6 00             	movzbl (%eax),%eax
  10c101:	84 c0                	test   %al,%al
  10c103:	75 14                	jne    10c119 <_ZN5tools4listIN6kernel6threadEE5eraseENS3_8iteratorE+0x97>
  10c105:	c7 04 24 84 60 13 00 	movl   $0x136084,(%esp)
  10c10c:	e8 41 00 00 00       	call   10c152 <_ZN5tools4listIN6kernel6threadEE8iteratorC1Ev>
  10c111:	b8 18 60 13 00       	mov    $0x136018,%eax
  10c116:	c6 00 01             	movb   $0x1,(%eax)
	new_it.lst = this;
  10c119:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c11c:	a3 88 60 13 00       	mov    %eax,0x136088
	new_it.itm = it.itm->next;
  10c121:	8b 45 10             	mov    0x10(%ebp),%eax
  10c124:	8b 40 08             	mov    0x8(%eax),%eax
  10c127:	a3 84 60 13 00       	mov    %eax,0x136084

	delete it.itm;
  10c12c:	8b 45 10             	mov    0x10(%ebp),%eax
  10c12f:	89 04 24             	mov    %eax,(%esp)
  10c132:	e8 9f 60 ff ff       	call   1021d6 <_ZdlPv>

	return new_it;
  10c137:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10c13a:	a1 84 60 13 00       	mov    0x136084,%eax
  10c13f:	8b 15 88 60 13 00    	mov    0x136088,%edx
  10c145:	89 01                	mov    %eax,(%ecx)
  10c147:	89 51 04             	mov    %edx,0x4(%ecx)
}
  10c14a:	8b 45 08             	mov    0x8(%ebp),%eax
  10c14d:	c9                   	leave  
  10c14e:	c2 04 00             	ret    $0x4

Disassembly of section .text._ZN5tools4listIN6kernel6threadEE8iteratorC2Ev:

0010c152 <_ZN5tools4listIN6kernel6threadEE8iteratorC1Ev>:
				inline T *operator -> () { return this->itm->value; }

				iterator(  ) { this->lst = nullptr; this->itm = nullptr; }
  10c152:	55                   	push   %ebp
  10c153:	89 e5                	mov    %esp,%ebp
  10c155:	8b 45 08             	mov    0x8(%ebp),%eax
  10c158:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  10c15f:	8b 45 08             	mov    0x8(%ebp),%eax
  10c162:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  10c168:	5d                   	pop    %ebp
  10c169:	c3                   	ret    

Disassembly of section .text._ZN6kernel6thread6new_idEv:

0010c16a <_ZN6kernel6thread6new_idEv>:
			/**
			  * @brief	Generates a new thread-id.
			  *
			  * @return			A new, unused thread-id
			  */
			static id_t		new_id(  ) { static id_t nid; return nid++; }
  10c16a:	55                   	push   %ebp
  10c16b:	89 e5                	mov    %esp,%ebp
  10c16d:	a1 a0 60 13 00       	mov    0x1360a0,%eax
  10c172:	8d 50 01             	lea    0x1(%eax),%edx
  10c175:	89 15 a0 60 13 00    	mov    %edx,0x1360a0
  10c17b:	5d                   	pop    %ebp
  10c17c:	c3                   	ret    

Disassembly of section .text._ZN5tools4listIN6kernel6threadEE9push_backEPS2_:

0010c17e <_ZN5tools4listIN6kernel6threadEE9push_backEPS2_>:
template<typename T> void list<T>::push_front( T *value )
{
	this->insert(this->begin(), value);
}

template<typename T> void list<T>::push_back( T *value )
  10c17e:	55                   	push   %ebp
  10c17f:	89 e5                	mov    %esp,%ebp
  10c181:	83 ec 38             	sub    $0x38,%esp
{
	this->insert(this->end(), value);
  10c184:	8d 45 f0             	lea    -0x10(%ebp),%eax
  10c187:	8b 55 08             	mov    0x8(%ebp),%edx
  10c18a:	89 54 24 04          	mov    %edx,0x4(%esp)
  10c18e:	89 04 24             	mov    %eax,(%esp)
  10c191:	e8 30 00 00 00       	call   10c1c6 <_ZN5tools4listIN6kernel6threadEE3endEv>
  10c196:	83 ec 04             	sub    $0x4,%esp
  10c199:	8d 4d e8             	lea    -0x18(%ebp),%ecx
  10c19c:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c19f:	89 44 24 10          	mov    %eax,0x10(%esp)
  10c1a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10c1a6:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10c1a9:	89 44 24 08          	mov    %eax,0x8(%esp)
  10c1ad:	89 54 24 0c          	mov    %edx,0xc(%esp)
  10c1b1:	8b 45 08             	mov    0x8(%ebp),%eax
  10c1b4:	89 44 24 04          	mov    %eax,0x4(%esp)
  10c1b8:	89 0c 24             	mov    %ecx,(%esp)
  10c1bb:	e8 48 01 00 00       	call   10c308 <_ZN5tools4listIN6kernel6threadEE6insertENS3_8iteratorEPS2_>
  10c1c0:	83 ec 04             	sub    $0x4,%esp
}
  10c1c3:	c9                   	leave  
  10c1c4:	c3                   	ret    

Disassembly of section .text._ZN5tools4listIN6kernel6threadEE3endEv:

0010c1c6 <_ZN5tools4listIN6kernel6threadEE3endEv>:
	it.itm = this->first;	

	return it;
}

template<typename T> typename list<T>::iterator list<T>::end(  )
  10c1c6:	55                   	push   %ebp
  10c1c7:	89 e5                	mov    %esp,%ebp
  10c1c9:	83 ec 18             	sub    $0x18,%esp
{
	static list<T>::iterator it;
  10c1cc:	b8 90 60 13 00       	mov    $0x136090,%eax
  10c1d1:	0f b6 00             	movzbl (%eax),%eax
  10c1d4:	84 c0                	test   %al,%al
  10c1d6:	75 14                	jne    10c1ec <_ZN5tools4listIN6kernel6threadEE3endEv+0x26>
  10c1d8:	c7 04 24 a4 60 13 00 	movl   $0x1360a4,(%esp)
  10c1df:	e8 6e ff ff ff       	call   10c152 <_ZN5tools4listIN6kernel6threadEE8iteratorC1Ev>
  10c1e4:	b8 90 60 13 00       	mov    $0x136090,%eax
  10c1e9:	c6 00 01             	movb   $0x1,(%eax)

	it.itm = this->post;
  10c1ec:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c1ef:	8b 40 0c             	mov    0xc(%eax),%eax
  10c1f2:	a3 a4 60 13 00       	mov    %eax,0x1360a4

	return it;
  10c1f7:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10c1fa:	a1 a4 60 13 00       	mov    0x1360a4,%eax
  10c1ff:	8b 15 a8 60 13 00    	mov    0x1360a8,%edx
  10c205:	89 01                	mov    %eax,(%ecx)
  10c207:	89 51 04             	mov    %edx,0x4(%ecx)
}
  10c20a:	8b 45 08             	mov    0x8(%ebp),%eax
  10c20d:	c9                   	leave  
  10c20e:	c2 04 00             	ret    $0x4

Disassembly of section .text._ZN5tools4listIN6kernel6threadEE8iteratorneERKS4_:

0010c212 <_ZN5tools4listIN6kernel6threadEE8iteratorneERKS4_>:
				inline iterator operator ++ (int) { iterator tmp = *this; if(this->itm) this->itm = this->itm->next; return tmp; }
				inline iterator operator -- (int) { iterator tmp = *this; if(this->itm) this->itm = this->itm->prev; return tmp; }

				inline bool operator == ( const iterator &it ) { if(this->lst != it.lst) return false; if(this->itm != it.itm) return false; return true; }

				inline bool operator != ( const iterator &it ) { return !(*this == it); }
  10c212:	55                   	push   %ebp
  10c213:	89 e5                	mov    %esp,%ebp
  10c215:	83 ec 18             	sub    $0x18,%esp
  10c218:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c21b:	89 44 24 04          	mov    %eax,0x4(%esp)
  10c21f:	8b 45 08             	mov    0x8(%ebp),%eax
  10c222:	89 04 24             	mov    %eax,(%esp)
  10c225:	e8 98 02 00 00       	call   10c4c2 <_ZN5tools4listIN6kernel6threadEE8iteratoreqERKS4_>
  10c22a:	84 c0                	test   %al,%al
  10c22c:	0f 94 c0             	sete   %al
  10c22f:	c9                   	leave  
  10c230:	c3                   	ret    

Disassembly of section .text._ZN5tools4listIN6kernel6threadEE8iteratorppEi:

0010c232 <_ZN5tools4listIN6kernel6threadEE8iteratorppEi>:
				list		*lst;

				inline iterator &operator ++ () { this->itm = itm->next; return *this; }
				inline iterator &operator -- () { this->itm = itm->prev; return *this; }

				inline iterator operator ++ (int) { iterator tmp = *this; if(this->itm) this->itm = this->itm->next; return tmp; }
  10c232:	55                   	push   %ebp
  10c233:	89 e5                	mov    %esp,%ebp
  10c235:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10c238:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c23b:	8b 50 04             	mov    0x4(%eax),%edx
  10c23e:	8b 00                	mov    (%eax),%eax
  10c240:	89 01                	mov    %eax,(%ecx)
  10c242:	89 51 04             	mov    %edx,0x4(%ecx)
  10c245:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c248:	8b 00                	mov    (%eax),%eax
  10c24a:	85 c0                	test   %eax,%eax
  10c24c:	74 0d                	je     10c25b <_ZN5tools4listIN6kernel6threadEE8iteratorppEi+0x29>
  10c24e:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c251:	8b 00                	mov    (%eax),%eax
  10c253:	8b 50 08             	mov    0x8(%eax),%edx
  10c256:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c259:	89 10                	mov    %edx,(%eax)
  10c25b:	90                   	nop
  10c25c:	8b 45 08             	mov    0x8(%ebp),%eax
  10c25f:	5d                   	pop    %ebp
  10c260:	c2 04 00             	ret    $0x4

Disassembly of section .text._ZN5tools4listIN6kernel6threadEEC2Ev:

0010c264 <_ZN5tools4listIN6kernel6threadEEC1Ev>:
#include "list.hpp"

using tools::list;

template<typename T> list<T>::list(  ) : first(nullptr), last(nullptr), counter(0)
  10c264:	55                   	push   %ebp
  10c265:	89 e5                	mov    %esp,%ebp
  10c267:	83 ec 18             	sub    $0x18,%esp
  10c26a:	8b 45 08             	mov    0x8(%ebp),%eax
  10c26d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  10c273:	8b 45 08             	mov    0x8(%ebp),%eax
  10c276:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  10c27d:	8b 45 08             	mov    0x8(%ebp),%eax
  10c280:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
{
	this->before = new item;
  10c287:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
  10c28e:	e8 0d 5f ff ff       	call   1021a0 <_Znwj>
  10c293:	8b 55 08             	mov    0x8(%ebp),%edx
  10c296:	89 42 08             	mov    %eax,0x8(%edx)

	this->before->value = nullptr; 
  10c299:	8b 45 08             	mov    0x8(%ebp),%eax
  10c29c:	8b 40 08             	mov    0x8(%eax),%eax
  10c29f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	this->before->next  = this->first; 
  10c2a5:	8b 45 08             	mov    0x8(%ebp),%eax
  10c2a8:	8b 40 08             	mov    0x8(%eax),%eax
  10c2ab:	8b 55 08             	mov    0x8(%ebp),%edx
  10c2ae:	8b 12                	mov    (%edx),%edx
  10c2b0:	89 50 08             	mov    %edx,0x8(%eax)
	this->before->prev  = nullptr;
  10c2b3:	8b 45 08             	mov    0x8(%ebp),%eax
  10c2b6:	8b 40 08             	mov    0x8(%eax),%eax
  10c2b9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


	this->post = new item; 
  10c2c0:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
  10c2c7:	e8 d4 5e ff ff       	call   1021a0 <_Znwj>
  10c2cc:	8b 55 08             	mov    0x8(%ebp),%edx
  10c2cf:	89 42 0c             	mov    %eax,0xc(%edx)

	this->post->value = nullptr; 
  10c2d2:	8b 45 08             	mov    0x8(%ebp),%eax
  10c2d5:	8b 40 0c             	mov    0xc(%eax),%eax
  10c2d8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	this->post->next  = nullptr; 
  10c2de:	8b 45 08             	mov    0x8(%ebp),%eax
  10c2e1:	8b 40 0c             	mov    0xc(%eax),%eax
  10c2e4:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	this->post->prev  = this->last;
  10c2eb:	8b 45 08             	mov    0x8(%ebp),%eax
  10c2ee:	8b 40 0c             	mov    0xc(%eax),%eax
  10c2f1:	8b 55 08             	mov    0x8(%ebp),%edx
  10c2f4:	8b 52 04             	mov    0x4(%edx),%edx
  10c2f7:	89 50 04             	mov    %edx,0x4(%eax)
}
  10c2fa:	c9                   	leave  
  10c2fb:	c3                   	ret    

Disassembly of section .text._ZN5tools4listIN6kernel6threadEE8iteratorptEv:

0010c2fc <_ZN5tools4listIN6kernel6threadEE8iteratorptEv>:
				inline bool operator == ( const iterator &it ) { if(this->lst != it.lst) return false; if(this->itm != it.itm) return false; return true; }

				inline bool operator != ( const iterator &it ) { return !(*this == it); }

				inline T *operator * () { return this->itm->value; }
				inline T *operator -> () { return this->itm->value; }
  10c2fc:	55                   	push   %ebp
  10c2fd:	89 e5                	mov    %esp,%ebp
  10c2ff:	8b 45 08             	mov    0x8(%ebp),%eax
  10c302:	8b 00                	mov    (%eax),%eax
  10c304:	8b 00                	mov    (%eax),%eax
  10c306:	5d                   	pop    %ebp
  10c307:	c3                   	ret    

Disassembly of section .text._ZN5tools4listIN6kernel6threadEE6insertENS3_8iteratorEPS2_:

0010c308 <_ZN5tools4listIN6kernel6threadEE6insertENS3_8iteratorEPS2_>:
	it.itm = this->post;

	return it;
}

template<typename T> typename list<T>::iterator list<T>::insert( list<T>::iterator it, T *value )
  10c308:	55                   	push   %ebp
  10c309:	89 e5                	mov    %esp,%ebp
  10c30b:	53                   	push   %ebx
  10c30c:	83 ec 34             	sub    $0x34,%esp
{
	list<T>::item *new_itm = new item;
  10c30f:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
  10c316:	e8 85 5e ff ff       	call   1021a0 <_Znwj>
  10c31b:	89 45 f4             	mov    %eax,-0xc(%ebp)

	new_itm->value = value;
  10c31e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10c321:	8b 55 18             	mov    0x18(%ebp),%edx
  10c324:	89 10                	mov    %edx,(%eax)

	new_itm->next = it.itm;
  10c326:	8b 55 10             	mov    0x10(%ebp),%edx
  10c329:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10c32c:	89 50 08             	mov    %edx,0x8(%eax)

	if(it.itm)
  10c32f:	8b 45 10             	mov    0x10(%ebp),%eax
  10c332:	85 c0                	test   %eax,%eax
  10c334:	74 0c                	je     10c342 <_ZN5tools4listIN6kernel6threadEE6insertENS3_8iteratorEPS2_+0x3a>
	{
		new_itm->prev = it.itm->prev;
  10c336:	8b 45 10             	mov    0x10(%ebp),%eax
  10c339:	8b 50 04             	mov    0x4(%eax),%edx
  10c33c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10c33f:	89 50 04             	mov    %edx,0x4(%eax)
	}

	if(new_itm->next)
  10c342:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10c345:	8b 40 08             	mov    0x8(%eax),%eax
  10c348:	85 c0                	test   %eax,%eax
  10c34a:	74 0c                	je     10c358 <_ZN5tools4listIN6kernel6threadEE6insertENS3_8iteratorEPS2_+0x50>
	{
		new_itm->next->prev = new_itm;
  10c34c:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10c34f:	8b 40 08             	mov    0x8(%eax),%eax
  10c352:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10c355:	89 50 04             	mov    %edx,0x4(%eax)
	}

	if(new_itm->prev)
  10c358:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10c35b:	8b 40 04             	mov    0x4(%eax),%eax
  10c35e:	85 c0                	test   %eax,%eax
  10c360:	74 0c                	je     10c36e <_ZN5tools4listIN6kernel6threadEE6insertENS3_8iteratorEPS2_+0x66>
	{
		new_itm->prev->next = new_itm;
  10c362:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10c365:	8b 40 04             	mov    0x4(%eax),%eax
  10c368:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10c36b:	89 50 08             	mov    %edx,0x8(%eax)
	}

	if(this->first == nullptr || it.itm == this->first || it == this->begin())
  10c36e:	bb 00 00 00 00       	mov    $0x0,%ebx
  10c373:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c376:	8b 00                	mov    (%eax),%eax
  10c378:	85 c0                	test   %eax,%eax
  10c37a:	74 3c                	je     10c3b8 <_ZN5tools4listIN6kernel6threadEE6insertENS3_8iteratorEPS2_+0xb0>
  10c37c:	8b 55 10             	mov    0x10(%ebp),%edx
  10c37f:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c382:	8b 00                	mov    (%eax),%eax
  10c384:	39 c2                	cmp    %eax,%edx
  10c386:	74 30                	je     10c3b8 <_ZN5tools4listIN6kernel6threadEE6insertENS3_8iteratorEPS2_+0xb0>
  10c388:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  10c38b:	8b 55 0c             	mov    0xc(%ebp),%edx
  10c38e:	89 54 24 04          	mov    %edx,0x4(%esp)
  10c392:	89 04 24             	mov    %eax,(%esp)
  10c395:	e8 92 fc ff ff       	call   10c02c <_ZN5tools4listIN6kernel6threadEE5beginEv>
  10c39a:	83 ec 04             	sub    $0x4,%esp
  10c39d:	bb 01 00 00 00       	mov    $0x1,%ebx
  10c3a2:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  10c3a5:	89 44 24 04          	mov    %eax,0x4(%esp)
  10c3a9:	8d 45 10             	lea    0x10(%ebp),%eax
  10c3ac:	89 04 24             	mov    %eax,(%esp)
  10c3af:	e8 0e 01 00 00       	call   10c4c2 <_ZN5tools4listIN6kernel6threadEE8iteratoreqERKS4_>
  10c3b4:	84 c0                	test   %al,%al
  10c3b6:	74 07                	je     10c3bf <_ZN5tools4listIN6kernel6threadEE6insertENS3_8iteratorEPS2_+0xb7>
  10c3b8:	b8 01 00 00 00       	mov    $0x1,%eax
  10c3bd:	eb 05                	jmp    10c3c4 <_ZN5tools4listIN6kernel6threadEE6insertENS3_8iteratorEPS2_+0xbc>
  10c3bf:	b8 00 00 00 00       	mov    $0x0,%eax
  10c3c4:	84 db                	test   %bl,%bl
  10c3c6:	84 c0                	test   %al,%al
  10c3c8:	74 24                	je     10c3ee <_ZN5tools4listIN6kernel6threadEE6insertENS3_8iteratorEPS2_+0xe6>
	{
		this->first = new_itm;
  10c3ca:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c3cd:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10c3d0:	89 10                	mov    %edx,(%eax)

		this->first->prev = this->before;
  10c3d2:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c3d5:	8b 00                	mov    (%eax),%eax
  10c3d7:	8b 55 0c             	mov    0xc(%ebp),%edx
  10c3da:	8b 52 08             	mov    0x8(%edx),%edx
  10c3dd:	89 50 04             	mov    %edx,0x4(%eax)
		this->before->next = this->first;
  10c3e0:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c3e3:	8b 40 08             	mov    0x8(%eax),%eax
  10c3e6:	8b 55 0c             	mov    0xc(%ebp),%edx
  10c3e9:	8b 12                	mov    (%edx),%edx
  10c3eb:	89 50 08             	mov    %edx,0x8(%eax)
	}

	if(this->last == nullptr || it == this->end())
  10c3ee:	bb 00 00 00 00       	mov    $0x0,%ebx
  10c3f3:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c3f6:	8b 40 04             	mov    0x4(%eax),%eax
  10c3f9:	85 c0                	test   %eax,%eax
  10c3fb:	74 30                	je     10c42d <_ZN5tools4listIN6kernel6threadEE6insertENS3_8iteratorEPS2_+0x125>
  10c3fd:	8d 45 ec             	lea    -0x14(%ebp),%eax
  10c400:	8b 55 0c             	mov    0xc(%ebp),%edx
  10c403:	89 54 24 04          	mov    %edx,0x4(%esp)
  10c407:	89 04 24             	mov    %eax,(%esp)
  10c40a:	e8 b7 fd ff ff       	call   10c1c6 <_ZN5tools4listIN6kernel6threadEE3endEv>
  10c40f:	83 ec 04             	sub    $0x4,%esp
  10c412:	bb 01 00 00 00       	mov    $0x1,%ebx
  10c417:	8d 45 ec             	lea    -0x14(%ebp),%eax
  10c41a:	89 44 24 04          	mov    %eax,0x4(%esp)
  10c41e:	8d 45 10             	lea    0x10(%ebp),%eax
  10c421:	89 04 24             	mov    %eax,(%esp)
  10c424:	e8 99 00 00 00       	call   10c4c2 <_ZN5tools4listIN6kernel6threadEE8iteratoreqERKS4_>
  10c429:	84 c0                	test   %al,%al
  10c42b:	74 07                	je     10c434 <_ZN5tools4listIN6kernel6threadEE6insertENS3_8iteratorEPS2_+0x12c>
  10c42d:	b8 01 00 00 00       	mov    $0x1,%eax
  10c432:	eb 05                	jmp    10c439 <_ZN5tools4listIN6kernel6threadEE6insertENS3_8iteratorEPS2_+0x131>
  10c434:	b8 00 00 00 00       	mov    $0x0,%eax
  10c439:	84 db                	test   %bl,%bl
  10c43b:	84 c0                	test   %al,%al
  10c43d:	74 27                	je     10c466 <_ZN5tools4listIN6kernel6threadEE6insertENS3_8iteratorEPS2_+0x15e>
	{
		this->last = new_itm;
  10c43f:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c442:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10c445:	89 50 04             	mov    %edx,0x4(%eax)

		this->last->next = this->post;
  10c448:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c44b:	8b 40 04             	mov    0x4(%eax),%eax
  10c44e:	8b 55 0c             	mov    0xc(%ebp),%edx
  10c451:	8b 52 0c             	mov    0xc(%edx),%edx
  10c454:	89 50 08             	mov    %edx,0x8(%eax)
		this->post->prev = this->last;
  10c457:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c45a:	8b 40 0c             	mov    0xc(%eax),%eax
  10c45d:	8b 55 0c             	mov    0xc(%ebp),%edx
  10c460:	8b 52 04             	mov    0x4(%edx),%edx
  10c463:	89 50 04             	mov    %edx,0x4(%eax)
	}

	this->counter++;
  10c466:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c469:	8b 40 10             	mov    0x10(%eax),%eax
  10c46c:	8d 50 01             	lea    0x1(%eax),%edx
  10c46f:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c472:	89 50 10             	mov    %edx,0x10(%eax)

	static list<T>::iterator new_it;
  10c475:	b8 98 60 13 00       	mov    $0x136098,%eax
  10c47a:	0f b6 00             	movzbl (%eax),%eax
  10c47d:	84 c0                	test   %al,%al
  10c47f:	75 14                	jne    10c495 <_ZN5tools4listIN6kernel6threadEE6insertENS3_8iteratorEPS2_+0x18d>
  10c481:	c7 04 24 ac 60 13 00 	movl   $0x1360ac,(%esp)
  10c488:	e8 c5 fc ff ff       	call   10c152 <_ZN5tools4listIN6kernel6threadEE8iteratorC1Ev>
  10c48d:	b8 98 60 13 00       	mov    $0x136098,%eax
  10c492:	c6 00 01             	movb   $0x1,(%eax)
	new_it.lst = this;
  10c495:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c498:	a3 b0 60 13 00       	mov    %eax,0x1360b0
	new_it.itm = new_itm;
  10c49d:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10c4a0:	a3 ac 60 13 00       	mov    %eax,0x1360ac

	return new_it;
  10c4a5:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10c4a8:	a1 ac 60 13 00       	mov    0x1360ac,%eax
  10c4ad:	8b 15 b0 60 13 00    	mov    0x1360b0,%edx
  10c4b3:	89 01                	mov    %eax,(%ecx)
  10c4b5:	89 51 04             	mov    %edx,0x4(%ecx)
}
  10c4b8:	8b 45 08             	mov    0x8(%ebp),%eax
  10c4bb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10c4be:	c9                   	leave  
  10c4bf:	c2 04 00             	ret    $0x4

Disassembly of section .text._ZN5tools4listIN6kernel6threadEE8iteratoreqERKS4_:

0010c4c2 <_ZN5tools4listIN6kernel6threadEE8iteratoreqERKS4_>:
				inline iterator &operator -- () { this->itm = itm->prev; return *this; }

				inline iterator operator ++ (int) { iterator tmp = *this; if(this->itm) this->itm = this->itm->next; return tmp; }
				inline iterator operator -- (int) { iterator tmp = *this; if(this->itm) this->itm = this->itm->prev; return tmp; }

				inline bool operator == ( const iterator &it ) { if(this->lst != it.lst) return false; if(this->itm != it.itm) return false; return true; }
  10c4c2:	55                   	push   %ebp
  10c4c3:	89 e5                	mov    %esp,%ebp
  10c4c5:	8b 45 08             	mov    0x8(%ebp),%eax
  10c4c8:	8b 50 04             	mov    0x4(%eax),%edx
  10c4cb:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c4ce:	8b 40 04             	mov    0x4(%eax),%eax
  10c4d1:	39 c2                	cmp    %eax,%edx
  10c4d3:	74 07                	je     10c4dc <_ZN5tools4listIN6kernel6threadEE8iteratoreqERKS4_+0x1a>
  10c4d5:	b8 00 00 00 00       	mov    $0x0,%eax
  10c4da:	eb 1a                	jmp    10c4f6 <_ZN5tools4listIN6kernel6threadEE8iteratoreqERKS4_+0x34>
  10c4dc:	8b 45 08             	mov    0x8(%ebp),%eax
  10c4df:	8b 10                	mov    (%eax),%edx
  10c4e1:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c4e4:	8b 00                	mov    (%eax),%eax
  10c4e6:	39 c2                	cmp    %eax,%edx
  10c4e8:	74 07                	je     10c4f1 <_ZN5tools4listIN6kernel6threadEE8iteratoreqERKS4_+0x2f>
  10c4ea:	b8 00 00 00 00       	mov    $0x0,%eax
  10c4ef:	eb 05                	jmp    10c4f6 <_ZN5tools4listIN6kernel6threadEE8iteratoreqERKS4_+0x34>
  10c4f1:	b8 01 00 00 00       	mov    $0x1,%eax
  10c4f6:	5d                   	pop    %ebp
  10c4f7:	c3                   	ret    

Disassembly of section .text._ZN3hal3x863cpu9cpu_state6param0Ev:

0010c4f8 <_ZN3hal3x863cpu9cpu_state6param0Ev>:
				/**
				  * @brief	The ss-register of x86-cpu
				  */
				uint32_t   ss;	

				inline uint32_t &param0(  ) { return this->eax; }
  10c4f8:	55                   	push   %ebp
  10c4f9:	89 e5                	mov    %esp,%ebp
  10c4fb:	8b 45 08             	mov    0x8(%ebp),%eax
  10c4fe:	5d                   	pop    %ebp
  10c4ff:	c3                   	ret    

Disassembly of section .text._ZN3hal3x863cpu9cpu_state6param1Ev:

0010c500 <_ZN3hal3x863cpu9cpu_state6param1Ev>:
				inline uint32_t &param1(  ) { return this->ebx; }			
  10c500:	55                   	push   %ebp
  10c501:	89 e5                	mov    %esp,%ebp
  10c503:	8b 45 08             	mov    0x8(%ebp),%eax
  10c506:	83 c0 04             	add    $0x4,%eax
  10c509:	5d                   	pop    %ebp
  10c50a:	c3                   	ret    

Disassembly of section .text._ZN3hal3x863cpu9cpu_state6param2Ev:

0010c50c <_ZN3hal3x863cpu9cpu_state6param2Ev>:
				inline uint32_t &param2(  ) { return this->ecx; }			
  10c50c:	55                   	push   %ebp
  10c50d:	89 e5                	mov    %esp,%ebp
  10c50f:	8b 45 08             	mov    0x8(%ebp),%eax
  10c512:	83 c0 08             	add    $0x8,%eax
  10c515:	5d                   	pop    %ebp
  10c516:	c3                   	ret    

Disassembly of section .text._ZN3hal3x863cpu9cpu_state14syscall_numberEv:

0010c518 <_ZN3hal3x863cpu9cpu_state14syscall_numberEv>:
				inline uint32_t &param3(  ) { return this->edx; }			
				inline uint32_t &param4(  ) { return this->esi; }
				inline uint32_t &param5(  ) { return this->edi; }
				inline uint32_t &param6(  ) { return this->ebp; }	
				inline uint32_t &syscall_number(  ) { return this->eax; }
  10c518:	55                   	push   %ebp
  10c519:	89 e5                	mov    %esp,%ebp
  10c51b:	8b 45 08             	mov    0x8(%ebp),%eax
  10c51e:	5d                   	pop    %ebp
  10c51f:	c3                   	ret    

Disassembly of section .text._ZN3hal3x863cpu4haltEv:

0010c520 <_ZN3hal3x863cpu4haltEv>:
			/**
			  * @brief	Stops the cpu (the whole system)
			  *
			  *		Disables interrups and stops the cpu.
			  */
			inline void halt(  ) { while(true) { asm("cli; hlt"); } }
  10c520:	55                   	push   %ebp
  10c521:	89 e5                	mov    %esp,%ebp
  10c523:	fa                   	cli    
  10c524:	f4                   	hlt    
  10c525:	eb fc                	jmp    10c523 <_ZN3hal3x863cpu4haltEv+0x3>

Disassembly of section .text._ZN3hal3x863pmm8instanceEv:

0010c527 <_ZN3hal3x863pmm8instanceEv>:
	          *		This class contains Methods to initialiset the Physical Memory Manager and Mathods to allocate and free memory.
	          *		This class is implemented as a singleton, so only one instance of this class can be used.
	          */
	        class pmm
	        {
		        SINGLETON(pmm)
  10c527:	55                   	push   %ebp
  10c528:	89 e5                	mov    %esp,%ebp
  10c52a:	83 ec 18             	sub    $0x18,%esp
  10c52d:	b8 b8 60 13 00       	mov    $0x1360b8,%eax
  10c532:	0f b6 00             	movzbl (%eax),%eax
  10c535:	84 c0                	test   %al,%al
  10c537:	75 14                	jne    10c54d <_ZN3hal3x863pmm8instanceEv+0x26>
  10c539:	c7 04 24 20 61 13 00 	movl   $0x136120,(%esp)
  10c540:	e8 6f c3 ff ff       	call   1088b4 <_ZN3hal3x863pmmC1Ev>
  10c545:	b8 b8 60 13 00       	mov    $0x1360b8,%eax
  10c54a:	c6 00 01             	movb   $0x1,(%eax)
  10c54d:	b8 20 61 13 00       	mov    $0x136120,%eax
  10c552:	c9                   	leave  
  10c553:	c3                   	ret    

Disassembly of section .text._ZN6kernel10processmgrD2Ev:

0010c554 <_ZN6kernel10processmgrD1Ev>:
	};

	/**
	  * @brief	The process manager
	  */
	class processmgr
  10c554:	55                   	push   %ebp
  10c555:	89 e5                	mov    %esp,%ebp
  10c557:	83 ec 18             	sub    $0x18,%esp
  10c55a:	8b 45 08             	mov    0x8(%ebp),%eax
  10c55d:	89 04 24             	mov    %eax,(%esp)
  10c560:	e8 87 00 00 00       	call   10c5ec <_ZN5tools4listIN6kernel7processEED1Ev>
  10c565:	c9                   	leave  
  10c566:	c3                   	ret    

Disassembly of section .text._ZN6kernel10processmgr8instanceEv:

0010c567 <_ZN6kernel10processmgr8instanceEv>:
	{
		SINGLETON(processmgr)
  10c567:	55                   	push   %ebp
  10c568:	89 e5                	mov    %esp,%ebp
  10c56a:	83 ec 18             	sub    $0x18,%esp
  10c56d:	b8 c0 60 13 00       	mov    $0x1360c0,%eax
  10c572:	0f b6 00             	movzbl (%eax),%eax
  10c575:	84 c0                	test   %al,%al
  10c577:	75 20                	jne    10c599 <_ZN6kernel10processmgr8instanceEv+0x32>
  10c579:	c7 04 24 e0 60 13 00 	movl   $0x1360e0,(%esp)
  10c580:	e8 5f 51 ff ff       	call   1016e4 <_ZN6kernel10processmgrC1Ev>
  10c585:	b8 c0 60 13 00       	mov    $0x1360c0,%eax
  10c58a:	c6 00 01             	movb   $0x1,(%eax)
  10c58d:	c7 04 24 29 0b 10 00 	movl   $0x100b29,(%esp)
  10c594:	e8 ea 73 ff ff       	call   103983 <atexit>
  10c599:	b8 e0 60 13 00       	mov    $0x1360e0,%eax
  10c59e:	c9                   	leave  
  10c59f:	c3                   	ret    

Disassembly of section .text._ZN6kernel9threadmgrD2Ev:

0010c5a0 <_ZN6kernel9threadmgrD1Ev>:
	};

	/**
	  * @brief	The thread manager
	  */
	class threadmgr
  10c5a0:	55                   	push   %ebp
  10c5a1:	89 e5                	mov    %esp,%ebp
  10c5a3:	83 ec 18             	sub    $0x18,%esp
  10c5a6:	8b 45 08             	mov    0x8(%ebp),%eax
  10c5a9:	89 04 24             	mov    %eax,(%esp)
  10c5ac:	e8 c5 f9 ff ff       	call   10bf76 <_ZN5tools4listIN6kernel6threadEED1Ev>
  10c5b1:	c9                   	leave  
  10c5b2:	c3                   	ret    

Disassembly of section .text._ZN6kernel9threadmgr8instanceEv:

0010c5b3 <_ZN6kernel9threadmgr8instanceEv>:
	{
		SINGLETON(threadmgr)
  10c5b3:	55                   	push   %ebp
  10c5b4:	89 e5                	mov    %esp,%ebp
  10c5b6:	83 ec 18             	sub    $0x18,%esp
  10c5b9:	b8 c8 60 13 00       	mov    $0x1360c8,%eax
  10c5be:	0f b6 00             	movzbl (%eax),%eax
  10c5c1:	84 c0                	test   %al,%al
  10c5c3:	75 20                	jne    10c5e5 <_ZN6kernel9threadmgr8instanceEv+0x32>
  10c5c5:	c7 04 24 04 61 13 00 	movl   $0x136104,(%esp)
  10c5cc:	e8 0f 3e ff ff       	call   1003e0 <_ZN6kernel9threadmgrC1Ev>
  10c5d1:	b8 c8 60 13 00       	mov    $0x1360c8,%eax
  10c5d6:	c6 00 01             	movb   $0x1,(%eax)
  10c5d9:	c7 04 24 3d 0b 10 00 	movl   $0x100b3d,(%esp)
  10c5e0:	e8 9e 73 ff ff       	call   103983 <atexit>
  10c5e5:	b8 04 61 13 00       	mov    $0x136104,%eax
  10c5ea:	c9                   	leave  
  10c5eb:	c3                   	ret    

Disassembly of section .text._ZN5tools4listIN6kernel7processEED2Ev:

0010c5ec <_ZN5tools4listIN6kernel7processEED1Ev>:
	this->post->value = nullptr; 
	this->post->next  = nullptr; 
	this->post->prev  = this->last;
}

template<typename T> list<T>::~list(  )
  10c5ec:	55                   	push   %ebp
  10c5ed:	89 e5                	mov    %esp,%ebp
  10c5ef:	83 ec 18             	sub    $0x18,%esp
{
	while(!this->empty())
  10c5f2:	eb 0b                	jmp    10c5ff <_ZN5tools4listIN6kernel7processEED1Ev+0x13>
	{
		this->pop_front();
  10c5f4:	8b 45 08             	mov    0x8(%ebp),%eax
  10c5f7:	89 04 24             	mov    %eax,(%esp)
  10c5fa:	e8 51 00 00 00       	call   10c650 <_ZN5tools4listIN6kernel7processEE9pop_frontEv>
	this->post->prev  = this->last;
}

template<typename T> list<T>::~list(  )
{
	while(!this->empty())
  10c5ff:	8b 45 08             	mov    0x8(%ebp),%eax
  10c602:	89 04 24             	mov    %eax,(%esp)
  10c605:	e8 36 00 00 00       	call   10c640 <_ZN5tools4listIN6kernel7processEE5emptyEv>
  10c60a:	84 c0                	test   %al,%al
  10c60c:	0f 94 c0             	sete   %al
  10c60f:	84 c0                	test   %al,%al
  10c611:	75 e1                	jne    10c5f4 <_ZN5tools4listIN6kernel7processEED1Ev+0x8>
	{
		this->pop_front();
	}

	delete this->post;
  10c613:	8b 45 08             	mov    0x8(%ebp),%eax
  10c616:	8b 40 0c             	mov    0xc(%eax),%eax
  10c619:	89 04 24             	mov    %eax,(%esp)
  10c61c:	e8 b5 5b ff ff       	call   1021d6 <_ZdlPv>

	this->first = nullptr;
  10c621:	8b 45 08             	mov    0x8(%ebp),%eax
  10c624:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	this->last  = nullptr;
  10c62a:	8b 45 08             	mov    0x8(%ebp),%eax
  10c62d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	this->post  = nullptr;
  10c634:	8b 45 08             	mov    0x8(%ebp),%eax
  10c637:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
}
  10c63e:	c9                   	leave  
  10c63f:	c3                   	ret    

Disassembly of section .text._ZN5tools4listIN6kernel7processEE5emptyEv:

0010c640 <_ZN5tools4listIN6kernel7processEE5emptyEv>:
			T *pop_front(  );
			T *pop_back(  );

			inline size_t size(  ) { return this->counter; }

			inline bool empty(  ){ return (this->counter == 0); }
  10c640:	55                   	push   %ebp
  10c641:	89 e5                	mov    %esp,%ebp
  10c643:	8b 45 08             	mov    0x8(%ebp),%eax
  10c646:	8b 40 10             	mov    0x10(%eax),%eax
  10c649:	85 c0                	test   %eax,%eax
  10c64b:	0f 94 c0             	sete   %al
  10c64e:	5d                   	pop    %ebp
  10c64f:	c3                   	ret    

Disassembly of section .text._ZN5tools4listIN6kernel7processEE9pop_frontEv:

0010c650 <_ZN5tools4listIN6kernel7processEE9pop_frontEv>:
template<typename T> void list<T>::push_back( T *value )
{
	this->insert(this->end(), value);
}

template<typename T> T *list<T>::pop_front(  )
  10c650:	55                   	push   %ebp
  10c651:	89 e5                	mov    %esp,%ebp
  10c653:	83 ec 38             	sub    $0x38,%esp
{
	list<T>::iterator it = this->begin();
  10c656:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  10c659:	8b 55 08             	mov    0x8(%ebp),%edx
  10c65c:	89 54 24 04          	mov    %edx,0x4(%esp)
  10c660:	89 04 24             	mov    %eax,(%esp)
  10c663:	e8 3a 00 00 00       	call   10c6a2 <_ZN5tools4listIN6kernel7processEE5beginEv>
  10c668:	83 ec 04             	sub    $0x4,%esp

	T *value = *it;
  10c66b:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  10c66e:	89 04 24             	mov    %eax,(%esp)
  10c671:	e8 76 00 00 00       	call   10c6ec <_ZN5tools4listIN6kernel7processEE8iteratordeEv>
  10c676:	89 45 f4             	mov    %eax,-0xc(%ebp)

	this->erase(it);
  10c679:	8d 4d ec             	lea    -0x14(%ebp),%ecx
  10c67c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
  10c67f:	8b 55 e8             	mov    -0x18(%ebp),%edx
  10c682:	89 44 24 08          	mov    %eax,0x8(%esp)
  10c686:	89 54 24 0c          	mov    %edx,0xc(%esp)
  10c68a:	8b 45 08             	mov    0x8(%ebp),%eax
  10c68d:	89 44 24 04          	mov    %eax,0x4(%esp)
  10c691:	89 0c 24             	mov    %ecx,(%esp)
  10c694:	e8 5f 00 00 00       	call   10c6f8 <_ZN5tools4listIN6kernel7processEE5eraseENS3_8iteratorE>
  10c699:	83 ec 04             	sub    $0x4,%esp

	return value;
  10c69c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
  10c69f:	c9                   	leave  
  10c6a0:	c3                   	ret    

Disassembly of section .text._ZN5tools4listIN6kernel7processEE5beginEv:

0010c6a2 <_ZN5tools4listIN6kernel7processEE5beginEv>:
	this->first = nullptr;
	this->last  = nullptr;
	this->post  = nullptr;
}

template<typename T> typename list<T>::iterator list<T>::begin(  )
  10c6a2:	55                   	push   %ebp
  10c6a3:	89 e5                	mov    %esp,%ebp
  10c6a5:	83 ec 18             	sub    $0x18,%esp
{
	static list<T>::iterator it;
  10c6a8:	b8 d0 60 13 00       	mov    $0x1360d0,%eax
  10c6ad:	0f b6 00             	movzbl (%eax),%eax
  10c6b0:	84 c0                	test   %al,%al
  10c6b2:	75 14                	jne    10c6c8 <_ZN5tools4listIN6kernel7processEE5beginEv+0x26>
  10c6b4:	c7 04 24 f4 60 13 00 	movl   $0x1360f4,(%esp)
  10c6bb:	e8 08 01 00 00       	call   10c7c8 <_ZN5tools4listIN6kernel7processEE8iteratorC1Ev>
  10c6c0:	b8 d0 60 13 00       	mov    $0x1360d0,%eax
  10c6c5:	c6 00 01             	movb   $0x1,(%eax)

	it.itm = this->first;	
  10c6c8:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c6cb:	8b 00                	mov    (%eax),%eax
  10c6cd:	a3 f4 60 13 00       	mov    %eax,0x1360f4

	return it;
  10c6d2:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10c6d5:	a1 f4 60 13 00       	mov    0x1360f4,%eax
  10c6da:	8b 15 f8 60 13 00    	mov    0x1360f8,%edx
  10c6e0:	89 01                	mov    %eax,(%ecx)
  10c6e2:	89 51 04             	mov    %edx,0x4(%ecx)
}
  10c6e5:	8b 45 08             	mov    0x8(%ebp),%eax
  10c6e8:	c9                   	leave  
  10c6e9:	c2 04 00             	ret    $0x4

Disassembly of section .text._ZN5tools4listIN6kernel7processEE8iteratordeEv:

0010c6ec <_ZN5tools4listIN6kernel7processEE8iteratordeEv>:

				inline bool operator == ( const iterator &it ) { if(this->lst != it.lst) return false; if(this->itm != it.itm) return false; return true; }

				inline bool operator != ( const iterator &it ) { return !(*this == it); }

				inline T *operator * () { return this->itm->value; }
  10c6ec:	55                   	push   %ebp
  10c6ed:	89 e5                	mov    %esp,%ebp
  10c6ef:	8b 45 08             	mov    0x8(%ebp),%eax
  10c6f2:	8b 00                	mov    (%eax),%eax
  10c6f4:	8b 00                	mov    (%eax),%eax
  10c6f6:	5d                   	pop    %ebp
  10c6f7:	c3                   	ret    

Disassembly of section .text._ZN5tools4listIN6kernel7processEE5eraseENS3_8iteratorE:

0010c6f8 <_ZN5tools4listIN6kernel7processEE5eraseENS3_8iteratorE>:
	new_it.itm = new_itm;

	return new_it;
}

template<typename T> typename list<T>::iterator list<T>::erase( list<T>::iterator it )
  10c6f8:	55                   	push   %ebp
  10c6f9:	89 e5                	mov    %esp,%ebp
  10c6fb:	83 ec 18             	sub    $0x18,%esp
{
	if(it.itm == this->first)
  10c6fe:	8b 55 10             	mov    0x10(%ebp),%edx
  10c701:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c704:	8b 00                	mov    (%eax),%eax
  10c706:	39 c2                	cmp    %eax,%edx
  10c708:	75 0b                	jne    10c715 <_ZN5tools4listIN6kernel7processEE5eraseENS3_8iteratorE+0x1d>
	{
		this->first = it.itm->next;
  10c70a:	8b 45 10             	mov    0x10(%ebp),%eax
  10c70d:	8b 50 08             	mov    0x8(%eax),%edx
  10c710:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c713:	89 10                	mov    %edx,(%eax)
	}

	if(it.itm == this->last)
  10c715:	8b 55 10             	mov    0x10(%ebp),%edx
  10c718:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c71b:	8b 40 04             	mov    0x4(%eax),%eax
  10c71e:	39 c2                	cmp    %eax,%edx
  10c720:	75 0c                	jne    10c72e <_ZN5tools4listIN6kernel7processEE5eraseENS3_8iteratorE+0x36>
	{
		this->last = it.itm->prev;
  10c722:	8b 45 10             	mov    0x10(%ebp),%eax
  10c725:	8b 50 04             	mov    0x4(%eax),%edx
  10c728:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c72b:	89 50 04             	mov    %edx,0x4(%eax)
	}

	if(it.itm->next)
  10c72e:	8b 45 10             	mov    0x10(%ebp),%eax
  10c731:	8b 40 08             	mov    0x8(%eax),%eax
  10c734:	85 c0                	test   %eax,%eax
  10c736:	74 0f                	je     10c747 <_ZN5tools4listIN6kernel7processEE5eraseENS3_8iteratorE+0x4f>
	{
		it.itm->next->prev = it.itm->prev;
  10c738:	8b 45 10             	mov    0x10(%ebp),%eax
  10c73b:	8b 40 08             	mov    0x8(%eax),%eax
  10c73e:	8b 55 10             	mov    0x10(%ebp),%edx
  10c741:	8b 52 04             	mov    0x4(%edx),%edx
  10c744:	89 50 04             	mov    %edx,0x4(%eax)
	}
	
	if(it.itm->prev)
  10c747:	8b 45 10             	mov    0x10(%ebp),%eax
  10c74a:	8b 40 04             	mov    0x4(%eax),%eax
  10c74d:	85 c0                	test   %eax,%eax
  10c74f:	74 0f                	je     10c760 <_ZN5tools4listIN6kernel7processEE5eraseENS3_8iteratorE+0x68>
	{
		it.itm->prev->next = it.itm->next;
  10c751:	8b 45 10             	mov    0x10(%ebp),%eax
  10c754:	8b 40 04             	mov    0x4(%eax),%eax
  10c757:	8b 55 10             	mov    0x10(%ebp),%edx
  10c75a:	8b 52 08             	mov    0x8(%edx),%edx
  10c75d:	89 50 08             	mov    %edx,0x8(%eax)
	}

	this->counter--;
  10c760:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c763:	8b 40 10             	mov    0x10(%eax),%eax
  10c766:	8d 50 ff             	lea    -0x1(%eax),%edx
  10c769:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c76c:	89 50 10             	mov    %edx,0x10(%eax)

	static list<T>::iterator new_it;
  10c76f:	b8 d8 60 13 00       	mov    $0x1360d8,%eax
  10c774:	0f b6 00             	movzbl (%eax),%eax
  10c777:	84 c0                	test   %al,%al
  10c779:	75 14                	jne    10c78f <_ZN5tools4listIN6kernel7processEE5eraseENS3_8iteratorE+0x97>
  10c77b:	c7 04 24 fc 60 13 00 	movl   $0x1360fc,(%esp)
  10c782:	e8 41 00 00 00       	call   10c7c8 <_ZN5tools4listIN6kernel7processEE8iteratorC1Ev>
  10c787:	b8 d8 60 13 00       	mov    $0x1360d8,%eax
  10c78c:	c6 00 01             	movb   $0x1,(%eax)
	new_it.lst = this;
  10c78f:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c792:	a3 00 61 13 00       	mov    %eax,0x136100
	new_it.itm = it.itm->next;
  10c797:	8b 45 10             	mov    0x10(%ebp),%eax
  10c79a:	8b 40 08             	mov    0x8(%eax),%eax
  10c79d:	a3 fc 60 13 00       	mov    %eax,0x1360fc

	delete it.itm;
  10c7a2:	8b 45 10             	mov    0x10(%ebp),%eax
  10c7a5:	89 04 24             	mov    %eax,(%esp)
  10c7a8:	e8 29 5a ff ff       	call   1021d6 <_ZdlPv>

	return new_it;
  10c7ad:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10c7b0:	a1 fc 60 13 00       	mov    0x1360fc,%eax
  10c7b5:	8b 15 00 61 13 00    	mov    0x136100,%edx
  10c7bb:	89 01                	mov    %eax,(%ecx)
  10c7bd:	89 51 04             	mov    %edx,0x4(%ecx)
}
  10c7c0:	8b 45 08             	mov    0x8(%ebp),%eax
  10c7c3:	c9                   	leave  
  10c7c4:	c2 04 00             	ret    $0x4

Disassembly of section .text._ZN5tools4listIN6kernel7processEE8iteratorC2Ev:

0010c7c8 <_ZN5tools4listIN6kernel7processEE8iteratorC1Ev>:
				inline T *operator -> () { return this->itm->value; }

				iterator(  ) { this->lst = nullptr; this->itm = nullptr; }
  10c7c8:	55                   	push   %ebp
  10c7c9:	89 e5                	mov    %esp,%ebp
  10c7cb:	8b 45 08             	mov    0x8(%ebp),%eax
  10c7ce:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  10c7d5:	8b 45 08             	mov    0x8(%ebp),%eax
  10c7d8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  10c7de:	5d                   	pop    %ebp
  10c7df:	c3                   	ret    

Disassembly of section .text._ZN3hal3x863gdt8instanceEv:

0010c7e0 <_ZN3hal3x863gdt8instanceEv>:
  10c7e0:	55                   	push   %ebp
  10c7e1:	89 e5                	mov    %esp,%ebp
  10c7e3:	83 ec 18             	sub    $0x18,%esp
  10c7e6:	b8 30 61 15 00       	mov    $0x156130,%eax
  10c7eb:	0f b6 00             	movzbl (%eax),%eax
  10c7ee:	84 c0                	test   %al,%al
  10c7f0:	75 20                	jne    10c812 <_ZN3hal3x863gdt8instanceEv+0x32>
  10c7f2:	c7 04 24 40 61 15 00 	movl   $0x156140,(%esp)
  10c7f9:	e8 1c c8 ff ff       	call   10901a <_ZN3hal3x863gdtC1Ev>
  10c7fe:	b8 30 61 15 00       	mov    $0x156130,%eax
  10c803:	c6 00 01             	movb   $0x1,(%eax)
  10c806:	c7 04 24 0e 12 10 00 	movl   $0x10120e,(%esp)
  10c80d:	e8 71 71 ff ff       	call   103983 <atexit>
  10c812:	b8 40 61 15 00       	mov    $0x156140,%eax
  10c817:	c9                   	leave  
  10c818:	c3                   	ret    

Disassembly of section .text._ZN3hal3x863gdt3tssEv:

0010c81a <_ZN3hal3x863gdt3tssEv>:
				void load(  );

				/**
				  * @brief	Gets a reference to the task state segment.
				  */
				tss_t &tss(  ) { static tss_t tss; return tss; }
  10c81a:	55                   	push   %ebp
  10c81b:	89 e5                	mov    %esp,%ebp
  10c81d:	b8 80 61 15 00       	mov    $0x156180,%eax
  10c822:	5d                   	pop    %ebp
  10c823:	c3                   	ret    

Disassembly of section .text._ZN5tools4listIN6kernel6threadEE5frontEv:

0010c824 <_ZN5tools4listIN6kernel6threadEE5frontEv>:

			list(  );

			~list(  );

			inline T *front(  ){ return this->first->value; }
  10c824:	55                   	push   %ebp
  10c825:	89 e5                	mov    %esp,%ebp
  10c827:	8b 45 08             	mov    0x8(%ebp),%eax
  10c82a:	8b 00                	mov    (%eax),%eax
  10c82c:	8b 00                	mov    (%eax),%eax
  10c82e:	5d                   	pop    %ebp
  10c82f:	c3                   	ret    

Disassembly of section .text._ZN6kernel7process6new_idEv:

0010c830 <_ZN6kernel7process6new_idEv>:
			/**
			  * @brief	Generates a new process-id.
			  *
			  * @return			A new, unused process-id
			  */
			static id_t		new_id(  ) { static id_t nid; return nid++; }
  10c830:	55                   	push   %ebp
  10c831:	89 e5                	mov    %esp,%ebp
  10c833:	a1 10 62 15 00       	mov    0x156210,%eax
  10c838:	8d 50 01             	lea    0x1(%eax),%edx
  10c83b:	89 15 10 62 15 00    	mov    %edx,0x156210
  10c841:	5d                   	pop    %ebp
  10c842:	c3                   	ret    

Disassembly of section .text._ZN5tools4listIN6kernel7processEEC2Ev:

0010c844 <_ZN5tools4listIN6kernel7processEEC1Ev>:
#include "list.hpp"

using tools::list;

template<typename T> list<T>::list(  ) : first(nullptr), last(nullptr), counter(0)
  10c844:	55                   	push   %ebp
  10c845:	89 e5                	mov    %esp,%ebp
  10c847:	83 ec 18             	sub    $0x18,%esp
  10c84a:	8b 45 08             	mov    0x8(%ebp),%eax
  10c84d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
  10c853:	8b 45 08             	mov    0x8(%ebp),%eax
  10c856:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  10c85d:	8b 45 08             	mov    0x8(%ebp),%eax
  10c860:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
{
	this->before = new item;
  10c867:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
  10c86e:	e8 2d 59 ff ff       	call   1021a0 <_Znwj>
  10c873:	8b 55 08             	mov    0x8(%ebp),%edx
  10c876:	89 42 08             	mov    %eax,0x8(%edx)

	this->before->value = nullptr; 
  10c879:	8b 45 08             	mov    0x8(%ebp),%eax
  10c87c:	8b 40 08             	mov    0x8(%eax),%eax
  10c87f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	this->before->next  = this->first; 
  10c885:	8b 45 08             	mov    0x8(%ebp),%eax
  10c888:	8b 40 08             	mov    0x8(%eax),%eax
  10c88b:	8b 55 08             	mov    0x8(%ebp),%edx
  10c88e:	8b 12                	mov    (%edx),%edx
  10c890:	89 50 08             	mov    %edx,0x8(%eax)
	this->before->prev  = nullptr;
  10c893:	8b 45 08             	mov    0x8(%ebp),%eax
  10c896:	8b 40 08             	mov    0x8(%eax),%eax
  10c899:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)


	this->post = new item; 
  10c8a0:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
  10c8a7:	e8 f4 58 ff ff       	call   1021a0 <_Znwj>
  10c8ac:	8b 55 08             	mov    0x8(%ebp),%edx
  10c8af:	89 42 0c             	mov    %eax,0xc(%edx)

	this->post->value = nullptr; 
  10c8b2:	8b 45 08             	mov    0x8(%ebp),%eax
  10c8b5:	8b 40 0c             	mov    0xc(%eax),%eax
  10c8b8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	this->post->next  = nullptr; 
  10c8be:	8b 45 08             	mov    0x8(%ebp),%eax
  10c8c1:	8b 40 0c             	mov    0xc(%eax),%eax
  10c8c4:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	this->post->prev  = this->last;
  10c8cb:	8b 45 08             	mov    0x8(%ebp),%eax
  10c8ce:	8b 40 0c             	mov    0xc(%eax),%eax
  10c8d1:	8b 55 08             	mov    0x8(%ebp),%edx
  10c8d4:	8b 52 04             	mov    0x4(%edx),%edx
  10c8d7:	89 50 04             	mov    %edx,0x4(%eax)
}
  10c8da:	c9                   	leave  
  10c8db:	c3                   	ret    

Disassembly of section .text._ZN5tools4listIN6kernel7processEE9push_backEPS2_:

0010c8dc <_ZN5tools4listIN6kernel7processEE9push_backEPS2_>:
template<typename T> void list<T>::push_front( T *value )
{
	this->insert(this->begin(), value);
}

template<typename T> void list<T>::push_back( T *value )
  10c8dc:	55                   	push   %ebp
  10c8dd:	89 e5                	mov    %esp,%ebp
  10c8df:	83 ec 38             	sub    $0x38,%esp
{
	this->insert(this->end(), value);
  10c8e2:	8d 45 f0             	lea    -0x10(%ebp),%eax
  10c8e5:	8b 55 08             	mov    0x8(%ebp),%edx
  10c8e8:	89 54 24 04          	mov    %edx,0x4(%esp)
  10c8ec:	89 04 24             	mov    %eax,(%esp)
  10c8ef:	e8 30 00 00 00       	call   10c924 <_ZN5tools4listIN6kernel7processEE3endEv>
  10c8f4:	83 ec 04             	sub    $0x4,%esp
  10c8f7:	8d 4d e8             	lea    -0x18(%ebp),%ecx
  10c8fa:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c8fd:	89 44 24 10          	mov    %eax,0x10(%esp)
  10c901:	8b 45 f0             	mov    -0x10(%ebp),%eax
  10c904:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10c907:	89 44 24 08          	mov    %eax,0x8(%esp)
  10c90b:	89 54 24 0c          	mov    %edx,0xc(%esp)
  10c90f:	8b 45 08             	mov    0x8(%ebp),%eax
  10c912:	89 44 24 04          	mov    %eax,0x4(%esp)
  10c916:	89 0c 24             	mov    %ecx,(%esp)
  10c919:	e8 b0 00 00 00       	call   10c9ce <_ZN5tools4listIN6kernel7processEE6insertENS3_8iteratorEPS2_>
  10c91e:	83 ec 04             	sub    $0x4,%esp
}
  10c921:	c9                   	leave  
  10c922:	c3                   	ret    

Disassembly of section .text._ZN5tools4listIN6kernel7processEE3endEv:

0010c924 <_ZN5tools4listIN6kernel7processEE3endEv>:
	it.itm = this->first;	

	return it;
}

template<typename T> typename list<T>::iterator list<T>::end(  )
  10c924:	55                   	push   %ebp
  10c925:	89 e5                	mov    %esp,%ebp
  10c927:	83 ec 18             	sub    $0x18,%esp
{
	static list<T>::iterator it;
  10c92a:	b8 00 62 15 00       	mov    $0x156200,%eax
  10c92f:	0f b6 00             	movzbl (%eax),%eax
  10c932:	84 c0                	test   %al,%al
  10c934:	75 14                	jne    10c94a <_ZN5tools4listIN6kernel7processEE3endEv+0x26>
  10c936:	c7 04 24 14 62 15 00 	movl   $0x156214,(%esp)
  10c93d:	e8 86 fe ff ff       	call   10c7c8 <_ZN5tools4listIN6kernel7processEE8iteratorC1Ev>
  10c942:	b8 00 62 15 00       	mov    $0x156200,%eax
  10c947:	c6 00 01             	movb   $0x1,(%eax)

	it.itm = this->post;
  10c94a:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c94d:	8b 40 0c             	mov    0xc(%eax),%eax
  10c950:	a3 14 62 15 00       	mov    %eax,0x156214

	return it;
  10c955:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10c958:	a1 14 62 15 00       	mov    0x156214,%eax
  10c95d:	8b 15 18 62 15 00    	mov    0x156218,%edx
  10c963:	89 01                	mov    %eax,(%ecx)
  10c965:	89 51 04             	mov    %edx,0x4(%ecx)
}
  10c968:	8b 45 08             	mov    0x8(%ebp),%eax
  10c96b:	c9                   	leave  
  10c96c:	c2 04 00             	ret    $0x4

Disassembly of section .text._ZN5tools4listIN6kernel7processEE8iteratorneERKS4_:

0010c970 <_ZN5tools4listIN6kernel7processEE8iteratorneERKS4_>:
				inline iterator operator ++ (int) { iterator tmp = *this; if(this->itm) this->itm = this->itm->next; return tmp; }
				inline iterator operator -- (int) { iterator tmp = *this; if(this->itm) this->itm = this->itm->prev; return tmp; }

				inline bool operator == ( const iterator &it ) { if(this->lst != it.lst) return false; if(this->itm != it.itm) return false; return true; }

				inline bool operator != ( const iterator &it ) { return !(*this == it); }
  10c970:	55                   	push   %ebp
  10c971:	89 e5                	mov    %esp,%ebp
  10c973:	83 ec 18             	sub    $0x18,%esp
  10c976:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c979:	89 44 24 04          	mov    %eax,0x4(%esp)
  10c97d:	8b 45 08             	mov    0x8(%ebp),%eax
  10c980:	89 04 24             	mov    %eax,(%esp)
  10c983:	e8 00 02 00 00       	call   10cb88 <_ZN5tools4listIN6kernel7processEE8iteratoreqERKS4_>
  10c988:	84 c0                	test   %al,%al
  10c98a:	0f 94 c0             	sete   %al
  10c98d:	c9                   	leave  
  10c98e:	c3                   	ret    

Disassembly of section .text._ZN5tools4listIN6kernel7processEE8iteratorppEi:

0010c990 <_ZN5tools4listIN6kernel7processEE8iteratorppEi>:
				list		*lst;

				inline iterator &operator ++ () { this->itm = itm->next; return *this; }
				inline iterator &operator -- () { this->itm = itm->prev; return *this; }

				inline iterator operator ++ (int) { iterator tmp = *this; if(this->itm) this->itm = this->itm->next; return tmp; }
  10c990:	55                   	push   %ebp
  10c991:	89 e5                	mov    %esp,%ebp
  10c993:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10c996:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c999:	8b 50 04             	mov    0x4(%eax),%edx
  10c99c:	8b 00                	mov    (%eax),%eax
  10c99e:	89 01                	mov    %eax,(%ecx)
  10c9a0:	89 51 04             	mov    %edx,0x4(%ecx)
  10c9a3:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c9a6:	8b 00                	mov    (%eax),%eax
  10c9a8:	85 c0                	test   %eax,%eax
  10c9aa:	74 0d                	je     10c9b9 <_ZN5tools4listIN6kernel7processEE8iteratorppEi+0x29>
  10c9ac:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c9af:	8b 00                	mov    (%eax),%eax
  10c9b1:	8b 50 08             	mov    0x8(%eax),%edx
  10c9b4:	8b 45 0c             	mov    0xc(%ebp),%eax
  10c9b7:	89 10                	mov    %edx,(%eax)
  10c9b9:	90                   	nop
  10c9ba:	8b 45 08             	mov    0x8(%ebp),%eax
  10c9bd:	5d                   	pop    %ebp
  10c9be:	c2 04 00             	ret    $0x4

Disassembly of section .text._ZN5tools4listIN6kernel7processEE8iteratorptEv:

0010c9c2 <_ZN5tools4listIN6kernel7processEE8iteratorptEv>:
				inline bool operator == ( const iterator &it ) { if(this->lst != it.lst) return false; if(this->itm != it.itm) return false; return true; }

				inline bool operator != ( const iterator &it ) { return !(*this == it); }

				inline T *operator * () { return this->itm->value; }
				inline T *operator -> () { return this->itm->value; }
  10c9c2:	55                   	push   %ebp
  10c9c3:	89 e5                	mov    %esp,%ebp
  10c9c5:	8b 45 08             	mov    0x8(%ebp),%eax
  10c9c8:	8b 00                	mov    (%eax),%eax
  10c9ca:	8b 00                	mov    (%eax),%eax
  10c9cc:	5d                   	pop    %ebp
  10c9cd:	c3                   	ret    

Disassembly of section .text._ZN5tools4listIN6kernel7processEE6insertENS3_8iteratorEPS2_:

0010c9ce <_ZN5tools4listIN6kernel7processEE6insertENS3_8iteratorEPS2_>:

template<typename T> typename list<T>::iterator list<T>::insert( list<T>::iterator it, T *value )
  10c9ce:	55                   	push   %ebp
  10c9cf:	89 e5                	mov    %esp,%ebp
  10c9d1:	53                   	push   %ebx
  10c9d2:	83 ec 34             	sub    $0x34,%esp
{
	list<T>::item *new_itm = new item;
  10c9d5:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
  10c9dc:	e8 bf 57 ff ff       	call   1021a0 <_Znwj>
  10c9e1:	89 45 f4             	mov    %eax,-0xc(%ebp)

	new_itm->value = value;
  10c9e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10c9e7:	8b 55 18             	mov    0x18(%ebp),%edx
  10c9ea:	89 10                	mov    %edx,(%eax)

	new_itm->next = it.itm;
  10c9ec:	8b 55 10             	mov    0x10(%ebp),%edx
  10c9ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10c9f2:	89 50 08             	mov    %edx,0x8(%eax)

	if(it.itm)
  10c9f5:	8b 45 10             	mov    0x10(%ebp),%eax
  10c9f8:	85 c0                	test   %eax,%eax
  10c9fa:	74 0c                	je     10ca08 <_ZN5tools4listIN6kernel7processEE6insertENS3_8iteratorEPS2_+0x3a>
	{
		new_itm->prev = it.itm->prev;
  10c9fc:	8b 45 10             	mov    0x10(%ebp),%eax
  10c9ff:	8b 50 04             	mov    0x4(%eax),%edx
  10ca02:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10ca05:	89 50 04             	mov    %edx,0x4(%eax)
	}

	if(new_itm->next)
  10ca08:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10ca0b:	8b 40 08             	mov    0x8(%eax),%eax
  10ca0e:	85 c0                	test   %eax,%eax
  10ca10:	74 0c                	je     10ca1e <_ZN5tools4listIN6kernel7processEE6insertENS3_8iteratorEPS2_+0x50>
	{
		new_itm->next->prev = new_itm;
  10ca12:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10ca15:	8b 40 08             	mov    0x8(%eax),%eax
  10ca18:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10ca1b:	89 50 04             	mov    %edx,0x4(%eax)
	}

	if(new_itm->prev)
  10ca1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10ca21:	8b 40 04             	mov    0x4(%eax),%eax
  10ca24:	85 c0                	test   %eax,%eax
  10ca26:	74 0c                	je     10ca34 <_ZN5tools4listIN6kernel7processEE6insertENS3_8iteratorEPS2_+0x66>
	{
		new_itm->prev->next = new_itm;
  10ca28:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10ca2b:	8b 40 04             	mov    0x4(%eax),%eax
  10ca2e:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10ca31:	89 50 08             	mov    %edx,0x8(%eax)
	}

	if(this->first == nullptr || it.itm == this->first || it == this->begin())
  10ca34:	bb 00 00 00 00       	mov    $0x0,%ebx
  10ca39:	8b 45 0c             	mov    0xc(%ebp),%eax
  10ca3c:	8b 00                	mov    (%eax),%eax
  10ca3e:	85 c0                	test   %eax,%eax
  10ca40:	74 3c                	je     10ca7e <_ZN5tools4listIN6kernel7processEE6insertENS3_8iteratorEPS2_+0xb0>
  10ca42:	8b 55 10             	mov    0x10(%ebp),%edx
  10ca45:	8b 45 0c             	mov    0xc(%ebp),%eax
  10ca48:	8b 00                	mov    (%eax),%eax
  10ca4a:	39 c2                	cmp    %eax,%edx
  10ca4c:	74 30                	je     10ca7e <_ZN5tools4listIN6kernel7processEE6insertENS3_8iteratorEPS2_+0xb0>
  10ca4e:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  10ca51:	8b 55 0c             	mov    0xc(%ebp),%edx
  10ca54:	89 54 24 04          	mov    %edx,0x4(%esp)
  10ca58:	89 04 24             	mov    %eax,(%esp)
  10ca5b:	e8 42 fc ff ff       	call   10c6a2 <_ZN5tools4listIN6kernel7processEE5beginEv>
  10ca60:	83 ec 04             	sub    $0x4,%esp
  10ca63:	bb 01 00 00 00       	mov    $0x1,%ebx
  10ca68:	8d 45 e4             	lea    -0x1c(%ebp),%eax
  10ca6b:	89 44 24 04          	mov    %eax,0x4(%esp)
  10ca6f:	8d 45 10             	lea    0x10(%ebp),%eax
  10ca72:	89 04 24             	mov    %eax,(%esp)
  10ca75:	e8 0e 01 00 00       	call   10cb88 <_ZN5tools4listIN6kernel7processEE8iteratoreqERKS4_>
  10ca7a:	84 c0                	test   %al,%al
  10ca7c:	74 07                	je     10ca85 <_ZN5tools4listIN6kernel7processEE6insertENS3_8iteratorEPS2_+0xb7>
  10ca7e:	b8 01 00 00 00       	mov    $0x1,%eax
  10ca83:	eb 05                	jmp    10ca8a <_ZN5tools4listIN6kernel7processEE6insertENS3_8iteratorEPS2_+0xbc>
  10ca85:	b8 00 00 00 00       	mov    $0x0,%eax
  10ca8a:	84 db                	test   %bl,%bl
  10ca8c:	84 c0                	test   %al,%al
  10ca8e:	74 24                	je     10cab4 <_ZN5tools4listIN6kernel7processEE6insertENS3_8iteratorEPS2_+0xe6>
	{
		this->first = new_itm;
  10ca90:	8b 45 0c             	mov    0xc(%ebp),%eax
  10ca93:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10ca96:	89 10                	mov    %edx,(%eax)

		this->first->prev = this->before;
  10ca98:	8b 45 0c             	mov    0xc(%ebp),%eax
  10ca9b:	8b 00                	mov    (%eax),%eax
  10ca9d:	8b 55 0c             	mov    0xc(%ebp),%edx
  10caa0:	8b 52 08             	mov    0x8(%edx),%edx
  10caa3:	89 50 04             	mov    %edx,0x4(%eax)
		this->before->next = this->first;
  10caa6:	8b 45 0c             	mov    0xc(%ebp),%eax
  10caa9:	8b 40 08             	mov    0x8(%eax),%eax
  10caac:	8b 55 0c             	mov    0xc(%ebp),%edx
  10caaf:	8b 12                	mov    (%edx),%edx
  10cab1:	89 50 08             	mov    %edx,0x8(%eax)
	}

	if(this->last == nullptr || it == this->end())
  10cab4:	bb 00 00 00 00       	mov    $0x0,%ebx
  10cab9:	8b 45 0c             	mov    0xc(%ebp),%eax
  10cabc:	8b 40 04             	mov    0x4(%eax),%eax
  10cabf:	85 c0                	test   %eax,%eax
  10cac1:	74 30                	je     10caf3 <_ZN5tools4listIN6kernel7processEE6insertENS3_8iteratorEPS2_+0x125>
  10cac3:	8d 45 ec             	lea    -0x14(%ebp),%eax
  10cac6:	8b 55 0c             	mov    0xc(%ebp),%edx
  10cac9:	89 54 24 04          	mov    %edx,0x4(%esp)
  10cacd:	89 04 24             	mov    %eax,(%esp)
  10cad0:	e8 4f fe ff ff       	call   10c924 <_ZN5tools4listIN6kernel7processEE3endEv>
  10cad5:	83 ec 04             	sub    $0x4,%esp
  10cad8:	bb 01 00 00 00       	mov    $0x1,%ebx
  10cadd:	8d 45 ec             	lea    -0x14(%ebp),%eax
  10cae0:	89 44 24 04          	mov    %eax,0x4(%esp)
  10cae4:	8d 45 10             	lea    0x10(%ebp),%eax
  10cae7:	89 04 24             	mov    %eax,(%esp)
  10caea:	e8 99 00 00 00       	call   10cb88 <_ZN5tools4listIN6kernel7processEE8iteratoreqERKS4_>
  10caef:	84 c0                	test   %al,%al
  10caf1:	74 07                	je     10cafa <_ZN5tools4listIN6kernel7processEE6insertENS3_8iteratorEPS2_+0x12c>
  10caf3:	b8 01 00 00 00       	mov    $0x1,%eax
  10caf8:	eb 05                	jmp    10caff <_ZN5tools4listIN6kernel7processEE6insertENS3_8iteratorEPS2_+0x131>
  10cafa:	b8 00 00 00 00       	mov    $0x0,%eax
  10caff:	84 db                	test   %bl,%bl
  10cb01:	84 c0                	test   %al,%al
  10cb03:	74 27                	je     10cb2c <_ZN5tools4listIN6kernel7processEE6insertENS3_8iteratorEPS2_+0x15e>
	{
		this->last = new_itm;
  10cb05:	8b 45 0c             	mov    0xc(%ebp),%eax
  10cb08:	8b 55 f4             	mov    -0xc(%ebp),%edx
  10cb0b:	89 50 04             	mov    %edx,0x4(%eax)

		this->last->next = this->post;
  10cb0e:	8b 45 0c             	mov    0xc(%ebp),%eax
  10cb11:	8b 40 04             	mov    0x4(%eax),%eax
  10cb14:	8b 55 0c             	mov    0xc(%ebp),%edx
  10cb17:	8b 52 0c             	mov    0xc(%edx),%edx
  10cb1a:	89 50 08             	mov    %edx,0x8(%eax)
		this->post->prev = this->last;
  10cb1d:	8b 45 0c             	mov    0xc(%ebp),%eax
  10cb20:	8b 40 0c             	mov    0xc(%eax),%eax
  10cb23:	8b 55 0c             	mov    0xc(%ebp),%edx
  10cb26:	8b 52 04             	mov    0x4(%edx),%edx
  10cb29:	89 50 04             	mov    %edx,0x4(%eax)
	}

	this->counter++;
  10cb2c:	8b 45 0c             	mov    0xc(%ebp),%eax
  10cb2f:	8b 40 10             	mov    0x10(%eax),%eax
  10cb32:	8d 50 01             	lea    0x1(%eax),%edx
  10cb35:	8b 45 0c             	mov    0xc(%ebp),%eax
  10cb38:	89 50 10             	mov    %edx,0x10(%eax)

	static list<T>::iterator new_it;
  10cb3b:	b8 08 62 15 00       	mov    $0x156208,%eax
  10cb40:	0f b6 00             	movzbl (%eax),%eax
  10cb43:	84 c0                	test   %al,%al
  10cb45:	75 14                	jne    10cb5b <_ZN5tools4listIN6kernel7processEE6insertENS3_8iteratorEPS2_+0x18d>
  10cb47:	c7 04 24 1c 62 15 00 	movl   $0x15621c,(%esp)
  10cb4e:	e8 75 fc ff ff       	call   10c7c8 <_ZN5tools4listIN6kernel7processEE8iteratorC1Ev>
  10cb53:	b8 08 62 15 00       	mov    $0x156208,%eax
  10cb58:	c6 00 01             	movb   $0x1,(%eax)
	new_it.lst = this;
  10cb5b:	8b 45 0c             	mov    0xc(%ebp),%eax
  10cb5e:	a3 20 62 15 00       	mov    %eax,0x156220
	new_it.itm = new_itm;
  10cb63:	8b 45 f4             	mov    -0xc(%ebp),%eax
  10cb66:	a3 1c 62 15 00       	mov    %eax,0x15621c

	return new_it;
  10cb6b:	8b 4d 08             	mov    0x8(%ebp),%ecx
  10cb6e:	a1 1c 62 15 00       	mov    0x15621c,%eax
  10cb73:	8b 15 20 62 15 00    	mov    0x156220,%edx
  10cb79:	89 01                	mov    %eax,(%ecx)
  10cb7b:	89 51 04             	mov    %edx,0x4(%ecx)
}
  10cb7e:	8b 45 08             	mov    0x8(%ebp),%eax
  10cb81:	8b 5d fc             	mov    -0x4(%ebp),%ebx
  10cb84:	c9                   	leave  
  10cb85:	c2 04 00             	ret    $0x4

Disassembly of section .text._ZN5tools4listIN6kernel7processEE8iteratoreqERKS4_:

0010cb88 <_ZN5tools4listIN6kernel7processEE8iteratoreqERKS4_>:
				inline iterator &operator -- () { this->itm = itm->prev; return *this; }

				inline iterator operator ++ (int) { iterator tmp = *this; if(this->itm) this->itm = this->itm->next; return tmp; }
				inline iterator operator -- (int) { iterator tmp = *this; if(this->itm) this->itm = this->itm->prev; return tmp; }

				inline bool operator == ( const iterator &it ) { if(this->lst != it.lst) return false; if(this->itm != it.itm) return false; return true; }
  10cb88:	55                   	push   %ebp
  10cb89:	89 e5                	mov    %esp,%ebp
  10cb8b:	8b 45 08             	mov    0x8(%ebp),%eax
  10cb8e:	8b 50 04             	mov    0x4(%eax),%edx
  10cb91:	8b 45 0c             	mov    0xc(%ebp),%eax
  10cb94:	8b 40 04             	mov    0x4(%eax),%eax
  10cb97:	39 c2                	cmp    %eax,%edx
  10cb99:	74 07                	je     10cba2 <_ZN5tools4listIN6kernel7processEE8iteratoreqERKS4_+0x1a>
  10cb9b:	b8 00 00 00 00       	mov    $0x0,%eax
  10cba0:	eb 1a                	jmp    10cbbc <_ZN5tools4listIN6kernel7processEE8iteratoreqERKS4_+0x34>
  10cba2:	8b 45 08             	mov    0x8(%ebp),%eax
  10cba5:	8b 10                	mov    (%eax),%edx
  10cba7:	8b 45 0c             	mov    0xc(%ebp),%eax
  10cbaa:	8b 00                	mov    (%eax),%eax
  10cbac:	39 c2                	cmp    %eax,%edx
  10cbae:	74 07                	je     10cbb7 <_ZN5tools4listIN6kernel7processEE8iteratoreqERKS4_+0x2f>
  10cbb0:	b8 00 00 00 00       	mov    $0x0,%eax
  10cbb5:	eb 05                	jmp    10cbbc <_ZN5tools4listIN6kernel7processEE8iteratoreqERKS4_+0x34>
  10cbb7:	b8 01 00 00 00       	mov    $0x1,%eax
  10cbbc:	5d                   	pop    %ebp
  10cbbd:	c3                   	ret    

Disassembly of section .text._ZN6kernel6outputlsEPFRS0_S1_E:

0010cbbe <_ZN6kernel6outputlsEPFRS0_S1_E>:
			  *		Calls pf(*this)
			  *
			  * @param	pf		A function that takes and returns a 'output' object
			  * @return			The 'output' object (*this)
			  */
			output &operator << ( output &(*pf)(output &out) ) { return pf(*this); }
  10cbbe:	55                   	push   %ebp
  10cbbf:	89 e5                	mov    %esp,%ebp
  10cbc1:	83 ec 18             	sub    $0x18,%esp
  10cbc4:	8b 45 08             	mov    0x8(%ebp),%eax
  10cbc7:	89 04 24             	mov    %eax,(%esp)
  10cbca:	8b 45 0c             	mov    0xc(%ebp),%eax
  10cbcd:	ff d0                	call   *%eax
  10cbcf:	c9                   	leave  
  10cbd0:	c3                   	ret    

Disassembly of section .text._ZN6kernel6output4endlERS0_:

0010cbd1 <_ZN6kernel6output4endlERS0_>:
			  * @brief	Insert newline
			  *
			  * @param	out		'output' object affected
			  * @return			The 'output' object argument (out)
			  */
			static output &endl( output &out ) { out << '\n'; return out; }
  10cbd1:	55                   	push   %ebp
  10cbd2:	89 e5                	mov    %esp,%ebp
  10cbd4:	83 ec 18             	sub    $0x18,%esp
  10cbd7:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
  10cbde:	00 
  10cbdf:	8b 45 08             	mov    0x8(%ebp),%eax
  10cbe2:	89 04 24             	mov    %eax,(%esp)
  10cbe5:	e8 fa 3c ff ff       	call   1008e4 <_ZN6kernel6outputlsEc>
  10cbea:	8b 45 08             	mov    0x8(%ebp),%eax
  10cbed:	c9                   	leave  
  10cbee:	c3                   	ret    

Disassembly of section .text._ZN6kernel6output3hexERS0_:

0010cbef <_ZN6kernel6output3hexERS0_>:
			  * @brief	Use hexadecimal base
			  *
			  * @param	out		'output' object affected
			  * @return			The 'output' object argument (out)
			  */
			static output &hex( output &out ) { out.setf(output::hex_, output::basefield_); return out; }
  10cbef:	55                   	push   %ebp
  10cbf0:	89 e5                	mov    %esp,%ebp
  10cbf2:	83 ec 18             	sub    $0x18,%esp
  10cbf5:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
  10cbfc:	00 
  10cbfd:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  10cc04:	00 
  10cc05:	8b 45 08             	mov    0x8(%ebp),%eax
  10cc08:	89 04 24             	mov    %eax,(%esp)
  10cc0b:	e8 58 3b ff ff       	call   100768 <_ZN6kernel6output4setfEjj>
  10cc10:	8b 45 08             	mov    0x8(%ebp),%eax
  10cc13:	c9                   	leave  
  10cc14:	c3                   	ret    

Disassembly of section .text._ZN3hal3x863idt8instanceEv:

0010cc15 <_ZN3hal3x863idt8instanceEv>:
  10cc15:	55                   	push   %ebp
  10cc16:	89 e5                	mov    %esp,%ebp
  10cc18:	83 ec 18             	sub    $0x18,%esp
  10cc1b:	b8 28 62 15 00       	mov    $0x156228,%eax
  10cc20:	0f b6 00             	movzbl (%eax),%eax
  10cc23:	84 c0                	test   %al,%al
  10cc25:	75 20                	jne    10cc47 <_ZN3hal3x863idt8instanceEv+0x32>
  10cc27:	c7 04 24 40 62 15 00 	movl   $0x156240,(%esp)
  10cc2e:	e8 4d 90 ff ff       	call   105c80 <_ZN3hal3x863idtC1Ev>
  10cc33:	b8 28 62 15 00       	mov    $0x156228,%eax
  10cc38:	c6 00 01             	movb   $0x1,(%eax)
  10cc3b:	c7 04 24 8c 21 10 00 	movl   $0x10218c,(%esp)
  10cc42:	e8 3c 6d ff ff       	call   103983 <atexit>
  10cc47:	b8 40 62 15 00       	mov    $0x156240,%eax
  10cc4c:	c9                   	leave  
  10cc4d:	c3                   	ret    

Disassembly of section .text._ZN3hal3x864intr6enableEv:

0010cc4e <_ZN3hal3x864intr6enableEv>:
					

			/**
			  * @brief	Enables interrupts
			  */
			inline void enable(  )  { asm("sti"); }
  10cc4e:	55                   	push   %ebp
  10cc4f:	89 e5                	mov    %esp,%ebp
  10cc51:	fb                   	sti    
  10cc52:	5d                   	pop    %ebp
  10cc53:	c3                   	ret    

Disassembly of section .text._ZN6kernel6output3decERS0_:

0010cc54 <_ZN6kernel6output3decERS0_>:
			  * @brief	Use decimal base
			  *
			  * @param	out		'output' object affected
			  * @return			The 'output' object argument (out)
			  */
			static output &dec( output &out ) { out.setf(output::dec_, output::basefield_); return out; }
  10cc54:	55                   	push   %ebp
  10cc55:	89 e5                	mov    %esp,%ebp
  10cc57:	83 ec 18             	sub    $0x18,%esp
  10cc5a:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
  10cc61:	00 
  10cc62:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
  10cc69:	00 
  10cc6a:	8b 45 08             	mov    0x8(%ebp),%eax
  10cc6d:	89 04 24             	mov    %eax,(%esp)
  10cc70:	e8 f3 3a ff ff       	call   100768 <_ZN6kernel6output4setfEjj>
  10cc75:	8b 45 08             	mov    0x8(%ebp),%eax
  10cc78:	c9                   	leave  
  10cc79:	c3                   	ret    

Disassembly of section .text._ZN3hal3x865videolsEPFRS1_S2_E:

0010cc7a <_ZN3hal3x865videolsEPFRS1_S2_E>:
				  *		Calls pf(*this)
				  *
				  * @param	pf		A function that takes and returns a 'video' object
				  * @return			The 'video' object (*this)
				  */
				video &operator << ( video &(*pf)(video &scrn) ) { return pf(*this); }	
  10cc7a:	55                   	push   %ebp
  10cc7b:	89 e5                	mov    %esp,%ebp
  10cc7d:	83 ec 18             	sub    $0x18,%esp
  10cc80:	8b 45 08             	mov    0x8(%ebp),%eax
  10cc83:	89 04 24             	mov    %eax,(%esp)
  10cc86:	8b 45 0c             	mov    0xc(%ebp),%eax
  10cc89:	ff d0                	call   *%eax
  10cc8b:	c9                   	leave  
  10cc8c:	c3                   	ret    

Disassembly of section .text._ZN3hal3x865video4endlERS1_:

0010cc8d <_ZN3hal3x865video4endlERS1_>:
				  * @brief	Insert newline
				  *
				  * @param	scrn		'video' object affected
				  * @return			The 'video' object argument (scrn)
				  */
				static video &endl( video &scrn ) { scrn << '\n'; return scrn; }
  10cc8d:	55                   	push   %ebp
  10cc8e:	89 e5                	mov    %esp,%ebp
  10cc90:	83 ec 18             	sub    $0x18,%esp
  10cc93:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
  10cc9a:	00 
  10cc9b:	8b 45 08             	mov    0x8(%ebp),%eax
  10cc9e:	89 04 24             	mov    %eax,(%esp)
  10cca1:	e8 60 cb ff ff       	call   109806 <_ZN3hal3x865videolsEc>
  10cca6:	8b 45 08             	mov    0x8(%ebp),%eax
  10cca9:	c9                   	leave  
  10ccaa:	c3                   	ret    

Disassembly of section .text._ZN3hal3x865video3hexERS1_:

0010ccab <_ZN3hal3x865video3hexERS1_>:
				  * @brief	Use hexadecimal base
				  *
				  * @param	scrn		'output' object affected
				  * @return			The 'video' object argument (out)
				  */
				static video &hex( video &scrn ) { scrn.setf(video::hex_, video::basefield_); return scrn; }
  10ccab:	55                   	push   %ebp
  10ccac:	89 e5                	mov    %esp,%ebp
  10ccae:	83 ec 18             	sub    $0x18,%esp
  10ccb1:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
  10ccb8:	00 
  10ccb9:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
  10ccc0:	00 
  10ccc1:	8b 45 08             	mov    0x8(%ebp),%eax
  10ccc4:	89 04 24             	mov    %eax,(%esp)
  10ccc7:	e8 4a c7 ff ff       	call   109416 <_ZN3hal3x865video4setfEjj>
  10cccc:	8b 45 08             	mov    0x8(%ebp),%eax
  10cccf:	c9                   	leave  
  10ccd0:	c3                   	ret    
